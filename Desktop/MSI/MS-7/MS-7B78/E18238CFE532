
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190509
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000024  0x01  "AMDFCH"  "FCHZP   "  0x00001000  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000F50  0x01  "AMD   "  "AMD CRAT"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x00008C98  0x02  "AMD   "  "AMD ALIB"  0x00000002  "MSFT"   0x04000000
 06)  VFCT  0x0000E884  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 07)  CDIT  0x00000029  0x01  "AMD   "  "AMD CDIT"  0x00000001  "AMD "   0x00000001
 08)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x00000002  "    "   0x01000013
 09)  IVRS  0x000000D0  0x02  "AMD   "  "AMD IVRS"  0x00000001  "AMD "   0x00000000
 10)  DSDT  0x000076FA  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 11)  SSDT  0x000000BF  0x01  "AMD   "  "AMD PT  "  0x00001000  "INTL"   0x20120913
 12)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 13)  SSDT  0x00002314  0x01  "AMD   "  "AMD CPU "  0x00000001  "AMD "   0x00000001
 14)  SSDT  0x00003676  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 15)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 16)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  SSDT  0x000000FC  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 18)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 19)  SSDT  0x00001D4A  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 20)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 21)  FACS  0x00000040  0x02
 22)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 22 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : DF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 0C
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 0E
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 01
[06Fh 0111   1]                Local Apic ID : 01
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 03
[077h 0119   1]                Local Apic ID : 03
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 05
[07Fh 0127   1]                Local Apic ID : 05
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 07
[087h 0135   1]                Local Apic ID : 07
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 09
[08Fh 0143   1]                Local Apic ID : 09
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0B
[097h 0151   1]                Local Apic ID : 0B
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0D
[09Fh 0159   1]                Local Apic ID : 0D
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 11
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 12
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 DF 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 01 01  // ................
    0070: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0080: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0090: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 11 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 12 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D8
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000D8D5E018
[030h 0048   4]                Image OffsetX : 000002F3
[034h 0052   4]                Image OffsetY : 00000103

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 D8 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 E0 D5 D8 00 00 00 00  // ................
    0030: F3 02 00 00 03 01 00 00                          // ........


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CB
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CDIT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 CB 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 4D 44 20 43 44 49 54 01 00 00 00 41 4D 44 20  // AMD CDIT....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000F50
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B1
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CRAT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3920 (0xF50)

    0000: 43 52 41 54 50 0F 00 00 01 B1 41 4D 44 00 00 00  // CRATP.....AMD...
    0010: 41 4D 44 20 43 52 41 54 01 00 00 00 41 4D 44 20  // AMD CRAT....AMD 
    0020: 01 00 00 00 3E 00 00 00 01 00 00 00 00 00 00 00  // ....>...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 10 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 10 00  // .(..............
    0090: 00 00 00 00 00 00 F0 DF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 20  // ............... 
    00C0: 07 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0140: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0240: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0300: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    03C0: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0440: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0450: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0480: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0490: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    04C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04D0: 02 40 00 00 0F 00 00 00 08 00 00 00 00 FF 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    0500: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0510: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0540: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0550: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0580: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0590: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    05C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05D0: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0600: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0610: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0640: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0650: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0680: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0690: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06D0: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0700: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0710: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0740: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0750: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0790: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    07C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    07D0: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0810: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0840: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0850: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0880: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0890: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    08C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    08D0: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0900: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0910: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0940: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0950: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0980: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0990: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    09C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    09D0: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0A10: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0A50: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A90: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0AC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0AD0: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0B10: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0B50: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B90: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0BC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0BD0: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0C10: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0C50: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C90: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0CC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0CD0: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0D10: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0D50: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D90: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0DC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0DD0: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0E10: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0E50: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E90: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0EC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0ED0: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0F10: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0A10)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A20)
    Name (IO3L, 0x10)
    Name (IO4B, 0x0A40)
    Name (IO4L, 0x10)
    Name (SP1O, 0x4E)
    Name (IOES, Zero)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (RXST, Zero)
    Name (U3ST, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xDC387D18)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (FDSI, 0xD4)
    Name (FESI, 0xD5)
    Name (FSSI, 0xE2)
    Name (SMIP, 0xB2)
    Name (CISI, 0x88)
    Name (LSMB, 0xB2)
    Name (AISV, 0xE3)
    Name (WMSZ, 0x0300)
    Name (COMA, Zero)
    Name (COMB, Zero)
    Name (LPTA, Zero)
    Name (PEPM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            ACMX = 0xC7
            If ((ACMA == 0x55))
            {
                ACMA = Zero
            }
            Else
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKG, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x26
            }
        })
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD00, Package (0x10)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x10)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD20, Package (0x00){})
        Name (AR20, Package (0x00){})
        Name (PD23, Package (0x00){})
        Name (AR23, Package (0x00){})
        Name (PD24, Package (0x00){})
        Name (AR24, Package (0x00){})
        Name (PD25, Package (0x00){})
        Name (AR25, Package (0x00){})
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD22, Package (0x00){})
        Name (AR22, Package (0x00){})
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x20000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D002)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD100000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PD12) /* \_SB_.PD12 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (SATA)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (D02E)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            Device (D027)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT1 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y25)
                        IRQ (Level, ActiveLow, Shared, _Y23)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y24)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            OPT6 = Zero
                            OPT7 = Zero
                            If (KBFG)
                            {
                                OPT6 |= 0x10
                            }
                            Else
                            {
                                OPT6 &= 0xEF
                            }

                            If (MSFG)
                            {
                                OPT6 |= 0x20
                            }
                            Else
                            {
                                OPT6 &= 0xDF
                            }

                            OPT1 = 0xFF
                            OPT3 = 0xFF
                            OPT4 = 0xFF
                            Local0 = (One | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        OPT3 = 0xFF
                        OPT6 &= 0xCF
                        OPT2 &= 0xFE
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (D03E)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (D03F)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (D040)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x08, 0x04))
                        }
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x4,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x4,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x9,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0xA,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0xB,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0xC,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0xD,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0xE,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT21, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, SPTS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2A)
                    IRQNoFlags (_Y2B)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y2B._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2C)
                    IRQNoFlags (_Y2D)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y2D._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
        {
            If ((TCMF == Zero))
            {
                If ((TTDP == Zero))
                {
                    Return (0x310CD041)
                }
                Else
                {
                    Return ("MSFT0101")
                }
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2E)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2F)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y30)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y31)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y32,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2E._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2E._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2F._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y30._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y30._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y31._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y31._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y32._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    INTV = 0x07
                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Name (XUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XUP1, Package (0x04)
    {
        Zero, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XPLD, Buffer (0x10)
    {
        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
    })
    Name (NPLD, Zero)
    Name (WPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,  // ........
            /* 0008 */  0x25, 0x09, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
            /* 0010 */  0x2C, 0x01, 0xBE, 0x00                           // ,...
        }
    })
    Name (DPLD, Package (0x01)
    {
        Buffer (0x10)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0xB0, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        }
    })
    Name (BPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00,  // ....d.d.
            /* 0008 */  0x24, 0x41, 0x80, 0x01, 0x00, 0x00, 0x04, 0x00,  // $A......
            /* 0010 */  0x00, 0x03, 0xAB, 0x02                           // ....
        }
    })
    Name (CPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,  // ........
            /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB)
    {
        Device (WMIO)
        {
            Mutex (WMIX, 0x01)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MFBI")  // _UID: Unique ID
            Name (BUF4, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (BUF4, Zero, BF00)
            CreateByteField (BUF4, One, BF01)
            CreateByteField (BUF4, 0x02, BF02)
            CreateByteField (BUF4, 0x03, BF03)
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0xCE, 0x93, 0x05, 0xA8, 0x77, 0x23, 0xDA, 0x11,  // ....w#..
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0x20, 0x12, 0x07, 0x27,  // ..." ..'
                /* 0010 */  0x4D, 0x49, 0x01, 0x02                           // MI..
            })
            OperationRegion (CMOS, SystemIO, 0x72, 0x02)
            Field (CMOS, ByteAcc, NoLock, Preserve)
            {
                CMIN,   8, 
                CMDA,   8
            }

            IndexField (CMIN, CMDA, ByteAcc, NoLock, Preserve)
            {
                Offset (0xD9), 
                WDFH,   8
            }

            Method (WMMI, 3, NotSerialized)
            {
                If ((Arg1 == 0xFB))
                {
                    BUF4 = Arg2
                    If ((BF00 == Zero))
                    {
                        BUF4 = Zero
                        BF02 = One
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == One))
                    {
                        BUF4 = Zero
                        BF00 = SMIP /* \SMIP */
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == 0x02))
                    {
                        BUF4 = Zero
                        BF00 = FESI /* \FESI */
                        BF01 = FDSI /* \FDSI */
                        BF02 = FSSI /* \FSSI */
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == 0x03))
                    {
                        CMIN = 0xD9
                        BF00 = CMDA /* \_SB_.WMIO.CMDA */
                        If ((BF00 & One))
                        {
                            BF00 = One
                            Return (BUF4) /* \_SB_.WMIO.BUF4 */
                        }
                        Else
                        {
                            BF00 = Zero
                            Return (BUF4) /* \_SB_.WMIO.BUF4 */
                        }
                    }
                }

                Return (0xFFFFFFFF)
            }
        }
    }

    Scope (_SB)
    {
        Device (WMIC)
        {
            Mutex (MWMI, 0x00)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "WMIC")  // _UID: Unique ID
            Name (WMIO, 0xDC39B718)
            Name (WQBA, Buffer (0x06CF)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xBF, 0x06, 0x00, 0x00, 0x88, 0x2B, 0x00, 0x00,  // .....+..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD1, 0x94, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0B, 0x10, 0x0A, 0x0B, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x3C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .P<...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x06, 0x88, 0x14, 0x40, 0x48, 0x22, 0x84,  // 1...@H".
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x68, 0x73, 0x02, 0x32,  // ..."hs.2
                /* 0068 */  0x0D, 0x25, 0xA0, 0xC2, 0x31, 0x84, 0xD4, 0xF2,  // .%..1...
                /* 0070 */  0x1C, 0xA4, 0x1D, 0x49, 0x83, 0x88, 0x92, 0xC0,  // ...I....
                /* 0078 */  0x02, 0x47, 0x80, 0x12, 0x33, 0x02, 0x94, 0x4E,  // .G..3..N
                /* 0080 */  0x64, 0xC1, 0xB7, 0x88, 0x2C, 0xA1, 0x28, 0x9A,  // d...,.(.
                /* 0088 */  0x44, 0x94, 0x04, 0xD1, 0xFB, 0x46, 0xD0, 0x90,  // D....F..
                /* 0090 */  0xCA, 0x15, 0xE0, 0x5D, 0x80, 0xED, 0x11, 0x88,  // ...]....
                /* 0098 */  0xC0, 0xF0, 0x3C, 0xA6, 0x09, 0x10, 0x16, 0x63,  // ..<....c
                /* 00A0 */  0x89, 0x0A, 0xE1, 0x00, 0x06, 0xE3, 0x01, 0x44,  // .......D
                /* 00A8 */  0x72, 0x86, 0x89, 0x02, 0xB6, 0xD7, 0x69, 0xC8,  // r.....i.
                /* 00B0 */  0xE4, 0x18, 0xA9, 0x24, 0x38, 0xD4, 0x08, 0x3D,  // ...$8..=
                /* 00B8 */  0xCA, 0xE6, 0x05, 0xE8, 0x1E, 0xAC, 0x06, 0xE2,  // ........
                /* 00C0 */  0x91, 0x85, 0x64, 0xD2, 0x86, 0x82, 0x1A, 0xB6,  // ..d.....
                /* 00C8 */  0x27, 0x75, 0x4A, 0x9E, 0xA1, 0x25, 0x0F, 0x92,  // 'uJ..%..
                /* 00D0 */  0x10, 0x78, 0x14, 0x0C, 0x8D, 0x13, 0x94, 0x05,  // .x......
                /* 00D8 */  0xA1, 0x1D, 0xD1, 0x61, 0x12, 0xC0, 0x93, 0xF0,  // ...a....
                /* 00E0 */  0x0C, 0x8B, 0x1F, 0xB2, 0xA0, 0x4F, 0xE4, 0xAC,  // .....O..
                /* 00E8 */  0x0F, 0x98, 0x1D, 0x07, 0x7C, 0x04, 0xC0, 0xC1,  // ....|...
                /* 00F0 */  0x1A, 0x28, 0x5C, 0xC0, 0xF3, 0x39, 0x86, 0xC8,  // .(\..9..
                /* 00F8 */  0x71, 0x0F, 0x36, 0xC6, 0x51, 0x44, 0x4E, 0x50,  // q.6.QDNP
                /* 0100 */  0xE1, 0x44, 0xE4, 0x73, 0xD2, 0x12, 0x74, 0x04,  // .D.s..t.
                /* 0108 */  0x20, 0x60, 0xD1, 0x0C, 0xD6, 0x33, 0x38, 0x91,  //  `...38.
                /* 0110 */  0x3D, 0x02, 0x94, 0x0C, 0x08, 0x79, 0x14, 0x60,  // =....y.`
                /* 0118 */  0x55, 0xC0, 0xFF, 0x1F, 0xF7, 0x34, 0x4C, 0xD0,  // U....4L.
                /* 0120 */  0xBD, 0x00, 0x65, 0x02, 0x8C, 0x09, 0x70, 0x06,  // ..e...p.
                /* 0128 */  0x2D, 0x6F, 0x02, 0xC4, 0x41, 0x68, 0x1A, 0x6D,  // -o..Ah.m
                /* 0130 */  0x09, 0xB0, 0x76, 0x5B, 0xD0, 0xFC, 0x62, 0x44,  // ..v[..bD
                /* 0138 */  0x39, 0xCF, 0x48, 0x01, 0xC3, 0x44, 0x69, 0x0E,  // 9.H..Di.
                /* 0140 */  0x51, 0x58, 0x11, 0xA3, 0xC4, 0xA9, 0x19, 0x4C,  // QX.....L
                /* 0148 */  0x10, 0x0F, 0x0C, 0xD1, 0x22, 0x85, 0x65, 0x13,  // ....".e.
                /* 0150 */  0x08, 0xD2, 0xFE, 0x20, 0xC8, 0xA0, 0x71, 0xA3,  // ... ..q.
                /* 0158 */  0xF7, 0x5D, 0xE1, 0xC0, 0x8E, 0xE2, 0xE8, 0x8F,  // .]......
                /* 0160 */  0xE8, 0x28, 0xD9, 0x94, 0x0F, 0xEC, 0xC9, 0x20,  // .(..... 
                /* 0168 */  0xF4, 0xB1, 0x46, 0x8D, 0x71, 0x16, 0x09, 0x1C,  // ..F.q...
                /* 0170 */  0x7F, 0xA9, 0x3A, 0x50, 0x38, 0x12, 0x3C, 0xEA,  // ..:P8.<.
                /* 0178 */  0xAC, 0xE0, 0x73, 0x81, 0x87, 0x76, 0xD0, 0x9E,  // ..s..v..
                /* 0180 */  0xE3, 0x09, 0x04, 0x79, 0x6C, 0xF0, 0x79, 0xE1,  // ...yl.y.
                /* 0188 */  0x81, 0xC0, 0x63, 0x60, 0xB7, 0x09, 0x1F, 0x01,  // ..c`....
                /* 0190 */  0x7C, 0x42, 0xC0, 0xBB, 0x06, 0xD4, 0xD5, 0xE0,  // |B......
                /* 0198 */  0xC1, 0x80, 0x0D, 0x3A, 0x1C, 0x66, 0xBC, 0x1E,  // ...:.f..
                /* 01A0 */  0x7E, 0xB8, 0x13, 0x38, 0xB9, 0x87, 0x0B, 0x7E,  // ~..8...~
                /* 01A8 */  0xD0, 0xF0, 0xE0, 0x70, 0x77, 0x88, 0x93, 0x39,  // ...pw..9
                /* 01B0 */  0xB2, 0x52, 0x05, 0x98, 0x3D, 0x1C, 0xE8, 0x18,  // .R..=...
                /* 01B8 */  0xE1, 0x93, 0x06, 0x3B, 0x03, 0x60, 0xE4, 0x0F,  // ...;.`..
                /* 01C0 */  0x02, 0x35, 0x32, 0x43, 0xFB, 0x44, 0xF1, 0xC2,  // .52C.D..
                /* 01C8 */  0x61, 0xC8, 0xE7, 0x84, 0xC3, 0x62, 0x62, 0x4F,  // a....bbO
                /* 01D0 */  0x1C, 0x74, 0x3C, 0xE0, 0xBF, 0x08, 0x3C, 0x65,  // .t<...<e
                /* 01D8 */  0x78, 0xFA, 0x9E, 0xAF, 0x4F, 0x21, 0xE0, 0xC1,  // x...O!..
                /* 01E0 */  0x38, 0x83, 0x50, 0x0F, 0x0D, 0xAF, 0x0D, 0x9E,  // 8.P.....
                /* 01E8 */  0xDF, 0x3B, 0x03, 0xFE, 0x14, 0xC2, 0xFF, 0xFF,  // .;......
                /* 01F0 */  0xA7, 0x10, 0xF0, 0xE2, 0x1D, 0x00, 0xE6, 0x38,  // .......8
                /* 01F8 */  0xE0, 0x01, 0x70, 0xF0, 0xA7, 0x88, 0xB3, 0xB3,  // ..p.....
                /* 0200 */  0xD2, 0x39, 0x21, 0x4F, 0x2A, 0x60, 0x10, 0xA6,  // .9!O*`..
                /* 0208 */  0x61, 0xEC, 0x2C, 0x28, 0x85, 0x6C, 0x2C, 0xDE,  // a.,(.l,.
                /* 0210 */  0xC3, 0xA7, 0x42, 0x80, 0x74, 0xB4, 0x38, 0x3E,  // ..B.t.8>
                /* 0218 */  0x4F, 0x11, 0x1E, 0xC1, 0xE0, 0xC7, 0x07, 0x9D,  // O.......
                /* 0220 */  0x3C, 0x3C, 0x00, 0x47, 0x26, 0x51, 0xE8, 0x41,  // <<.G&Q.A
                /* 0228 */  0xD1, 0xD3, 0x0A, 0x39, 0x80, 0x50, 0x10, 0x03,  // ...9.P..
                /* 0230 */  0x3A, 0xC3, 0x39, 0x02, 0xAD, 0xE2, 0x1C, 0x41,  // :.9....A
                /* 0238 */  0xE6, 0x70, 0x14, 0xA7, 0x99, 0xA0, 0xE8, 0x2B,  // .p.....+
                /* 0240 */  0x04, 0x9D, 0xB4, 0x2F, 0x07, 0x7C, 0x59, 0x1A,  // .../.|Y.
                /* 0248 */  0x0B, 0x01, 0xB6, 0x9A, 0xCB, 0x09, 0x0A, 0xCC,  // ........
                /* 0250 */  0xF7, 0x0F, 0x4E, 0x50, 0xD7, 0x01, 0x02, 0x64,  // ..NP...d
                /* 0258 */  0xFA, 0x2E, 0x08, 0xA0, 0x00, 0xF2, 0x89, 0xC0,  // ........
                /* 0260 */  0x57, 0x80, 0x97, 0x02, 0x36, 0x86, 0xB7, 0x00,  // W...6...
                /* 0268 */  0xA3, 0x19, 0x9D, 0x87, 0x1F, 0x2A, 0x2A, 0xEE,  // .....**.
                /* 0270 */  0x50, 0x29, 0x88, 0x87, 0xEA, 0x28, 0x43, 0x45,  // P)...(CE
                /* 0278 */  0xCF, 0xC4, 0xC7, 0x09, 0xCF, 0xA8, 0x75, 0x10,  // ......u.
                /* 0280 */  0xCD, 0xD1, 0x04, 0xAF, 0x04, 0x09, 0xFE, 0xFF,  // ........
                /* 0288 */  0x8F, 0x1F, 0x70, 0x6E, 0x02, 0x21, 0x9F, 0x42,  // ..pn.!.B
                /* 0290 */  0x3C, 0x0D, 0xC3, 0x79, 0xB2, 0x1C, 0xCE, 0x93,  // <..y....
                /* 0298 */  0xE5, 0x63, 0xF1, 0xE9, 0x03, 0x7C, 0xA7, 0x09,  // .c...|..
                /* 02A0 */  0xDC, 0x6C, 0xC1, 0x08, 0x8F, 0x89, 0x35, 0x2A,  // .l....5*
                /* 02A8 */  0x7A, 0x00, 0xF2, 0xF0, 0xF8, 0xE5, 0xC0, 0xF3,  // z.......
                /* 02B0 */  0x79, 0x42, 0x38, 0xCA, 0x47, 0x0F, 0x5F, 0x5B,  // yB8.G._[
                /* 02B8 */  0x3C, 0x9B, 0xB7, 0x04, 0xDF, 0x44, 0x3C, 0x44,  // <....D<D
                /* 02C0 */  0x9F, 0x85, 0x60, 0x4D, 0xE4, 0xA4, 0x7D, 0x5B,  // ..`M..}[
                /* 02C8 */  0x38, 0xD9, 0xA0, 0xF1, 0xC3, 0x7A, 0x98, 0x9E,  // 8....z..
                /* 02D0 */  0xD3, 0xB3, 0x10, 0x58, 0x8E, 0x15, 0xEC, 0x66,  // ...X...f
                /* 02D8 */  0xF1, 0x34, 0x84, 0xB9, 0x1C, 0xF9, 0x5C, 0x81,  // .4....\.
                /* 02E0 */  0x15, 0xBB, 0x1A, 0x1D, 0x32, 0x70, 0x61, 0xDE,  // ....2pa.
                /* 02E8 */  0x05, 0xBA, 0x60, 0xB0, 0x43, 0x06, 0x4C, 0xF1,  // ..`.C.L.
                /* 02F0 */  0x90, 0x3A, 0x64, 0x70, 0xD9, 0x14, 0x12, 0x4E,  // .:dp...N
                /* 02F8 */  0xA3, 0xA3, 0x02, 0x97, 0x7A, 0xD6, 0xA0, 0x20,  // ....z.. 
                /* 0300 */  0x1E, 0xA4, 0x0F, 0x19, 0xE0, 0xFF, 0xFF, 0x1F,  // ........
                /* 0308 */  0x32, 0x80, 0x45, 0x88, 0x19, 0xA1, 0x6F, 0x3A,  // 2.E...o:
                /* 0310 */  0xD6, 0x7A, 0x57, 0x22, 0x57, 0x88, 0x07, 0x15,  // .zW"W...
                /* 0318 */  0x0F, 0x09, 0xAC, 0x43, 0xF5, 0x31, 0x04, 0xF0,  // ...C.1..
                /* 0320 */  0x3D, 0x12, 0x1F, 0x43, 0x80, 0xEB, 0xFF, 0xFF,  // =..C....
                /* 0328 */  0x18, 0x02, 0x3C, 0x87, 0xE9, 0x63, 0x08, 0x78,  // ..<..c.x
                /* 0330 */  0x2E, 0x1D, 0xEC, 0x18, 0x02, 0x3B, 0xDC, 0x19,  // .....;..
                /* 0338 */  0x91, 0x86, 0x78, 0x17, 0x28, 0xC2, 0x82, 0x28,  // ..x.(..(
                /* 0340 */  0x8C, 0xCF, 0x88, 0x80, 0xA3, 0xF3, 0x18, 0xFE,  // ........
                /* 0348 */  0x8C, 0x08, 0xF3, 0x38, 0xC6, 0x06, 0x7C, 0xC6,  // ...8..|.
                /* 0350 */  0xC1, 0x70, 0x47, 0x44, 0xD8, 0x97, 0xC2, 0xF7,  // .pGD....
                /* 0358 */  0xC2, 0x47, 0xC4, 0x23, 0x7C, 0x77, 0xB3, 0x36,  // .G.#|w.6
                /* 0360 */  0x04, 0x5D, 0x0D, 0x83, 0xC4, 0x89, 0xF0, 0x66,  // .].....f
                /* 0368 */  0xF8, 0x88, 0x68, 0xB8, 0x77, 0xB8, 0x47, 0x44,  // ..h.w.GD
                /* 0370 */  0x63, 0x04, 0x0C, 0x73, 0x34, 0xFF, 0xFF, 0x28,  // c..s4..(
                /* 0378 */  0x4F, 0x87, 0x41, 0x22, 0xFB, 0xA2, 0xF8, 0x7C,  // O.A"...|
                /* 0380 */  0x18, 0xE1, 0x75, 0xD1, 0x38, 0x0F, 0x85, 0x21,  // ..u.8..!
                /* 0388 */  0x1E, 0x11, 0x01, 0x3E, 0x9E, 0x19, 0xD8, 0x95,  // ...>....
                /* 0390 */  0x01, 0x7B, 0x44, 0x04, 0x06, 0xFF, 0xFF, 0x23,  // .{D....#
                /* 0398 */  0x22, 0xF0, 0x11, 0x74, 0x44, 0xA4, 0x21, 0x8F,  // "..tD.!.
                /* 03A0 */  0x88, 0xA8, 0x61, 0x58, 0xC6, 0x11, 0x11, 0x35,  // ..aX...5
                /* 03A8 */  0x45, 0x38, 0x27, 0x44, 0x80, 0x77, 0xFF, 0xFF,  // E8'D.w..
                /* 03B0 */  0xB3, 0x14, 0xF0, 0x0E, 0x75, 0x96, 0x02, 0x6A,  // ....u..j
                /* 03B8 */  0x90, 0x16, 0x79, 0x42, 0x04, 0xE1, 0x59, 0x08,  // ..yB..Y.
                /* 03C0 */  0x96, 0xD0, 0x03, 0x22, 0xEA, 0x08, 0xE0, 0x28,  // ..."...(
                /* 03C8 */  0x07, 0x44, 0xD4, 0x11, 0x03, 0xCE, 0xF9, 0x10,  // .D......
                /* 03D0 */  0xF0, 0xF5, 0xFF, 0x3F, 0x1F, 0x02, 0x3C, 0x3E,  // ...?..<>
                /* 03D8 */  0x84, 0x80, 0xF7, 0xFF, 0x7F, 0x08, 0x01, 0x87,  // ........
                /* 03E0 */  0x84, 0x43, 0x08, 0xA8, 0xCE, 0x87, 0x98, 0x43,  // .C.....C
                /* 03E8 */  0x08, 0xAC, 0xB0, 0x3E, 0x46, 0xC0, 0x62, 0x3C,  // ...>F.b<
                /* 03F0 */  0x0B, 0x14, 0x63, 0x3D, 0x14, 0xC6, 0xC7, 0x43,  // ..c=...C
                /* 03F8 */  0xC0, 0xD1, 0xE1, 0x0C, 0x77, 0x3C, 0x84, 0x7D,  // ....w<.}
                /* 0400 */  0xBC, 0xE4, 0x43, 0x39, 0xB1, 0x88, 0x11, 0x1E,  // ..C9....
                /* 0408 */  0xC6, 0xA2, 0xC5, 0x7C, 0x06, 0xF0, 0xF9, 0x10,  // ...|....
                /* 0410 */  0xF6, 0xDD, 0xF0, 0x71, 0xF0, 0x05, 0x22, 0xC6,  // ...q..".
                /* 0418 */  0xB3, 0xE1, 0xC3, 0xA1, 0xCF, 0x84, 0xEF, 0x85,  // ........
                /* 0420 */  0xE7, 0x11, 0xE5, 0xB9, 0xF0, 0xF9, 0x90, 0x1D,  // ........
                /* 0428 */  0xE0, 0xCE, 0x21, 0x8A, 0x41, 0x22, 0x1D, 0x43,  // ..!.A".C
                /* 0430 */  0xD4, 0x28, 0xCF, 0x8A, 0x61, 0xC3, 0xBC, 0x0D,  // .(..a...
                /* 0438 */  0x86, 0x0B, 0x11, 0x29, 0x42, 0xE4, 0x88, 0x0F,  // ...)B...
                /* 0440 */  0x89, 0x61, 0x9E, 0x0F, 0xC1, 0xF4, 0xFF, 0x3F,  // .a.....?
                /* 0448 */  0x1F, 0xE2, 0x5F, 0x18, 0x3E, 0x1F, 0x02, 0x1C,  // .._.>...
                /* 0450 */  0x39, 0x74, 0xE0, 0xCE, 0x87, 0x60, 0xB8, 0xAA,  // 9t...`..
                /* 0458 */  0xB3, 0x3B, 0x03, 0x8C, 0x03, 0x22, 0x60, 0xE0,  // .;..."`.
                /* 0460 */  0xFF, 0x7F, 0x40, 0xC4, 0x8B, 0x5B, 0xB7, 0x0E,  // ..@..[..
                /* 0468 */  0x2B, 0x56, 0x7C, 0xDC, 0x42, 0x67, 0x79, 0x01,  // +V|.Bgy.
                /* 0470 */  0x08, 0xFA, 0xE8, 0x0E, 0xC7, 0x03, 0x3E, 0x45,  // ......>E
                /* 0478 */  0x18, 0xEA, 0x8F, 0x5B, 0x28, 0xDD, 0x14, 0x52,  // ...[(..R
                /* 0480 */  0x7E, 0xDC, 0x42, 0x69, 0x3D, 0x6E, 0x51, 0x10,  // ~.Bi=nQ.
                /* 0488 */  0x9F, 0x1C, 0x1C, 0xE3, 0x48, 0x04, 0x65, 0x66,  // ....H.ef
                /* 0490 */  0x4F, 0x44, 0xBE, 0x15, 0xF8, 0x64, 0xE3, 0xFB,  // OD...d..
                /* 0498 */  0x16, 0x30, 0x8D, 0x30, 0x26, 0x34, 0x8C, 0xCF,  // .0.0&4..
                /* 04A0 */  0x03, 0x67, 0x74, 0x9A, 0xAF, 0x5B, 0x80, 0xE5,  // .gt..[..
                /* 04A8 */  0xFF, 0xFF, 0x75, 0x0B, 0x30, 0x18, 0xEE, 0xBA,  // ..u.0...
                /* 04B0 */  0x05, 0xD4, 0x4E, 0x00, 0xBE, 0xC0, 0xF8, 0xBA,  // ..N.....
                /* 04B8 */  0x05, 0xAE, 0x9B, 0x07, 0xE6, 0x82, 0x8F, 0x43,  // .......C
                /* 04C0 */  0x7D, 0xF9, 0xC0, 0x5F, 0x44, 0xE0, 0x9C, 0x4E,  // }.._D..N
                /* 04C8 */  0x1E, 0xA6, 0x0C, 0xF8, 0xEA, 0x02, 0xE7, 0x22,  // ......."
                /* 04D0 */  0x02, 0xAC, 0xFE, 0xFF, 0x17, 0x11, 0x80, 0xFF,  // ........
                /* 04D8 */  0xFF, 0xFF, 0x8B, 0x08, 0xF0, 0x1F, 0xA6, 0x2F,  // ......./
                /* 04E0 */  0x22, 0xE0, 0xBB, 0x79, 0xF0, 0x83, 0x08, 0x6C,  // "..y...l
                /* 04E8 */  0x82, 0xC9, 0x4E, 0xF4, 0xA8, 0x01, 0x5B, 0x01,  // ..N...[.
                /* 04F0 */  0x90, 0xC6, 0x7B, 0x48, 0xF1, 0x5E, 0xF9, 0xD8,  // ..{H.^..
                /* 04F8 */  0xB9, 0x2E, 0xC1, 0xE4, 0xC7, 0x79, 0x54, 0x66,  // .....yTf
                /* 0500 */  0x12, 0xA5, 0x3E, 0x29, 0xA0, 0x72, 0x9E, 0x14,  // ..>).r..
                /* 0508 */  0x28, 0x88, 0x01, 0x7D, 0xF5, 0x05, 0x56, 0xD7,  // (..}..V.
                /* 0510 */  0x79, 0x60, 0xFF, 0xFF, 0xBF, 0xCE, 0x03, 0xC6,  // y`......
                /* 0518 */  0xE3, 0x5C, 0xE7, 0x81, 0x9E, 0xBC, 0x3B, 0x06,  // .\....;.
                /* 0520 */  0x68, 0xAE, 0x14, 0xEC, 0x5F, 0xF1, 0x4C, 0x81,  // h..._.L.
                /* 0528 */  0x21, 0x98, 0xEE, 0x72, 0x81, 0xBA, 0xE0, 0x5A,  // !..r...Z
                /* 0530 */  0xC3, 0xE5, 0x02, 0x71, 0xDA, 0x08, 0x7D, 0x5C,  // ...q..}\
                /* 0538 */  0x6F, 0x17, 0xC0, 0xE8, 0xFF, 0x7F, 0xBB, 0x00,  // o.......
                /* 0540 */  0x78, 0x1A, 0xE8, 0x76, 0x01, 0xB4, 0xFE, 0xFF,  // x..v....
                /* 0548 */  0x07, 0x75, 0x7E, 0xA4, 0xC5, 0xDF, 0x2E, 0xE0,  // .u~.....
                /* 0550 */  0x1F, 0x2A, 0xB0, 0x67, 0x62, 0xBD, 0x9E, 0x7D,  // .*.gb..}
                /* 0558 */  0x46, 0xA7, 0x21, 0x8E, 0xE9, 0x80, 0xD6, 0xAB,  // F.!.....
                /* 0560 */  0x89, 0x4F, 0xCF, 0x9E, 0x6F, 0x44, 0x9F, 0xC7,  // .O..oD..
                /* 0568 */  0xC3, 0x3C, 0x3D, 0x1C, 0xF1, 0xDB, 0x83, 0x8F,  // .<=.....
                /* 0570 */  0xE9, 0xF0, 0xCF, 0xE6, 0x6F, 0xE5, 0x71, 0xDF,  // ....o.q.
                /* 0578 */  0xCF, 0x7D, 0x31, 0x7F, 0x38, 0x7F, 0x3D, 0xF7,  // .}1.8.=.
                /* 0580 */  0xE5, 0xDC, 0x87, 0x74, 0xA3, 0x18, 0xC6, 0x50,  // ...t...P
                /* 0588 */  0x86, 0x08, 0x18, 0x34, 0x56, 0x94, 0x23, 0x89,  // ...4V.#.
                /* 0590 */  0x69, 0x94, 0x10, 0x11, 0x5E, 0xD5, 0x8D, 0x15,  // i...^...
                /* 0598 */  0xD2, 0xD6, 0x8E, 0xE9, 0xA0, 0x8E, 0xBF, 0x54,  // .......T
                /* 05A0 */  0x1D, 0xD3, 0xE1, 0xFC, 0xFF, 0x8F, 0xE9, 0x00,  // ........
                /* 05A8 */  0x1F, 0xCE, 0x0C, 0xB8, 0x63, 0x3A, 0xFC, 0x43,  // ....c:.C
                /* 05B0 */  0x03, 0xBF, 0x33, 0xE0, 0x4F, 0xE9, 0x80, 0x8F,  // ..3.O...
                /* 05B8 */  0xC0, 0x77, 0x27, 0x1A, 0x96, 0x42, 0xF7, 0x28,  // .w'..B.(
                /* 05C0 */  0x3E, 0x2C, 0x0B, 0x02, 0xD2, 0xFF, 0x7F, 0x84,  // >,......
                /* 05C8 */  0xF0, 0x44, 0x40, 0x53, 0x08, 0xC7, 0x3F, 0x0E,  // .D@S..?.
                /* 05D0 */  0x01, 0x7D, 0x02, 0x1F, 0x87, 0x80, 0xF7, 0xE1,  // .}......
                /* 05D8 */  0xC3, 0xF7, 0x68, 0xE0, 0x76, 0x9E, 0x01, 0x0E,  // ..h.v...
                /* 05E0 */  0x0A, 0x6D, 0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41,  // .m..h..A
                /* 05E8 */  0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,  // ..e...S.
                /* 05F0 */  0x31, 0x63, 0xDA, 0xA0, 0x24, 0xE9, 0x80, 0x40,  // 1c..$..@
                /* 05F8 */  0x45, 0x2C, 0x49, 0x63, 0x72, 0x04, 0x10, 0xAA,  // E,Icr...
                /* 0600 */  0xEB, 0xC5, 0x22, 0x23, 0x20, 0x12, 0x09, 0x22,  // .."# .."
                /* 0608 */  0x20, 0xFF, 0xFF, 0x05, 0x7D, 0xD2, 0x04, 0x64,  //  ...}..d
                /* 0610 */  0x79, 0x20, 0x02, 0x72, 0xFE, 0xC7, 0x91, 0x80,  // y .r....
                /* 0618 */  0x2C, 0x66, 0x55, 0x02, 0x72, 0x06, 0x10, 0x01,  // ,fU.r...
                /* 0620 */  0x39, 0x10, 0x10, 0x15, 0x6F, 0x02, 0x88, 0x45,  // 9...o..E
                /* 0628 */  0x01, 0x11, 0x90, 0x83, 0xAB, 0x18, 0x0A, 0x0B,  // ........
                /* 0630 */  0xFA, 0x1E, 0x11, 0x90, 0x65, 0xDA, 0x00, 0x61,  // ....e..a
                /* 0638 */  0xC9, 0x75, 0x80, 0x32, 0x19, 0x3E, 0x80, 0x58,  // .u.2.>.X
                /* 0640 */  0x64, 0x10, 0x01, 0xF9, 0x4D, 0x60, 0x20, 0xA7,  // d...M` .
                /* 0648 */  0xA3, 0x11, 0x90, 0xA3, 0x52, 0x08, 0xC8, 0x0A,  // ....R...
                /* 0650 */  0x95, 0x00, 0x31, 0xB9, 0x20, 0x02, 0xB2, 0x34,  // ..1. ..4
                /* 0658 */  0x27, 0x40, 0x4C, 0x28, 0x88, 0x80, 0x1C, 0xEA,  // '@L(....
                /* 0660 */  0xB9, 0xA4, 0xA1, 0x38, 0x86, 0x16, 0x20, 0x26,  // ...8.. &
                /* 0668 */  0xC2, 0x0B, 0x08, 0x0B, 0xB7, 0x7A, 0x81, 0x3A,  // .....z.:
                /* 0670 */  0x29, 0x88, 0xEE, 0x83, 0xC4, 0x0C, 0x10, 0xD3,  // ).......
                /* 0678 */  0x0A, 0xA2, 0xC1, 0x92, 0xFF, 0x9D, 0x80, 0xAC,  // ........
                /* 0680 */  0x12, 0x44, 0x40, 0x56, 0xF3, 0x92, 0x10, 0x90,  // .D@V....
                /* 0688 */  0xA5, 0x81, 0x08, 0xC8, 0x79, 0x80, 0x68, 0x38,  // ....y.h8
                /* 0690 */  0x20, 0x1A, 0xC4, 0x0E, 0x10, 0x8B, 0x05, 0x22,  //  ......"
                /* 0698 */  0x20, 0xCB, 0xF6, 0x03, 0xC4, 0x32, 0x80, 0x08,  //  ....2..
                /* 06A0 */  0xC8, 0x7A, 0x0F, 0x20, 0x02, 0xB2, 0x7A, 0x10,  // .z. ..z.
                /* 06A8 */  0x01, 0x59, 0x91, 0xA2, 0x03, 0x00, 0x05, 0x11,  // .Y......
                /* 06B0 */  0x90, 0xA5, 0x38, 0x02, 0x62, 0xC2, 0x40, 0x04,  // ..8.b.@.
                /* 06B8 */  0xE4, 0x00, 0x0F, 0x2D, 0x0D, 0xCF, 0x92, 0x35,  // ...-...5
                /* 06C0 */  0x01, 0xB1, 0xC0, 0x20, 0x34, 0x86, 0x28, 0x50,  // ... 4.(P
                /* 06C8 */  0x16, 0x0A, 0x44, 0x40, 0xFE, 0xFF, 0x03         // ..D@...
            })
            OperationRegion (DEB1, SystemIO, 0x80, 0x04)
            Field (DEB1, DWordAcc, NoLock, Preserve)
            {
                DBGD,   32
            }

            OperationRegion (SMI0, SystemIO, LSMB, One)
            Field (SMI0, ByteAcc, NoLock, Preserve)
            {
                APMC,   8
            }

            OperationRegion (WMIM, SystemMemory, WMIO, WMSZ)
            Field (WMIM, AnyAcc, NoLock, Preserve)
            {
                CMD,    8, 
                ERR,    32, 
                PAR0,   32, 
                PAR1,   32, 
                PAR2,   32, 
                PAR3,   32
            }

            Field (WMIM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x15), 
                DBGM,   800, 
                RTSM,   800
            }

            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x42, 0x41, 0x01, 0x00, 0x7C, 0x78, 0x3E, 0x21,  // BA..|x>!
                /* 0018 */  0xD5, 0x50, 0x2D, 0x47, 0x9E, 0x08, 0xDF, 0x4F,  // .P-G...O
                /* 0020 */  0xB2, 0x05, 0x0D, 0x15, 0x47, 0x49, 0x02, 0x02,  // ....GI..
                /* 0028 */  0x66, 0xEA, 0x34, 0xF8, 0x42, 0xA4, 0xBD, 0x48,  // f.4.B..H
                /* 0030 */  0xBE, 0x8C, 0x18, 0x83, 0x75, 0x57, 0xC8, 0x98,  // ....uW..
                /* 0038 */  0x47, 0x42, 0x01, 0x02, 0x27, 0x24, 0x06, 0x68,  // GB..'$.h
                /* 0040 */  0x32, 0xC4, 0xA2, 0x4B, 0xB3, 0xD8, 0xF6, 0x39,  // 2..K...9
                /* 0048 */  0x49, 0xDD, 0x7A, 0x19, 0x53, 0x50, 0x03, 0x02,  // I.z.SP..
                /* 0050 */  0x38, 0x27, 0xAA, 0x81, 0xBA, 0x49, 0x98, 0x44,  // 8'...I.D
                /* 0058 */  0x82, 0x1B, 0xD3, 0x8B, 0x88, 0xD8, 0x14, 0x95,  // ........
                /* 0060 */  0x4C, 0x44, 0x01, 0x02                           // LD..
            })
            Method (TSTD, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = 0x00030D40
                While ((Local0 < Local1))
                {
                    DBGD = Arg0
                    Local0++
                }

                Return (Zero)
            }

            Mutex (MSMI, 0x07)
            Method (SMI, 5, NotSerialized)
            {
                Acquire (MSMI, 0xFFFF)
                CMD = Arg0
                PAR0 = Arg1
                PAR1 = Arg2
                PAR2 = Arg3
                PAR3 = Arg4
                APMC = AISV /* \AISV */
                While ((ERR == One))
                {
                    Sleep (0x64)
                    APMC = AISV /* \AISV */
                }

                Local0 = PAR0 /* \_SB_.WMIC.PAR0 */
                Release (MSMI)
                Return (Local0)
            }

            Method (WMII, 2, NotSerialized)
            {
                Return (SMI (0x10, Arg0, Arg1, Zero, Zero))
            }

            Method (WMIP, 2, NotSerialized)
            {
                Return (SMI (0x20, Arg0, Arg1, Zero, Zero))
            }

            Method (WMGI, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMII (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMGB, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMII (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMSP, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMIP (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMLD, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local1 = WMII (0xFF, Zero)
                Release (MWMI)
                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "437524495713Genuine NVIDIA Certified SLI Ready Motherboard for MSI MS-7B78 AC      07A1-Copyright 2018 NVIDIA Corporation All Rights Reserved-630035613225(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x41494C53))
                {
                    Return (SLIC) /* \_SB_.PCI0.SLIC */
                }

                Return (Zero)
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : C1
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DC387E00
[028h 0040   4]                 DSDT Address : DC31B200
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000DC31B200
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 C1 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 7E 38 DC 00 B2 31 DC 00 01 09 00  // .....~8...1.....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 B2 31 DC  // ..............1.
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 5514E992
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 92 E9 14 55 00 00 00 00  // FACS@......U....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E8
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 E8 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 54 58 48  // ....$FID.x.1ATXH
    0030: 30 31 00 00 B0 D2 A3 0A CD 9B E9 9A 9A DB 36 CD  // 01............6.
    0040: 08 19 80 3B 30 35 00 31 34 00 30 30 00 30 31 00  // ...;05.14.00.01.
    0050: E3 07 0B 0B 0D 1D 35 FF FF 41 4C 41 53 4B 41 41  // ......5..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000DCE66C30

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000DCE66C50

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 6E 41 4C 41 53 4B 41  // FPDTD....nALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 6C E6 DC  // ............0l..
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 6C E6 DC  // ............Pl..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 8C
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AMD IVRS"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]                     Reserved : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 11
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 12
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Unknown Subtable Type]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

**** Unknown IVRS subtable type 0x11

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 8C 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 4D 44 20 49 56 52 53 01 00 00 00 41 4D 44 20  // AMD IVRS....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 11 A0 00 01  // H.......H.......
    0070: 48 00 00 00 12 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 0F 00 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 11 A0 00 01 48 00 00 00 12 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMDFCH", "FCHZP", 0x00001000)
{


SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD ALIB", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x07, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x07, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x03, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 00C8 */  0x1F, 0x00, 0x03, 0x08, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0128 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0150 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10528, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B10564, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B10598, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B1059C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B105A0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B105A4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B105A8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B105AC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)){}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)){}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x31, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x43, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x44, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x46, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x48, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD PT", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD CPU", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)
    External (_PR_.C00C, DeviceObj)
    External (_PR_.C00D, DeviceObj)
    External (_PR_.C00E, DeviceObj)
    External (_PR_.C00F, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00C.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00D.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00E.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00001186, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000C6C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000006FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00F.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "Set VDDIO", 
                "Set VTT"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xFD)
            {
                0x00020001, 
                0x014D, 
                0x0BB8, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                Zero, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x09C4, 
                0x21, 
                0x00020036, 
                0x0640, 
                0x1F40, 
                One, 
                0x00020037, 
                0xC8, 
                0x07D0, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x0438, 
                0x05DC, 
                Zero, 
                0x0A, 
                Zero, 
                0x00030002, 
                0x021C, 
                0x02EE, 
                Zero, 
                0x05, 
                Zero, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                Zero
            })
            Name (OBD1, Package (0xFD)
            {
                0x00020001, 
                0x36, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x90)
            {
                0x00020035, 
                0x2E, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x041A, 
                0x042A, 
                0x00030001, 
                0x2B, 
                0x0438, 
                0x0442, 
                0x044C, 
                0x0456, 
                0x0460, 
                0x046A, 
                0x0474, 
                0x047E, 
                0x0488, 
                0x0492, 
                0x049C, 
                0x04A6, 
                0x04B0, 
                0x04BA, 
                0x04C4, 
                0x04CE, 
                0x04D8, 
                0x04E2, 
                0x04EC, 
                0x04F6, 
                0x0500, 
                0x050A, 
                0x0514, 
                0x051E, 
                0x0528, 
                0x0532, 
                0x053C, 
                0x0546, 
                0x0550, 
                0x055A, 
                0x0564, 
                0x056E, 
                0x0578, 
                0x0582, 
                0x058C, 
                0x0596, 
                0x05A0, 
                0x05AA, 
                0x05B4, 
                0x05BE, 
                0x05C8, 
                0x05D2, 
                0x05DC, 
                0x00030002, 
                0x2B, 
                0x021C, 
                0x0221, 
                0x0226, 
                0x022B, 
                0x0230, 
                0x0235, 
                0x023A, 
                0x023F, 
                0x0244, 
                0x0249, 
                0x024E, 
                0x0253, 
                0x0258, 
                0x025D, 
                0x0262, 
                0x0267, 
                0x026C, 
                0x0271, 
                0x0276, 
                0x027B, 
                0x0280, 
                0x0285, 
                0x028A, 
                0x028F, 
                0x0294, 
                0x0299, 
                0x029E, 
                0x02A3, 
                0x02A8, 
                0x02AD, 
                0x02B2, 
                0x02B7, 
                0x02BC, 
                0x02C1, 
                0x02C6, 
                0x02CB, 
                0x02D0, 
                0x02D5, 
                0x02DA, 
                0x02DF, 
                0x02E4, 
                0x02E9, 
                0x02EE, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xDC37F018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                MRSD,   288, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
        Processor (C004, 0x04, 0x00000810, 0x06){}
        Processor (C005, 0x05, 0x00000810, 0x06){}
        Processor (C006, 0x06, 0x00000810, 0x06){}
        Processor (C007, 0x07, 0x00000810, 0x06){}
        Processor (C008, 0x08, 0x00000810, 0x06){}
        Processor (C009, 0x09, 0x00000810, 0x06){}
        Processor (C00A, 0x0A, 0x00000810, 0x06){}
        Processor (C00B, 0x0B, 0x00000810, 0x06){}
        Processor (C00C, 0x0C, 0x00000810, 0x06){}
        Processor (C00D, 0x0D, 0x00000810, 0x06){}
        Processor (C00E, 0x0E, 0x00000810, 0x06){}
        Processor (C00F, 0x0F, 0x00000810, 0x06){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    /*
     * iASL Warning: There were 11 external control methods found during
     * disassembly, but only 0 were resolved (11 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xDC38A018, 0x000100CD)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                        One)
                }
                Else
                {
                    Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                        One)
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            Local1 = M038 /* External reference */
            Local2
        }
        ElseIf ((Local0 == 0x02))
        {
            (Local1 + 0x08) = M038 /* External reference */
            Local2
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
                Else
                {
                    M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                    0x04), Zero, One))
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = One
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IPTS (Arg0)
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }

        If ((M280 != Zero))
        {
            \_SB.M284 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IWAK (Arg0)
            }
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 0E 41 4C 41 53 4B 41  // UEFIB.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 20 20 20 20  // A M I ......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 80 28 DC 00 00  // ...26.......(...
    0040: 00 00                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000E884
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 07
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 59524 (0xE884)

    0000: 56 46 43 54 84 E8 00 00 01 07 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00  // ............(...
    0050: 00 00 00 00 00 00 00 00 02 10 1F 73 00 00 00 00  // ...........s....
    0060: 01 00 00 00 00 E8 00 00 55 AA 74 E9 37 03 00 00  // ........U.t.7...
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: E8 02 00 00 00 00 49 42 4D E4 CC 8E 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: BE 02 00 00 00 00 00 00 31 30 2F 30 39 2F 31 39  // ........10/09/19
    00C0: 20 30 34 3A 34 38 00 00 31 00 00 00 E9 25 04 00  //  04:48..1....%..
    00D0: E9 2F 04 00 00 00 8C 01 09 00 00 00 00 00 00 00  // ./..............
    00E0: 0B 00 0E 81 87 1F 50 00 00 00 00 00 01 00 01 00  // ......P.........
    00F0: 01 30 88 79 1E 45 A8 79 14 02 10 BD C1 6F 1C CF  // .0.y.E.y.....o..
    0100: F9 FF 1F 00 00 00 00 00 00 C4 AF F8 3F 00 00 00  // ............?...
    0110: 00 00 00 00 00 00 1F 73 38 AB 16 73 14 73 0C 00  // .......s8..s.s..
    0120: 01 00 32 03 D0 31 37 55 00 F8 80 10 42 F0 DF 03  // ..2..17U....B...
    0130: 00 2C 23 20 20 12 C8 71 56 2D E6 00 00 1E A8 00  // .,#  ..qV-......
    0140: 0F 80 08 F0 3E A7 68 24 DA 21 00 21 00 21 00 01  // ....>.h$.!.!.!..
    0150: 00 2C C0 4C 60 19 20 00 30 00 03 80 0C 0C 00 00  // .,.L`. .0.......
    0160: 16 10 07 52 80 18 0C 0E 0A 00 00 00 00 F0 02 00  // ...R............
    0170: 00 00 08 00 00 00 00 00 08 40 18 10 70 00 00 00  // .........@..p...
    0180: 20 00 00 00 04 00 00 00 1C 04 00 00 C8 00 00 00  //  ...............
    0190: 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04  // 0...............
    01A0: 00 00 00 00 1C 32 00 88 76 24 90 03 00 00 00 00  // .....2..v$......
    01B0: 00 00 00 00 00 00 00 00 00 00 00 E4 27 09 40 10  // ............'.@.
    01C0: 18 00 64 00 00 00 00 C0 98 07 00 00 40 7A 01 A0  // ..d.........@z..
    01D0: 00 24 00 00 00 80 10 90 01 18 00 00 08 00 80 D1  // .$..............
    01E0: 45 01 00 00 A0 1F 11 30 00 00 00 00 20 00 00 00  // E......0.... ...
    01F0: 00 00 00 00 31 31 33 2D 44 31 39 39 30 31 30 31  // ....113-D1990101
    0200: 2D 58 30 32 00 4E 41 56 49 31 30 00 50 43 49 5F  // -X02.NAVI10.PCI_
    0210: 45 58 50 52 45 53 53 00 47 44 44 52 36 00 0D 0A  // EXPRESS.GDDR6...
    0220: 4E 41 56 49 31 30 20 41 31 2F 41 32 20 44 31 39  // NAVI10 A1/A2 D19
    0230: 39 30 31 20 58 54 20 38 47 42 20 33 30 30 65 2F  // 901 XT 8GB 300e/
    0240: 38 37 35 6D 20 20 20 20 20 20 20 20 20 20 20 20  // 875m            
    0250: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0260: 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D  //             ....
    0270: 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30  // . ...(C) 1988-20
    0280: 31 38 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63  // 18, Advanced Mic
    0290: 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E  // ro Devices, Inc.
    02A0: 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20  // .ATOMBIOSBK-AMD 
    02B0: 56 45 52 30 31 37 2E 30 30 31 2E 30 30 30 2E 30  // VER017.001.000.0
    02C0: 34 39 2E 30 30 30 30 30 30 00 34 30 39 58 30 37  // 49.000000.409X07
    02D0: 30 38 2E 58 30 32 00 32 30 31 30 35 33 32 20 00  // 08.X02.2010532 .
    02E0: 34 38 34 35 32 36 20 20 00 20 20 20 20 20 20 20  // 484526  .       
    02F0: 20 00 53 41 50 50 48 49 52 45 5F 4E 41 56 49 31  //  .SAPPHIRE_NAVI1
    0300: 30 5F 45 34 30 39 5F 58 54 5F 47 44 44 52 36 5F  // 0_E409_XT_GDDR6_
    0310: 38 47 42 5F 4E 49 54 52 4F 5C 63 6F 6E 66 69 67  // 8GB_NITRO\config
    0320: 2E 68 00 00 00 90 28 00 02 02 41 54 4F 4D 00 C0  // .h....(...ATOM..
    0330: 37 04 62 02 0D 03 B6 01 6A 04 00 00 00 00 A2 1D  // 7.b.....j.......
    0340: 09 E4 E8 02 18 92 BE 92 00 00 BC C8 00 00 00 00  // ................
    0350: 50 43 49 52 02 10 1F 73 00 00 18 00 00 00 00 03  // PCIR...s........
    0360: 74 00 01 11 00 00 00 00 41 4D 44 20 41 54 4F 4D  // t.......AMD ATOM
    0370: 42 49 4F 53 00 14 A8 05 54 00 00 00 00 00 00 00  // BIOS....T.......
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 1E 06 66 50 66 51 66 52 66 53 66  // .......fPfQfRfSf
    03B0: 55 66 56 66 57 0E 1F A3 14 00 8C 0E 08 00 B2 20  // UfVfW.......... 
    03C0: E8 8B 2C 0B C0 75 14 A2 02 00 66 5F 66 5E 66 5D  // ..,..u....f_f^f]
    03D0: 66 5B 66 5A 66 59 66 58 07 1F CB E8 A5 2D E8 77  // f[fZfYfX.....-.w
    03E0: 2B 32 D2 8D 3E BE 02 89 55 16 E8 39 11 E8 FC 10  // +2..>...U..9....
    03F0: E8 53 12 E8 AD 02 E8 31 28 0B C0 74 0C E8 39 00  // .S.....1(..t..9.
    0400: E8 7F 53 E8 F8 10 E8 D4 53 E8 A9 00 B4 80 E8 71  // ..S.....S......q
    0410: 2B 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 CC 8E E8  // +..f...... f....
    0420: AC 02 E8 0B 11 E8 9E 2D 66 5F 66 5E 66 5D 66 5B  // .......-f_f^f]f[
    0430: 66 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E  // fZfYfX.........>
    0440: 49 04 00 75 04 89 1E 47 04 1E 2E 8E 1E 3F 04 9C  // I..u...G.....?..
    0450: FA 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 6A 04  // .f....e.....@.j.
    0460: 89 1E 42 00 C7 06 B4 01 6A 04 89 1E B6 01 C7 06  // ..B.....j.......
    0470: 7C 00 AE 5C 89 1E 7E 00 C7 06 0C 01 C1 60 89 1E  // |..\..~......`..
    0480: 0E 01 C7 06 A8 04 E0 56 89 1E AA 04 2E 8E 1E 47  // .......V.......G
    0490: 04 8B C3 A3 E2 56 A3 F2 56 A3 04 57 9D 1F C3 50  // .....V..V..W...P
    04A0: 4D 49 44 6A 04 12 47 00 00 00 A0 00 B0 00 B8 00  // MIDj..G.........
    04B0: C0 00 00 00 00 BB 00 00 E8 5E 10 66 C1 E8 10 A3  // .........^.f....
    04C0: EE 02 BB 0B 00 E8 51 10 8D 3E BE 02 66 89 45 18  // ......Q..>..f.E.
    04D0: C3 00 E8 CC 2C 80 FC A0 75 05 E8 3D 00 EB 11 80  // ....,...u..=....
    04E0: FC 4F 75 05 E8 B9 41 EB 07 E8 0E 47 EB 02 B4 01  // .Ou...A....G....
    04F0: E8 D3 2C CF E8 AA 2C E8 20 00 EB 02 B4 01 E8 C5  // ..,...,. .......
    0500: 2C CB E8 9C 2C 80 FC 4F 75 05 E8 93 41 EB 07 E8  // ,...,..Ou...A...
    0510: E8 46 EB 02 B4 01 E8 AD 2C CB 1E 06 66 50 66 51  // .F......,...fPfQ
    0520: 66 52 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29  // fRfSfUfVfW..<.u)
    0530: 2E A1 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 B3 01  // ....f........6..
    0540: 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66  // .<..0.....^..F.f
    0550: C1 E8 10 89 46 00 E9 28 01 3C 05 75 18 E8 22 2A  // ....F..(.<.u.."*
    0560: E8 F5 29 2E A1 08 00 8B EC 89 56 10 89 46 00 89  // ..).......V..F..
    0570: 5E 04 E9 0C 01 3C 06 75 32 E8 85 0F 66 D1 E0 8B  // ^....<.u2...f...
    0580: EC 89 46 14 BB 02 00 E8 8F 0F 88 46 18 E8 79 0F  // ..F........F..y.
    0590: 66 89 46 0C BB 09 00 E8 7F 0F 33 C0 66 89 46 00  // f.F.......3.f.F.
    05A0: 2E 8B 16 EE 02 89 56 10 E9 D6 00 3C 0B 75 24 0A  // ......V....<.u$.
    05B0: DB 75 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E  // .u..........^..N
    05C0: 14 E9 BD 00 8A C7 E8 D0 00 E8 34 01 0F 84 A9 00  // ..........4.....
    05D0: E9 AE 00 3C 17 75 1D E8 2E 12 74 06 E8 8B 0D E8  // ...<.u....t.....
    05E0: 09 17 E8 EE 09 E8 F7 0E 33 C9 8B C8 8B EC 89 4E  // ........3......N
    05F0: 14 E9 8D 00 3C 18 75 45 0A FF 75 10 E8 B5 11 8B  // ....<.uE..u.....
    0600: EC 89 46 0C E8 3B 0A 89 4E 10 EB 75 E8 F9 11 75  // ..F..;..N..u...u
    0610: 68 BB 00 1C E8 28 2B 66 0B C0 74 5D 23 C9 74 59  // h....(+f..t]#.tY
    0620: E8 CD 11 BE 00 1C E8 1D 0F 74 4E BE 00 1C B0 40  // .........tN....@
    0630: E8 6C 0F E8 7E 11 8B EC 89 46 0C EB 44 3C 82 75  // .l..~....F..D<.u
    0640: 1A 80 FB 05 75 15 0A FF 75 0A E8 C2 10 8B EC 89  // ....u...u.......
    0650: 46 14 EB 2D E8 8F 10 74 18 EB 26 3C 8E 75 12 80  // F..-...t..&<.u..
    0660: FF 01 74 08 80 FF 02 75 08 80 C1 02 E8 E8 10 EB  // ..t....u........
    0670: 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB  // ....F.......F...
    0680: 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B  // .2....f.f_f^f]f[
    0690: 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3  // fZfYfX...Q......
    06A0: E0 59 C3 E8 46 2B C3 0C 01 C3 50 51 B0 B6 E6 43  // .Y..F+....PQ...C
    06B0: B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61  // .3.B...B.a.....a
    06C0: 8A C4 B9 C8 00 E8 12 27 E6 61 59 58 C3 00 1E 56  // .......'.aYX...V
    06D0: 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E  // ...>...v........
    06E0: 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC  // ........!..3.2..
    06F0: 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00  // .........&!.^...
    0700: 57 0B C0 75 0F E8 2A 0C 74 25 E8 24 00 F6 C3 04  // W..u..*.t%.$....
    0710: 74 F3 EB 11 8B C8 E8 11 25 23 C1 74 12 E8 11 00  // t.......%#.t....
    0720: F6 C3 04 74 0A 5F 8D 5C 28 E8 4C 06 0B F6 C3 5F  // ...t._.\(.L...._
    0730: C3 50 E8 DF 0B E8 63 24 E8 71 24 0A C9 74 69 0A  // .P....c$.q$..ti.
    0740: ED 74 10 8A CD B5 02 E8 13 26 B1 02 8D 9C 48 01  // .t.......&....H.
    0750: E8 90 29 E8 76 02 F6 C3 04 74 08 E8 F2 0C E8 D4  // ..).v....t......
    0760: 22 74 45 8D 5C 28 E8 69 00 56 83 C6 08 E8 A0 22  // "tE.\(.i.V....."
    0770: 5E 80 FD 02 75 11 51 E8 00 18 59 80 FB 00 75 4D  // ^...u.Q...Y...uM
    0780: 51 B5 08 E8 E8 05 59 8A DD 33 C9 E8 F1 16 0A C0  // Q.....Y..3......
    0790: 75 3B E8 37 02 8A EB 8D 5C 28 80 CD 02 E8 3B 00  // u;.7....\(....;.
    07A0: 74 03 80 CD 04 E8 C6 05 8D 9C A6 00 E8 90 29 0A  // t.............).
    07B0: C0 74 1A 56 83 C6 08 E8 56 22 5E 8A DD B9 80 00  // .t.V....V"^.....
    07C0: E8 BC 16 E8 D8 04 74 05 33 C9 E8 A1 05 E8 FC 01  // ......t.3.......
    07D0: 58 C3 51 B9 49 00 E8 B0 25 59 C3 51 E8 1A 00 75  // X.Q.I...%Y.Q...u
    07E0: 14 E8 B9 01 3C 01 75 0D B9 20 00 E8 27 00 75 05  // ....<.u.. ..'.u.
    07F0: 80 C9 01 EB 02 33 C9 59 C3 53 E8 42 29 66 3D 00  // .....3.Y.S.B)f=.
    0800: FF FF FF 75 0E 83 C3 04 E8 34 29 66 3D FF FF FF  // ...u.....4)f=...
    0810: 00 75 00 5B C3 50 52 32 D2 E8 23 29 02 D0 02 D4  // .u.[.PR2..#)....
    0820: 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2 5A  // f..............Z
    0830: 58 C3 E8 DF 0A 8D 9C 4C 01 E8 39 01 E8 8D 01 B5  // X......L..9.....
    0840: 13 F6 C3 08 75 0C E8 07 0C 8A EA 80 FD 13 75 02  // ....u.........u.
    0850: B5 03 66 50 8D 9C B8 02 66 33 C0 8A C5 E8 3F 28  // ..fP....f3....?(
    0860: 66 58 A9 C8 0E 74 55 E8 62 01 F6 C3 08 74 0F E8  // fX...tU.b....t..
    0870: 0F 05 8D 5C 28 E8 04 01 75 04 E8 72 00 C3 B5 02  // ...\(...u..r....
    0880: E8 23 01 E8 46 01 F6 C3 04 74 21 8D 5C 28 E8 49  // .#..F....t!.\(.I
    0890: 01 E8 94 03 74 05 B5 03 E8 0B 01 E8 68 04 E8 21  // ....t.......h..!
    08A0: 01 80 FD 00 75 48 B5 02 E8 0D 01 C3 8D 9C 68 01  // ....uH........h.
    08B0: B8 00 55 E8 4E 11 B5 02 E8 FD 00 C3 A9 02 00 74  // ..U.N..........t
    08C0: 2D B5 04 E8 E0 00 E8 03 01 F6 C3 08 74 03 E8 B0  // -...........t...
    08D0: 04 8D 9C 68 01 56 E8 36 26 8B F7 E8 68 04 5E E8  // ...h.V.6&...h.^.
    08E0: D3 25 E8 D3 00 8D 5C 28 E8 F3 25 E8 18 04 C3 B5  // .%....\(..%.....
    08F0: 01 E8 B2 00 B5 02 E8 BF 00 E8 D0 00 F6 C3 04 75  // ...............u
    0900: 10 8D 9C 68 01 B8 00 55 E8 F9 10 B5 02 E8 17 00  // ...h...U........
    0910: C3 E8 C6 00 B5 02 8D 5C 28 E8 6E 00 75 02 B5 01  // .......\(.n.u...
    0920: E8 04 00 E8 E0 03 C3 8D 9C B4 02 B1 02 E8 B3 27  // ...............'
    0930: B5 02 E8 83 00 C3 8D 9C 4C 01 E8 38 00 E8 8C 00  // ........L..8....
    0940: F6 C3 04 74 23 8D 5C 28 E8 8F 00 E8 C1 25 8D 9C  // ...t#.\(.....%..
    0950: 68 01 06 0E 07 B9 07 00 E8 68 24 07 E8 63 00 E8  // h........h$..c..
    0960: EE 0A 8D 5C 28 E8 B2 25 8D 5C 28 E8 50 25 B8 02  // ...\(..%.\(.P%..
    0970: 00 E8 BE FE C3 B9 61 00 E8 0E 24 C3 53 81 C3 05  // ......a...$.S...
    0980: 01 E8 BB 27 24 06 3C 02 5B C3 E8 10 00 3D 01 04  // ...'$.<.[....=..
    0990: 75 0A 53 83 C3 18 E8 A6 27 5B A8 01 C3 53 83 C3  // u.S.....'[...S..
    09A0: 12 E8 9B 27 5B C3 8D 9C B4 02 32 C9 E8 34 27 C3  // ...'[.....2..4'.
    09B0: 8D 9C B4 02 E8 88 27 C3 8D 9C B4 02 B1 01 E8 22  // ......'........"
    09C0: 27 C3 8D 9C B4 02 B1 01 E8 30 27 C3 66 50 8D 9C  // '........0'.fP..
    09D0: 48 01 E8 6A 27 8A D8 66 58 C3 55 57 51 B9 08 00  // H..j'..fX.UWQ...
    09E0: BD 00 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 4F 27  // ......+....XN.O'
    09F0: E8 E3 01 E2 EE 8D 5C 4B E8 44 27 B9 03 00 8B D0  // ......\K.D'.....
    0A00: BF 52 0A 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8  // .R..U.t.f.......
    0A10: 8D 26 8B 45 04 8D 9A F8 01 E8 9B 26 83 C5 08 83  // .&.E.......&....
    0A20: C7 08 E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 0E  // .....|^...3.....
    0A30: 27 0B C0 74 09 E8 5D 01 E8 97 00 83 C5 1C 83 C7  // '..t..].........
    0A40: 12 E2 E9 55 32 ED E8 6F FF 8D 5C 28 E8 4E FF 3D  // ...U2..o..\(.N.=
    0A50: 01 04 75 10 83 C3 14 E8 E5 26 24 70 C0 E8 04 8A  // ..u......&$p....
    0A60: E8 E8 54 FF 5D 8D 9C A6 00 E8 D3 26 0A C0 74 46  // ..T.]......&..tF
    0A70: 8D 9C A8 00 E8 C8 26 3C 02 75 3B 66 C1 E8 10 3C  // ......&<.u;f...<
    0A80: 04 72 33 8D 9C A8 00 32 E4 03 D8 8B FB B9 04 00  // .r3....2........
    0A90: 8B DF E8 AA 26 0B C0 74 15 E8 F9 00 A9 80 00 75  // ....&..t.......u
    0AA0: 0D E8 2E 00 83 C5 1C 55 58 83 F8 70 73 08 83 C7  // .......UX..ps...
    0AB0: 12 49 0B C9 75 DA 59 5F 5D C3 20 03 58 02 3C 00  // .I..u.Y_]. .X.<.
    0AC0: 01 00 00 04 00 03 3C 00 00 08 80 02 E0 01 3C 00  // ......<.......<.
    0AD0: 20 00 51 8D 1D E8 67 26 8D 9A 68 01 E8 D8 25 8D  //  .Q...g&..h...%.
    0AE0: 5D 02 E8 5A 26 8D 9A 6A 01 E8 89 00 8D 5D 05 E8  // ]..Z&..j.....]..
    0AF0: 4D 26 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 40 26 8B  // M&..n..|..]..@&.
    0B00: C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE  // ...f............
    0B10: 04 8A EC C0 ED 06 8A FC C0 EF 04 80 E7 03 80 E4  // ................
    0B20: 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A  // ........?.......
    0B30: F4 8B C3 8D 9A 74 01 E8 7D 25 8D 9A 72 01 8B C1  // .....t..}%..r...
    0B40: E8 74 25 8D 9A 76 01 33 C0 8A C6 E8 69 25 8D 9A  // .t%..v.3....i%..
    0B50: 78 01 33 C0 8A C2 E8 5E 25 8D 5D 0C E8 E0 25 8D  // x.3....^%.]...%.
    0B60: 9A 7A 01 E8 0F 00 8D 5D 0F E8 D3 25 8D 9A 7E 01  // .z.....]...%..~.
    0B70: E8 44 25 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80  // .D%Y.....f......
    0B80: E6 0F 8A E8 C0 ED 04 8B C1 E8 2B 25 83 C3 02 8B  // ..........+%....
    0B90: C2 E8 23 25 C3 8D 5D 11 E8 A4 25 8A E0 BA 06 00  // ..#%..]...%.....
    0BA0: C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C  // ...t.........$.<
    0BB0: 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01  // .u...@<.u.......
    0BC0: 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A  // t......t........
    0BD0: 80 01 E8 E2 24 C3 3C 01 74 3D 8B D0 0F B6 C6 24  // ....$.<.t=.....$
    0BE0: 3F 04 3C 8D 9A F8 01 E8 CD 24 0F B6 C2 83 C0 1F  // ?.<......$......
    0BF0: C1 E0 03 8D 9A F4 01 E8 BD 24 0F B6 DE C1 EB 06  // .........$......
    0C00: C1 E3 02 2E F7 A7 B2 0B 2E F7 B7 B0 0B 8D 9A F6  // ................
    0C10: 01 E8 A3 24 83 C5 08 C3 10 00 0A 00 04 00 03 00  // ...$............
    0C20: 05 00 04 00 10 00 09 00 8D 9C A6 00 E8 10 25 0A  // ..............%.
    0C30: C0 74 1F 8D 9C A8 00 51 B1 03 E8 18 00 59 0B DB  // .t.....Q.....Y..
    0C40: 74 10 E8 FA 24 32 C0 66 3D 00 03 0C 00 75 03 0B  // t...$2.f=....u..
    0C50: DB C3 33 DB C3 66 50 52 E8 E4 24 3C 02 75 39 80  // ..3..fPR..$<.u9.
    0C60: FC 03 72 34 66 C1 E8 10 32 E4 3C 04 76 2A 03 C3  // ..r4f...2.<.v*..
    0C70: 8B D0 83 C3 04 3B DA 73 1F E8 C3 24 8A E0 80 E4  // .....;.s...$....
    0C80: E0 C0 EC 05 24 1F 38 CC 74 08 32 E4 FE C0 03 D8  // ....$.8.t.2.....
    0C90: EB E3 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 51 8D  // ....ZfX.3.ZfX.Q.
    0CA0: 9C A6 00 E8 99 24 0A C0 74 1B 8D 9C A8 00 B1 12  // .....$..t.......
    0CB0: E8 18 00 74 10 E8 87 24 66 C1 E8 10 80 E4 07 75  // ...t...$f......u
    0CC0: 04 B0 01 EB 02 32 C0 0A C0 59 C3 66 50 52 E8 6E  // .....2...Y.fPR.n
    0CD0: 24 3C 70 75 2B 66 C1 E8 10 32 E4 83 C3 05 03 C3  // $<pu+f...2......
    0CE0: 8B D0 3B DA 73 1A E8 56 24 38 C8 74 0D 66 C1 E8  // ..;.s..V$8.t.f..
    0CF0: 10 32 E4 83 C0 03 03 D8 EB E8 0B DB 5A 66 58 C3  // .2..........ZfX.
    0D00: 33 DB 5A 66 58 C3 57 66 51 8D 9C 68 01 8B FB 8B  // 3.ZfX.WfQ..h....
    0D10: DF E8 3D 00 0B C9 74 0B 66 8B D1 E8 94 0F 83 C7  // ..=...t.f.......
    0D20: 1C EB EC 66 59 5F C3 50 53 51 B9 07 00 53 8B DA  // ...fY_.PSQ...S..
    0D30: E8 0C 24 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8  // ..$...[t.f......
    0D40: 5C 20 59 5B 58 C3 51 53 B9 07 00 E8 69 20 5B 59  // \ Y[X.QS....i [Y
    0D50: C3 66 50 53 83 C3 06 E8 E5 23 5B 8B C8 66 C1 E1  // .fPS.....#[..f..
    0D60: 10 53 83 C3 02 E8 D7 23 8B C8 5B 66 58 C3 8D 9C  // .S.....#..[fX...
    0D70: 48 01 32 C9 E8 6C 23 C3 57 B9 20 00 E8 44 20 5F  // H.2..l#.W. ..D _
    0D80: C3 E8 83 01 66 8B CA 66 52 E8 C4 06 E8 A6 1C 66  // ....f..fR......f
    0D90: 5A 74 10 E8 3A 06 B3 00 E8 92 19 66 3B CA 73 03  // Zt..:......f;.s.
    0DA0: 66 8B D1 8D 9C D0 03 E8 95 23 0B C0 75 44 8D 9C  // f........#..uD..
    0DB0: 54 02 66 B8 48 3F 00 00 E8 E4 22 B5 01 66 81 FA  // T.f.H?...."..f..
    0DC0: 78 69 00 00 72 25 83 C3 04 66 B8 78 69 00 00 E8  // xi..r%...f.xi...
    0DD0: CD 22 B5 02 66 81 FA F0 D2 00 00 72 0E 83 C3 04  // ."..f......r....
    0DE0: 66 B8 F0 D2 00 00 E8 B6 22 B5 03 B1 03 E8 CF 01  // f.......".......
    0DF0: EB 45 66 B9 08 00 00 00 66 33 D2 53 8D 9C 54 02  // .Ef.....f3.S..T.
    0E00: 8B D3 5B E8 39 23 0B C0 74 22 66 25 FF FF 00 00  // ..[.9#..t"f%....
    0E10: 66 D1 E0 53 8B DA E8 86 22 5B 66 C1 CA 10 FE C2  // f..S...."[f.....
    0E20: 66 C1 CA 10 83 C2 04 83 C3 02 E2 D7 66 C1 CA 10  // f...........f...
    0E30: 8A EA B1 03 E8 88 01 E8 38 06 A8 01 74 3F 8D 9C  // ........8...t?..
    0E40: AE 03 E8 FA 22 3C 00 74 34 E8 CF 05 8A EB E8 5C  // ...."<.t4......\
    0E50: 01 32 ED E8 63 01 E8 A2 05 8D 9C BB 02 E8 DF 22  // .2..c.........."
    0E60: 33 C9 8A C8 E8 28 01 66 3B C2 74 0E 51 E8 43 01  // 3....(.f;.t.Q.C.
    0E70: FE C5 E8 44 01 59 E2 EC EB 03 B3 00 C3 8D 9C BB  // ...D.Y..........
    0E80: 02 E8 BB 22 FE C8 8A E8 E8 2E 01 8D 9C 40 03 B9  // ...".........@..
    0E90: 00 00 E8 4E 22 E8 C2 02 E8 D2 00 E8 0F 01 66 52  // ...N".........fR
    0EA0: E8 AD 05 E8 8F 1B 66 5A 75 04 B3 00 EB 58 E8 F6  // ......fZu....X..
    0EB0: 00 80 FD 01 77 07 E8 FA 00 0A ED 74 47 E8 1E 03  // ....w......tG...
    0EC0: E8 24 11 80 FB 00 75 1D E8 A7 05 A8 01 74 07 B1  // .$....u......t..
    0ED0: 0D E8 3B 19 EB 30 B5 01 E8 9E 05 E8 21 0F B5 00  // ..;..0......!...
    0EE0: E8 96 05 EB 21 E8 BF 00 80 FD 01 76 07 D0 ED E8  // ....!......v....
    0EF0: BB 00 EB BA E8 76 00 E8 B3 00 E8 B6 00 FE CD E8  // .....v..........
    0F00: B7 00 EB AA B3 08 C3 8D 9C 29 01 E8 31 22 66 33  // .........)..1"f3
    0F10: D2 8A D0 66 B8 8C 0A 00 00 66 F7 E2 E8 31 05 E8  // ...f.....f...1..
    0F20: 13 1B 75 3D 66 50 8D 9C 28 01 E8 12 22 3C 14 66  // ..u=fP..(..."<.f
    0F30: 58 72 2E 66 50 8D 9C D0 03 E8 03 22 0B C0 66 58  // Xr.fP......"..fX
    0F40: 74 1F B9 07 00 8D 9C D0 03 8B C1 D1 E0 03 D8 E8  // t...............
    0F50: ED 21 0B C0 75 02 E2 ED 66 25 FF FF 00 00 66 D1  // .!..u...f%....f.
    0F60: E0 66 0B C0 75 03 B8 48 3F 66 8B D0 C3 8D 9C 2A  // .f..u..H?f.....*
    0F70: 01 E8 CB 21 24 0F 8A E8 0A ED 75 02 B5 01 C3 B5  // ...!$.....u.....
    0F80: 00 8D 9C 31 01 E8 B7 21 A8 01 74 02 B5 01 C3 53  // ...1...!..t....S
    0F90: 51 E8 1F 00 32 E4 8A C5 C1 E0 02 59 8D 9C 54 02  // Q...2......Y..T.
    0FA0: 03 D8 E8 9A 21 5B C3 B1 02 E8 1D 00 C3 B1 02 E8  // ....![..........
    0FB0: 0D 00 C3 B1 01 E8 11 00 C3 B1 01 E8 01 00 C3 53  // ...............S
    0FC0: 8D 9C B8 02 E8 1C 21 5B C3 53 8D 9C B8 02 E8 2A  // ......![.S.....*
    0FD0: 21 5B C3 33 C9 E8 7B 1E 75 3C 66 BA 37 F1 FF FF  // ![.3..{.u<f.7...
    0FE0: 66 33 C0 E8 E0 04 33 C0 E8 47 03 74 1C A9 C8 0E  // f3....3..G.t....
    0FF0: 74 F6 E8 3C F7 F6 C3 04 75 05 F6 C3 18 74 E9 E8  // t..<....u....t..
    1000: 30 00 50 E8 2C F8 58 EB DF E8 1C 00 75 08 E8 31  // 0.P.,.X.....u..1
    1010: 00 8B C1 E8 1C F8 C3 8D 5D 28 66 C1 E3 10 8D 5C  // ........](f....\
    1020: 28 B9 49 00 E8 77 1D C3 66 50 E8 B2 04 8B C8 66  // (.I..w..fP.....f
    1030: 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 87 04 66  // X.fRf.....3....f
    1040: 5A C3 50 53 52 E8 E0 FF 75 09 33 C0 E8 E3 02 8B  // Z.PSR...u.3.....
    1050: C8 EB 10 83 F9 02 74 0B E8 2C 08 80 FB 01 75 03  // ......t..,....u.
    1060: 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF  // ...Z[X.Vf3.f....
    1070: FF E8 4F 07 66 C1 E6 10 E8 C4 02 0B C0 74 03 E8  // ..O.f........t..
    1080: 1C 00 E8 2F 07 5E C3 66 52 66 8B D0 E8 CE 15 8D  // .../.^.fRf......
    1090: 9C 1C 03 E8 A9 20 8A C2 E8 04 20 66 5A C3 50 51  // ..... .... fZ.PQ
    10A0: E8 71 02 50 32 C0 E8 FD 03 E8 CC 01 E8 98 00 8D  // .q.P2...........
    10B0: 9C 40 03 E8 89 20 38 E8 74 0A 8A C5 E8 E0 1F B0  // .@... 8.t.......
    10C0: 02 E8 E2 03 58 E8 CA 00 E8 A8 00 E8 8C 00 8D 9C  // ....X...........
    10D0: 4C 01 E8 6A 20 8B C8 8B D3 8D 9C 00 03 E8 5F 20  // L..j ........._ 
    10E0: 3B C1 74 05 B0 02 E8 BD 03 E8 3B FC 8D 9C 00 03  // ;.t.......;.....
    10F0: E8 47 15 8D 9C D8 02 E8 A5 1F E8 8A FF 66 C1 CE  // .G...........f..
    1100: 10 8B FE 66 C1 CE 10 E8 95 00 E8 D1 00 E8 24 03  // ...f..........$.
    1110: 8A E9 8D 9C DC 02 32 C9 E8 C8 1F E8 0D 03 66 25  // ......2.......f%
    1120: FF 0F 00 00 59 58 66 BA FF FF FF FF 33 D0 E8 92  // ....YXf.....3...
    1130: 06 33 D2 C3 53 66 50 8D 9C D4 02 E8 01 20 8A C4  // .3..SfP...... ..
    1140: E8 5C 1F 66 58 5B C3 53 66 50 8D 9C D4 02 E8 EE  // .\.fX[.SfP......
    1150: 1F 8A E0 E8 49 1F 66 58 5B C3 E8 73 02 E8 2E 02  // ....I.fX[..s....
    1160: 8A DD E8 8F 16 8A E9 8D 9C 3C 03 32 C9 E8 73 1F  // .........<.2..s.
    1170: 0B DB C3 83 EC 08 8B EC E8 55 02 E8 10 02 E8 15  // .........U......
    1180: 16 8D 9C 4C 03 E8 B7 1F 8A 46 00 E8 11 1F 83 C4  // ...L.....F......
    1190: 08 C3 8D 9C D4 02 E8 A6 1F 32 C0 E8 01 1F C3 E8  // .........2......
    11A0: 0A 00 8D 9C D0 02 32 C9 E8 38 1F C3 B5 00 8D 1D  // ......2..8......
    11B0: E8 8C 1F 66 8B D0 8D 9C 02 03 E8 82 1F 0B C0 74  // ...f...........t
    11C0: 1C 51 8B C8 8D 9C 06 03 E8 74 1F 66 C1 E0 10 8B  // .Q.......t.f....
    11D0: C1 59 66 3B C2 75 04 B5 00 EB 02 B5 02 C3 E8 2B  // .Yf;.u.........+
    11E0: 02 8D 9C 40 03 B1 03 E8 F9 1E E8 D5 F7 8D 9C 40  // ...@...........@
    11F0: 03 B1 02 E8 ED 1E E8 95 01 80 FD 00 75 14 E8 A6  // ............u...
    1200: FD E8 8B 02 E8 88 FD 66 8B D0 E8 77 02 E8 8B 02  // .......f...w....
    1210: EB 21 E8 4A 02 E8 6C 02 E8 73 01 80 FD 02 B5 04  // .!.J..l..s......
    1220: 75 0B 81 FA 74 40 76 05 B5 08 66 D1 EA E8 6B 02  // u...t@v...f...k.
    1230: E8 5C 02 E8 2B 00 C3 66 52 52 32 ED 83 C1 02 B8  // .\..+..fRR2.....
    1240: 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 8B C2 8A CF  // ....f3...ZQf....
    1250: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
    1260: C3 B5 00 E8 EA 01 E8 C8 17 75 03 E8 11 FD 8D 9C  // .........u......
    1270: 48 03 32 C9 E8 6C 1E C3 53 E8 5F 01 66 C1 E2 10  // H.2..l..S._.f...
    1280: E8 4D 01 8D 9C B8 02 E8 B5 1E 8A E8 8D 9C B4 02  // .M..............
    1290: E8 AC 1E 8A C8 E8 B6 14 8A EB 5B C3 57 53 53 E8  // ..........[.WSS.
    12A0: D6 FF E8 2B 01 5B E8 1B 15 74 66 80 FD 00 75 29  // ...+.[...tf...u)
    12B0: 53 E8 DB FC 66 8B D0 E8 08 F7 8A CD 51 E8 E7 FC  // S...f.......Q...
    12C0: 8A FD 59 E8 71 FF 5B E8 75 1E 66 25 FF FF 00 00  // ..Y.q.[.u.f%....
    12D0: 66 3B C8 73 39 32 DB EB 38 80 FD 02 75 16 E8 6F  // f;.s92..8...u..o
    12E0: 01 E8 5E 17 74 28 8D 1F E8 54 1E 3D 74 40 76 1E  // ..^.t(...T.=t@v.
    12F0: 32 DB EB 1D 80 FD 03 75 15 53 E8 D3 00 B3 03 E8  // 2......u.S......
    1300: 2B 14 5B E8 39 1E 3B C2 76 04 32 DB EB 03 80 CB  // +.[.9.;.v.2.....
    1310: 01 5B 5F C3 53 8B F0 E8 10 19 23 F0 74 09 8B C6  // .[_.S.....#.t...
    1320: E8 AF 17 8B F3 0B DB 5B C3 51 E8 15 FD E8 0F 00  // .......[.Q......
    1330: 59 C3 51 50 E8 F3 18 8B C8 58 E8 02 00 59 C3 57  // Y.QP.....X...Y.W
    1340: 53 E8 24 19 0B C0 74 09 8B 1D 83 C7 02 3B C3 75  // S.$...t......;.u
    1350: F7 8B 1D 83 FB FF 74 0B 83 C7 02 85 D9 74 F2 8B  // ......t......t..
    1360: C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74  // ...3...[_.3....t
    1370: 13 E8 A0 FF 8B DE B9 FB 00 E8 0D 1A 83 C6 08 E8  // ................
    1380: 58 18 EB E8 BB F0 16 B8 5A A5 E8 2A 1D C3 53 66  // X.......Z..*..Sf
    1390: 50 8D 9C 40 03 E8 A7 1D 8A E8 66 58 5B C3 8D 9C  // P..@......fX[...
    13A0: 69 03 E8 9A 1D C3 8D 9C 64 03 E8 92 1D 0B C0 C3  // i.......d.......
    13B0: 53 66 50 8D 9C D4 02 E8 85 1D 8A C8 66 58 5B C3  // SfP.........fX[.
    13C0: 53 66 50 8D 9C D5 02 E8 75 1D 8A C8 66 58 5B C3  // SfP.....u...fX[.
    13D0: 53 8D 5C 14 E8 68 1D 8B D0 5B C3 53 66 50 8D 5C  // S.\..h...[.SfP.\
    13E0: 16 E8 5B 1D 8B D0 66 58 5B C3 53 66 50 8D 9C 50  // ..[...fX[.SfP..P
    13F0: 03 E8 4B 1D 66 8B D0 66 58 5B C3 53 66 50 8D 9C  // ..K.f..fX[.SfP..
    1400: 54 03 E8 3A 1D 66 8B D0 66 58 5B C3 53 66 50 8D  // T..:.f..fX[.SfP.
    1410: 5C 10 E8 2A 1D 8B C8 66 58 5B C3 66 50 53 8D 9C  // \..*...fX[.fPS..
    1420: 41 03 E8 1A 1D 5B 8A D8 66 58 C3 53 8D 5C 08 E8  // A....[..fX.S.\..
    1430: 0D 1D 5B C3 53 50 8D 9C 4C 03 E8 02 1D 8A C8 58  // ..[.SP..L......X
    1440: 5B C3 53 50 8D 9C 4D 03 E8 F4 1C 8A C8 58 5B C3  // [.SP..M......X[.
    1450: 53 66 50 8D 5C 0C E8 E6 1C 8B D0 66 58 5B C3 53  // SfP.\......fX[.S
    1460: 66 50 8D 9C 00 03 E8 D6 1C 66 33 D2 8B D0 66 58  // fP.......f3...fX
    1470: 5B C3 8D 5C 04 E8 C7 1C C3 51 8D 5C 04 32 C9 E8  // [..\.....Q.\.2..
    1480: 61 1C 59 C3 8D 9C 50 03 66 8B C2 E8 11 1C C3 53  // a.Y...P.f......S
    1490: 8D 9C 40 03 B1 01 E8 4A 1C 5B C3 8D 9C 54 03 66  // ..@....J.[...T.f
    14A0: 8B C2 E8 FA 1B C3 53 51 8A E8 E8 C5 FF 24 FD 0A  // ......SQ.....$..
    14B0: E8 E8 C5 FF 59 5B C3 66 50 8D 9C D8 02 E8 7F 1C  // ....Y[.fP.......
    14C0: 66 8B D0 66 58 C3 53 66 50 51 66 8B C8 BB 00 00  // f..fX.SfPQf.....
    14D0: E8 E0 15 23 C2 0B C1 E8 E2 15 59 66 58 5B C3 BB  // ...#......YfX[..
    14E0: 00 00 E8 CE 15 66 25 CA 0E 00 00 C3 E8 58 18 E8  // .....f%......X..
    14F0: E7 17 E8 C5 17 75 06 E8 42 17 E8 C9 17 C3 B0 01  // .....u..B.......
    1500: C3 55 B3 01 E8 2C 1A 5D C3 66 53 66 BB 04 00 00  // .U...,.].fSf....
    1510: 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3 10 BB 00  // ....3.f[.Uf.....
    1520: 00 E8 0F 1A 5D C3 E8 17 19 BB 0A 00 E8 8D 15 C3  // ....]...........
    1530: BB 0A 00 E8 7D 15 66 8B C8 E8 04 19 BB 0A 00 66  // ....}.f........f
    1540: 2B C1 E8 77 15 C3 E8 29 00 0B C9 74 22 E8 17 FB  // +..w...)...t"...
    1550: E8 24 07 66 51 66 8B C8 BB 07 00 E8 55 15 66 25  // .$.fQf......U.f%
    1560: 00 FE 00 00 66 0B C1 E8 52 15 66 59 0C 01 C3 32  // ....f...R.fY...2
    1570: C0 C3 E8 6B 02 0B C9 75 06 E8 C6 FA E8 71 02 51  // ...k...u.....q.Q
    1580: E8 BF FA 66 C1 E6 10 33 C0 E8 9D FD 74 09 E8 09  // ...f...3....t...
    1590: 03 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3 A8  // .u.3...X#.f.....
    15A0: 10 75 63 E8 E3 06 66 C1 E6 10 33 C0 E8 83 FD 74  // .uc...f...3....t
    15B0: 35 E8 60 FD 50 51 8B C8 E8 F9 01 85 C1 59 58 74  // 5.`.PQ.......YXt
    15C0: 0D 50 E8 AD FE 24 03 3C 03 58 75 E0 EB 0C 50 E8  // .P...$.<.Xu...P.
    15D0: A0 FE A8 01 58 74 D5 E8 6D FB 50 E8 CC 07 58 B5  // ....Xt..m.P...X.
    15E0: 00 E8 95 FE EB C6 E8 CB 01 E8 28 FD E8 34 01 B1  // ..........(..4..
    15F0: 00 E8 40 07 66 C1 EE 10 E8 87 06 A8 20 75 42 A8  // ..@.f....... uB.
    1600: 40 75 03 E8 0E 0E E8 6E 06 0A C0 75 07 32 C9 B5  // @u.....n...u.2..
    1610: 01 E8 B1 0E E8 9D 01 E8 FA FC E8 33 FE E8 15 14  // ...........3....
    1620: 75 14 E8 62 02 0A DB 74 0D E8 1B FB E8 7B 07 B5  // u..b...t.....{..
    1630: 00 E8 45 FE EB 08 E8 58 07 B5 01 E8 3B FE E8 E6  // ..E....X....;...
    1640: 00 C3 E8 E5 15 C3 E8 21 FD E8 9F 06 33 C9 E8 9F  // .......!....3...
    1650: 01 66 33 D2 66 33 C0 E8 6C FE E8 52 00 B1 FF E8  // .f3.f3..l..R....
    1660: 84 00 33 C0 E8 CB FC 74 0A E8 A8 FC 50 E8 C4 07  // ..3....t....P...
    1670: 58 EB F1 32 C9 E8 C4 01 E8 AF 15 0B C0 C3 E8 E9  // X..2............
    1680: FC E8 67 06 66 33 C0 66 BA 00 F0 FF FF E8 33 01  // ..g.f3.f......3.
    1690: 51 B1 01 E8 8C 01 59 33 C0 E8 96 FC 74 0A E8 73  // Q.....Y3....t..s
    16A0: FC 50 E8 5A 07 58 EB F1 E8 A6 0D E8 7E 16 C3 B8  // .P.Z.X......~...
    16B0: 02 00 E8 5F FC 74 2E B1 07 E8 C9 11 B8 02 00 E8  // ..._.t..........
    16C0: 6F F0 F6 C3 04 75 12 E8 45 18 83 3D 00 75 0A E8  // o....u..E..=.u..
    16D0: 58 15 83 E0 FD E8 5B 15 C3 66 B8 02 00 00 00 E8  // X.....[..f......
    16E0: E4 FD E8 51 F2 C3 E8 DC 13 74 23 38 E1 76 04 8A  // ...Q.....t#8.v..
    16F0: CC EB 06 38 C1 73 02 8A C8 BB 02 00 E8 B4 13 8A  // ...8.s..........
    1700: E1 E8 B8 13 B1 04 E8 7C 11 0C 01 C3 0C 01 C3 51  // .......|.......Q
    1710: E8 B2 13 74 0C 8A CC BB 02 00 E8 96 13 8A C4 8A  // ...t............
    1720: E1 59 C3 E8 F0 05 C3 E8 FB 05 C3 E8 25 17 75 18  // .Y..........%.u.
    1730: E8 81 00 E8 DE FB 80 F9 01 75 0E 51 E8 52 06 B5  // .........u.Q.R..
    1740: 01 E8 35 FD 59 E8 DF FF C3 E8 D7 FF 51 E8 AF 06  // ..5.Y.......Q...
    1750: B5 00 E8 24 FD 59 C3 B8 02 00 E8 B7 FB 74 03 E8  // ...$.Y.......t..
    1760: 23 11 C3 E8 B0 04 3B C1 7C 3A 8B C1 E8 F0 04 E8  // #.....;.|:......
    1770: B9 0E 8B C8 51 E8 20 05 E8 E4 04 59 E8 AC 0E 3B  // ....Q. ....Y...;
    1780: C8 72 02 8B C1 8D 5C 04 E8 2C 19 32 C9 B5 0F E8  // .r....\..,.2....
    1790: F7 0C E8 EB 15 FE C1 38 C1 72 F2 8D 5C 04 E8 9E  // .......8.r..\...
    17A0: 19 0B C0 C3 33 C0 C3 BB 00 18 33 C0 8A C2 C1 E0  // ....3.....3.....
    17B0: 02 03 D8 C3 53 BB 03 00 E8 F8 12 66 25 FF 0F 00  // ....S......f%...
    17C0: 00 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 E2  // .[.SfPfQf.......
    17D0: 12 66 23 C2 66 0B C1 E8 E2 12 66 59 66 58 5B C3  // .f#.f.....fYfX[.
    17E0: 66 50 BB 05 00 E8 CB 12 25 FF 0F 8B C8 66 58 C3  // fP......%....fX.
    17F0: E8 37 14 23 C8 66 50 BB 05 00 E8 B6 12 25 00 F0  // .7.#.fP......%..
    1800: 0B C1 E8 B7 12 66 58 C3 66 50 53 BB 06 00 E8 A2  // .....fX.fPS.....
    1810: 12 A8 10 75 09 BB F0 16 E8 24 19 3D 5A A5 5B 66  // ...u.....$.=Z.[f
    1820: 58 C3 66 50 53 BB 06 00 E8 88 12 80 F1 01 C0 E1  // X.fPS...........
    1830: 04 24 EF 0A C1 E8 84 12 5B 66 58 C3 53 66 50 BB  // .$......[fX.SfP.
    1840: F8 16 E8 FA 18 8A C1 E8 55 18 66 58 5B C3 53 BB  // ........U.fX[.S.
    1850: F8 16 E8 EA 18 83 E0 01 5B C3 53 66 50 BB 07 00  // ........[.SfP...
    1860: E8 50 12 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3  // .P....fX..t...[.
    1870: 53 BB 07 00 E8 3C 12 80 E4 FE 80 FD 06 74 03 80  // S....<.......t..
    1880: CC 01 E8 37 12 5B C3 66 50 BB 06 00 E8 24 12 24  // ...7.[.fP....$.$
    1890: 40 C0 E8 06 8A D8 66 58 C3 C3 50 66 51 E8 74 FA  // @.....fX..PfQ.t.
    18A0: 83 EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC  // .....f3.f.F.3...
    18B0: 68 01 8D 1D E8 88 18 0B C0 74 22 8B DF B0 00 E8  // h........t".....
    18C0: 12 01 74 14 8B DF E8 88 F4 66 8B 46 00 66 3B C8  // ..t......f.F.f;.
    18D0: 72 06 8B D7 66 89 4E 00 83 C7 1C EB D5 0B D2 74  // r...f.N........t
    18E0: 0A 8D 9C 4C 01 E8 3F F4 E9 88 00 66 33 C0 66 89  // ...L..?....f3.f.
    18F0: 46 00 8D BC F4 01 33 D2 8D 1D E8 42 18 0B C0 74  // F.....3....B...t
    1900: 58 66 50 E8 AA F0 3C 01 66 58 74 05 3D 40 06 73  // XfP...<.fXt.=@.s
    1910: 43 66 52 66 8B D0 8D 5D 04 E8 23 18 E8 5D 00 8B  // CfRf...]..#..]..
    1920: CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1 E8 17 F4 5E  // .fZt/V..L......^
    1930: B0 00 E8 9F 00 74 1D 8D 1D E8 03 18 8B D9 8B 47  // .....t.........G
    1940: 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B D1  // .f....G.f;F.r...
    1950: 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C  // f.F........t.V..
    1960: 4C 01 8B F2 E8 DF F3 5E 53 8D 9C 62 01 33 C0 E8  // L......^S..b.3..
    1970: 45 17 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8  // E.[.....fYX.WSQ.
    1980: 04 13 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA  // ..;U.u.f.....f..
    1990: 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83  // .;].u...t.:E.t..
    19A0: C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3  // ....3.......Y[_.
    19B0: 51 66 52 E8 D0 12 3A 65 1A 75 09 0A C0 74 0E 3A  // QfR...:e.u...t.:
    19C0: 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66  // E.t......3.....f
    19D0: 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B DE  // ZY..fQfRSSf.....
    19E0: 66 C1 CE 10 E8 58 17 5B 66 8B D0 E8 63 F3 3B CA  // f....X.[f...c.;.
    19F0: 72 0A 66 3B CA 72 05 E8 A2 F8 75 02 32 C0 5B 66  // r.f;.r....u.2.[f
    1A00: 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 38 F3 5F 5E  // ZfY.VW......8._^
    1A10: C3 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8  // .fPSfQRWVQ......
    1A20: 67 13 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 6E  // g.Y.\...f......n
    1A30: 16 F6 C2 03 75 24 8B C1 24 7F BF F4 1A 80 3D FF  // ....u$..$.....=.
    1A40: 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05  // ....:.u.f.E.f...
    1A50: 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B  // .............t%.
    1A60: C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0  // ..p.....3.......
    1A70: 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8  // u..\.f%....f....
    1A80: 1D 16 EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2  // ................
    1A90: F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25  // ........pr*..us%
    1AA0: 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8  // ..p..2.P.0...X8.
    1AB0: 72 05 33 C0 E9 9C 00 E8 28 02 E8 82 16 0B C0 0F  // r.3.....(.......
    1AC0: 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C  // .....2.........\
    1AD0: 16 8B 05 E8 E1 15 8B 45 06 66 C1 E0 10 8B 45 02  // .......E.f....E.
    1AE0: 50 E8 47 0B 66 C1 E1 10 8B C8 58 8D 1C E8 AF 15  // P.G.f.....X.....
    1AF0: 66 50 8D 5C 04 66 8B C1 E8 A4 15 66 58 66 C1 E8  // fP.\.f.....fXf..
    1B00: 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06  // .f......f..fP.\.
    1B10: E8 2C 16 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D  // .,...fXf..f...@.
    1B20: 5C 14 E8 92 15 BF 54 1B 83 F9 01 74 11 BF 5C 1B  // \.....T....t..\.
    1B30: 81 F9 01 01 74 08 BF 64 1B 83 F9 02 75 15 8D 5C  // ....t..d....u..\
    1B40: 0C 66 8B 05 E8 58 15 8D 5C 10 66 8B 45 04 E8 4E  // .f...X..\.f.E..N
    1B50: 15 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90  // ...^_ZfY[fX..@..
    1B60: 01 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01  // ..@.............
    1B70: 04 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07  // .@....@.........
    1B80: D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80  // ..^..@..........
    1B90: 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02  // .^....^.........
    1BA0: E0 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0  // .......# ...2 ..
    1BB0: 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05  // .3 ...b.........
    1BC0: 05 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08  // ................
    1BD0: 08 00 00 00 56 E8 CE 12 80 E4 01 3B 04 74 09 83  // ....V......;.t..
    1BE0: C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57  // ....3....D...^.W
    1BF0: 53 50 E8 B1 12 83 E9 0A E8 E0 00 83 F8 05 76 03  // SP............v.
    1C00: B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF  // ................
    1C10: FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77  // ..X[_.fSQfR.A..w
    1C20: 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66  // .f...f...f.....f
    1C30: D3 E8 66 33 D2 66 F7 F3 E8 F0 09 66 5A 59 66 5B  // ..f3.f.....fZYf[
    1C40: C3 53 66 50 BB 07 00 E8 69 0E 0A C0 66 58 5B C3  // .SfP....i...fX[.
    1C50: 53 66 50 BB 07 00 E8 5A 0E A8 01 66 58 5B C3 53  // SfP....Z...fX[.S
    1C60: 66 50 8D 5C 06 E8 D7 14 8A C8 66 58 5B C3 51 B9  // fP.\......fX[.Q.
    1C70: 08 00 E8 29 11 59 C3 53 8D 5C 08 E8 C1 14 24 03  // ...).Y.S.\....$.
    1C80: 5B C3 8D 5C 09 E8 B7 14 C3 51 53 B1 01 8A E8 8D  // [..\.....QS.....
    1C90: 5C 08 E8 4E 14 5B 59 C3 53 8D 1C E8 A1 14 5B C3  // \..N.[Y.S.....[.
    1CA0: 53 8D 5C 04 E8 98 14 5B C3 53 8D 5C 16 E8 8F 14  // S.\....[.S.\....
    1CB0: 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34  // [.SfR3....fZu..4
    1CC0: 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 D0 13 48  // .t....@...s....H
    1CD0: E8 0F 00 66 8B C2 E8 C6 13 5B C3 BB 00 1E E8 5E  // ...f.....[.....^
    1CE0: 14 C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32  // ...............2
    1CF0: 00 E8 95 10 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB  // .....Q.....t....
    1D00: 08 1E E8 3A 14 66 3B C2 74 07 83 C3 08 E2 F3 0B  // ...:.f;.t.......
    1D10: DB 59 C3 C3 C3 00 BB 20 DF E8 E3 33 E8 91 F6 B5  // .Y..... ...3....
    1D20: 01 E8 E5 07 C3 BB 00 DF E8 D4 33 E8 82 F6 B5 00  // ..........3.....
    1D30: E8 D6 07 C3 80 F9 00 75 0A E8 4A 10 8A C8 B5 02  // .......u..J.....
    1D40: E8 1D 09 0B F6 74 2E E8 66 F6 B5 01 51 E8 C0 07  // .....t..f...Q...
    1D50: 59 E8 C3 07 56 33 F6 B5 00 E8 2D 07 5E B5 01 E8  // Y...V3....-.^...
    1D60: D2 F6 E8 FB 08 E8 C4 09 E8 45 F6 8D 9C 00 03 E8  // .........E......
    1D70: AC 07 E8 F5 07 66 C1 CE 10 B5 01 E8 0B 07 E8 01  // .....f..........
    1D80: FF A8 40 75 07 32 C0 B5 01 E8 7E 08 66 C1 CE 10  // ..@u.2....~.f...
    1D90: C3 E8 1C F6 B5 01 E8 4B 07 B5 00 E8 79 07 E8 DC  // .......K....y...
    1DA0: 07 B1 0F E8 69 0A E8 26 00 C3 E8 52 00 E8 10 F6  // ....i..&...R....
    1DB0: B5 00 E8 2F 07 B5 00 E8 5D 07 E8 85 F6 E8 C6 0F  // .../....].......
    1DC0: 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8 92 08 C3 B1  // 8.t....t........
    1DD0: 10 E8 3B 0A E8 B7 F5 80 FD 00 74 06 B1 01 E8 A4  // ..;.......t.....
    1DE0: 0A C3 E8 A6 05 80 FD 01 75 07 B5 02 E8 D5 05 EB  // ........u.......
    1DF0: 03 E8 F3 01 B1 0D E8 16 0A B1 03 E8 54 00 C3 E8  // ............T...
    1E00: D9 F5 0B D2 74 05 B1 00 E8 42 0A B1 02 E8 42 00  // ....t....B....B.
    1E10: E8 5F F6 A8 01 74 12 E8 74 F5 80 FD 00 75 0A B1  // ._...t..t....u..
    1E20: 0C E8 EB 09 B0 02 E8 91 04 B1 00 E8 57 0A B1 0D  // ............W...
    1E30: E8 1F 00 C3 B1 07 E8 4C 0A E8 9F F5 0B D2 75 0C  // .......L......u.
    1E40: E8 0D F6 E8 EB 0B 75 09 E8 F2 0A C3 B1 07 E8 FC  // ......u.........
    1E50: 09 C3 E8 FB F5 E8 D9 0B 75 24 51 E8 27 0A 59 80  // ........u$Q.'.Y.
    1E60: F9 0C 75 1A 33 D2 56 83 C6 08 E8 02 0C 5E 0A C0  // ..u.3.V......^..
    1E70: 75 0C B9 0A 00 E8 62 0F 42 83 FA 1E 75 E8 C3 80  // u.....b.B...u...
    1E80: FB 01 0F 84 C5 00 E8 A5 05 66 C1 E1 10 8D 9C 35  // .........f.....5
    1E90: 01 E8 AB 12 A8 01 74 05 51 E8 2B 04 59 E8 6C F5  // ......t.Q.+.Y.l.
    1EA0: B0 04 E8 9C 05 66 BA 50 01 40 50 E8 76 05 E8 B8  // .....f.P.@P.v...
    1EB0: 0A 75 7E 66 BA 50 01 50 4F 8D 9C 2D 01 E8 7F 12  // .u~f.P.PO..-....
    1EC0: 24 06 3C 02 75 02 B6 02 B0 05 E8 74 05 E8 54 05  // $.<.u......t..T.
    1ED0: 8D 5C 28 03 D8 E8 91 0A 75 57 0A FF 75 09 B0 0A  // .\(.....uW..u...
    1EE0: E8 5E 05 32 DB EB 4A 51 33 C9 8A CF E8 35 05 03  // .^.2..JQ3....5..
    1EF0: C8 E8 3A 05 59 B0 07 E8 47 05 66 BA 50 01 10 30  // ..:.Y...G.f.P..0
    1F00: 33 DB E8 64 0A 74 0F 51 8A EB 8D 9C 44 01 B1 02  // 3..d.t.Q....D...
    1F10: E8 D0 11 59 EB 61 E8 0B 05 66 C1 C9 10 2B C1 66  // ...Y.a...f...+.f
    1F20: C1 C1 10 3D 80 00 0F 82 76 FF B0 08 E8 12 05 EB  // ...=....v.......
    1F30: 43 51 8A EB 8D 9C 44 01 B1 02 E8 A6 11 59 66 BA  // CQ....D......Yf.
    1F40: 50 01 10 30 33 DB E8 20 0A EB 2C 8D 5C 28 03 D9  // P..03.. ..,.\(..
    1F50: 53 8A E9 B1 32 51 5F E8 B2 F4 8A E9 B1 A0 BA 00  // S...2Q_.........
    1F60: 80 E8 DA 09 80 FF 01 5B 74 0A B1 A2 E8 CF 09 80  // .......[t.......
    1F70: FF 01 75 03 B0 00 C3 B0 01 C3 51 B1 0C E8 D2 FE  // ..u.......Q.....
    1F80: 59 B0 01 E8 BB 04 56 83 C6 08 E8 E2 0A 5E 0A C0  // Y.....V......^..
    1F90: 75 04 B3 10 EB 3F B0 02 E8 A6 04 E8 38 00 74 11  // u....?......8.t.
    1FA0: B0 03 E8 9C 04 B0 01 E8 10 03 75 29 E8 27 00 75  // ..........u).'.u
    1FB0: 24 66 BA 0C 00 90 43 8D 9C 30 01 E8 AB 09 66 BA  // $f....C..0....f.
    1FC0: 20 00 90 41 8D 9C 34 01 E8 9E 09 E8 BD 03 B0 09  //  ..A..4.........
    1FD0: E8 6E 04 33 DB C3 E8 33 F4 66 BA 00 00 90 47 8D  // .n.3...3.f....G.
    1FE0: 9C 28 01 E8 83 09 C3 B1 0C E8 66 FE B1 00 E8 94  // .(........f.....
    1FF0: 08 B1 01 E8 8F 08 8D 9C AC 03 66 B8 00 00 00 00  // ..........f.....
    2000: E8 9C 10 B0 01 E8 B2 02 74 0A B5 04 E8 CB 03 B3  // ........t.......
    2010: 08 E9 3F 01 B1 08 E8 F6 07 E8 D2 02 B1 09 E8 EE  // ..?.............
    2020: 07 E8 C5 01 8D 9C B8 03 66 33 C0 E8 71 10 E8 60  // ........f3..q..`
    2030: 01 B9 90 01 E8 98 0D B0 01 E8 63 02 B5 02 E8 8D  // ..........c.....
    2040: 03 E8 74 01 E8 9F 03 E8 E0 01 B5 03 E8 7F 03 33  // ..t............3
    2050: C9 E8 00 01 F6 C5 01 75 34 B5 02 E8 70 03 E8 20  // .......u4...p.. 
    2060: 01 F6 C5 04 74 08 B5 01 E8 6F 03 E9 CC 00 8A FD  // ....t....o......
    2070: 80 E7 03 E8 E8 00 80 E3 03 38 FB 75 0D E8 4C 01  // .........8.u..L.
    2080: 75 08 B5 02 E8 53 03 E9 B0 00 E8 67 01 FE C1 E8  // u....S.....g....
    2090: 89 F3 38 D9 75 BB 8D 9C AC 03 E8 A2 10 3C 03 74  // ..8.u........<.t
    20A0: 05 E8 ED 00 EB 9B 8D 9C B0 03 66 33 C0 E8 EF 0F  // ..........f3....
    20B0: 8D 9C 2A 01 E8 88 10 A8 40 74 0C B1 13 E8 4F 07  // ..*.....@t....O.
    20C0: B0 03 E8 DA 01 EB 0A B1 0A E8 43 07 B0 02 E8 CE  // ..........C.....
    20D0: 01 B5 04 E8 F8 02 E8 DF 00 E8 0A 03 E8 4B 01 B5  // .............K..
    20E0: 05 E8 EA 02 33 C9 E8 6B 00 80 FD 07 75 05 E8 86  // ....3..k....u...
    20F0: 00 75 2E 51 B5 04 E8 D5 02 59 F6 C5 01 75 07 B5  // .u.Q.....Y...u..
    2100: 03 E8 D6 02 EB 34 E8 78 00 8A D5 E8 E6 00 E8 70  // .....4.x.......p
    2110: 00 38 EA 75 0C E8 B4 00 75 07 B5 02 E8 BB 02 EB  // .8.u....u.......
    2120: 19 FE C1 E8 F5 F2 38 D9 75 BC 8D 9C AC 03 E8 0E  // ......8.u.......
    2130: 10 3C 04 75 05 E8 59 00 EB 9C B0 00 E8 60 01 B1  // .<.u..Y......`..
    2140: 0B E8 CB 06 8D 9C AD 03 E8 F4 0F B3 00 0A C0 74  // ...............t
    2150: 02 B3 08 C3 8D 9C C0 03 E8 0F 00 8A E8 C3 53 8D  // ..............S.
    2160: 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 D1 0F C0 E1  // ......[...Q.....
    2170: 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 C1 0F A8 01  // ...$.Y..........
    2180: C3 8D 9C B8 03 E8 73 0F C3 8D 9C B8 03 E8 53 0F  // ......s.......S.
    2190: C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A D5 FE C1  // .3.3....8.v.....
    21A0: E8 78 F2 38 D9 72 EE 33 C9 8A EA 8D 9C 5C 03 E8  // .x.8.r.3.....\..
    21B0: 31 0F B1 0B E8 CE 06 C3 E8 51 F2 8D 9C B8 03 E8  // 1........Q......
    21C0: 7D 0F 66 BA 03 01 80 83 E8 9E 07 C3 51 53 8D 9C  // }.f.........QS..
    21D0: B0 03 E8 26 0F FE C5 E8 09 0F 80 FD 06 72 07 B5  // ...&.........r..
    21E0: 02 E8 F6 01 33 C9 5B 59 C3 66 33 C0 8D 9C B0 03  // ....3.[Y.f3.....
    21F0: E8 AC 0E C3 32 ED E8 65 FF 80 E3 0C C0 EB 02 B7  // ....2..e........
    2200: 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03 80 CD 20  // .*.........r... 
    2210: E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80 FB 03 75  // .K....8.r......u
    2220: 03 80 CD 04 0A EB E8 60 FF C3 E8 DF F1 8D 9C C0  // .......`........
    2230: 03 66 BA 02 02 90 45 E8 2F 07 C3 E8 CE F1 66 BA  // .f....E./.....f.
    2240: 00 01 90 42 8D 9C B4 03 E8 1E 07 E8 BE F1 66 BA  // ...B..........f.
    2250: 03 01 90 45 8D 9C B8 03 E8 0E 07 E8 F2 F1 E8 D4  // ...E............
    2260: 07 75 3B E8 A6 F1 66 BA 0A 01 90 40 8D 9C BF 03  // .u;...f....@....
    2270: E8 F6 06 8D 9C 28 01 E8 C5 0E 3C 14 72 20 E8 8B  // .....(....<.r ..
    2280: F1 66 BA 10 00 90 4F 8D 9C D0 03 E8 DB 06 E8 7B  // .f....O........{
    2290: F1 66 BA 15 01 90 40 8D 9C CC 03 E8 CB 06 C3 E8  // .f....@.........
    22A0: 6A F1 66 BA 02 01 80 50 E8 BE 06 C3 E8 4C F1 8B  // j.f....P.....L..
    22B0: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 4F F1 66 BA 00  // .f3........O.f..
    22C0: 06 80 50 E8 A3 06 C3 E8 42 F1 66 BA 11 01 80 50  // ..P.....B.f....P
    22D0: B0 04 E8 94 06 C3 E8 33 F1 66 BA 00 06 90 40 8D  // .......3.f....@.
    22E0: 9C C8 03 E8 83 06 8D 9C C8 03 E8 52 0E C3 E8 BB  // ...........R....
    22F0: FF 3C 06 74 0E 3C 0A 74 0A 3C 14 74 06 3C 1E 74  // .<.t.<.t.<.t.<.t
    2300: 02 33 C0 E8 15 F1 8A E3 80 CC 80 50 E8 FD F0 58  // .3.........P...X
    2310: 66 BA 00 01 80 61 E8 50 06 33 C9 E8 88 F0 0B C0  // f....a.P.3......
    2320: 74 02 B5 10 8D 9C BC 03 E8 B8 0D 8A C5 E8 DC F0  // t...............
    2330: 66 BA 07 01 80 50 E8 30 06 E8 14 F1 E8 F6 06 75  // f....P.0.......u
    2340: 49 8D 9C 48 03 E8 F7 0D 0A C0 74 0E E8 BD F0 66  // I..H......t....f
    2350: BA 0A 01 80 50 B0 01 E8 0F 06 8D 9C 28 01 E8 DE  // ....P.......(...
    2360: 0D 3C 14 72 25 8D 9C D0 03 E8 D3 0D 0B C0 74 1A  // .<.r%.........t.
    2370: E8 40 EC 32 C9 8D 9C CC 03 E8 67 0D 8A C5 E8 8B  // .@.2......g.....
    2380: F0 66 BA 15 01 80 50 E8 DF 05 C3 8D 9C B4 03 B9  // .f....P.........
    2390: 0E 00 E8 F4 09 E8 A3 FE E8 8F FE E8 38 FF 3C 01  // ............8.<.
    23A0: 75 1C E8 D2 FD 74 17 33 C9 E8 A8 FD 80 FD 07 75  // u....t.3.......u
    23B0: 0D FE C1 E8 65 F0 38 D9 75 EF B5 01 EB 02 B5 00  // ....e.8.u.......
    23C0: E8 01 00 C3 8D 9C AC 03 B1 02 E8 16 0D C3 51 8D  // ..............Q.
    23D0: 9C AC 03 32 C9 E8 0B 0D 59 C3 51 8D 9C AC 03 B1  // ...2....Y.Q.....
    23E0: 01 E8 FF 0C 59 C3 8D 9C 32 01 E8 52 0D 24 07 75  // ....Y...2..R.$.u
    23F0: 15 B9 64 00 8D 9C AC 03 E8 44 0D 3C 02 74 03 B9  // ..d......D.<.t..
    2400: 90 01 E8 CA 09 C3 32 E4 B1 04 33 D2 F6 E1 8B C8  // ......2...3.....
    2410: E8 C7 09 C3 51 8D 5C 14 E8 24 0D 66 C1 E0 10 E8  // ....Q.\..$.f....
    2420: A4 01 59 C3 53 8D 9C 44 01 E8 13 0D 5B C3 53 66  // ..Y.S..D....[.Sf
    2430: 50 8D 9C 44 01 E8 07 0D 8B C1 E8 62 0C 66 58 5B  // P..D.......b.fX[
    2440: C3 53 51 8D 9C 44 01 8A E8 B1 03 E8 95 0C 59 5B  // .SQ..D........Y[
    2450: C3 33 C9 E8 2D 09 38 C1 73 05 B5 00 E8 8C 00 B5  // .3..-.8.s.......
    2460: 00 E8 80 00 FE C1 E8 1A 09 38 C1 72 E6 B1 14 8A  // .........8.r....
    2470: E9 E8 12 09 38 C1 74 05 B5 03 E8 E3 01 FE C1 E8  // ....8.t.........
    2480: FB 08 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC 0B F6  // ....8.v.........
    2490: 74 1E E8 03 F8 66 C1 C8 10 66 89 46 00 8D 5C 04  // t....f...f.F..\.
    24A0: E8 9C 0C 66 89 46 04 8D 5C 08 E8 92 0C 88 46 0A  // ...f.F..\.....F.
    24B0: 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 D8  // .N...f......+...
    24C0: 07 83 C4 0C C3 83 EC 04 8B EC B0 02 88 46 01 88  // .............F..
    24D0: 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25 00 E8 B9 07  // N...f......%....
    24E0: 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB 17 00 E8 01  // .....#..........
    24F0: 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10  // ........N...f...
    2500: 8B C4 E8 94 07 83 C4 04 C3 BB 22 00 E8 E3 FF C3  // ..........".....
    2510: BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5 FF C3 E8 1E  // .'......,.......
    2520: 0C 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC 55 51  // .f.....t@.....UQ
    2530: B9 04 00 83 C3 02 E8 06 0C 66 89 46 00 83 C5 04  // .........f.F....
    2540: 83 C3 04 E2 F1 83 C3 04 E8 F4 0B 66 C1 C8 10 66  // ...........f...f
    2550: 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10 8B C4  // .F.Y].N...f.....
    2560: BB 31 00 E8 33 07 83 C4 18 C3 E8 43 EE 8D 9C D0  // .1..3......C....
    2570: 02 E8 CB 0B 8A E8 BB 21 00 E8 76 FF C3 8D 9C 3C  // .......!..v....<
    2580: 03 E8 BB 0B 8A F8 E8 05 EE 8A DD 53 8D 9C 42 03  // ...........S..B.
    2590: E8 AC 0B 8A E8 5B E8 17 EE E8 B4 EE E8 96 04 75  // .....[.........u
    25A0: 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01 88 5E  // .........N..~..^
    25B0: 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A 00 E8  // ..n...f......*..
    25C0: D7 06 83 C4 04 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ...........f=...
    25D0: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
    25E0: 89 46 04 66 89 46 00 66 89 46 08 66 B8 00 00 00  // .F.f.F.f.F.f....
    25F0: D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B C4  // .f..f.F...f.....
    2600: BB 35 00 E8 93 06 83 C4 10 C3 83 EC 08 8B EC 89  // .5..............
    2610: 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0 10 8B  // N.f.V..^...f....
    2620: C4 BB 2D 00 E8 72 06 83 C4 08 C3 3D C0 7F 76 04  // ..-..r.....=..v.
    2630: B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 01 0B 66 33  // ......?$..Q...f3
    2640: D2 B9 0A 00 F7 F1 8B C8 E8 F4 0A 03 C1 66 25 FF  // .............f%.
    2650: FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 32 D2 C3  // ...Y=.'s...'.2..
    2660: 80 FD 02 75 25 E8 4F EE 66 BB 00 08 00 00 E8 9A  // ...u%.O.f.......
    2670: 00 E8 43 EE 66 BB 03 08 00 00 E8 8E 00 66 33 D2  // ..C.f........f3.
    2680: 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75 10 66  // f............u.f
    2690: 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB 36 51  // 3...f3.f......6Q
    26A0: 33 D2 E8 E9 EC 8A D5 66 C1 E2 10 E8 22 ED 8A F2  // 3......f...."...
    26B0: 8A D1 66 8B C2 66 0D 00 00 00 80 E8 5D ED 80 FB  // ..f..f......]...
    26C0: 04 76 06 66 0D 00 00 00 08 E8 93 ED E8 E1 EC 66  // .v.f...........f
    26D0: 33 DB 8A D9 59 83 EC 10 8B EC 66 89 46 04 66 89  // 3...Y.....f.F.f.
    26E0: 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00 66 F7  // ^.f..f3.f.d...f.
    26F0: E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10 8B C4  // .f.F......f.....
    2700: E8 96 05 8B EC B3 01 83 C4 10 C3 83 EC 10 8B EC  // ................
    2710: 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66 C1 E0  // f.V.f.^......f..
    2720: 10 8B C4 E8 73 05 B3 01 83 C4 10 C3 C3 53 51 66  // ....s........SQf
    2730: 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75  // P.ht...t.......u
    2740: 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66 52  // ..xif3...fXY[.fR
    2750: B3 00 66 F7 C2 00 00 FF FF 75 1A 80 FD 13 74 15  // ..f......u....t.
    2760: 80 FD 14 74 10 B3 01 80 FD 0E 74 09 B3 03 80 F9  // ...t......t.....
    2770: 03 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74 07 80  // .t...fZ.....#t..
    2780: FA 22 74 02 B5 00 C3 B5 02 80 FA 23 74 07 80 FA  // ."t........#t...
    2790: 22 74 02 B3 01 C3 32 C9 80 FD 00 75 08 C7 46 00  // "t....2....u..F.
    27A0: 0B 01 B1 01 C3 50 33 C0 E8 73 01 04 14 89 46 00  // .....P3..s....F.
    27B0: 58 B1 01 C3 C3 8B DA B7 22 80 FE 21 74 02 B7 21  // X......."..!t..!
    27C0: C3 0C 01 C3 E8 78 09 66 C1 E8 10 0B C0 74 1C 53  // .....x.f.....t.S
    27D0: 83 C3 06 E8 69 09 5B 3D E0 01 72 0F 53 83 C3 18  // ....i.[=..r.S...
    27E0: E8 5C 09 5B A8 80 75 03 0C 01 C3 32 C0 C3 B5 0C  // .\.[..u....2....
    27F0: C3 B5 02 C3 50 E8 26 01 B1 03 0A C0 74 04 B1 08  // ....P.&.....t...
    2800: 02 C8 58 C3 80 FA 22 75 05 C7 46 00 78 69 C3 E8  // ..X..."u..F.xi..
    2810: EF 00 80 FD FF 74 35 83 EC 0C 8B EC 88 4E 01 88  // .....t5......N..
    2820: 6E 00 80 F9 0F 75 05 E8 24 00 EB 0F 80 F9 10 75  // n....u..$......u
    2830: 0A 8D 9C 48 03 E8 07 09 88 46 02 8C D0 66 C1 E0  // ...H.....F...f..
    2840: 10 8B C4 BB 04 00 E8 50 04 83 C4 0C C3 C3 66 53  // .......P......fS
    2850: E8 A8 EB 66 8B C2 66 33 D2 66 BB 8C 0A 00 00 66  // ...f..f3.f.....f
    2860: F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40 03 E8 CF 08  // ..f[...n...@....
    2870: 88 46 02 88 66 03 66 C1 E8 10 88 46 08 E8 6A EB  // .F..f.f....F..j.
    2880: 66 89 56 04 C3 83 EC 20 8B EC 80 F9 04 75 0A 88  // f.V.... .....u..
    2890: 4E 01 32 C0 88 46 00 EB 56 E8 34 EB E8 7F 00 88  // N.2..F..V.4.....
    28A0: 46 00 88 4E 01 E8 A8 EB 88 56 0A 80 F9 01 74 18  // F..N.....V....t.
    28B0: 80 F9 0B 75 3A 8D 9C 5C 03 E8 83 08 88 46 02 E8  // ...u:..\.....F..
    28C0: 28 EB 66 89 56 04 EB 27 E8 41 EB 88 6E 08 E8 19  // (.f.V..'.A..n...
    28D0: EB 66 89 56 04 E8 43 EB 88 5E 03 E8 B0 EA 88 6E  // .f.V..C..^.....n
    28E0: 02 51 E8 1C 00 8A CD B0 01 D2 E0 59 88 46 09 8C  // .Q.........Y.F..
    28F0: D0 66 C1 E0 10 8B C4 BB 4C 00 E8 9C 03 83 C4 20  // .f......L...... 
    2900: C3 8D 9C 3C 03 E8 37 08 32 ED 3C 03 74 0C 3C 09  // ...<..7.2.<.t.<.
    2910: 72 09 3C 0E 77 05 2C 08 8A E8 C3 B5 FF C3 52 32  // r.<.w.,.......R2
    2920: C0 80 EE 21 80 FA 1E 74 10 B0 02 80 FA 20 74 09  // ...!...t..... t.
    2930: B0 04 80 FA 21 74 02 B0 06 02 C6 5A C3 C3 83 EC  // ....!t.....Z....
    2940: 08 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06 8C  // ....~..^..V..N..
    2950: D0 66 C1 E0 10 8B C4 BB 36 00 E8 3C 03 8B EC 8B  // .f......6..<....
    2960: 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2 00  // ^..~.....V3.f...
    2970: 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58 53  // ...u.P3.....2.XS
    2980: BB 04 1F E8 19 07 66 8B C2 BB 00 1F E8 10 07 5B  // ......f........[
    2990: 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1 E2  // f......u.3...f..
    29A0: 10 BA 00 1F 83 EC 08 8B EC 66 89 56 00 88 4E 04  // .........f.V..N.
    29B0: 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00 8C  // .....F..F...F...
    29C0: D0 66 C1 E0 10 8B C4 BB 4E 00 E8 CC 02 8B EC 8A  // .f......N.......
    29D0: 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90 01  // ^..~......t2Q...
    29E0: 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6 0A  // .. t....u.......
    29F0: C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 CF 03  // .t....<.t.......
    2A00: 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E C3  // Y.........v...^.
    2A10: 8D 5C 04 E8 29 07 8B D0 B5 02 E8 14 00 74 11 B5  // .\..)........t..
    2A20: 01 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5 02  // ....u..a....u...
    2A30: C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80 FA  // ........t.......
    2A40: 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74 03  // .....t........t.
    2A50: 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04 75  // .......u.......u
    2A60: 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3 8D  // ..........t.....
    2A70: 5C 09 E8 CA 06 8A C8 0A C9 75 03 32 C0 C3 B5 02  // \........u.2....
    2A80: E8 DA 02 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 AF 06  // .....$.....\....
    2A90: 8A D0 B6 01 83 EC 10 8B EC 89 56 02 8C D0 66 C1  // ..........V...f.
    2AA0: E0 10 8B C4 BB 4F 00 E8 EF 01 8B EC 8A 56 04 83  // .....O.......V..
    2AB0: C4 10 C3 53 83 C3 4C E8 53 06 5B C3 53 83 C3 4C  // ...S..L.S.[.S..L
    2AC0: E8 A5 05 5B C3 56 E8 96 01 8B 44 38 83 7D 20 00  // ...[.V....D8.} .
    2AD0: 5E C3 52 50 0F BC D8 32 FF 80 FB 01 75 05 BB 00  // ^.RP...2....u...
    2AE0: 24 EB 0C FE CB B8 00 04 F7 E3 05 00 20 8B D8 58  // $........... ..X
    2AF0: 5A C3 57 E8 56 00 74 0A 8B 5D 02 E8 08 00 0B DB  // Z.W.V.t..]......
    2B00: 5F C3 33 DB 5F C3 52 51 0B DB 74 1B 56 E8 36 01  // _.3._.RQ..t.V.6.
    2B10: 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74  // ..^3..O..?.t.:.t
    2B20: 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 56 51 E8 15  // .....3...YZ.VQ..
    2B30: 01 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE C1  // .2..|.;].t......
    2B40: 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 56 51 E8 F5  // :L.r.3...Y^.VQ..
    2B50: 00 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1 3A  // .2..|.;.t......:
    2B60: 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 D6 00  // L.r.3...Y^.VQ...
    2B70: 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1 3A  // 2..|.;E.t......:
    2B80: 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50 E8 DB FF  // L.r.3...Y^.WP...
    2B90: 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53 32 C9 B3 01  // ...]..n.X_.S2...
    2BA0: E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53 32 ED B3  // ...t..O...[.S2..
    2BB0: 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3 50 57 8B  // ....t..o...[.PW.
    2BC0: DA E8 68 FF 75 04 33 DB EB 0D B0 14 8B 5D 08 E8  // ..h.u.3......]..
    2BD0: 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53 51 57 8D  // 4.t.._._X.fPSQW.
    2BE0: 1C 66 25 FF FF 00 00 E8 B5 04 8B D8 E8 3B 00 23  // .f%..........;.#
    2BF0: C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66 8B 45 04  // .t1.u...t*fPf.E.
    2C00: 8D 5C 0C E8 99 04 66 33 C0 8B 05 8D 5C 04 E8 8E  // .\....f3....\...
    2C10: 04 66 58 E8 85 FF E8 93 FF 8D 5C 08 66 33 C0 8B  // .fX.......\.f3..
    2C20: C1 E8 7B 04 5F 59 5B 66 58 C3 56 E8 18 00 8B 44  // ..{._Y[fX.V....D
    2C30: 04 5E C3 56 E8 0F 00 89 44 04 5E C3 C3 BF DE 02  // .^.V....D.^.....
    2C40: 8B 3D 8B 7D 0C C3 BE DE 02 8B 34 8B 74 30 C3 1E  // .=.}......4.t0..
    2C50: 0E 1F BF DE 02 8B 3D 8B 7D 0E 83 C7 04 1F C3 BE  // ......=.}.......
    2C60: DE 02 8B 34 8B 74 10 C3 BF DE 02 8B 3D 8B 7D 26  // ...4.t......=.}&
    2C70: 83 C7 04 C3 BE DE 02 8B 34 8B 74 1A C3 BE DE 02  // ........4.t.....
    2C80: 8B 34 8B 74 3A C3 BF DE 02 8B 3D 8B 7D 0A 83 C7  // .4.t:.....=.}...
    2C90: 04 B9 07 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46  // ...............F
    2CA0: 00 66 33 C0 C6 46 04 00 89 46 02 06 52 8A D3 8B  // .f3..F...F..R...
    2CB0: C5 E8 CD 16 5A 07 83 C4 06 C3 E8 80 FF 66 F7 45  // ....Z........f.E
    2CC0: 10 01 00 00 00 C3 50 E8 73 FF B8 01 00 09 45 10  // ......P.s.....E.
    2CD0: 58 C3 E8 68 FF 88 45 10 C3 66 53 83 EC 48 8B EC  // X..h..E..fS..H..
    2CE0: 66 89 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4  // f.^.f.N...f.....
    2CF0: BB 00 00 E8 A3 FF 83 C4 48 66 5B E8 6A 01 E8 A4  // ........Hf[.j...
    2D00: 01 83 EC 1C 8B EC C6 46 01 07 8C D0 66 C1 E0 10  // .......F....f...
    2D10: 8B C4 BB 0D 00 E8 81 FF 83 C4 1C E8 0E 00 BB 04  // ................
    2D20: 00 E8 8F FD 66 C1 E8 10 E8 A7 FF C3 83 EC 1C 8B  // ....f...........
    2D30: EC C6 46 01 08 8C D0 66 C1 E0 10 8B C4 BB 0D 00  // ..F....f........
    2D40: E8 56 FF 83 C4 1C C3 E8 F3 FE 66 8B 5D 08 66 8B  // .V........f.].f.
    2D50: 4D 0C C3 56 E8 26 FF 66 8B 44 08 5E C3 83 EC 04  // M..V.&.f.D.^....
    2D60: 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 BB 38 00  // ...N...f......8.
    2D70: E8 26 FF 8B EC 8A 6E 02 83 C4 04 C3 C3 B0 06 C3  // .&....n.........
    2D80: B0 01 C3 B0 06 C3 B0 08 C3 53 66 50 66 33 C0 E8  // .........SfPf3..
    2D90: 0D 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8  // .......fX[.2....
    2DA0: 9D 03 66 C1 CB 10 E8 F6 02 66 C1 CB 10 66 81 C3  // ..f......f...f..
    2DB0: 04 00 04 00 E2 E9 C3 FC 66 AD E8 E2 02 83 C3 04  // ........f.......
    2DC0: E2 F6 C3 FC E8 78 03 66 AB 83 C3 04 E2 F6 C3 66  // .....x.f.......f
    2DD0: 50 B8 64 00 E8 10 00 66 58 C3 66 50 B8 50 C3 D1  // P.d....fX.fP.P..
    2DE0: E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 69 01 66  // ....fX.R.....i.f
    2DF0: 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2  // S..f.....f......
    2E00: 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00  // .f...f3.f.f.....
    2E10: B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66  // ..f...f.3.f..s.f
    2E20: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
    2E30: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
    2E40: BB 42 EC E8 C7 02 66 33 D2 66 BB 64 00 00 00 66  // .B....f3.f.d...f
    2E50: F7 F3 C3 66 50 53 BB 07 00 E8 57 FC 25 00 02 35  // ...fPS....W.%..5
    2E60: 00 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 C4 00 E8  // ....[fX.fQ......
    2E70: 02 FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9 75 03  // ..f3..L.f.....u.
    2E80: B9 20 00 66 2B C1 E8 EB FD 66 89 44 04 89 4C 08  // . .f+....f.D..L.
    2E90: 66 59 C3 56 1E 0E 1F E8 DA FD 66 8B 44 04 66 C1  // fY.V......f.D.f.
    2EA0: E0 0A 1F 5E C3 C3 BE DE 02 8B 34 8B 74 1E 83 C6  // ...^......4.t...
    2EB0: 04 B9 1C 00 C3 56 E8 A6 FD 8A 6C 33 5E C3 56 E8  // .....V....l3^.V.
    2EC0: 9D FD 53 81 C3 09 01 E8 75 02 8A E8 5B 53 81 C3  // ..S.....u...[S..
    2ED0: 00 01 E8 6A 02 5B 8A C5 66 89 44 34 5E C3 56 E8  // ...j.[..f.D4^.V.
    2EE0: 7D FD 66 8B 44 34 53 81 C3 08 01 B1 01 8A E8 E8  // }.f.D4S.........
    2EF0: F1 01 5B 53 81 C3 00 01 B1 01 8A EC E8 E4 01 5B  // ..[S...........[
    2F00: 53 81 C3 02 01 66 C1 E8 10 E8 AB 01 5B 5E C3 56  // S....f......[^.V
    2F10: E8 4C FD 8B FE 83 C7 04 5E C3 56 E8 41 FD 8A 44  // .L......^.V.A..D
    2F20: 24 80 FD 00 74 05 88 6C 33 0C 02 88 44 24 5E C3  // $...t..l3...D$^.
    2F30: 32 C0 C3 66 53 83 EC 04 8B EC 8C D0 66 C1 E0 10  // 2..fS.......f...
    2F40: 8B C4 66 89 5E 00 BB 06 00 E8 4D FD 8B EC 66 8B  // ..f.^.....M...f.
    2F50: 46 00 83 C4 04 66 5B C3 66 50 8C C8 3D 00 C0 75  // F....f[.fP..=..u
    2F60: 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B  // .........t...S..
    2F70: 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66  // .... .....[2.f.f
    2F80: 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74 16 43  // X.........u.Kt.C
    2F90: 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B  // ;.w.....+.......
    2FA0: DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77 0C  // ...+..;.r.u.;.w.
    2FB0: 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB  // +...+.+.....+.+.
    2FC0: 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72 11  // ....UV+.......r.
    2FD0: 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D 78  // E;.r.w.;.v....Mx
    2FE0: 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78  //  ....+....r...Mx
    2FF0: 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3 13  // .........s......
    3000: D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92 0B  // .......3.^]..P..
    3010: C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58 F7  // .t......t.....X.
    3020: E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10 8A  // ....RfP....f....
    3030: E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52 BA  // ...$....f.fXZ.R.
    3040: FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31  // ..f.Z.R...f.Z..1
    3050: FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA  // ............$...
    3060: E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06 00  // ........RfSfP...
    3070: 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7  // fXf[Z.f...f.....
    3080: FE E8 93 01 C3 66 50 66 C1 E3 10 66 C1 EB 10 E8  // .....fPf...f....
    3090: 01 FE 66 03 D8 66 81 CB 00 00 00 80 66 58 C3 52  // ..f..f......fX.R
    30A0: 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE E8 D4  // fS...f[Z.fP.....
    30B0: FF E8 63 01 66 58 C3 52 51 66 53 66 50 8A CB 80  // ..c.fX.RQfSfP...
    30C0: E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF E8 2D  // ...............-
    30D0: 01 66 D3 C8 58 50 66 D3 C0 E8 3B 01 66 58 66 5B  // .f..XPf...;.fXf[
    30E0: 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A  // YZ.fPQ....S.f...
    30F0: C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0 E1  // .f.....YfX.fPQ..
    3100: 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00  // ..;.f..Y..fX.._.
    3110: C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 DF 00 C3  // ..D.f...f.......
    3120: E8 35 FE 66 C1 E3 02 E8 D4 00 C3 52 66 53 E8 04  // .5.f.......RfS..
    3130: 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 C0 00 C3 51  // .f[Z.. ..J.....Q
    3140: 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8  // fR..............
    3150: D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB FF  // .....t.f........
    3160: 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3 52  // ...f.f.....fZY.R
    3170: 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1 FF 66  // fS...f[Z.RfS...f
    3180: 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // [Z.fPURfP...V..V
    3190: 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58 5A 5D  // ......f.f.F.fXZ]
    31A0: C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8  // .fPURfP...V..V..
    31B0: A6 FD 2E A1 2D 03 B2 18 EF B2 00 66 ED 66 89 46  // ....-......f.f.F
    31C0: 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89 FD B2  // .fXZ].fPUR......
    31D0: 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46  // .f.F.f..V..V.f.F
    31E0: 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8  // .f.F.Z]fXfX.fPR.
    31F0: 66 FD B2 18 66 ED 2E A3 2D 03 5A 66 58 C3 66 81  // f...f...-.ZfX.f.
    3200: FB FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00  // .....w.....f....
    3210: 66 EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04  // f...f..f......w.
    3220: 8A D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF  // ....f...f.f...f.
    3230: C3 C3 C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B  // ...U..SQ..&.\.&.
    3240: 4C 16 E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0  // L..(..f.Y[].SQ..
    3250: 26 8B 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53  // &.\$3....Y[.U..S
    3260: 51 8B F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57  // Q..&.\.&.L...RVW
    3270: C8 06 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C  // .......N.....&.|
    3280: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    3290: E3 06 D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3  // .........M.2....
    32A0: 06 D1 E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26  // ...........&!D.&
    32B0: 21 7C 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED  // !|.....&.|&.M.2.
    32C0: B8 20 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3  // . .+...f.F......
    32D0: 08 D1 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3  // ..n..^....M.2...
    32E0: 8B 56 FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56  // .V.........#F.#V
    32F0: FC 8A 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09  // ..M.2.........&.
    3300: 44 1C 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51  // D.&.T.._^Z.U..SQ
    3310: 52 57 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20  // RWP..&..&.E.2.. 
    3320: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    3330: 8A 4D 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3  // .M..N..F.....N..
    3340: 06 D1 E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D  // .......&.G.&....
    3350: 66 F8 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E  // f._Z...SQRW.....
    3360: C0 26 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B  // .&.w&.L.2.. .+..
    3370: C8 BE FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B  // ..............&.
    3380: 7F 26 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2  // .&.M.2..........
    3390: FA F7 D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC  // .....&!G.&!W._..
    33A0: 05 53 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00  // .SV......&.w&.<.
    33B0: 74 73 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E  // ts.<.uX.D.2.&...
    33C0: 00 75 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84  // .uL&;G.uF..k....
    33D0: 00 90 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C  // ..&.G&....&.w&.<
    33E0: 09 74 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 FE 8F  // .t...2.k........
    33F0: 26 8B 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47  // &.w&..2....D.&)G
    3400: 26 26 FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26  // &&.G&&.G.&.w...&
    3410: 8B 77 26 8A 04 32 E4 6B F0 03 8A 84 00 90 26 01  // .w&..2.k......&.
    3420: 47 26 E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51  // G&...3.3...^[.SQ
    3430: 52 56 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26  // RV...w5&.T.&.W.&
    3440: C7 47 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47  // .G.....&.G 3.&.G
    3450: 14 26 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85  // .&.T.....&.G/...
    3460: 0A 05 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77  // ..&..4.u"&.w.&.w
    3470: 14 75 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26  // .u.&.g.&.W.&.g.&
    3480: D1 57 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32  // .W....y....&.G42
    3490: E4 05 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8  // .....&.G.&.W....
    34A0: FF FE E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02  // .....SV...w5&.D.
    34B0: 32 E4 C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47  // 2....&.7&.4..&.G
    34C0: 08 26 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53  // .&._.&..&.\.^[.S
    34D0: 52 56 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80  // RV.....w5..&.T..
    34E0: FA 40 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74  // .@s!&.w.2....&.t
    34F0: 04 03 F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89  // ...&.W.&.G.&..&.
    3500: 44 02 E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B  // D......Au.&.G.&.
    3510: 57 0A 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75  // W.&.G.&.W..h..@u
    3520: 12 26 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57  // .&.G.&.W.&.G.&.W
    3530: 0E EB 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22  // ..Q..Bu.&.G.&.G"
    3540: EB 42 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB  // .B..Cu.&.G.&.G3.
    3550: 33 80 FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89  // 3..Fu.&.W.&.G.&.
    3560: 57 18 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47  // W.&.G.....Gu.&.G
    3570: 08 26 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08  // .&.G$....Hu.&.G.
    3580: 26 89 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26  // &.G ^Z[.SV...w5&
    3590: 8A 44 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E  // .D.2.&.G.&.G...^
    35A0: 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04  // [.SV..&.w.&.t...
    35B0: 32 E4 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02  // 2.&.G.&.G...&._.
    35C0: 26 FF 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // &.G.^[.SV..&.w.&
    35D0: 8B 74 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26  // .t..4&.w.&.G...&
    35E0: 8B 5F 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26  // ._.&.G..^[.SV..&
    35F0: 8B 77 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14  // .w.&.t....t.&.G.
    3600: 26 89 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3  // &.w.&._.&.G..^[.
    3610: 53 52 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B  // SRV...p...&.G.&.
    3620: 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11  // W.........&.G.&.
    3630: 54 16 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F  // T....+..J.S..&._
    3640: 02 26 FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83  // .&.G.[.S..&._.&.
    3650: 47 02 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B  // G..[.SV...k...&.
    3660: 57 20 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2  // W 3.&.W.&.D.....
    3670: 26 8B 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4  // &.G.2....=..u.2.
    3680: 33 D2 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00  // 3.^[.&.G.2....=.
    3690: 04 74 EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E  // .t.&..4.u..../.^
    36A0: 5B C3 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E  // [.&.G42.&.G.&.G.
    36B0: 00 00 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE  // .......^[.S.....
    36C0: 26 8B 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26  // &.G....&..&....&
    36D0: 8B 07 26 8B 57 02 5B C3 DE 36 D3 36 E9 36 38 37  // ..&.W.[..6.6.687
    36E0: EF 36 07 37 21 37 2C 37 32 37 53 51 56 8B D8 E8  // .6.7!7,727SQV...
    36F0: B0 FE 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F  // ......&....u"&..
    3700: 14 40 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26  // .@s.&.w.&._....&
    3710: 8B 44 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26  // .D...&..&.W..{.&
    3720: 8B 77 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83  // .w.&.G.......uq.
    3730: FE 08 77 6C 03 F6 2E FF A4 70 36 26 8B 47 10 26  // ..wl.....p6&.G.&
    3740: 8B 57 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49  // .W..T.&.G.&.W..I
    3750: 05 26 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00  // .&.G".K&.O32....
    3760: 33 D2 E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26  // 3............+.&
    3770: 8A 4F 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2  // .O32....3.......
    3780: E2 FA F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57  // .........&.G.&.W
    3790: 1A E9 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02  // ....&.G$..&.G ..
    37A0: 33 C0 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3  // 3.3....SV.......
    37B0: 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8  // &.G.&.W.........
    37C0: 26 01 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3  // &.G.&.T......^[.
    37D0: 33 C0 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14  // 3.3..SV.....&.w.
    37E0: 26 03 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26  // &.w"...T.^[.S..&
    37F0: C6 47 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B  // .G+....&.G.&.W.[
    3800: C3 53 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B  // .S..&.G+......S.
    3810: D8 26 C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3  // .&.G+......S....
    3820: 35 26 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF  // 5&._.......2....
    3830: 97 8E 8F 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4  // ...[.SRV..&.G,2.
    3840: 8B F0 03 F0 8B C3 FF 94 AA 8F 26 89 47 08 26 89  // ..........&.G.&.
    3850: 57 0A 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94  // W.&.G-2.........
    3860: C2 8F 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56  // ..&.G.&.W....SQV
    3870: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C F2 8F E3 0A  // ..&.O+2.........
    3880: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    3890: 8B F1 C1 E6 02 8B 8C D2 8F 8B B4 D4 8F 26 21 4F  // .............&!O
    38A0: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C FA  // .&!w.&.O*2......
    38B0: 8F E3 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F  // ...&.g.&.W...&.O
    38C0: 08 26 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03  // .&.w.&.O.&.w....
    38D0: 53 51 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32  // SQRVW......&.G+2
    38E0: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D FA 8F  // ......&.G*......
    38F0: 32 ED 8B 84 D2 8F 8B 94 D4 8F E3 06 D1 E0 D1 D2  // 2...............
    3900: E2 FA F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A  // ......&!G.&!W.&.
    3910: 47 2A 32 E4 8B F0 8A 8C FA 8F 32 ED E3 0A 26 D1  // G*2.......2...&.
    3920: 6F 0A 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6  // o.&._...&.G+....
    3930: 02 8B 84 D2 8F 8B 94 D4 8F 26 21 47 08 26 21 57  // .........&!G.&!W
    3940: 0A 26 8A 47 2A 32 E4 8B F0 8A 8C FA 8F 32 ED E3  // .&.G*2.......2..
    3950: 0A 26 D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26  // .&.g.&.W...&.G.&
    3960: 8B 57 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B  // .W.&.G.&.W._^ZY[
    3970: C3 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C  // .SQV..&.O+2.....
    3980: F2 8F E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A  // ....&.o.&._...&.
    3990: 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C D2 8F 8B B4 D4  // O+2.............
    39A0: 8F 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B  // .&!O.&!w.&.O*2..
    39B0: F1 8A 8C FA 8F E3 0A 26 D1 6F 0A 26 D1 5F 08 E2  // .......&.o.&._..
    39C0: F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C D2 8F  // .&.O+2..........
    39D0: 8B B4 D4 8F 26 21 4F 08 26 21 77 0A E9 BB 02 51  // ....&!O.&!w....Q
    39E0: 52 57 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26  // RW......&..+.t.&
    39F0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 AA 8F 26  // .G,2...........&
    3A00: 89 47 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B  // .G.&.W...&.G,2..
    3A10: F0 03 F0 8B C3 FF 94 B6 8F 26 8A 47 2D 32 E4 8B  // .........&.G-2..
    3A20: F0 03 F0 8B C3 FF 94 C2 8F 26 89 47 04 26 89 57  // .........&.G.&.W
    3A30: 06 8C D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B  // .....&..+.tJ&.G+
    3A40: 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D FA  // 2......&.G*.....
    3A50: 8F 32 ED 8B 84 D2 8F 8B 94 D4 8F E3 06 D1 E0 D1  // .2..............
    3A60: D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B  // .......&!G.&!W..
    3A70: C3 E8 F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08  // ....&.G.&.W.&.G.
    3A80: 26 09 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89  // &.W...&.W.&.G.&.
    3A90: 57 08 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // W.&.G.&.G,2.....
    3AA0: 8B C3 FF 94 9E 8F 5F 5A 59 C3 53 51 52 56 57 8B  // ......_ZY.SQRVW.
    3AB0: D8 26 8A 47 2A 32 E4 8B F0 8A 8C FA 8F 32 ED E3  // .&.G*2.......2..
    3AC0: 0A 26 D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26  // .&.g.&.W.......&
    3AD0: 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8  // .G+2......&.G*..
    3AE0: 8A 8D FA 8F 32 ED 8B 84 D2 8F 8B 94 D4 8F E3 06  // ....2...........
    3AF0: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09  // ..........&.G.&.
    3B00: 57 06 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21  // W.&.G.&.W.&!G.&!
    3B10: 57 0A E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47  // W..V.U..QRP..&.G
    3B20: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 AA 8F 26 89 47  // ,2...........&.G
    3B30: 08 26 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA  // .&.W.&.G+.F.....
    3B40: FC 26 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B  // .&.G.&.W.&.O-2..
    3B50: F1 03 F1 8B C3 FF 94 C2 8F 26 89 47 14 26 89 57  // .........&.G.&.W
    3B60: 16 8B C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C F2  // ....D..F.2......
    3B70: 8F E3 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57  // ...&.o.&._...&.W
    3B80: 2B 32 F6 8B F2 C1 E6 02 8B 84 D2 8F 8B 94 D4 8F  // +2..............
    3B90: 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    3BA0: 8A 8C FA 8F 32 ED E3 0A 26 D1 67 14 26 D1 57 16  // ....2...&.g.&.W.
    3BB0: E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    3BC0: 57 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // W.&.G,2.........
    3BD0: 9E 8F 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26  // ...f.ZY].Q...V.&
    3BE0: 8A 4F 2B 32 ED 8B F1 8A 8C F2 8F E3 0A 26 D1 6F  // .O+2.........&.o
    3BF0: 06 26 D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C  // .&._........&.O,
    3C00: 32 ED 8B F1 03 F1 8B C3 FF 94 9E 8F 59 C3 8B D8  // 2...........Y...
    3C10: E8 22 FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06  // ."....U.&.G.&.w.
    3C20: 26 09 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0  // &.G.&.w.&.G,2...
    3C30: 03 F0 8B C3 FF 94 9E 8F C3 53 56 8B D8 E8 F5 FB  // .........SV.....
    3C40: 8B C3 E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47  // ...(.&.G.&.w.&1G
    3C50: 08 26 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .&1w.&.G,2......
    3C60: C3 FF 94 9E 8F 5E 5B C3 53 51 56 8B D8 E8 C5 FB  // .....^[.SQV.....
    3C70: 8B C3 E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26  // .....&.O...&.g.&
    3C80: D1 57 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED  // .W......F.&.O,2.
    3C90: 8B F1 03 F1 8B C3 FF 94 9E 8F 5E 59 5B C3 53 51  // ..........^Y[.SQ
    3CA0: 56 8B D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3  // V..........&.O..
    3CB0: 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8  // .&.o.&._.....R..
    3CC0: E8 72 FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B  // .r........&.G.&.
    3CD0: 57 06 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26  // W.&.G.&.T......&
    3CE0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 9E 8F 5A  // .G,2...........Z
    3CF0: C3 52 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B  // .R...>....q...&.
    3D00: 47 04 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA  // G.&.W.&)G.&.T...
    3D10: 51 52 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08  // QR........U.&.D.
    3D20: 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 DD F2 26  // &.T.&.\.&.L....&
    3D30: 89 44 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA  // .D.&.T.ZY.R.....
    3D40: 8B C2 E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B  // ...,....\.Z.QRW.
    3D50: F0 E8 E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54  // .........&.D.&.T
    3D60: 0A 26 8B 5C 04 26 8B 4C 06 E8 1C F2 26 89 44 0C  // .&.\.&.L....&.D.
    3D70: 26 89 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A  // &.T.....&.D.&.T.
    3D80: 26 8B 5C 04 26 8B 4C 06 E8 FD F1 26 89 5C 10 26  // &.\.&.L....&.\.&
    3D90: 89 4C 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0  // .L....R.........
    3DA0: FB 8B C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B  // ......Z.QR......
    3DB0: C3 E8 BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A  // ........&.G.&.W.
    3DC0: 26 3B 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30  // &;W.u.&;G.u.&.G0
    3DD0: 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08  // .ZY...&.G.&;G.r.
    3DE0: 75 0A 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26  // u.&;W.s.3......&
    3DF0: 88 47 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32  // .G0ZY.QRW..&.G,2
    3E00: E4 8B F0 03 F0 8B C3 FF 94 AA 8F 26 89 47 08 26  // ...........&.G.&
    3E10: 89 57 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .W.....&.G+2....
    3E20: E6 02 8B F8 8A 8D F2 8F 32 ED 8B 84 D2 8F 8B 94  // ........2.......
    3E30: D4 8F E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    3E40: 47 08 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83  // G.&!W..M.U..QRW.
    3E50: EC 06 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B  // ....&.G+2.......
    3E60: F8 8A 8D F2 8F 32 ED 8B 84 D2 8F 89 46 F4 8B 84  // .....2......F...
    3E70: D4 8F 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B  // ...F....f..V....
    3E80: 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0  // ~..F..F.&.G,2...
    3E90: 03 F0 8B C3 FF 94 AA 8F 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    3EA0: 8B C3 E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7  // ...G.&.G.&.W....
    3EB0: D0 8B 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89  // ..V...&#G.&#W.&.
    3EC0: 47 14 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47  // G.&.W.&!...F.&!G
    3ED0: 0A 8C D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B  // ....w5..&.<.s.&.
    3EE0: 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10  // O...&.g.&.W.....
    3EF0: 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // &.O...&.o.&._...
    3F00: 26 21 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26  // &!...F.&!G.&.W.&
    3F10: 8B 47 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32  // .G.&.W.&.G.&.G,2
    3F20: E4 8B F0 03 F0 8B C3 FF 94 9E 8F 8D 66 FA 5F E9  // ............f._.
    3F30: A3 FC 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47  // ..R........4.&.G
    3F40: 08 26 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74  // .&.W.&.W.u.&.G.t
    3F50: 05 B8 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53  // .........&.G0Z.S
    3F60: 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF  // QRV..&.O-2......
    3F70: 94 C2 8F 26 89 47 04 26 89 57 06 26 8A 47 2B 32  // ...&.G.&.W.&.G+2
    3F80: E4 8B F0 8A 8C F2 8F E3 0A 26 D1 6F 06 26 D1 5F  // .........&.o.&._
    3F90: 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 D2 8F  // ...&.G+.........
    3FA0: 8B 94 D4 8F 26 21 47 04 26 21 57 06 E9 BD F9 52  // ....&!G.&!W....R
    3FB0: 8B D8 E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47  // .....&.G.&.W.&.G
    3FC0: 18 26 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0  // .&.W.Z.QR.......
    3FD0: 8E C0 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B  // ..&.w.&.t..<ZZt[
    3FE0: 26 8B 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77  // &.w.&.t..<cu.&.w
    3FF0: 02 26 FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89  // .&.D....!.&.G.&.
    4000: 57 0A 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C  // W......&.G.&.W..
    4010: D1 8E C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75  // ...&.W.&.G.&;G.u
    4020: AD 26 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03  // .&;W.u.&.w.&..&.
    4030: 47 14 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26  // G...&.G.ZY.&._.&
    4040: 83 47 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26  // .G..ZY.RW......&
    4050: 8B 77 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7  // .w.&.t..T...u.&.
    4060: 47 22 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26  // G".../...u.&.w.&
    4070: 8B 3F 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26  // .?&.4&+u.&.w"..&
    4080: 8B 07 E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B  // .........2......
    4090: 04 26 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A  // .&.G"&._.&.G.._Z
    40A0: C3 8B D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02  // ...&.g/.&.w.&.t.
    40B0: 8A 44 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03  // .D.&.G4&._.&.G..
    40C0: C3 8B D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89  // ...&.w.&.t..t.&.
    40D0: 77 20 EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26  // w ..S..&.G,2.$.&
    40E0: 80 67 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8  // .g/....&.G..O...
    40F0: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    4100: 04 26 C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02  // .&.G......@.&._.
    4110: 26 83 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02  // &.G.....&.w.&.t.
    4120: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    4130: C3 E8 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B  // ......SV..&.w.&.
    4140: 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00  // t..D.2.&.G.&.G..
    4150: 00 8B C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77  // .........SV..&.w
    4160: 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7  // .&.t..D.2.&.G.&.
    4170: 47 06 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8  // G.........c.SV..
    4180: 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03  // &.w...&._.._....
    4190: 26 01 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26  // &.\.^[.QR..&.w.&
    41A0: 83 44 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28  // .D..&.......&.w(
    41B0: 8A 44 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F  // .D.2........<.tO
    41C0: 26 8B 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88  // &.w(.T.2......&.
    41D0: 47 31 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32  // G1&.w.&.4.D....2
    41E0: E4 24 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1  // .$....2.$.&.g/..
    41F0: E0 0B 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B  // ..&.G.&.7&.G....
    4200: C1 E0 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A  // ...&..&.G2.&.O(Z
    4210: 59 C3 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C  // Y.S..&.G2.[.W...
    4220: D6 8E C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A  // ...&..,.t.&.G,&:
    4230: 47 30 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02  // G0u.&.w.&.t.&...
    4240: 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02  // &.=.t...&._.&.w.
    4250: 5F C3 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57  // _.&._.&.G.._.SVW
    4260: 8B D8 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47  // ......&..0.t.&.G
    4270: 30 26 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26  // 0&:G,u &.w.&.t.&
    4280: 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26  // ...&.=.t...&._.&
    4290: 89 77 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03  // .w._^[.&._.&.G..
    42A0: EB F1 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01  // ..SVW......&..0.
    42B0: 74 E5 EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77  // t...U..SQRW..&.w
    42C0: 02 26 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1  // .&.t...&.G=.....
    42D0: 26 80 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32  // &..=.s &.w.&.W=2
    42E0: F6 26 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54  // .&.|.........&.T
    42F0: 35 26 FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B  // 5&.G=..&.....2..
    4300: F2 C1 E6 02 8A 94 1F 90 26 01 55 02 26 8B 7F 28  // ........&.U.&..(
    4310: 8A 55 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55  // .U....&.W-&..(.U
    4320: 01 C0 EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A  // .......&.W+&..(.
    4330: 55 01 C0 EA 06 26 88 57 2A 8A 94 1E 90 26 88 57  // U....&.W*....&.W
    4340: 2C 8D 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B  // ,.f._ZY[].SV..&.
    4350: 77 02 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6  // w....tH.....t...
    4360: 03 C3 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02  // .....^[.SV..&.w.
    4370: 8B C6 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2  // ...tH.....t ....
    4380: C3 16 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89  // ...U..SQVW..@...
    4390: 46 B8 E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F  // F.......F.&.E.._
    43A0: 2E 03 D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89  // ....^..F........
    43B0: 46 E0 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2  // F.2..F......2...
    43C0: 8B 5E E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80  // .^....?...e..F..
    43D0: 66 E7 F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0  // f...F...F...f.F.
    43E0: 00 00 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C  // .....F....F....<
    43F0: 01 0F 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E  // ......V...2....^
    4400: E0 03 D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8  // ....?.tu&.E.....
    4410: 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83  // .G.2......2.....
    4420: F9 00 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89  // ..t...3.P.......
    4430: 46 BA 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32  // F...tA...&.G...2
    4440: E4 03 C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E  // ....^...&.E....^
    4450: BA 26 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47  // .&...^.&.....&.G
    4460: 02 8B 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E  // ..^..v.&.w..^..^
    4470: F6 C6 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA  // ..F.....F.....F.
    4480: 83 8A 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA  // ..F.2.........f.
    4490: 8A 46 EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA  // .F.2..........^.
    44A0: 8E C0 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02  // ..&._..^..^.&._.
    44B0: 80 3F 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06  // .?[uJ.F...^.&._.
    44C0: 89 5E F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8  // .^..^.&...G.2...
    44D0: 83 C1 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA  // ...2.......^..^.
    44E0: 85 DB 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24  // ..t.&...G....2.$
    44F0: 7F C1 E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D  // ........^.&)....
    4500: 46 B8 E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32  // F.......F......2
    4510: FF C1 E3 02 8D 46 B8 FF 97 1C 90 E9 72 FF 83 7E  // .....F......r..~
    4520: F6 00 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB  // .......~..t..F..
    4530: 02 32 C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8  // .2..f._^....SQ..
    4540: 26 8A 4F 04 32 ED E8 86 E8 59 5B C3 53 51 8B D8  // &.O.2....Y[.SQ..
    4550: 26 8A 4F 04 32 ED E8 81 E8 59 5B C3 53 8B D8 26  // &.O.2....Y[.S..&
    4560: 8A 47 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F  // .G.2...[.SQ..&.O
    4570: 04 32 ED E8 9E D7 59 5B C3 53 8B D8 66 50 66 52  // .2....Y[.S..fPfR
    4580: 66 51 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F  // fQf&.G.f&.W.f&.O
    4590: 04 66 F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    45A0: 66 5A 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66  // fZfX[.S..fPfRfQf
    45B0: 26 8B 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47  // &.G.f&.O.f..f&.G
    45C0: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57  // .f&.W.fYfZfX[.SW
    45D0: 8B D8 26 8B 5F 14 E8 38 EB 8B D0 66 C1 E8 10 92  // ..&._..8...f....
    45E0: 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B  // _[.SW..&.G.&.W..
    45F0: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8 36 EB EB  // ...f.........6..
    4600: D8 53 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // .SRW..&.G.&.W..f
    4610: C1 E0 10 8B C2 26 8B 5F 14 E8 5A EA 5F 5A 5B C3  // .....&._..Z._Z[.
    4620: 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0  // SR..&.G.&.W..f..
    4630: 10 8B C2 26 8B 5F 26 8B 5F 01 E8 39 EA 5A 5B C3  // ...&._&._..9.Z[.
    4640: 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8 C2 EA 8B  // SRV..&.\&._.....
    4650: D0 66 C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A  // .f....&.D.&.T.^Z
    4660: 5B C3 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A  // [.SQRW..&.G.&.W.
    4670: 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57  // .f.......&.G.&.W
    4680: 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1  // .....f..........
    4690: E8 16 EA 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3  // ..._ZY[...f.....
    46A0: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    46B0: 0E 1F 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06  // ....u.......<.u.
    46C0: E8 37 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00  // .7....<.u.._....
    46D0: 3C 03 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C  // <.u.......^....<
    46E0: 04 75 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56  // .u..}<.u.......V
    46F0: 10 EB 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89  // ..q<.u.......^..
    4700: 4E 14 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75  // N..V..]<.u..U<.u
    4710: 0A E8 D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB  // .......~..I<.u..
    4720: 41 3C 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00  // A<.u..e....N..~.
    4730: 8C 46 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8  // .F../<.u..'<.u..
    4740: 5A 04 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C  // Z....^...<.u...<
    4750: 15 75 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01  // .u.......^....O.
    4760: EB 02 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66  // ..2....F.f_f^f]f
    4770: 5B 66 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 47  // [fZfYfX...P....G
    4780: 04 8C D8 A3 E2 56 A3 F2 56 A3 04 57 2E 8E 1E 3F  // .....V..V..W...?
    4790: 04 A3 AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45  // .....X..01.00.VE
    47A0: 53 41 00 03 00 03 00 00 01 00 00 00 00 00 00 00  // SA..............
    47B0: 00 03 01 11 0D 02 00 00 9D 01 00 00 30 47 00 00  // ............0G..
    47C0: B9 3F 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B  // .?.......f3..f..
    47D0: FB BE 36 47 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47  // ..6G."......O..G
    47E0: 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E  // ..O..O..O .."...
    47F0: 0E 1F E8 FA D3 B0 4F 32 E4 C3 56 51 57 B9 10 00  // ......O2..VQW...
    4800: 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00  // f3..f._Y........
    4810: C6 45 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45  // .E...E.@..E.@..E
    4820: 1B 06 C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7  // ...E...E...E..f.
    4830: 45 3E 00 84 D7 17 8E DB E8 CE CC 66 0B C0 0F 84  // E>.........f....
    4840: E1 00 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 EF  // ....f.E(..f.....
    4850: 4A 66 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03  // Jf.E............
    4860: B2 01 53 8E DB BE 80 1C E8 A6 D1 5B 06 1F 0F 84  // ..S........[....
    4870: B1 00 53 E8 22 D4 66 89 45 12 C7 45 16 08 10 8D  // ..S.".f.E..E....
    4880: 5C 0C E8 BA E8 66 89 45 1F 66 89 45 36 8D 5C 10  // \....f.E.f.E6.\.
    4890: E8 AC E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 9E  // ...f.E#f.E:.\...
    48A0: E8 0A C0 75 03 5B EB 7B E8 ED D3 66 C1 E8 10 3D  // ...u.[.{...f...=
    48B0: 58 02 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB  // X.t.=^.t.w..E...
    48C0: 04 C6 45 17 0E 2E A1 41 04 89 45 08 8D 5C 04 E8  // ..E....A..E..\..
    48D0: 6D E8 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45  // m.f..f......E..E
    48E0: 32 B0 08 D2 E0 88 45 19 8D 5C 14 E8 51 E8 5B 3D  // 2.....E..\..Q.[=
    48F0: 00 03 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE  // ..w/S.....3...[.
    4900: C8 88 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80  // ..E..E5.E4..WS..
    4910: 1C E8 5E CC 5B 5F 0B C9 75 05 06 1F 83 25 FE 32  // ..^.[_..u....%.2
    4920: E4 EB 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81  // ......O..^......
    4930: 74 68 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B  // th..u....!...ua.
    4940: CB B2 01 BE 20 1C E8 C8 D0 74 55 E8 29 D3 0A C0  // .... ....tU.)...
    4950: 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A  // u.f............:
    4960: E8 A5 CE 74 06 E8 16 CD E8 68 C6 BE 20 1C E8 D5  // ...t.....h.. ...
    4970: CB 74 2D E8 A5 00 E8 2C 00 66 BB 20 1C 00 1C E8  // .t-....,.f. ....
    4980: EC D2 BE 00 1C E8 EF D2 66 C1 E8 10 8B D8 32 C0  // ........f.....2.
    4990: F6 C7 80 74 02 B0 40 E8 05 CC B0 4F 32 E4 EB 04  // ...t..@....O2...
    49A0: B0 4F B4 03 C3 56 06 33 C0 8E C0 BE 20 1C E8 E7  // .O...V.3.... ...
    49B0: D2 8B C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A  // ...f........&..J
    49C0: 04 C1 EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04  // ......&....&..Q.
    49D0: 00 26 C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06  // .&..P..&..I.b&..
    49E0: 4C 04 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 C1  // L...&.....&.....
    49F0: 60 8C C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00  // `..&....^.......
    4A00: 00 00 00 40 05 0F FF 00 01 02 03 04 05 06 07 08  // ...@............
    4A10: 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8  // ................
    4A20: 00 01 EF B9 04 00 B4 01 BE 92 49 AC 86 E0 EF 8A  // ..........I.....
    4A30: E0 FE C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32  // ...............2
    4A40: E4 BE 96 49 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA  // ...I....B.J.....
    4A50: DA 03 EC B9 14 00 BA C0 03 32 E4 BE 9F 49 8A C4  // .........2...I..
    4A60: EE AC EE FE C4 E2 F7 C3 BE 00 1C E8 09 D2 66 C1  // ..............f.
    4A70: E8 10 8B D8 E8 D9 D1 75 05 E8 C5 D1 75 04 B8 4F  // .......u....u..O
    4A80: 00 C3 B8 4F 03 C3 E8 C7 D1 74 53 BE 00 1C 80 FB  // ...O.....tS.....
    4A90: 00 74 18 80 FB 01 75 05 E8 05 D2 EB 1D 80 FB 02  // .t....u.........
    4AA0: 75 10 8B C1 E8 B8 D1 D3 E8 8B C8 E8 B5 CC 74 2E  // u.............t.
    4AB0: EB 08 80 FB 03 75 24 E8 5C D1 E8 A2 D1 8B D8 D3  // .....u$.\.......
    4AC0: E3 50 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04  // .P3....;.w......
    4AD0: F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F  // ....X...O..2...O
    4AE0: B4 03 C3 00 0A DB 75 07 8A EF E8 83 CD EB 05 E8  // ......u.........
    4AF0: 68 CD 8A F8 B0 4F 32 E4 C3 00 E8 53 D1 74 2C BE  // h....O2....S.t,.
    4B00: 00 1C E8 72 D1 66 C1 E8 10 F6 C4 40 75 1D 0A FF  // ...r.f.....@u...
    4B10: 75 05 E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8  // u.........u.....
    4B20: EB E5 D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3  // .......O2...O...
    4B30: 32 C0 C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40  // 2..RSfP........@
    4B40: 66 C1 E0 10 8B C2 BB 13 00 E8 1C E5 BB 12 00 E8  // f...............
    4B50: 16 E5 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52  // ..fX[Z....fPfQfR
    4B60: 66 53 66 55 66 56 66 57 0E 1F E8 34 E6 E8 8A FF  // fSfUfVfW...4....
    4B70: E8 53 E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66  // .S....V..F.f_f^f
    4B80: 5D 66 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF  // ]f[fZfYfX.......
    4B90: C4 8E 2E 8B 0E C2 8E B8 4F 00 C3 00 0A DB 75 06  // ........O.....u.
    4BA0: B7 04 B3 10 EB 26 80 FB 01 75 14 E8 5A CC 75 21  // .....&...u..Z.u!
    4BB0: 53 B1 01 0A FF 74 02 B1 00 E8 6F CB 5B EB 0D 80  // S....t....o.[...
    4BC0: FB 02 75 0D E8 87 CC 8A F8 C0 E7 02 B0 4F 32 E4  // ..u..........O2.
    4BD0: C3 B8 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01  // ..O........u....
    4BE0: EB 0E E8 23 CC 75 0E 33 C0 53 E8 13 BB 5B 74 05  // ...#.u.3.S...[t.
    4BF0: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD  // .O2...O......r..
    4C00: 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // B...fPfQfRfSfUfV
    4C10: 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94  // fW..P.......X...
    4C20: DC 4B 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // .Kf_f^f]f[fZfYfX
    4C30: 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF  // .....P.......X..
    4C40: 94 DC 4B C3 16 4C 2C 85 45 85 62 85 09 4D 65 7C  // ..K..L,.E.b..Me|
    4C50: 97 7C 0A 7D 8D 7D 1B 7F 1F 7F 28 82 F9 82 7C 83  // .|.}.}....(...|.
    4C60: E3 83 7E 85 E0 85 89 88 22 4F D0 8C CA 4B CA 4B  // ..~....."O...K.K
    4C70: CA 4B CA 4B CA 4B CA 4B A0 8D A3 71 F7 72 2E 8E  // .K.K.K.K...q.r..
    4C80: 1E 3F 04 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4  // .?..&...P.......
    4C90: 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26  // .;.u.X........0&
    4CA0: F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09  // .G..t.... ..uI..
    4CB0: EB 06 A8 01 74 41 B5 0B 53 E8 70 41 0A FF 5B 75  // ....tA..S.pA..[u
    4CC0: 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87  // ..&........+X...
    4CD0: 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7  // ...&.........c..
    4CE0: 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01 AE 58  // ...............X
    4CF0: 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04  // .....B..&.......
    4D00: 58 53 50 0E 1F 33 C9 8A C8 E8 FC CA 74 06 E8 6D  // XSP..3......t..m
    4D10: C9 E8 BF C2 B2 08 BE 40 1C E8 F5 CC BE 40 1C E8  // .......@.....@..
    4D20: 24 C8 58 5B 0F 84 6E FF 2E 8E 1E 3F 04 0E 07 E8  // $.X[..n....?....
    4D30: 19 29 0E 1F 53 66 BB 40 1C 00 1C E8 30 CF BE 00  // .)..Sf.@....0...
    4D40: 1C B0 20 E8 59 C8 5B 2E 8E 1E 3F 04 0E 07 E8 22  // .. .Y.[...?...."
    4D50: 2E E8 24 00 E8 2E 3D E8 D1 01 E8 8E 01 E8 B4 3E  // ..$...=........>
    4D60: 0E 1F BE 00 1C B0 10 E8 35 C8 E8 FD 2D E8 F5 2D  // ........5...-..-
    4D70: C3 8B EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD  // ....F..../......
    4D80: 00 E8 52 00 E8 62 0A C3 53 83 C3 0A 8B 16 63 04  // ..R..b..S.....c.
    4D90: B9 19 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0  // .....0.2.&.'.C..
    4DA0: E2 F7 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3  // ..[...2...S.....
    4DB0: 05 B9 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20  // ......&.'<.u... 
    4DC0: EF 43 FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2  // .C....[&.G......
    4DD0: C4 B8 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6  // ..........#...&.
    4DE0: 47 09 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6  // G..u........t...
    4DF0: 10 EC B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4  // ............t...
    4E00: EE 26 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9  // .&...F.....S....
    4E10: 14 00 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43  // ..2........&...C
    4E20: E2 F4 8A C4 EE 32 C0 EE 1E 06 E8 4F 2D 0B ED 74  // .....2.....O-..t
    4E30: 09 1F 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83  // ........F...[.S.
    4E40: C3 37 B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE  // .7...2....&.'.C.
    4E50: C0 E2 F7 5B C3 BB E0 50 0E 07 8B D3 0A E4 7D 01  // ...[...P......}.
    4E60: C3 E8 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89  // .....3.....<J...
    4E70: 04 10 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74  // ..u ...$.<.~$<.t
    4E80: 20 3C 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81  //  <.t.<.t..@.....
    4E90: C3 00 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04  // .....@..........
    4EA0: C3 B0 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89  // ..@........u....
    4EB0: 04 10 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF 62  // ..u............b
    4EC0: 4E BE 83 4E 33 C9 E8 4E 00 C3 04 80 00 05 80 00  // N..N3..N........
    4ED0: 06 C0 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11  // ................
    4EE0: 40 05 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04  // @.......b@.S..I.
    4EF0: 80 FB 07 7F 10 32 FF D1 E3 2E 8B 87 9F 4E A2 65  // .....2.......N.e
    4F00: 04 88 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A  // ..&f.[.,0(0-0)0*
    4F10: 30 2E 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01  // 0.0.?)0.8%u...].
    4F20: 33 F6 C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E  // 3.....;.u.......
    4F30: 3F 04 F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42  // ?......uI.>L..tB
    4F40: A0 49 04 B9 00 20 2E 8B 3E 45 04 26 F6 47 33 01  // .I... ..>E.&.G3.
    4F50: 75 0E 26 F6 47 09 01 75 1B 2E 8B 3E 43 04 EB 14  // u.&.G..u...>C...
    4F60: 3C 06 7E 0B 2E 8B 3E 41 04 26 8A 67 37 B5 40 66  // <.~...>A.&.g7.@f
    4F70: 33 C0 EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3  // 3...f. . ...f3..
    4F80: 66 AB 80 26 87 04 7F 07 1F C3 2E 8E 1E 3F 04 80  // f..&.........?..
    4F90: FB 10 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80  // ..u..z... u.....
    4FA0: FB 32 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2  // .2u......u......
    4FB0: EE E9 F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE  // ...........$....
    4FC0: E9 E4 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04  // .....5u(<.u.....
    4FD0: 40 E9 D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F  // @.......@.......
    4FE0: 84 CA 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00  // .....u..........
    4FF0: 80 FB 30 74 03 E9 96 00 50 E8 30 3E 8A EF BA CC  // ..0t....P.0>....
    5000: 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12  // ....X..u0.....u.
    5010: 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9  // ..u....$0<0u....
    5020: 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89  // .....$0<0u....&.
    5030: 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89  // .o......6<.uA.&.
    5040: 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30  // .o.....u......$0
    5050: 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10  // <0t.....t.......
    5060: 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A  // .$0<0u.....t....
    5070: 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02  // .............)<.
    5080: 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB  // u+.&..o.........
    5090: 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08  // 1u...t.<.u......
    50A0: EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB  // ...&......F.....
    50B0: 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD  // 3u.<.t.<.u..&...
    50C0: EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00  // ...........4u.<.
    50D0: 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87  // u..&.....<.u....
    50E0: 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74  // .......6u&. .<.t
    50F0: 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C  // ....<.t.........
    5100: FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3  // .......B."......
    5110: C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0  // ...........u....
    5120: 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89  // ........%.......
    5130: 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00  // ^..N..F.........
    5140: 90 76 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00  // .v......(.......
    5150: 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00  // .c-'(.+.........
    5160: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    5170: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    5180: 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00  // ........P.......
    5190: 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00  // .c_OP.U.........
    51A0: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    51B0: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    51C0: 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00  // ........(...@...
    51D0: 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00  // .c-'(.+.........
    51E0: 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02  // ................
    51F0: 04 06 07 10 11 12 13 14 15 16 17 01 00 03 00 00  // ................
    5200: 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00  // ....0...P...@...
    5210: 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00  // .c_OP.T.........
    5220: 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17  // .....(..........
    5230: 17 17 17 17 17 17 17 17 17 17 17 01 00 01 00 00  // ................
    5240: 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00  // ........P.......
    5250: 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    5260: 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08  // ....](.c........
    5270: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    5280: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    5290: 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    52A0: 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04  // .....P..........
    52B0: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10  // ................
    52C0: 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28  // ....@..........(
    52D0: 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18  // ..-2 $8?........
    52E0: 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15  // . $(-28?........
    52F0: 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10  // ..%/83.*%')*,#..
    5300: 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34  // #%'*,+*))-27;974
    5310: 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33  // 234551,'/0234433
    5320: 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31  // 258:=<:98899:741
    5330: 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13  // ................
    5340: 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13  // ................
    5350: 12 14 16 18 1A 19 18 17 16 17 17 17 18 15 14 11  // ................
    5360: 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19  // ................
    5370: 19 19 19 19 1A 18 17 16 02 03 04 05 07 06 06 05  // ................
    5380: 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04  // ................
    5390: 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D  // ................
    53A0: 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D  // ................
    53B0: 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C  // ................
    53C0: 00 00 00 00 00 00 00 00 28 18 08 00 20 09 0F 00  // ........(... ...
    53D0: 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00  // .c-'(.+.........
    53E0: 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04  // ................
    53F0: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    5400: 00 00 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00  // ........P...@...
    5410: 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00  // .c_OP.T.........
    5420: 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04  // .....(..........
    5430: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    5440: 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28  // ..............%(
    5450: 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36  // ... ..(,..%*..26
    5460: 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30  // ..',. 49...$..,0
    5470: 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D  // ..!&...3..+0.$8=
    5480: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    5490: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    54A0: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    54B0: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    54C0: 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00  // ..-2 $8?P.......
    54D0: 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    54E0: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18  // ....](.c........
    54F0: 18 00 00 00 08 00 00 00 18 00 00 0B 00 05 00 00  // ................
    5500: 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00  // ........P.......
    5510: 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    5520: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04  // ....](.c........
    5530: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    5540: 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00  // ........(.......
    5550: 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00  // ..-'(.+....M....
    5560: 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04  // ....]..c........
    5570: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    5580: 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00  // ........P.......
    5590: 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    55A0: 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04  // ....](.c........
    55B0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    55C0: 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00  // ........(.......
    55D0: 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00  // .g-'(.+....O....
    55E0: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    55F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    5600: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    5610: 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .g_OP.U....O....
    5620: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    5630: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    5640: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    5650: 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .f_OP.U....O....
    5660: 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08  // .....(..........
    5670: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    5680: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    5690: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    56A0: 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F  // .....(......????
    56B0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00  // ???????????.....
    56C0: 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    56D0: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    56E0: 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04  // .....(..........
    56F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    5700: 00 00 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00  // ........(... ...
    5710: 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00  // .c_OP.T....A....
    5720: 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04  // .....(@.........
    5730: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00  // ...........A....
    5740: 00 00 00 00 40 05 0F FF E0 50 00 C0 00 00 00 00  // ....@....P......
    5750: 00 00 00 00 00 00 00 00 00 57 00 C0 00 00 00 00  // .........W......
    5760: 00 00 00 00 00 00 00 00 1A 00 9E 8E 00 C0 00 00  // ................
    5770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5780: 00 00 1E E8 10 00 2E 8E 1E 3F 04 E8 FE 36 E8 D5  // .........?...6..
    5790: 36 E8 76 1A 1F C3 2E 8E 1E 3F 04 C7 06 87 04 60  // 6.v......?.....`
    57A0: F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04  // ...........$....
    57B0: B4 01 E8 73 1E A0 89 04 80 26 10 04 CF 80 0E 10  // ...s.....&......
    57C0: 04 20 C7 06 63 04 D4 03 0E 1F E8 75 B8 F7 C1 02  // . ..c......u....
    57D0: 00 75 03 E8 FD B7 B8 03 00 E8 57 F4 C3 1E 2E 8E  // .u........W.....
    57E0: 1E 3F 04 0E 07 EB 00 1F C3 F6 06 89 04 08 74 01  // .?............t.
    57F0: C3 53 BA C8 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63  // .S............>c
    5800: 04 B4 75 2F BE 62 58 B9 40 00 33 DB 9C FA 8A C3  // ..u/.bX.@.3.....
    5810: EE 8B FB C1 EF 03 83 E7 03 03 FE 2E 8A 05 42 EE  // ..............B.
    5820: 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D  // ..E....E....J...
    5830: E9 85 00 26 8A 47 2B F6 06 89 04 06 74 31 B9 F8  // ...&.G+.....t1..
    5840: 00 BF 60 52 3C 08 74 11 B9 40 00 BF E0 53 3C 38  // ..`R<.t..@...S<8
    5850: 74 07 3C 3F 74 03 BF 20 54 33 DB 9C FA 8A C3 EE  // t.<?t.. T3......
    5860: 2E 8A 01 42 EE EE EE FE C3 4A E2 F1 9D EB 49 3C  // ...B.....J....I<
    5870: 08 74 25 3C 38 74 2E 3C 3F 74 2A B9 08 00 33 DB  // .t%<8t.<?t*...3.
    5880: 51 E8 CB D3 B9 08 00 F7 C3 10 00 74 03 83 C7 18  // Q..........t....
    5890: E8 67 00 59 E2 EA EB 20 E8 B4 D3 B9 10 00 33 DB  // .g.Y... ......3.
    58A0: E8 57 00 EB 13 B9 40 00 33 DB 51 E8 28 00 8A C3  // .W....@.3.Q.(...
    58B0: E8 B7 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A  // ../..Y..[..*.*.*
    58C0: 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A  // .*.?.?.?.?.*.?.*
    58D0: 00 3F 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A  // .?.*.?..........
    58E0: B5 52 58 8B FB D1 EF 83 E7 0F 2E 8A AD 52 58 8B  // .RX..........RX.
    58F0: FB 83 E7 0F 2E 8A 8D 52 58 C3 9C 8A C3 FA EE 2E  // .......RX.......
    5900: 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE  // ..B.G....G....G.
    5910: C3 4A E2 E7 9D C3 00 00 00 00 00 00 00 00 7E 81  // .J............~.
    5920: A5 81 BD 99 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE  // .....~|.....|...
    5930: FE FE 7C 38 10 00 10 38 7C FE 7C 38 10 00 10 38  // ..|8...8|.|8...8
    5940: 10 EE EE 10 38 00 38 7C FE FE 6C 10 38 00 00 18  // ....8.8|..l.8...
    5950: 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF 00 18  // <~<.............
    5960: 3C 66 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E  // <ff<............
    5970: 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A  // .6x..x~..~.~....
    5980: 1E 18 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C  // ...p.`>>66.f...<
    5990: 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00 02 06  // f.f<............
    59A0: 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C 18 00 66 66  // .>.....<~.~<..ff
    59B0: 66 66 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66  // fff.f...{;....<f
    59C0: 38 6C 6C 38 CC 78 00 00 00 00 FE FE FE 00 18 3C  // 8ll8.x.........<
    59D0: 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18 18 00 18 18  // ~.~<.~.<~.......
    59E0: 18 18 7E 3C 18 00 00 18 1C FE 1C 18 00 00 00 30  // ..~<...........0
    59F0: 70 FE 70 30 00 00 00 00 C0 C0 C0 FE 00 00 00 24  // p.p0...........$
    5A00: 66 FF 66 24 00 00 00 10 38 7C 7C FE 00 00 00 FE  // f.f$....8||.....
    5A10: 7C 7C 38 10 00 00 00 00 00 00 00 00 00 00 18 3C  // ||8............<
    5A20: 3C 18 18 00 18 00 6C 6C 6C 00 00 00 00 00 6C 6C  // <.....lll.....ll
    5A30: FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC 18 00 00 C6  // .l.ll..~.|......
    5A40: 0C 18 30 60 C6 00 38 6C 38 76 CC CC 76 00 18 18  // ..0`..8l8v..v...
    5A50: 30 00 00 00 00 00 18 30 60 60 60 30 18 00 60 30  // 0......0```0..`0
    5A60: 18 18 18 30 60 00 00 EE 7C FE 7C EE 00 00 00 18  // ...0`...|.|.....
    5A70: 18 7E 18 18 00 00 00 00 00 00 18 18 30 00 00 00  // .~..........0...
    5A80: 00 FE 00 00 00 00 00 00 00 00 00 38 38 00 06 0C  // ...........88...
    5A90: 18 30 60 C0 80 00 7C C6 CE DE F6 E6 7C 00 18 78  // .0`...|.....|..x
    5AA0: 18 18 18 18 7E 00 7C C6 0C 18 30 66 FE 00 7C C6  // ....~.|...0f..|.
    5AB0: 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0  // .<..|...<l......
    5AC0: FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6  // ....|.|.....|...
    5AD0: 06 0C 18 18 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6  // ......|..|..|.|.
    5AE0: C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00 00 18  // .~..|...........
    5AF0: 18 00 00 18 18 30 0C 18 30 60 30 18 0C 00 00 00  // .....0..0`0.....
    5B00: FE 00 00 FE 00 00 60 30 18 0C 18 30 60 00 7C C6  // ......`0...0`.|.
    5B10: 06 0C 18 00 18 00 7C C6 C6 DE DC C0 7E 00 38 6C  // ......|.....~.8l
    5B20: C6 C6 FE C6 C6 00 FC 66 66 7C 66 66 FC 00 3C 66  // .......ff|ff..<f
    5B30: C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C F8 00 FE C2  // ...f<..lfffl....
    5B40: C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60 F0 00 7C C6  // .......b`|``..|.
    5B50: C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18  // ....|.........<.
    5B60: 18 18 18 18 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC  // ....<.<.....p...
    5B70: D8 F0 D8 CC C6 00 F0 60 60 60 60 62 FE 00 C6 EE  // .......````b....
    5B80: FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6  // ..............|.
    5B90: C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60 F0 00 7C C6  // ....|..ff|``..|.
    5BA0: C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6  // ....|.........|.
    5BB0: C0 7C 06 C6 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6  // .|..|.~Z....<...
    5BC0: C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6  // ....|.....l8....
    5BD0: D6 D6 FE EE C6 00 C6 6C 38 38 38 6C C6 00 66 66  // .......l888l..ff
    5BE0: 66 3C 18 18 3C 00 FE 86 0C 18 30 62 FE 00 7C 60  // f<..<.....0b..|`
    5BF0: 60 60 60 60 7C 00 C0 60 30 18 0C 06 02 00 7C 0C  // ````|..`0.....|.
    5C00: 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00 00 00 00 00  // ....|..8l.......
    5C10: 00 00 00 00 00 FF 30 30 18 00 00 00 00 00 00 00  // ......00........
    5C20: 78 0C 7C CC 7E 00 E0 60 7C 66 66 66 FC 00 00 00  // x.|.~..`|fff....
    5C30: 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00 00 00  // |...|...|...~...
    5C40: 7C C6 FE C0 7C 00 1C 36 30 FC 30 30 78 00 00 00  // |...|..60.00x...
    5C50: 76 CE C6 7E 06 7C E0 60 7C 66 66 66 E6 00 18 00  // v..~.|.`|fff....
    5C60: 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60  // 8...<........x.`
    5C70: 66 6C 78 6C E6 00 18 18 18 18 18 18 1C 00 00 00  // flxl............
    5C80: 6C FE D6 D6 C6 00 00 00 DC 66 66 66 66 00 00 00  // l........ffff...
    5C90: 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C 60 F0 00 00  // |...|....ff|`...
    5CA0: 76 CC CC 7C 0C 1E 00 00 DC 66 60 60 F0 00 00 00  // v..|.....f``....
    5CB0: 7C C0 7C 06 7C 00 30 30 FC 30 30 36 1C 00 00 00  // |.|.|.00.006....
    5CC0: CC CC CC CC 76 00 00 00 C6 C6 6C 38 10 00 00 00  // ....v.....l8....
    5CD0: C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C C6 00 00 00  // ....l....l8l....
    5CE0: C6 C6 CE 76 06 7C 00 00 FC 98 30 64 FC 00 0E 18  // ...v.|....0d....
    5CF0: 18 70 18 18 0E 00 18 18 18 00 18 18 18 00 70 18  // .p............p.
    5D00: 18 0E 18 18 70 00 76 DC 00 00 00 00 00 00 00 10  // ....p.v.........
    5D10: 38 38 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78 00 C6  // 88ll..<f.f<..x..
    5D20: 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0 7C 00 7C C6  // ....v...|...|.|.
    5D30: 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00  // x.|.~...x.|.~...
    5D40: 78 0C 7C CC 7E 00 38 38 78 0C 7C CC 7E 00 00 00  // x.|.~.88x.|.~...
    5D50: 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00  // |.|.l8|.|...|...
    5D60: 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0 7C 00 66 00  // |...|...|...|.f.
    5D70: 38 18 18 18 3C 00 7C C6 38 18 18 18 3C 00 00 00  // 8...<.|.8...<...
    5D80: 38 18 18 18 3C 00 C6 38 6C C6 FE C6 C6 00 38 38  // 8...<..8l.....88
    5D90: 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00 00 00  // .|..............
    5DA0: 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6  // l.~.n.~.......|.
    5DB0: 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0  // .|..|....|..|...
    5DC0: 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0  // .|..|.|.....v...
    5DD0: 00 C6 C6 CE 76 00 18 00 3C 18 18 18 3C 00 C6 38  // ....v...<...<..8
    5DE0: 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18  // l..l8.......|...
    5DF0: 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6 6C 00 C3 66  // ~..~..8l`.f.l..f
    5E00: 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E 00 1C 00 3E  // <~.<..>c8.c>...>
    5E10: 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00  // a<.|....x.|.~...
    5E20: 38 18 18 18 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E  // 8...<....|..|...
    5E30: 00 CC CC DC 76 00 00 FC 00 BC 66 66 E6 00 FE 00  // ....v.....ff....
    5E40: C6 E6 F6 CE C6 00 3E 00 3E 60 67 63 3D 00 3E 00  // ......>.>`gc=.>.
    5E50: 76 CE C6 7E 06 7C 18 00 18 30 60 66 3C 00 00 00  // v..~.|...0`f<...
    5E60: 00 7C 60 60 00 00 00 00 00 7C 0C 0C 00 00 C0 CC  // .|``.....|......
    5E70: D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00  // .0|6.>...0l<~...
    5E80: 18 18 3C 3C 18 00 00 36 6C D8 6C 36 00 00 00 D8  // ..<<...6l.l6....
    5E90: 6C 36 6C D8 00 00 22 88 22 88 22 88 22 88 55 AA  // l6l...".".".".U.
    5EA0: 55 AA 55 AA 55 AA DD 77 DD 77 DD 77 DD 77 18 18  // U.U.U..w.w.w.w..
    5EB0: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    5EC0: F8 18 F8 18 18 18 36 36 36 36 F6 36 36 36 00 00  // ......6666.666..
    5ED0: 00 00 FE 36 36 36 00 00 F8 18 F8 18 18 18 36 36  // ...666........66
    5EE0: F6 06 F6 36 36 36 36 36 36 36 36 36 36 36 00 00  // ...66666666666..
    5EF0: FE 06 F6 36 36 36 36 36 F6 06 FE 00 00 00 36 36  // ...66666......66
    5F00: 36 36 FE 00 00 00 18 18 F8 18 F8 00 00 00 00 00  // 66..............
    5F10: 00 00 F8 18 18 18 18 18 18 18 1F 00 00 00 18 18  // ................
    5F20: 18 18 FF 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    5F30: 18 18 1F 18 18 18 00 00 00 00 FF 00 00 00 18 18  // ................
    5F40: 18 18 FF 18 18 18 18 18 1F 18 1F 18 18 18 36 36  // ..............66
    5F50: 36 36 37 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6676666670?.....
    5F60: 3F 30 37 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // ?0766666........
    5F70: FF 00 F7 36 36 36 36 36 37 30 37 36 36 36 00 00  // ...66666707666..
    5F80: FF 00 FF 00 00 00 36 36 F7 00 F7 36 36 36 18 18  // ......66...666..
    5F90: FF 00 FF 00 00 00 36 36 36 36 FF 00 00 00 00 00  // ......6666......
    5FA0: FF 00 FF 18 18 18 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    5FB0: 36 36 3F 00 00 00 18 18 1F 18 1F 00 00 00 00 00  // 66?.............
    5FC0: 1F 18 1F 18 18 18 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    5FD0: 36 36 FF 36 36 36 18 18 FF 18 FF 18 18 18 18 18  // 66.666..........
    5FE0: 18 18 F8 00 00 00 00 00 00 00 1F 18 18 18 FF FF  // ................
    5FF0: FF FF FF FF FF FF 00 00 00 00 FF FF FF FF F0 F0  // ................
    6000: F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF  // ................
    6010: FF FF 00 00 00 00 00 00 66 DC D8 DC 66 00 00 78  // ........f...f..x
    6020: CC F8 CC C6 CC 00 00 FE 62 60 60 60 E0 00 00 FE  // ........b```....
    6030: 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00 00 7E  // lllll...`0`....~
    6040: D8 CC CC D8 70 00 00 66 66 66 66 7C C0 00 00 76  // ....p..ffff|...v
    6050: DC 18 18 18 38 00 FE 38 6C C6 6C 38 FE 00 38 6C  // ....8..8l.l8..8l
    6060: C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C EE 00 3E 60  // ...l8.8l..ll..>`
    6070: 38 66 C6 CC 78 00 00 00 7E DB DB 7E 00 00 06 7C  // 8f..x...~..~...|
    6080: DE F6 E6 7C C0 00 38 60 C0 F8 C0 60 38 00 7C C6  // ...|..8`...`8.|.
    6090: C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE 00 00 18 18  // ................
    60A0: 7E 18 18 00 7E 00 30 18 0C 18 30 00 7E 00 0C 18  // ~...~.0...0.~...
    60B0: 30 18 0C 00 7E 00 0C 1E 18 18 18 18 18 18 18 18  // 0...~...........
    60C0: 18 18 18 78 30 00 00 00 18 00 7E 00 18 00 00 76  // ...x0.....~....v
    60D0: DC 00 76 DC 00 00 7C C6 C6 7C 00 00 00 00 00 00  // ..v...|..|......
    60E0: 00 18 18 00 00 00 00 00 00 00 18 00 00 00 1F 18  // ................
    60F0: 18 18 F8 38 18 00 D8 6C 6C 6C 00 00 00 00 70 D8  // ...8...lll....p.
    6100: 30 F8 00 00 00 00 00 00 7C 7C 7C 7C 00 00 00 00  // 0.......||||....
    6110: 00 00 00 00 00 00 1D 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
    6120: 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00  // ................
    6130: 00 00 00 00 00 00 00 00 00 00 00 7E 81 A5 81 81  // ...........~....
    6140: BD 99 81 81 7E 00 00 00 00 00 00 7C FE FE D6 FE  // ....~......|....
    6150: FE BA C6 FE 7C 00 00 00 00 00 00 00 6C EE FE FE  // ....|.......l...
    6160: FE FE 7C 38 10 00 00 00 00 00 00 00 10 38 7C FE  // ..|8.........8|.
    6170: 7C 38 10 00 00 00 00 00 00 00 00 00 10 38 38 10  // |8...........88.
    6180: 6C EE 6C 10 38 00 00 00 00 00 00 10 38 7C 7C FE  // l.l.8.......8||.
    6190: FE FE 6C 10 38 00 00 00 00 00 00 00 00 00 18 3C  // ..l.8..........<
    61A0: 3C 3C 18 00 00 00 00 00 00 FF FF FF FF FF E7 C3  // <<..............
    61B0: C3 C3 E7 FF FF FF FF FF FF 00 00 00 00 18 3C 66  // ..............<f
    61C0: 66 66 3C 18 00 00 00 00 00 FF FF FF FF E7 C3 99  // ff<.............
    61D0: 99 99 C3 E7 FF FF FF FF FF 00 00 1E 0E 1E 36 78  // ..............6x
    61E0: CC CC CC CC 78 00 00 00 00 00 00 3C 66 66 66 3C  // ....x......<fff<
    61F0: 18 7E 18 18 18 00 00 00 00 00 00 1E 1A 1E 18 18  // .~..............
    6200: 18 18 78 F8 70 00 00 00 00 00 00 3E 36 3E 36 36  // ..x.p......>6>66
    6210: 76 F6 66 0E 1E 0C 00 00 00 00 00 18 DB 7E 3C 66  // v.f..........~<f
    6220: 66 3C 7E DB 18 00 00 00 00 00 00 00 80 E0 F0 FC  // f<~.............
    6230: FE FC F0 E0 80 00 00 00 00 00 00 00 02 0E 3E 7E  // ..............>~
    6240: FE 7E 3E 0E 02 00 00 00 00 00 00 18 3C 7E 18 18  // .~>.........<~..
    6250: 18 18 7E 3C 18 00 00 00 00 00 00 66 66 66 66 66  // ..~<.......fffff
    6260: 66 66 00 66 66 00 00 00 00 00 00 7F DB DB DB DB  // ff.ff...........
    6270: 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C C6 C6 60 7C  // {..........|..`|
    6280: F6 DE 7C 0C C6 C6 7C 00 00 00 00 00 00 00 00 00  // ..|...|.........
    6290: 00 FE FE FE FE 00 00 00 00 00 00 18 3C 7E 18 18  // ............<~..
    62A0: 18 7E 3C 18 7E 00 00 00 00 00 00 18 3C 7E 18 18  // .~<.~.......<~..
    62B0: 18 18 18 18 18 00 00 00 00 00 00 18 18 18 18 18  // ................
    62C0: 18 18 7E 3C 18 00 00 00 00 00 00 00 00 00 0C 0E  // ..~<............
    62D0: FF 0E 0C 00 00 00 00 00 00 00 00 00 00 00 30 70  // ..............0p
    62E0: FE 70 30 00 00 00 00 00 00 00 00 00 00 00 00 C0  // .p0.............
    62F0: C0 C0 FE 00 00 00 00 00 00 00 00 00 00 00 24 66  // ..............$f
    6300: FF 66 24 00 00 00 00 00 00 00 00 00 10 38 38 38  // .f$..........888
    6310: 7C 7C FE FE 00 00 00 00 00 00 00 00 FE FE 7C 7C  // ||............||
    6320: 7C 38 38 10 00 00 00 00 00 00 00 00 00 00 00 00  // |88.............
    6330: 00 00 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 3C  // ............<<<<
    6340: 18 18 00 18 18 00 00 00 00 00 36 36 36 36 14 00  // ..........6666..
    6350: 00 00 00 00 00 00 00 00 00 00 00 6C 6C 6C FE 6C  // ...........lll.l
    6360: 6C FE 6C 6C 6C 00 00 00 00 00 00 18 18 7C C6 C0  // l.lll........|..
    6370: 78 3C 06 C6 7C 18 18 00 00 00 00 00 00 00 62 66  // x<..|.........bf
    6380: 0C 18 30 66 C6 00 00 00 00 00 00 38 6C 38 30 76  // ..0f.......8l80v
    6390: 7E CC CC CC 76 00 00 00 00 00 0C 0C 0C 18 00 00  // ~...v...........
    63A0: 00 00 00 00 00 00 00 00 00 00 00 0C 18 30 30 30  // .............000
    63B0: 30 30 30 18 0C 00 00 00 00 00 00 30 18 0C 0C 0C  // 000........0....
    63C0: 0C 0C 0C 18 30 00 00 00 00 00 00 00 00 00 6C 38  // ....0.........l8
    63D0: FE 38 6C 00 00 00 00 00 00 00 00 00 00 00 18 18  // .8l.............
    63E0: 7E 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00  // ~...............
    63F0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    6400: FE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6410: 00 00 00 18 18 00 00 00 00 00 00 00 00 02 06 0C  // ................
    6420: 18 30 60 C0 80 00 00 00 00 00 00 7C C6 C6 CE DE  // .0`........|....
    6430: F6 E6 C6 C6 7C 00 00 00 00 00 00 18 78 18 18 18  // ....|.......x...
    6440: 18 18 18 18 7E 00 00 00 00 00 00 7C C6 C6 06 0C  // ....~......|....
    6450: 18 30 60 C6 FE 00 00 00 00 00 00 7C C6 06 06 3C  // .0`........|...<
    6460: 06 06 06 C6 7C 00 00 00 00 00 00 0C 1C 3C 6C CC  // ....|........<l.
    6470: CC FE 0C 0C 1E 00 00 00 00 00 00 FE C0 C0 C0 FC  // ................
    6480: 06 06 06 C6 7C 00 00 00 00 00 00 7C C6 C0 C0 FC  // ....|......|....
    6490: C6 C6 C6 C6 7C 00 00 00 00 00 00 FE C6 06 0C 18  // ....|...........
    64A0: 30 30 30 30 30 00 00 00 00 00 00 7C C6 C6 C6 7C  // 00000......|...|
    64B0: C6 C6 C6 C6 7C 00 00 00 00 00 00 7C C6 C6 C6 C6  // ....|......|....
    64C0: 7E 06 06 C6 7C 00 00 00 00 00 00 00 00 00 0C 0C  // ~...|...........
    64D0: 00 00 0C 0C 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
    64E0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 0C 18 30 60  // ..............0`
    64F0: C0 60 30 18 0C 00 00 00 00 00 00 00 00 00 00 FE  // .`0.............
    6500: 00 FE 00 00 00 00 00 00 00 00 00 00 60 30 18 0C  // ............`0..
    6510: 06 0C 18 30 60 00 00 00 00 00 00 7C C6 C6 0C 18  // ...0`......|....
    6520: 18 18 00 18 18 00 00 00 00 00 00 7C C6 C6 C6 DE  // ...........|....
    6530: DE DE DC C0 7E 00 00 00 00 00 00 38 6C C6 C6 C6  // ....~......8l...
    6540: FE C6 C6 C6 C6 00 00 00 00 00 00 FC 66 66 66 7C  // ............fff|
    6550: 66 66 66 66 FC 00 00 00 00 00 00 3C 66 C2 C0 C0  // ffff.......<f...
    6560: C0 C0 C2 66 3C 00 00 00 00 00 00 F8 6C 66 66 66  // ...f<.......lfff
    6570: 66 66 66 6C F8 00 00 00 00 00 00 FE 66 60 64 7C  // fffl........f`d|
    6580: 64 60 60 66 FE 00 00 00 00 00 00 FE 66 60 64 7C  // d``f........f`d|
    6590: 64 60 60 60 F0 00 00 00 00 00 00 7C C6 C6 C0 C0  // d```.......|....
    65A0: C0 CE C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE  // ....|...........
    65B0: C6 C6 C6 C6 C6 00 00 00 00 00 00 3C 18 18 18 18  // ...........<....
    65C0: 18 18 18 18 3C 00 00 00 00 00 00 3C 18 18 18 18  // ....<......<....
    65D0: 18 18 D8 D8 70 00 00 00 00 00 00 C6 C6 CC D8 F0  // ....p...........
    65E0: F0 D8 CC C6 C6 00 00 00 00 00 00 F0 60 60 60 60  // ............````
    65F0: 60 60 62 66 FE 00 00 00 00 00 00 C6 C6 EE EE FE  // ``bf............
    6600: D6 D6 D6 C6 C6 00 00 00 00 00 00 C6 C6 E6 E6 F6  // ................
    6610: DE CE CE C6 C6 00 00 00 00 00 00 7C C6 C6 C6 C6  // ...........|....
    6620: C6 C6 C6 C6 7C 00 00 00 00 00 00 FC 66 66 66 66  // ....|.......ffff
    6630: 7C 60 60 60 F0 00 00 00 00 00 00 7C C6 C6 C6 C6  // |```.......|....
    6640: C6 C6 D6 D6 7C 06 00 00 00 00 00 FC 66 66 66 7C  // ....|.......fff|
    6650: 78 6C 66 66 E6 00 00 00 00 00 00 7C C6 C0 C0 70  // xlff.......|...p
    6660: 1C 06 06 C6 7C 00 00 00 00 00 00 7E 5A 18 18 18  // ....|......~Z...
    6670: 18 18 18 18 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6  // ....<...........
    6680: C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6  // ....|...........
    6690: C6 C6 6C 38 10 00 00 00 00 00 00 C6 C6 C6 D6 D6  // ..l8............
    66A0: D6 FE EE C6 C6 00 00 00 00 00 00 C6 C6 C6 6C 38  // ..............l8
    66B0: 38 6C C6 C6 C6 00 00 00 00 00 00 66 66 66 66 66  // 8l.........fffff
    66C0: 3C 18 18 18 3C 00 00 00 00 00 00 FE C6 86 0C 18  // <...<...........
    66D0: 30 60 C2 C6 FE 00 00 00 00 00 00 7C 60 60 60 60  // 0`.........|````
    66E0: 60 60 60 60 7C 00 00 00 00 00 00 00 00 80 C0 60  // ````|..........`
    66F0: 30 18 0C 06 02 00 00 00 00 00 00 7C 0C 0C 0C 0C  // 0..........|....
    6700: 0C 0C 0C 0C 7C 00 00 00 00 00 10 38 6C C6 00 00  // ....|......8l...
    6710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6720: 00 00 00 00 00 00 FF 00 00 00 18 18 18 0C 00 00  // ................
    6730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 0C  // ..............x.
    6740: 7C CC CC DC 76 00 00 00 00 00 00 E0 60 60 7C 66  // |...v.......``|f
    6750: 66 66 66 66 FC 00 00 00 00 00 00 00 00 00 7C C6  // ffff..........|.
    6760: C0 C0 C0 C6 7C 00 00 00 00 00 00 1C 0C 0C 7C CC  // ....|.........|.
    6770: CC CC CC CC 7E 00 00 00 00 00 00 00 00 00 7C C6  // ....~.........|.
    6780: C6 FE C0 C6 7C 00 00 00 00 00 00 1C 36 30 30 FC  // ....|.......600.
    6790: 30 30 30 30 78 00 00 00 00 00 00 00 00 00 76 CE  // 0000x.........v.
    67A0: C6 C6 CE 76 06 C6 7C 00 00 00 00 E0 60 60 7C 66  // ...v..|.....``|f
    67B0: 66 66 66 66 E6 00 00 00 00 00 00 18 18 00 38 18  // ffff..........8.
    67C0: 18 18 18 18 3C 00 00 00 00 00 00 0C 0C 00 1C 0C  // ....<...........
    67D0: 0C 0C 0C 0C CC CC 78 00 00 00 00 E0 60 60 66 66  // ......x.....``ff
    67E0: 6C 78 6C 66 E6 00 00 00 00 00 00 18 18 18 18 18  // lxlf............
    67F0: 18 18 18 18 1C 00 00 00 00 00 00 00 00 00 6C FE  // ..............l.
    6800: D6 D6 C6 C6 C6 00 00 00 00 00 00 00 00 00 DC 66  // ...............f
    6810: 66 66 66 66 66 00 00 00 00 00 00 00 00 00 7C C6  // fffff.........|.
    6820: C6 C6 C6 C6 7C 00 00 00 00 00 00 00 00 00 DC 66  // ....|..........f
    6830: 66 66 66 7C 60 60 F0 00 00 00 00 00 00 00 76 CC  // fff|``........v.
    6840: CC CC CC 7C 0C 0C 1E 00 00 00 00 00 00 00 DC 66  // ...|...........f
    6850: 60 60 60 60 F0 00 00 00 00 00 00 00 00 00 7C C6  // ````..........|.
    6860: C0 7C 06 C6 7C 00 00 00 00 00 00 30 30 30 FC 30  // .|..|......000.0
    6870: 30 30 30 36 1C 00 00 00 00 00 00 00 00 00 CC CC  // 0006............
    6880: CC CC CC CC 76 00 00 00 00 00 00 00 00 00 C6 C6  // ....v...........
    6890: C6 C6 6C 38 10 00 00 00 00 00 00 00 00 00 C6 C6  // ..l8............
    68A0: D6 D6 D6 FE 6C 00 00 00 00 00 00 00 00 00 C6 C6  // ....l...........
    68B0: 6C 38 6C C6 C6 00 00 00 00 00 00 00 00 00 C6 C6  // l8l.............
    68C0: C6 C6 CE 76 06 C6 7C 00 00 00 00 00 00 00 FE 86  // ...v..|.........
    68D0: 0C 18 30 62 FE 00 00 00 00 00 00 0E 18 18 18 70  // ..0b...........p
    68E0: 18 18 18 18 0E 00 00 00 00 00 00 18 18 18 18 00  // ................
    68F0: 18 18 18 18 18 00 00 00 00 00 00 70 18 18 18 0E  // ...........p....
    6900: 18 18 18 18 70 00 00 00 00 00 00 76 DC 00 00 00  // ....p......v....
    6910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 38  // ...............8
    6920: 38 6C 6C FE 00 00 00 00 00 00 00 3C 66 C0 C0 C0  // 8ll........<f...
    6930: C6 66 3C 18 0C CC 38 00 00 00 00 C6 00 00 C6 C6  // .f<...8.........
    6940: C6 C6 C6 CE 76 00 00 00 00 00 0C 18 30 00 7C C6  // ....v.......0.|.
    6950: C6 FE C0 C6 7C 00 00 00 00 00 30 78 CC 00 78 0C  // ....|.....0x..x.
    6960: 7C CC CC DC 76 00 00 00 00 00 00 CC 00 00 78 0C  // |...v.........x.
    6970: 7C CC CC DC 76 00 00 00 00 00 60 30 18 00 78 0C  // |...v.....`0..x.
    6980: 7C CC CC DC 76 00 00 00 00 00 38 6C 38 00 78 0C  // |...v.....8l8.x.
    6990: 7C CC CC DC 76 00 00 00 00 00 00 00 00 7C C6 C0  // |...v........|..
    69A0: C0 C6 7C 18 0C 6C 38 00 00 00 30 78 CC 00 7C C6  // ..|..l8...0x..|.
    69B0: C6 FE C0 C6 7C 00 00 00 00 00 00 CC 00 00 7C C6  // ....|.........|.
    69C0: C6 FE C0 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6  // ....|.....0...|.
    69D0: C6 FE C0 C6 7C 00 00 00 00 00 00 66 00 00 38 18  // ....|......f..8.
    69E0: 18 18 18 18 3C 00 00 00 00 00 18 3C 66 00 38 18  // ....<......<f.8.
    69F0: 18 18 18 18 3C 00 00 00 00 00 00 00 00 00 38 18  // ....<.........8.
    6A00: 18 18 18 18 3C 00 00 00 00 00 C6 00 38 6C C6 C6  // ....<.......8l..
    6A10: C6 FE C6 C6 C6 00 00 00 00 38 6C 38 00 38 6C C6  // .........8l8.8l.
    6A20: C6 FE C6 C6 C6 00 00 00 00 0C 18 30 00 FE 60 60  // ...........0..``
    6A30: 7C 60 60 60 FE 00 00 00 00 00 00 00 00 66 DB 1B  // |```.........f..
    6A40: 7F D8 D8 DF 76 00 00 00 00 00 00 7E D8 D8 D8 D8  // ....v......~....
    6A50: FE D8 D8 D8 DE 00 00 00 00 00 30 78 CC 00 7C C6  // ..........0x..|.
    6A60: C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 00 00 7C C6  // ....|.........|.
    6A70: C6 C6 C6 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6  // ....|.....0...|.
    6A80: C6 C6 C6 C6 7C 00 00 00 00 00 30 78 CC 00 C6 C6  // ....|.....0x....
    6A90: C6 C6 C6 CE 76 00 00 00 00 00 60 30 18 00 C6 C6  // ....v.....`0....
    6AA0: C6 C6 C6 CE 76 00 00 00 00 00 18 00 3C 18 18 18  // ....v.......<...
    6AB0: 18 18 18 18 3C 00 00 00 00 00 C6 00 7C C6 C6 C6  // ....<.......|...
    6AC0: C6 C6 C6 C6 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6  // ....|...........
    6AD0: C6 C6 C6 C6 7C 00 00 00 00 00 00 18 18 7C C6 C0  // ....|........|..
    6AE0: C0 C6 7C 18 18 00 00 00 00 00 38 6C 60 60 F0 60  // ..|.......8l``.`
    6AF0: 60 60 66 F6 6C 00 00 00 00 00 66 66 66 66 3C 18  // ``f.l.....ffff<.
    6B00: 7E 18 3C 18 18 00 00 00 00 00 00 3E 63 63 30 1C  // ~.<........>cc0.
    6B10: 06 63 63 3E 00 1C 00 00 00 00 00 00 00 00 3E 63  // .cc>..........>c
    6B20: 38 0E 63 3E 00 1C 00 00 00 00 0C 18 30 00 78 0C  // 8.c>........0.x.
    6B30: 7C CC CC DC 76 00 00 00 00 00 0C 18 30 00 38 18  // |...v.......0.8.
    6B40: 18 18 18 18 3C 00 00 00 00 00 0C 18 30 00 7C C6  // ....<.......0.|.
    6B50: C6 C6 C6 C6 7C 00 00 00 00 00 18 30 60 00 CC CC  // ....|......0`...
    6B60: CC CC CC DC 76 00 00 00 00 00 00 76 DC 00 BC 66  // ....v......v...f
    6B70: 66 66 66 66 E6 00 00 00 00 00 76 DC 00 C6 C6 E6  // ffff......v.....
    6B80: F6 DE CE C6 C6 00 00 00 00 00 21 1E 00 1E 33 60  // ..........!...3`
    6B90: 60 67 63 33 1D 00 00 00 00 00 42 3C 00 3B 66 66  // `gc3......B<.;ff
    6BA0: 66 3E 06 66 3C 00 00 00 00 00 00 30 30 00 30 30  // f>.f<......00.00
    6BB0: 30 60 C6 C6 7C 00 00 00 00 00 00 00 00 00 00 00  // 0`..|...........
    6BC0: 7E 60 60 60 00 00 00 00 00 00 00 00 00 00 00 00  // ~```............
    6BD0: 7E 06 06 06 00 00 00 00 00 00 60 60 62 66 6C 18  // ~.........``bfl.
    6BE0: 30 60 DC 36 0C 18 3E 00 00 00 60 60 62 66 6C 18  // 0`.6..>...``bfl.
    6BF0: 36 6E DE 36 7E 06 06 00 00 00 00 18 18 00 18 18  // 6n.6~...........
    6C00: 3C 3C 3C 3C 18 00 00 00 00 00 00 00 00 00 36 6C  // <<<<..........6l
    6C10: D8 6C 36 00 00 00 00 00 00 00 00 00 00 00 D8 6C  // .l6............l
    6C20: 36 6C D8 00 00 00 00 00 00 11 44 11 44 11 44 11  // 6l........D.D.D.
    6C30: 44 11 44 11 44 11 44 11 44 AA 55 AA 55 AA 55 AA  // D.D.D.D.D.U.U.U.
    6C40: 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD  // U.U.U.U.U.w.w.w.
    6C50: 77 DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18  // w.w.w.w.w.......
    6C60: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6C70: F8 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // ................
    6C80: F8 18 18 18 18 18 18 18 18 36 36 36 36 36 36 36  // .........6666666
    6C90: F6 36 36 36 36 36 36 36 36 00 00 00 00 00 00 00  // .66666666.......
    6CA0: FE 36 36 36 36 36 36 36 36 00 00 00 00 00 F8 18  // .66666666.......
    6CB0: F8 18 18 18 18 18 18 18 18 36 36 36 36 36 F6 06  // .........66666..
    6CC0: F6 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // .666666666666666
    6CD0: 36 36 36 36 36 36 36 36 36 00 00 00 00 00 FE 06  // 666666666.......
    6CE0: F6 36 36 36 36 36 36 36 36 36 36 36 36 36 F6 06  // .6666666666666..
    6CF0: FE 00 00 00 00 00 00 00 00 36 36 36 36 36 36 36  // .........6666666
    6D00: FE 00 00 00 00 00 00 00 00 18 18 18 18 18 F8 18  // ................
    6D10: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6D20: F8 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6D30: 1F 00 00 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    6D40: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6D50: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6D60: 1F 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    6D70: FF 00 00 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    6D80: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 18  // ................
    6D90: 1F 18 18 18 18 18 18 18 18 36 36 36 36 36 36 36  // .........6666666
    6DA0: 37 36 36 36 36 36 36 36 36 36 36 36 36 36 37 30  // 7666666666666670
    6DB0: 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 3F 30  // ?.............?0
    6DC0: 37 36 36 36 36 36 36 36 36 36 36 36 36 36 F7 00  // 76666666666666..
    6DD0: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    6DE0: F7 36 36 36 36 36 36 36 36 36 36 36 36 36 37 30  // .666666666666670
    6DF0: 37 36 36 36 36 36 36 36 36 00 00 00 00 00 FF 00  // 766666666.......
    6E00: FF 00 00 00 00 00 00 00 00 36 36 36 36 36 F7 00  // .........66666..
    6E10: F7 36 36 36 36 36 36 36 36 18 18 18 18 18 FF 00  // .66666666.......
    6E20: FF 00 00 00 00 00 00 00 00 36 36 36 36 36 36 36  // .........6666666
    6E30: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    6E40: FF 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    6E50: FF 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // .666666666666666
    6E60: 3F 00 00 00 00 00 00 00 00 18 18 18 18 18 1F 18  // ?...............
    6E70: 1F 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18  // ................
    6E80: 1F 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    6E90: 3F 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // ?666666666666666
    6EA0: FF 36 36 36 36 36 36 36 36 18 18 18 18 18 FF 18  // .66666666.......
    6EB0: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6EC0: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6ED0: 1F 18 18 18 18 18 18 18 18 FF FF FF FF FF FF FF  // ................
    6EE0: FF FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    6EF0: 00 FF FF FF FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0  // ................
    6F00: F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F  // ................
    6F10: 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF FF FF  // ................
    6F20: FF 00 00 00 00 00 00 00 00 00 00 00 00 76 DC D8  // .............v..
    6F30: D8 D8 D8 DC 76 00 00 00 00 00 00 78 CC CC D8 FC  // ....v......x....
    6F40: C6 C6 C6 C6 CC 00 00 00 00 00 00 FE 66 62 60 60  // ............fb``
    6F50: 60 60 60 60 60 00 00 00 00 00 00 00 00 00 FE 6C  // `````..........l
    6F60: 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE C6 62 30 18  // lllll........b0.
    6F70: 18 30 62 C6 FE 00 00 00 00 00 00 00 00 00 7E D8  // .0b...........~.
    6F80: CC CC CC D8 70 00 00 00 00 00 00 00 00 66 66 66  // ....p........fff
    6F90: 66 66 7C 60 C0 80 00 00 00 00 00 00 00 00 76 DC  // ff|`..........v.
    6FA0: 18 18 18 18 18 00 00 00 00 00 00 FE 38 38 6C C6  // ............88l.
    6FB0: C6 6C 38 38 FE 00 00 00 00 00 00 00 38 6C C6 C6  // .l88........8l..
    6FC0: FE C6 C6 6C 38 00 00 00 00 00 00 38 6C C6 C6 C6  // ...l8......8l...
    6FD0: C6 6C 6C 6C EE 00 00 00 00 00 00 3E 60 60 3C 66  // .lll.......>``<f
    6FE0: C6 C6 C6 CC 78 00 00 00 00 00 00 00 00 00 7E DB  // ....x.........~.
    6FF0: DB DB 7E 00 00 00 00 00 00 00 00 02 06 7C CE DE  // ..~..........|..
    7000: F6 F6 7C 60 C0 00 00 00 00 00 00 00 1C 30 60 60  // ..|`.........0``
    7010: 7C 60 60 30 1C 00 00 00 00 00 00 7C C6 C6 C6 C6  // |``0.......|....
    7020: C6 C6 C6 C6 C6 00 00 00 00 00 00 00 00 FE 00 00  // ................
    7030: FE 00 00 FE 00 00 00 00 00 00 00 00 00 18 18 7E  // ...............~
    7040: 18 18 00 00 7E 00 00 00 00 00 00 30 18 0C 06 0C  // ....~......0....
    7050: 18 30 00 00 7E 00 00 00 00 00 00 0C 18 30 60 30  // .0..~........0`0
    7060: 18 0C 00 00 7E 00 00 00 00 00 00 00 00 0C 1E 1A  // ....~...........
    7070: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7080: 18 18 18 58 78 30 00 00 00 00 00 00 00 18 18 00  // ...Xx0..........
    7090: 7E 00 18 18 00 00 00 00 00 00 00 00 00 00 00 76  // ~..............v
    70A0: DC 00 76 DC 00 00 00 00 00 00 00 78 CC CC 78 00  // ..v........x..x.
    70B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    70C0: 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    70D0: 00 18 00 00 00 00 00 00 00 00 00 1F 18 18 18 18  // ................
    70E0: 18 D8 D8 78 38 18 00 00 00 00 00 D8 6C 6C 6C 6C  // ...x8.......llll
    70F0: 6C 00 00 00 00 00 00 00 00 00 00 70 D8 18 30 60  // l..........p..0`
    7100: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 7E  // ..............~~
    7110: 7E 7E 7E 7E 00 00 00 00 00 00 00 00 00 00 00 00  // ~~~~............
    7120: 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 00 24  // ...............$
    7130: 66 FF 66 24 00 00 00 00 00 00 2F 00 00 00 01 03  // f.f$....../.....
    7140: 06 0C 18 30 60 C0 80 00 00 00 00 30 00 00 7E C3  // ...0`......0..~.
    7150: C3 C3 DB DB C3 C3 C3 7E 00 00 00 00 4D 00 00 C3  // .......~....M...
    7160: C3 E7 FF FF DB DB C3 C3 C3 00 00 00 00 54 00 00  // .............T..
    7170: FF 99 18 18 18 18 18 18 18 3C 00 00 00 00 56 00  // .........<....V.
    7180: 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00 00 57  // ........f<.....W
    7190: 00 00 C3 C3 C3 C3 DB DB DB DB FF 66 00 00 00 00  // ...........f....
    71A0: 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00  // X.....f<<f......
    71B0: 00 59 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C 00 00  // .Y......f<...<..
    71C0: 00 00 5C 00 00 00 80 C0 60 30 18 0C 06 03 01 00  // ..\.....`0......
    71D0: 00 00 00 6D 00 00 00 00 00 66 FF DB DB DB C3 C3  // ...m.....f......
    71E0: 00 00 00 00 76 00 00 00 00 00 C3 C3 C3 C3 66 3C  // ....v.........f<
    71F0: 18 00 00 00 00 77 00 00 00 00 00 C3 C3 DB DB DB  // .....w..........
    7200: FF 66 00 00 00 00 00 00 C1 60 C3 0B DB 74 03 E9  // .f.......`...t..
    7210: 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 8E 8E 26 89  // F.W2..@..._...&.
    7220: 1D 26 8C 4D 02 2E 8E 1E 3F 04 57 BE 49 04 B9 1E  // .&.M....?.W.I...
    7230: 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2 F7 5F A0  // .......&..FG.._.
    7240: 84 04 FE C0 26 88 45 22 A1 85 04 26 89 45 23 57  // ....&.E"...&.E#W
    7250: E8 D9 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E 49 04  // ..._&.]%&.}&..I.
    7260: E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A  // ...t......2.....
    7270: 87 66 8E 32 E4 0A C0 74 01 40 26 89 45 27 2E 8A  // .f.2...t.@&.E'..
    7280: 87 67 8E 26 88 45 29 A1 85 04 8A 16 84 04 FE C2  // .g.&.E).........
    7290: F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E  // ....=..~...=^.~.
    72A0: B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E 00 26 88  // ..=..~...=..~.&.
    72B0: 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04 80 E4 02  // U*.&....$.......
    72C0: D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A E0 E8 94  // ..........$.....
    72D0: 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C  // ....0.B.$.......
    72E0: 01 26 88 45 2D B0 03 26 88 45 31 E8 77 08 1E 06  // .&.E-..&.E1.w...
    72F0: 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74 34 26 C5  // 2.........;.t4&.
    7300: 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5 77 0C 8C  // w.....t....&.w..
    7310: D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C D9 0B F1  // ...t....&.w.....
    7320: 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1 74 03 80  // t....&.w.....t..
    7330: CA 01 07 1F 26 88 55 32 B0 03 BA C4 03 E8 E4 04  // ....&.U2........
    7340: 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04 04 25  // ...............%
    7350: 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A 1B C3 0A  // ....&.E+...F....
    7360: C0 74 0F FE C8 74 36 FE C8 74 56 8B EC C6 46 1A  // .t...t6..tV...F.
    7370: 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60 F6 C1 02  // ... ....t...`...
    7380: 74 03 83 C0 3A F6 C1 04 74 03 05 03 03 83 C0 3F  // t...:...t......?
    7390: C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3 8B FB 83  // ......F..F......
    73A0: C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02 74 03 E8  // . ...t.......t..
    73B0: EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6 46 1A 1C  // .....t.......F..
    73C0: C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6 C1 02 74  // ....t.....%....t
    73D0: 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB DC 8A C4  // .......t........
    73E0: EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03  // .B....J....k....
    73F0: B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA FE C4  // ...2.......B....
    7400: 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26 8A 05 88  // J........ ..&...
    7410: 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3  // .GF...&.%.G.....
    7420: B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C  // .....&..G.......
    7430: FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8 0A 04 EC  // .QW..+.&........
    7440: 26 88 44 01 26 89 54 41 B2 CE EC 26 88 44 02 B2  // &.D.&.TA...&.D..
    7450: CC EC 26 88 44 09 B2 CA EC 26 88 44 04 B2 C4 EC  // ..&.D....&.D....
    7460: 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70 FF 26 8A  // &...........p.&.
    7470: 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9 19 00  // .......&.TA2....
    7480: E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9  // .[.&.D..._...2..
    7490: 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83 C7 60 9D  // ...I.&.D.._Y..`.
    74A0: C3 9C FA 8B C7 2B C3 26 89 47 02 51 57 2E 8E 1E  // .....+.&.G.QW...
    74B0: 3F 04 A0 10 04 24 30 AA BE 49 04 B9 1E 00 F3 A4  // ?....$0..I......
    74C0: BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14  // ................
    74D0: 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1  // ......t......|..
    74E0: 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D  // .........._Y..:.
    74F0: C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05  // ...&.?....Q.....
    7500: BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8 07 FF 47  // ...............G
    7510: B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF 26 8A 04  // ..&.D........&..
    7520: EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE  // .&.TA......2....
    7530: 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE EC B1 15  // &.D.....&.D.....
    7540: 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2 CE E8 C5  // 2..... ...2.....
    7550: FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F 02 03  // .&.D..Y....&....
    7560: FB 06 51 2E 8E 1E 3F 04 26 8A 05 80 26 10 04 CF  // ..Q...?.&...&...
    7570: 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E FE BE 84  // ....G.I.........
    7580: 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E FE BE 14  // ............~...
    7590: 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E FE BE 7C  // ....v..t....n..|
    75A0: 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE 59 07  // ....f.......^.Y.
    75B0: 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8 A6 05 B2  // ......+.&.G.....
    75C0: C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC 26 88 45  // ..4.B.&......&.E
    75D0: 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9 00 03 42  // .PJJ.&.E.......B
    75E0: 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D C3 9C FA  // 2..BB....XJ.....
    75F0: 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A  // &.w....l....4.&.
    7600: 04 EE BA C6 03 26 8A 44 02 EE 56 42 42 83 C6 03  // .....&.D..VBB...
    7610: 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2 F9 5E FE  // 2..B...&...F..^.
    7620: CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4  // .&.D........$...
    7630: B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00  // ................
    7640: 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A E0 80 E4  // ........ ..P....
    7650: 80 80 26 87 04 7F 08 26 87 04 24 7F 8A E0 3C 07  // ..&....&..$...<.
    7660: 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13 3C 32 74  // ~.&.G3.u.<#t.<2t
    7670: 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75 02 B4 07  // .<3t...&.G..u...
    7680: 88 26 49 04 BA B4 03 80 0E 87 04 02 26 F6 47 09  // .&I.........&.G.
    7690: 01 74 07 B2 D4 80 26 87 04 FD 89 16 63 04 C7 06  // .t....&.....c...
    76A0: 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF 50 04 FC  // N.....b......P..
    76B0: 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04  // ...3....&..2..J.
    76C0: 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85 04 26 8B  // &.G....&.G....&.
    76D0: 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60 04 58 C3  // G..L.&.G....`.X.
    76E0: 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75 08 32 E4  // R2.3.......)u.2.
    76F0: 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E 3F 04  // 3.....Z...`...?.
    7700: 2E 83 0E 49 04 00 75 6E 80 3E 00 05 01 74 67 C6  // ...I..un.>...tg.
    7710: 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85  // ......b.2.......
    7720: 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04 32 ED 41  // P..>b.P2.....2.A
    7730: 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51  // Q..J.2......)u=Q
    7740: 52 89 95 50 04 B4 08 E8 B0 D4 0A C0 75 02 B0 20  // R..P........u.. 
    7750: 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2 59 E2  // 3.2.....)u.Z..Y.
    7760: DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00 05 58 89  // ...Y...w.2....X.
    7770: 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0 FF EB  // .P....a...ZYY...
    7780: EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06 41 04 5A  // .R*.8.}.2....A.Z
    7790: C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA C4 03 B8  // ................
    77A0: 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6  // ......m...2.....
    77B0: F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53  // ......Ku.2..W..S
    77C0: 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8 35 03 5B  // ..b...u...t..5.[
    77D0: 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A C6 32  // ..+.......2....2
    77E0: F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04 8B C8 52  // .+...t**..&....R
    77F0: B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B  // ... .......Z....
    7800: C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F E8 81 FF  // .........Hu.....
    7810: C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A  // ...........B.$..
    7820: C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E  // ..J....B...J....
    7830: 8E 1E 3F 04 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E  // ..?...c.........
    7840: 1E 3F 04 8B 16 63 04 1F C3 50 BA CC 03 EC B2 D4  // .?...c...P......
    7850: A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E  // ..u...X.........
    7860: 2E 8E 1E 3F 04 80 3E 49 04 03 74 13 80 3E 49 04  // ...?..>I..t..>I.
    7870: 02 74 0C 80 3E 49 04 01 74 05 80 3E 49 04 00 1F  // .t..>I..t..>I...
    7880: C3 50 2E 8E 06 43 04 A0 10 04 24 30 3C 30 74 05  // .P...C....$0<0t.
    7890: 2E 8E 06 45 04 58 0B C0 74 03 E8 E1 01 03 06 4E  // ...E.X..t......N
    78A0: 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B  // .....+.2...J....
    78B0: F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38  // ...........u...8
    78C0: F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0  // .~..............
    78D0: 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06 1F E8 40  // :.J.t..........@
    78E0: 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0  // ..............+.
    78F0: 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B  // ......S..*.2.2.+
    7900: EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE  // .+..............
    7910: CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE CB 75 F6  // .u.X. ........u.
    7920: C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B  // .S..*.t.......X.
    7930: C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E  // ..... ..........
    7940: 1E 45 04 8A C3 22 DF D3 E3 A8 80 74 03 30 1C C3  // .E...".....t.0..
    7950: F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC E8 0C 00  // ...4"...........
    7960: 2E 8E 1E 45 04 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2  // ...E....."...(..
    7970: F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05  // ...t............
    7980: 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE  // ................
    7990: 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06  // ................
    79A0: 45 04 8B C1 E8 86 00 75 02 8A DE 03 F0 E8 24 00  // E......u......$.
    79B0: C3 FC 8A D8 2E 8E 06 45 04 8A C1 8A E6 E8 6D 00  // .......E......m.
    79C0: 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0  // u.............+.
    79D0: E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA 56 57 D1  // ......*..,Q..VW.
    79E0: E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00  // .........+.+....
    79F0: 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03  //  ... ........_^.
    7A00: F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3  // ...Y........W...
    7A10: AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3  // .......+.... ...
    7A20: AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8 B0 00  // ....._....u.....
    7A30: 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51 B1 02 D2  // ....+.8.v.2.Q...
    7A40: E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04 06 74 04  // ...Y2..P..>I..t.
    7A50: D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB  // ...........P....
    7A60: C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04 E8 0E 00  // .RS..2.....P....
    7A70: 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B  // P...L...[..[Z.R.
    7A80: D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8  // ..J...2.....Z...
    7A90: 83 E5 0F 2E 8A A6 3E 7A 8B E8 C1 ED 04 83 E5 0F  // ......>z........
    7AA0: 2E 8A 86 3E 7A C3 00 03 0C 0F 30 33 3C 3F C0 C3  // ...>z.....03<?..
    7AB0: CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00 80 F6 C4  // ......&.........
    7AC0: C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88 56 00 45  // .t........u..V.E
    7AD0: C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3  // ...c............
    7AE0: 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2  // R.....&J....2...
    7AF0: 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04 D1 EB E8  // Z.S..2.....P....
    7B00: 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6 26 85 04  // ..[.R..2.R...&..
    7B10: F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06 4C 04 FE  // .&J.Z....t...L..
    7B20: CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03  // .u.Z.R...J...2..
    7B30: C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF  // .....N..........
    7B40: 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A  // Z....&J.........
    7B50: FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80 E1 07  // .t...2..&L......
    7B60: B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0  // ................
    7B70: 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E A8 04  //  .......2....>..
    7B80: 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A  // &.}......S......
    7B90: E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF  // ..............U.
    7BA0: B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76 FC 3C 55  // .....<.t....v.<U
    7BB0: 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF  // t.2.[...........
    7BC0: B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06 1F 0A DB  // ....[....6......
    7BD0: 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02  // t%..*.....R2....
    7BE0: 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59  // ....+.Q....+.+.Y
    7BF0: E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B  // ..Z.............
    7C00: C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1  // .....2..........
    7C10: 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E 3F  // +.....+.Nu.....?
    7C20: 04 89 0E 60 04 8A C5 24 60 A8 20 74 06 B9 00 1E  // ...`...$`. t....
    7C30: E9 94 00 F6 06 87 04 01 0F 85 8B 00 80 3E 49 04  // .............>I.
    7C40: 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04 08 74 03  // .t....t.......t.
    7C50: CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A  // .B..6......8.~..
    7C60: C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1 74 58 8A  // .td.......\8.tX.
    7C70: CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9  // ....|........I..
    7C80: 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA 74 38 FE  // .~D..*...u.8.t8.
    7C90: CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02  // .8.t2....8.~....
    7CA0: 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A D6 FE CA  // ~.........}.....
    7CB0: 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A EC 80 FE  // 8.t.........*...
    7CC0: 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E  // ................
    7CD0: 3F 04 A2 62 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04  // ?..b.2....&L..N.
    7CE0: 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77 02 D1 F9  // ...z.t..>I..w...
    7CF0: B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27 FE C3 2E  // .........P..'...
    7D00: 8E 1E 3F 04 8A 26 49 04 E8 36 9F 74 07 C7 06 50  // ..?..&I..6.t...P
    7D10: 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74 06 77 08  // .....H.t....t.w.
    7D20: E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03 74 1F C3  // .w.........|.t..
    7D30: E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6  // .N..........J.R.
    7D40: 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3 E8 30  // &........Z.....0
    7D50: FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04  // ......g....R..J.
    7D60: C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A E8 55  // ....&........Z.U
    7D70: FE C3 2E 8E 1E 3F 04 8A 26 49 04 E8 E1 FA 74 0C  // .....?..&I....t.
    7D80: 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8 53 FB C3  // ...t.w@......S..
    7D90: E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8  // ................
    7DA0: 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04 F7 26  // ..+>J....R.&...&
    7DB0: 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5  // J......+.Z..J...
    7DC0: 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8  // ..........|.t...
    7DD0: AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E  // .............R..
    7DE0: 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7  // J..&....+...+.Z.
    7DF0: DD E8 E9 F9 C3 2E 8E 1E 3F 04 2E 8E 06 45 04 E8  // ........?....E..
    7E00: 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E 06 43 04  // ].t..>I..|....C.
    7E10: 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B EC 89  // t.....I...&.....
    7E20: 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3  // F...P.........+.
    7E30: 8B EC 80 3E 49 04 06 75 1F B9 04 00 26 8A 04 88  // ...>I..u....&...
    7E40: 46 00 45 26 8A 84 00 20 88 46 00 45 83 C6 50 E2  // F.E&... .F.E..P.
    7E50: EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC  // ..............V.
    7E60: 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B  // ... .O.........+
    7E70: EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26 83 7D FE  // ..>..2....u.&.}.
    7E80: 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6 80 74 01  // .u............t.
    7E90: 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6 C6 80  // GVW.._^t#.......
    7EA0: 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E 3F 04  // t.G..u...t....?.
    7EB0: C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5 03 E3  // .>|.......2.....
    7EC0: 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05 75 02 EB  // ...F...>I..|.u..
    7ED0: 5A C3 2E 8E 06 41 04 E8 18 FC 8B F0 8B 1E 85 04  // Z....A..........
    7EE0: 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03 80 3E 49  // +.............>I
    7EF0: 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A F7 C6 01  // ..r.....`u......
    7F00: 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05 01 EF 51  // .u.............Q
    7F10: 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36 4A 04 E2  // ..&.....F.E.6J..
    7F20: F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E 06 41 04  // .X....2..D....A.
    7F30: A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7 26 4A 04  // .P...2.R..2..&J.
    7F40: F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B  // .&..Z........+..
    7F50: EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00  // .S.>J.O.........
    7F60: 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC 01 46 E2  // 2.&......t....F.
    7F70: F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00 01 32 D2  // ..f.E..Ku.[...2.
    7F80: E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E 3F 04 2E  // ...3.........?..
    7F90: 8E 06 45 04 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06  // ..E..&I....t....
    7FA0: 43 04 80 FC 07 74 05 7C 3D E9 0B 02 8A E3 8B F0  // C....t.|=.......
    7FB0: 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6  // ..2.....P....J..
    7FC0: E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1  // .2.........t....
    7FD0: 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75 03 F3 AB  // L.....u.....u...
    7FE0: C3 AA 47 E2 FC C3 50 2E 8E 06 45 04 A1 50 04 E8  // ..G...P...E..P..
    7FF0: EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8 58 A8 80  // .....P..&J...X..
    8000: 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C 01 8A FC  // t.$..6|....6....
    8010: 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1 E7 8A F3  // 2.........ti....
    8020: B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04  // .U...........P..
    8030: F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC E8 4E FA  // ...u'..U.#....N.
    8040: 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE  // #.&......N..u...
    8050: 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA  // ...>.X.r........
    8060: 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31 85 00 20  // #.&1...%.#.&1.. 
    8070: 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E 01 58 E8  // ..P..u......>.X.
    8080: 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74 1F AC  // I......P.....t..
    8090: 26 30 05 AC 26 30 85 00 20 83 C7 50 FE CA 7F EF  // &0..&0.. ..P....
    80A0: 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA C3 AC AA  // .....?.X. ......
    80B0: AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1 83 EE 08  // .&......O.......
    80C0: 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0 38 E0 72  // ..?.X........8.r
    80D0: 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0  // .2..............
    80E0: 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66 0F B7 16  // 2...f...Q...f...
    80F0: 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A 75 03 BA  // J...du..h...Zu..
    8100: 60 00 81 FA AF 00 75 03 BA B0 00 52 F7 E2 66 0F  // `.....u....R..f.
    8110: B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1 CF 10 03  // ..f...P.f..f....
    8120: FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2  // .f.......f...Z..
    8130: 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03 F0 2E 8E  // J....P.P........
    8140: 06 41 04 58 57 51 50 9C FC 8B CD E8 3B 00 B5 08  // .A.XWQP.....;...
    8150: AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88 05 66 47  // .......s...&..fG
    8160: FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F 83 C7 08  // ..u.f.....XY_...
    8170: FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03 FA 83 C7  // ..8.r.Q2...I....
    8180: 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0 8E C0 66  // ...Y+.....R3...f
    8190: C1 C7 10 8B C7 66 C1 C7 10 E8 A5 9A 74 16 38 E0  // .....f......t.8.
    81A0: 74 12 0F B6 D0 E8 8B C9 8A E0 66 C1 C7 10 8B F8  // t.........f.....
    81B0: 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF  // f...Z.....|.....
    81C0: 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC 11 75 06  // ..b...........u.
    81D0: 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1 E3 8B 97  // ......PS..2.....
    81E0: 50 04 5B 2E 8E 06 41 04 E8 07 F9 8B F8 8B 2E 85  // P.[...A.........
    81F0: 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85 04 C5 36  // .X2.R.6J.V.&...6
    8200: 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03 B4 10 46  // .....u..|..u...F
    8210: F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F  // .........um.....
    8220: EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B CD 32 C0  // .ZXPRJ..WQQW..2.
    8230: AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B  // ....._G..8.v.2..
    8240: CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0  // .I..G..Y..Y_....
    8250: 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA  // ....[KZQW...&.%.
    8260: 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B  // ...._G+.B;.v.3..
    8270: CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8 03 00  // .I..G..Y........
    8280: EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18 EF EB BC  // ................
    8290: 2E 8E 1E 3F 04 80 3E 63 04 B4 74 0B BA CC 03 EC  // ...?..>c..t.....
    82A0: A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A  // ..u..B.......u..
    82B0: E3 80 E4 1F 80 26 66 04 E0 08 26 66 04 E8 2D 00  // .....&f...&f..-.
    82C0: 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91 F5 74 19  // ..f... .......t.
    82D0: A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2 66 04 24  // .f.$....t.. .f.$
    82E0: 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53 50 80  // ......S...~..SP.
    82F0: E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8 60 F5 74  // .............`.t
    8300: 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26 88 1D 8A  // ......,...t.&...
    8310: C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58 5B C3 8A  // ......t.&.].X[..
    8320: E0 1E 2E 8E 1E 3F 04 80 3E 49 04 33 1F 7F 08 8A  // .....?..>I.3....
    8330: C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05  // ........0.......
    8340: B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74  // ...............t
    8350: 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D  // .G&.......... ..
    8360: C3 2E 8E 1E 3F 04 8A 26 49 04 E8 F2 F4 74 0A 80  // ....?..&I....t..
    8370: FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74  // ..w.t........|.t
    8380: 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E  // L...............
    8390: 41 04 F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6  // A....u........%.
    83A0: 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 08  // ......%...%.....
    83B0: FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25  // ...............%
    83C0: B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1 50 2E 8E  // ...%.........P..
    83D0: 06 41 04 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58  // .A..J..........X
    83E0: 26 88 05 C3 2E 8E 1E 3F 04 8A 26 49 04 E8 6F F4  // &......?..&I..o.
    83F0: 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B EC 89 46  // t....w.t.._....F
    8400: 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E  // .....|.t)..5....
    8410: 8E 1E 41 04 BA CE 03 32 FF B8 04 03 EF D0 E7 8A  // ..A....2........
    8420: 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B EC 88 7E  // .".t......}....~
    8430: 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E  // ...J............
    8440: 1E 41 04 8A 05 8B EC 88 46 1A C3 2E 8E 1E 3F 04  // .A......F.....?.
    8450: 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04 03 F1 8B  // .>b.....2..P....
    8460: 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 45 04 E8 EE  // ...I.<.vJ...E...
    8470: F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03  // .u3..J..........
    8480: C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE  // .....N........A.
    8490: C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E 8A E5 EF  // .8.sY....c......
    84A0: 8A E1 FE C0 EF C3 2E 8E 06 43 04 80 F9 07 74 C3  // .........C....t.
    84B0: E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84  // ...u.2...<.u.:6.
    84C0: 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3 75 05 80  // .u...........u..
    84D0: F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04 E8 C9  // .......L..<.u...
    84E0: 81 C3 3C 08 75 83 0A D2 74 DE FE CA EB DA 32 FF  // ..<.u...t.....2.
    84F0: 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03 CB EB 95  // 2.+.:6..t.......
    8500: 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF  // ....c...........
    8510: 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1  // +.+.&.e.P.>N....
    8520: E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB  // ................
    8530: 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 BC C6 FE C2  // X. .............
    8540: 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2 89 14 3A  // :.J.t....2.2...:
    8550: 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E 06 45 04  // 6..t..........E.
    8560: E8 FC F2 74 0E 2E 8E 06 43 04 80 F9 07 74 04 32  // ...t....C....t.2
    8570: FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A  // ............O..J
    8580: 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B0  // ...3..6....J....
    8590: 01 E9 70 F7 2E 8E 1E 3F 04 F6 06 87 04 08 74 03  // ..p....?......t.
    85A0: CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E  // .B..v....F......
    85B0: 3F 04 8A DF 32 FF D1 E3 89 97 50 04 D0 EB 38 1E  // ?...2.....P...8.
    85C0: 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E 3F 04 8A  // b.u....\.....?..
    85D0: DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04 8B EC 89  // .2.....P...`....
    85E0: 4E 16 89 56 12 C3 2E 8E 1E 3F 04 A0 87 04 24 80  // N..V.....?....$.
    85F0: 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08 75 2D E8  // ..I..&J......u-.
    8600: 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A CC 8A 2E  // ].t..>I...!Q....
    8610: 84 04 BE D7 85 81 FE E0 85 74 10 2E 3B 0C 74 05  // .........t..;.t.
    8620: 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A 3E 62 04  // .....$...D.Y.>b.
    8630: 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 84  // ...F..^..N..V...
    8640: 18 23 84 2B 33 84 2A 32 2E 8E 1E 3F 04 3C 04 7F  // .#.+3.*2...?.<..
    8650: 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08 80 3E 63  // .PR......ZXt..>c
    8660: 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4  // ..t...>c..u.<.s.
    8670: 32 E4 8B E8 D1 E5 2E FF A6 13 86 4B 86 6B 86 7D  // 2..........K.k.}
    8680: 86 B2 86 FC 85 FC 85 FC 85 D7 86 EF 86 F3 86 FC  // ................
    8690: 85 FC 85 FC 85 FC 85 FC 85 FC 85 21 87 FC 85 25  // ...........!...%
    86A0: 87 40 87 FC 85 7F 87 FC 85 8D 87 A8 87 AF 87 BB  // .@..............
    86B0: 87 DF 87 80 3E 49 04 13 74 15 E8 BF F4 8B C3 86  // ....>I..t.......
    86C0: E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26 88 01 E8  // ..p...t...2.&...
    86D0: 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26  // .........D...t.&
    86E0: 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06 E8 8C F4  // .}....>I..t.....
    86F0: 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE  // ...t............
    8700: 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D  // .2..............
    8710: FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01 77 B0 E8  // .............w..
    8720: 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26 65 04 DF  // C....0...$..&e..
    8730: 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE EB 90 E8  // ...t.....e. ....
    8740: 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B  // ............. ..
    8750: EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA E8 05 F4  // ..N..x..........
    8760: B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC 26 88  // ...2........B.&.
    8770: 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC  // ...J..G.......B.
    8780: 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51  // .&......Z......Q
    8790: 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00  // ..&.5&.m.&.M....
    87A0: 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2  // ...CY.....u.....
    87B0: C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02 0C 80 B4  // ..0.n.$....t....
    87C0: 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0  // 0.p.....u.......
    87D0: 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4 34 8A C7  // 0.P....u.....4..
    87E0: E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E  // .Q.............N
    87F0: 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00 26 88 35  // ..v....Q.....&.5
    8800: 26 88 6D 01 26 88 4D 02 83 C7 03 43 59 E2 E8 C3  // &.m.&.M....CY...
    8810: BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B EC 89  // ...........2....
    8820: 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE  // F...?....4......
    8830: B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00 C0 EF 02  // .0.......u......
    8840: 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00  // ...^...Q...s..*.
    8850: 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89 04 02 74  // ...R.CY........t
    8860: 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89 04 02 74  // .......9.......t
    8870: 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50  // ..........P....P
    8880: B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1  // .;..P....Y..Y...
    8890: 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A E8 8A C8  // d....2|.........
    88A0: 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03 9C FA EE  // X.R.9.ZS........
    88B0: 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00  // B..........[....
    88C0: 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB 00 EB 00  // S......BB.......
    88D0: EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50  // .............[.P
    88E0: 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9 59 58  // Q.........u...YX
    88F0: C3 2E 8E 1E 3F 04 8B F8 24 0F 81 E7 F0 00 C1 EF  // ....?...$.......
    8900: 03 83 FF 06 7F 18 2E FF A5 A3 88 AB 88 C0 88 5E  // ...............^
    8910: 89 BA 89 3C 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA  // ...<.t.<........
    8920: C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50 53 50 52  // ........<.w.PSPR
    8930: 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01  // ..c.............
    8940: A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04  // .@t.........@...
    8950: B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04 A1 85 04  // .......t........
    8960: 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01 73 13 BA  // ..=..s....=..s..
    8970: 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73 03 BA  // ..=|.s..^.=J.s..
    8980: C8 00 89 16 85 04 5A 58 C6 06 84 04 FF E8 5D 01  // ......ZX......].
    8990: 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01 74 08  // [X..2...t...<.t.
    89A0: B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81 E9 01 02  // ..<.t...........
    89B0: 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04 53 E8 5B  // ...~.........S.[
    89C0: F2 5B E8 85 02 C3 0A C0 74 11 FE C8 74 1A FE C8  // .[......t...t...
    89D0: 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E 7C 00 8C  // t8..t<..t@...|..
    89E0: 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74 07 32 FF  // .~..........t.2.
    89F0: 2E 8A 97 9E 89 89 0E 85 04 88 16 84 04 89 2E 0C  // ................
    8A00: 01 8C 06 0E 01 C3 00 0D 18 2A E8 09 03 B9 0E 00  // .........*......
    8A10: EB D6 BD AE 58 B9 08 00 EB CA BD C1 60 B9 10 00  // ....X.......`...
    8A20: EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84 04 80 FF  // ....u...........
    8A30: 07 77 35 80 FF 01 77 10 0A FF 75 06 C4 2E 7C 00  // .w5...w...u...|.
    8A40: EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E  // .&..... ...u....
    8A50: C5 2E 8B 2E A0 71 EB 10 0E 07 8A DF 32 FF 80 EB  // .....q......2...
    8A60: 02 D1 E3 2E 8B AF 11 8A 8B C5 8B EC 89 4E 16 89  // .............N..
    8A70: 56 12 89 46 0A 8C 46 1E C3 C1 60 AE 58 AE 5C AE  // V..F..F...`.X.\.
    8A80: 60 C1 60 C1 70 53 06 8A 26 49 04 E8 C7 C3 26 8A  // `.`.pS..&I....&.
    8A90: 47 02 26 8A 67 33 F6 C4 01 74 22 BD C1 60 3C 10  // G.&.g3...t"..`<.
    8AA0: 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD AE 58  // }..q.....<.}...X
    8AB0: 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C  // ............-..<
    8AC0: 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74  // .}...<.t.....<.t
    8AD0: 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03 80 E4 7F  // ......&.G..t....
    8AE0: 86 C4 32 DB E8 06 00 E8 C9 01 07 5B C3 8B F8 8B  // ..2........[....
    8AF0: F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF B2 C4 EC  // ................
    8B00: B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50 24 7F 0A  // ............P$..
    8B10: C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75 07 B7 10  // .t"..3....<.u...
    8B20: BD C1 60 EB 10 FE C8 75 07 B7 0E E8 E8 01 EB 05  // ..`....u........
    8B30: B7 08 BD AE 58 E8 2D 00 58 A8 80 74 00 BA C4 03  // ....X.-.X..t....
    8B40: B8 02 03 EF B8 04 02 EF B2 CC EC A8 01 B8 06 0E  // ................
    8B50: 75 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE  // u.....P.X....2..
    8B60: B8 05 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A  // ........u.....u.
    8B70: 26 83 7E FE 10 75 03 80 CD 80 1E 06 1F 2E 8E 06  // &.~..u..........
    8B80: 41 04 8B FA C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B  // A.......@S.....[
    8B90: F6 C3 04 74 02 04 20 86 E0 8B D0 03 FA 8B F5 E3  // ...t.. .........
    8BA0: 28 32 C0 86 FB 32 FF 51 F6 C5 80 74 01 46 8B CB  // (2...2.Q...t.F..
    8BB0: F3 A4 83 FB 20 74 07 B9 20 00 2B CB F3 AA 59 F6  // .... t.. .+...Y.
    8BC0: C5 80 74 01 46 FE C9 75 DE 1F C3 8A 26 49 04 50  // ..t.F..u....&I.P
    8BD0: 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF 74 30  // .W.>..&.}.....t0
    8BE0: 8B EF 83 C7 07 26 8A 05 3C FF 74 24 38 E0 74 03  // .....&..<.t$8.t.
    8BF0: 47 EB F2 8B FD 26 8A 05 FE C8 A2 84 04 26 8B 45  // G....&.......&.E
    8C00: 01 A3 85 04 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01  // ....&.}..>......
    8C10: 5F 07 58 C3 26 F6 47 33 01 74 01 C3 C4 1E A8 04  // _.X.&.G3.t......
    8C20: 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B 00 26 8A 01  // &._.....t....&..
    8C30: 3C FF 74 15 47 38 06 49 04 75 F2 26 8A 07 32 E4  // <.t.G8.I.u.&..2.
    8C40: 87 06 85 04 8B D8 E8 01 00 C3 8B 16 63 04 8A 26  // ............c..&
    8C50: 85 04 FE CC 80 E4 1F 9C FA 80 FA D4 74 0B B0 14  // ............t...
    8C60: EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0  // .B.$....J...B.$.
    8C70: 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E  // ...............>
    8C80: 84 04 FF 75 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1  // ...u............
    8C90: 80 74 02 D1 E0 48 8A E0 B0 12 8B 16 63 04 EF A0  // .t...H......c...
    8CA0: 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3  // J..&............
    8CB0: 4C 04 C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // L...&I.P.W.>..&.
    8CC0: 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05  // }.....tJ.....&..
    8CD0: 3C FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26 8A 3D  // <.t>8.t.G....&.=
    8CE0: 26 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A 45 0A  // &.].&.M.&.U.&.E.
    8CF0: 3C FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26 85 04  // <.t...P......&..
    8D00: A3 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32 C0 E8  // ...X...&.}...2..
    8D10: DB FD 5F 07 58 C3 50 53 51 52 2E A1 49 04 0B C0  // .._.X.PSQR..I...
    8D20: 74 09 2E 8B 2E A0 71 0E 07 EB 08 B8 30 11 B7 02  // t.....q.....0...
    8D30: E8 C7 BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53  // ...ZY[X.<.|....S
    8D40: 2E 8E 1E 3F 04 86 FB 32 FF D1 E3 8B FB 81 C7 50  // ...?...2.......P
    8D50: 04 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46 00 45  // ..5[..V..QS&.F.E
    8D60: 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32 3C 07  // <...u.2..@<.t2<.
    8D70: 75 05 E8 35 79 EB 62 3C 08 75 08 0A D2 74 5A FE  // u..5y.b<.u...tZ.
    8D80: CA EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45 B9 01  // ..'....t.&.^.E..
    8D90: 00 B4 09 E8 64 BE FE C2 3A 16 4A 04 72 0C 32 D2  // ....d...:.J.r.2.
    8DA0: 89 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B 50 E8  // ..:6..s......+P.
    8DB0: AD EA 75 08 B8 00 08 E8 40 BE EB 09 80 3E 49 04  // ..u.....@....>I.
    8DC0: 07 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8 25 00  // .t.2..>b.S..U.%.
    8DD0: 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A F7 C6  // ][.>b.X..[Y..Z..
    8DE0: 01 00 75 02 89 15 8B 05 3A 3E 62 04 75 03 E8 34  // ..u.....:>b.u..4
    8DF0: ED C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A 04 FE  // ...d.3..6....J..
    8E00: CA B8 01 06 E8 F3 BD C3 2E 8E 1E 3F 04 0A C0 75  // ...........?...u
    8E10: 0D E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01  // .......^..F...<.
    8E20: 75 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF  // u..A....F.......
    8E30: 9E 8E 2E 3A 05 72 04 BB FF FF C3 32 E4 D1 E0 03  // ...:.r.....2....
    8E40: F8 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3 86 FB  // ...]...t...u....
    8E50: C3 A0 10 04 24 30 3C 30 74 06 F6 C3 01 75 EF C3  // ....$0<0t....u..
    8E60: F6 C3 01 74 E9 C3 BF 9E 8E 2E 8A 0D 32 C0 83 C7  // ...t........2...
    8E70: 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02  // ..;.t....;.t....
    8E80: FE C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6  // ..8.~...........
    8E90: 06 89 04 02 74 0E BB 07 00 BA CC 03 EC A8 01 74  // ....t..........t
    8EA0: 18 BB 08 00 BA B4 03 E8 DF EC 74 21 B7 01 E8 8C  // ..........t!....
    8EB0: E9 80 FA D4 74 17 86 FB C3 BA D4 03 E8 CA EC 74  // ....t..........t
    8EC0: 0C B7 02 E8 77 E9 80 FA B4 74 02 86 FB C3 0F 08  // ....w....t......
    8ED0: 0F 08 0F 08 0F 08 03 01 03 01 01 01 00 08 01 01  // ................
    8EE0: 01 01 01 01 01 01 0F 01 0F 08 0F 04 00 02 0F 02  // ................
    8EF0: 01 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07 02 08  // ................
    8F00: FF 0E 00 00 3F 00 10 01 08 00 00 00 00 01 00 02  // ....?...........
    8F10: 02 01 00 04 04 01 00 05 02 05 00 06 01 06 05 06  // ................
    8F20: 00 08 01 08 00 07 02 07 06 07 CA 00 34 00 90 00  // ............4...
    8F30: 96 00 00 00 00 00 00 00 5F 57 C3 90 50 66 52 E8  // ........_W..PfR.
    8F40: F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66 BA F8  // .............f..
    8F50: 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A 58 C3  // ..f....2.f..fZX.
    8F60: 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75 44 E8  // f.O.fRfVSWP..uD.
    8F70: C8 FF FF FF 66 33 F6 66 BB 53 00 E8 48 00 00 00  // ....f3.f.S..H...
    8F80: C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 02 66 D1 E2  // .....@u+f....f..
    8F90: 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13 00 E8  // f..f@...f..f....
    8FA0: 30 00 00 00 66 BB 12 00 E8 27 00 00 00 66 58 32  // 0...f....'...fX2
    8FB0: E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03  // .fPX_[f^fZ..f.O.
    8FC0: C3 90 66 B8 4F 03 C3 90 66 52 E8 11 00 00 00 ED  // ..f.O...fR......
    8FD0: 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90  // fZ..fR......fZ..
    8FE0: 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF  // f..P3.f..f......
    8FF0: 66 83 C2 04 58 C3 A6 37 99 37 99 37 99 37 84 37  // f...X..7.7.7.7.7
    9000: 84 37 84 37 84 37 C6 33 3D 34 67 34 A8 35 A7 35  // .7.7.7.3=4g4.5.5
    9010: A7 35 ED 35 52 36 82 36 3F 37 68 37 68 37 DF 35  // .5.5R6.6?7h7h7.5
    9020: D2 35 D2 35 D2 35 D2 35 D2 35 ED 35 52 36 82 36  // .5.5.5.5.5.5R6.6
    9030: 3F 37 6D 37 B3 37 68 37 68 37 FF FF FF FF FF FF  // ?7m7.7h7h7......
    9040: 00 00 FF FF 00 00 FF FF 00 00 FF 00 00 00 FF 00  // ................
    9050: 00 00 FF 00 00 00 FF 00 00 00 00 00 08 10 00 08  // ................
    9060: 10 18 00 08 10 18 CA 31 01 CA 31 02 D8 45 03 B8  // .......1..1..E..
    9070: 45 03 EF 32 03 A3 32 03 CB 31 04 E4 31 04 F4 31  // E..2..2..1..1..1
    9080: 04 CA 31 03 00 00 00 00 77 39 00 02 77 39 01 02  // ..1.....w9..w9..
    9090: 77 39 02 02 77 39 03 02 77 39 04 02 77 39 05 02  // w9..w9..w9..w9..
    90A0: 71 3B 00 02 71 3B 01 02 71 3B 02 02 71 3B 03 02  // q;..q;..q;..q;..
    90B0: 71 3B 04 02 71 3B 05 02 A6 3B 00 02 A6 3B 01 02  // q;..q;...;...;..
    90C0: A6 3B 02 02 A6 3B 03 02 A6 3B 04 02 A6 3B 05 02  // .;...;...;...;..
    90D0: E1 3D 00 02 E1 3D 01 02 E1 3D 02 02 E1 3D 03 02  // .=...=...=...=..
    90E0: E1 3D 04 02 E1 3D 05 02 E1 3D 00 02 E1 3D 01 02  // .=...=...=...=..
    90F0: E1 3D 02 02 E1 3D 03 02 E1 3D 04 02 E1 3D 05 02  // .=...=...=...=..
    9100: A8 3C 00 02 A8 3C 01 02 A8 3C 02 02 A8 3C 03 02  // .<...<...<...<..
    9110: A8 3C 04 02 A8 3C 05 02 E4 3C 00 02 E4 3C 01 02  // .<...<...<...<..
    9120: E4 3C 02 02 E4 3C 03 02 E4 3C 04 02 E4 3C 05 02  // .<...<...<...<..
    9130: 55 3C 00 02 55 3C 01 02 55 3C 02 02 55 3C 03 02  // U<..U<..U<..U<..
    9140: 55 3C 04 02 55 3C 05 02 89 3C 00 02 89 3C 01 02  // U<..U<...<...<..
    9150: 89 3C 02 02 89 3C 03 02 89 3C 04 02 89 3C 05 02  // .<...<...<...<..
    9160: 39 40 00 00 6C 40 01 00 6C 40 02 00 59 40 00 00  // 9@..l@..l@..Y@..
    9170: 47 3F 00 02 40 3D 00 02 40 3D 01 02 40 3D 02 02  // G?..@=..@=..@=..
    9180: 40 3D 03 02 40 3D 04 02 40 3D 05 02 5F 3F 00 02  // @=..@=..@=.._?..
    9190: B4 41 05 00 B4 41 01 00 B4 41 00 00 B4 41 02 00  // .A...A...A...A..
    91A0: F5 41 00 00 F5 41 02 00 3A 42 00 00 CA 3E 00 02  // .A...A..:B...>..
    91B0: CA 3E 01 02 CA 3E 02 02 CA 3E 03 02 CA 3E 04 02  // .>...>...>...>..
    91C0: CA 3E 05 02 86 40 00 00 AE 40 00 00 2F 41 00 00  // .>...@...@../A..
    91D0: AA 41 00 00 8E 3D 00 02 8E 3D 01 02 8E 3D 02 02  // .A...=...=...=..
    91E0: 8E 3D 03 02 8E 3D 04 02 8E 3D 05 02 A9 41 00 01  // .=...=...=...A..
    91F0: A9 41 00 01 AD 3A 00 02 AD 3A 01 02 AD 3A 02 02  // .A...:...:...:..
    9200: AD 3A 03 02 AD 3A 04 02 AD 3A 05 02 CE 40 00 00  // .:...:...:...@..
    9210: AA 41 00 00 AA 41 00 00 AA 41 00 00 DF 3F 00 00  // .A...A...A...?..
    9220: D1 3B 00 02 D1 3B 01 02 D1 3B 02 02 D1 3B 03 02  // .;...;...;...;..
    9230: D1 3B 04 02 D1 3B 05 02 00 3C 00 02 00 3C 01 02  // .;...;...<...<..
    9240: 00 3C 02 02 00 3C 03 02 00 3C 04 02 00 3C 05 02  // .<...<...<...<..
    9250: 36 3C 00 02 36 3C 01 02 36 3C 02 02 36 3C 03 02  // 6<..6<..6<..6<..
    9260: 36 3C 04 02 36 3C 05 02 F1 40 00 00 14 41 00 00  // 6<..6<...@...A..
    9270: D2 3C 01 02 D2 3C 02 02 2E 3D 01 02 2E 3D 02 02  // .<...<...=...=..
    9280: A6 00 02 01 08 93 00 00 00 00 00 00 60 AB 00 00  // ............`...
    9290: 2E 93 00 00 00 00 3E 94 00 00 00 00 08 95 40 99  // ......>.......@.
    92A0: 00 00 00 00 00 00 00 00 00 00 00 00 7C A0 7A 93  // ............|.z.
    92B0: E8 93 CC 98 10 94 00 00 78 C3 00 00 00 00 00 00  // ........x.......
    92C0: 00 00 00 00 00 00 38 A1 AA A1 1E A2 00 00 62 A2  // ......8.......b.
    92D0: 00 00 AC C2 00 00 32 A3 08 A5 C8 A5 26 A7 68 A7  // ......2.....&.h.
    92E0: 12 C0 00 00 00 00 7C A7 00 00 2A BD 00 00 62 BF  // ......|...*...b.
    92F0: 42 A9 00 00 1A AB 00 00 00 00 00 00 C4 C1 86 BE  // B...............
    9300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9310: 00 00 00 00 00 00 00 00 00 00 00 00 74 AE 80 AF  // ............t...
    9320: AE BA CE BC 00 00 4A 00 02 01 00 00 00 00 7C D1  // ......J.......|.
    9330: 9C C3 44 D2 64 C4 98 C4 4E C6 5E E5 A8 C8 00 00  // ..D.d...N.^.....
    9340: F4 C4 86 CA 00 C5 50 C8 F2 CA 00 00 74 C5 3E E5  // ......P.....t.>.
    9350: 00 00 2A E5 00 00 88 C5 10 C6 3C E4 00 00 00 00  // ..*.......<.....
    9360: 16 C6 B0 D2 00 00 00 00 00 00 96 E4 00 00 00 00  // ................
    9370: 25 00 02 01 00 08 37 00 00 4B E5 00 04 49 19 00  // %.....7..K...I..
    9380: 02 05 02 06 00 00 00 52 15 52 3D 52 18 52 1A 0D  // .......R.R=R.R..
    9390: 65 53 00 02 5B 00 4B 00 01 01 00 00 37 00 00 42  // eS..[.K.....7..B
    93A0: 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02  // !.c...c.9.c.?.c.
    93B0: 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00  // E.ZZ[..@....-.@.
    93C0: 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02  // ..@.....@.....[.
    93D0: 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D  // ....[.....[.....
    93E0: 5B 00 6E 00 02 01 0C 08 37 00 00 3D 25 00 00 44  // [.n.....7..=%..D
    93F0: 22 00 3D 25 00 06 44 5D 00 3D 25 00 04 44 58 00  // ".=%..D].=%..DX.
    9400: 55 38 00 5B 01 05 00 00 61 60 01 00 3C E5 01 00  // U8.[....a`..<...
    9410: 80 49 2A 00 01 05 00 00 62 60 01 00 01 01 01 00  // .I*.....b`......
    9420: 01 56 00 40 03 A9 40 00 01 05 00 00 61 60 01 00  // .V.@..@.....a`..
    9430: 01 02 01 00 40 02 E5 00 01 5B 02 E5 00 01 5B 01  // ....@....[....[.
    9440: 05 00 00 61 60 01 00 3C E5 01 00 80 49 65 00 5B  // ...a`..<....Ie.[
    9450: 28 00 02 01 00 00 37 00 00 01 05 00 00 6C A8 01  // (.....7......l..
    9460: 00 02 00 00 01 00 02 01 01 00 01 05 00 00 6D A8  // ..............m.
    9470: 01 00 02 00 02 01 00 5B 2E 00 02 01 00 00 37 00  // .......[......7.
    9480: 00 52 16 03 01 41 00 15 05 41 10 01 02 60 0F 41  // .R...A...A...`.A
    9490: 03 01 40 00 1B 05 40 10 01 02 62 0F 40 01 05 F3  // ..@...@...b.@...
    94A0: 0F E1 09 60 2D 5B CA 00 02 01 04 04 37 00 00 66  // ...`-[......7..f
    94B0: 0C 03 0C 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3D  // ...A..-.AB-.B..=
    94C0: 24 00 06 00 44 31 00 2D 0D 42 08 00 3E 0A 42 41  // $...D1.-.B..>.BA
    94D0: 45 19 00 55 20 00 5B 56 00 43 03 24 43 05 00 03  // E..U .[V.C.$C...
    94E0: 04 46 00 00 33 05 46 01 00 00 00 01 02 00 00 46  // .F..3.F........F
    94F0: 03 00 00 01 00 0D 02 01 00 44 2D 05 46 02 00 00  // .........D-.F...
    9500: 00 01 02 00 00 46 03 24 43 04 00 4B E5 00 01 49  // .....F.$C..K...I
    9510: AA 00 07 02 01 00 45 2D 05 46 01 00 00 00 01 02  // ......E-.F......
    9520: 00 00 46 4A 02 01 00 44 44 90 00 03 29 43 00 0E  // ..FJ...DD...)C..
    9530: A2 00 44 43 98 00 03 29 43 00 08 A2 00 45 33 05  // ..DC...)C....E3.
    9540: 46 03 00 00 00 01 02 00 00 46 01 02 01 00 00 5B  // F........F.....[
    9550: 0D 02 01 00 44 01 04 00 00 00 00 3D A5 00 01 44  // ....D......=...D
    9560: C4 00 07 02 01 00 45 43 C9 00 0D 02 01 00 44 5B  // ......EC......D[
    9570: C3 03 01 07 10 08 37 00 00 3D 25 01 FF 44 A1 03  // ......7..=%..D..
    9580: 3D 25 01 19 46 9D 03 3D 25 01 02 47 9D 03 3D 25  // =%..F..=%..G..=%
    9590: 01 14 45 A1 03 3D 05 00 00 00 00 00 44 FD 01 66  // ..E..=......D..f
    95A0: 1B 56 00 02 3D A5 01 02 49 41 00 56 08 40 43 53  // .V..=...IA.V.@CS
    95B0: 00 3D A5 01 03 49 4E 00 56 08 40 43 53 00 03 0C  // .=...IN.V.@CS...
    95C0: 40 18 00 3E 0D 40 00 00 44 62 00 03 0A 02 40 43  // @..>.@..Db....@C
    95D0: 66 00 0E E5 01 80 4B E5 01 02 49 74 00 02 A9 02  // f.....K...It....
    95E0: 02 55 28 02 03 01 00 00 03 05 46 A8 61 00 00 3D  // .U(.......F.a..=
    95F0: A5 01 00 44 8D 00 03 05 46 50 C3 00 00 5C A5 0F  // ...D....FP...\..
    9600: 5E F3 08 55 28 01 3E 05 00 40 4B 4C 00 47 A7 00  // ^..U(.>..@KL.G..
    9610: 1B 05 00 01 43 BC 00 2C 65 01 01 3E 05 00 A0 25  // ....C..,e..>...%
    9620: 26 00 48 BC 00 15 05 00 01 43 A7 00 14 2D 01 04  // &.H......C...-..
    9630: 4B E5 01 80 49 EB 00 21 05 02 80 00 00 00 7C 02  // K...I..!......|.
    9640: 40 00 7E 02 40 46 7C 05 40 10 00 00 00 7E 05 40  // @.~.@F|.@....~.@
    9650: 35 0C 00 00 03 02 02 40 43 EE 00 56 00 02 27 02  // 5......@C..V..'.
    9660: 00 46 21 05 41 00 00 01 00 27 02 40 46 03 0A 42  // .F!.A....'.@F..B
    9670: 40 3E 05 41 00 00 00 00 49 16 01 03 0D 40 01 00  // @>.A....I....@..
    9680: 56 08 01 43 40 01 03 02 40 46 03 02 01 41 03 02  // V..C@...@F...A..
    9690: 03 41 27 02 40 41 03 02 40 03 3E 05 41 00 00 00  // .A'.@A..@.>.A...
    96A0: 00 49 1E 01 27 02 01 03 03 0A 01 40 27 02 46 03  // .I..'......@'.F.
    96B0: 03 0A 03 01 03 0A 01 40 03 8A 01 42 27 02 00 46  // .......@...B'..F
    96C0: 33 05 40 10 00 00 00 15 05 40 05 03 8A 03 40 66  // 3.@......@....@f
    96D0: FF 2D 0D 42 AB 03 56 00 40 03 21 40 01 33 25 40  // .-.B..V.@.!@.3%@
    96E0: 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 4A 25  // ..%@.-.B@..H..J%
    96F0: 06 5E 04 44 23 02 56 00 40 4B E5 01 30 44 9B 01  // .^.D#.V.@K..0D..
    9700: 4A 25 F1 5D 01 44 DC 01 43 A3 01 4A 25 F1 5D 01  // J%.].D..C..J%.].
    9710: 49 DC 01 03 00 40 0B 5E 09 0D 40 F0 FF 3E 1A 40  // I....@.^..@..>.@
    9720: 03 49 DC 01 3C 02 07 5E 01 49 DC 01 3C 0A 0A 5E  // .I..<..^.I..<..^
    9730: 03 49 DC 01 03 00 40 0C 5E 09 25 40 70 3E 29 40  // .I....@.^.%@p>)@
    9740: 01 49 DC 01 3C 02 08 5E 02 44 E0 01 0E E5 01 01  // .I..<..^.D......
    9750: 3A 00 00 4B E5 01 01 44 75 03 4B E5 01 02 49 FD  // :..K...Du.K...I.
    9760: 01 3D 25 02 05 46 FD 01 55 28 02 52 23 3A 00 00  // .=%..F..U(.R#:..
    9770: 02 01 03 02 02 05 02 00 00 03 04 02 21 02 01 32  // ............!..2
    9780: 25 02 14 52 4D 02 01 02 03 3D 05 00 00 00 00 00  // %..RM....=......
    9790: 44 9D 03 3D A5 01 00 44 4E 02 02 01 03 02 02 05  // D..=...DN.......
    97A0: 02 00 0F 03 00 02 21 02 01 32 25 02 14 4B E5 01  // ......!..2%..K..
    97B0: 30 44 48 02 0E E5 02 01 52 4D 02 01 02 03 66 FF  // 0DH.....RM....f.
    97C0: 2D 0D 42 AB 03 56 00 40 03 21 40 01 33 25 40 14  // -.B..V.@.!@.3%@.
    97D0: 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 03 05 40  // .%@.-.B@..H....@
    97E0: 00 00 38 00 3E 05 00 C0 C6 2D 00 47 A0 02 5E A5  // ..8.>....-.G..^.
    97F0: 40 CF 20 3E 05 00 E0 67 35 00 47 A0 02 5E A5 40  // @. >...g5.G..^.@
    9800: CF 10 3E 05 00 00 09 3D 00 47 A0 02 09 A5 40 CF  // ..>....=.G....@.
    9810: 5C B2 0F 5E C3 40 03 05 40 20 00 1C 24 3D A5 01  // \..^.@..@ ..$=..
    9820: 00 44 BB 02 03 05 40 10 00 0C 12 5C 9A 10 5E 03  // .D....@....\..^.
    9830: 00 40 5C 1A 0B 5E 0F 00 03 5C A2 0B 5E 8F 40 56  // .@\..^...\..^.@V
    9840: 00 40 03 29 40 01 0F 25 40 01 4B E5 01 80 49 E5  // .@.)@..%@.K...I.
    9850: 02 0F 65 40 01 5C 0A 0C 5E 8B FE 40 07 8D 0D 5E  // ..e@.\..^..@...^
    9860: 0F E0 3E 8D 01 00 00 49 0A 03 3E 0D 03 00 00 49  // ..>....I..>....I
    9870: 0A 03 07 E5 0E 5E FE 43 0F 03 0D E5 0E 5E 01 4A  // .....^.C.....^.J
    9880: E5 0E 5E 01 49 27 03 4A 65 0C 5E 01 49 27 03 07  // ..^.I'.Je.^.I'..
    9890: E5 0E 5E EF 43 2C 03 0D E5 0E 5E 10 01 02 07 5E  // ..^.C,....^....^
    98A0: 01 01 02 08 5E 02 7C 05 02 00 EC 04 00 7E 02 40  // ....^.|......~.@
    98B0: 46 27 05 40 0A 00 00 00 01 02 09 5E 40 01 0A 0A  // F'.@.......^@...
    98C0: 5E 03 3A 00 00 3D A5 01 00 44 9D 03 03 01 00 02  // ^.:..=...D......
    98D0: 02 05 02 00 01 03 04 02 21 02 01 32 25 02 14 52  // ........!..2%..R
    98E0: 4D 02 02 02 00 3A 00 00 3D 25 02 05 46 9D 03 02  // M....:..=%..F...
    98F0: 25 03 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08  // %.......a.......
    9900: A5 03 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00  // ...........R.:..
    9910: 5B 02 25 01 0B 43 75 03 7A 18 00 00 00 D8 00 B0  // [.%..Cu.z.......
    9920: 01 88 02 60 03 38 04 00 00 00 01 00 02 00 03 00  // ...`.8..........
    9930: 04 00 05 00 73 00 02 01 00 00 37 00 00 3D 65 00  // ....s.....7..=e.
    9940: 01 44 72 00 56 00 40 03 21 40 00 21 25 40 DC 03  // .Dr.V.@.!@.!%@..
    9950: 0A 48 40 01 05 B6 3A 00 01 00 00 5C 05 2D 3B CF  // .H@...:....\.-;.
    9960: FF FF FF 20 00 00 00 5C 05 40 3B CF FF FF FF 20  // ... ...\.@;.... 
    9970: 00 00 00 56 00 40 03 21 40 00 21 25 40 80 03 0A  // ...V.@.!@.!%@...
    9980: 48 40 5C 05 01 50 FF FC FF FF 00 03 00 00 56 00  // H@\..P........V.
    9990: 40 03 21 40 00 15 05 40 19 5C 02 50 50 FF FF FF  // @.!@...@.\.PP...
    99A0: F1 40 3A 00 00 5B 5B 00 3C 07 02 01 08 04 37 00  // .@:..[[.<.....7.
    99B0: 00 42 29 00 63 07 2B 02 63 08 17 00 5A 5A 5B 0D  // .B).c.+.c...ZZ[.
    99C0: 25 C8 39 02 5C 25 34 47 FC 01 01 25 32 01 00 01  // %.9.\%4G...%2...
    99D0: 05 42 35 00 00 00 00 01 05 40 35 00 00 00 00 01  // .B5......@5.....
    99E0: 05 46 35 00 00 00 00 01 05 44 35 00 00 00 00 01  // .F5......D5.....
    99F0: 05 4A 35 00 00 00 00 01 05 48 35 00 00 00 00 01  // .J5......H5.....
    9A00: 05 4E 35 00 00 00 00 01 05 4C 35 00 00 00 00 01  // .N5......L5.....
    9A10: 05 52 35 00 00 00 00 01 05 50 35 00 00 00 00 01  // .R5......P5.....
    9A20: 05 56 35 00 00 00 00 01 05 54 35 00 00 00 00 01  // .V5......T5.....
    9A30: 05 61 35 00 00 00 00 01 05 63 35 00 00 00 00 01  // .a5......c5.....
    9A40: 05 65 35 00 00 00 00 01 05 67 35 00 00 00 00 01  // .e5......g5.....
    9A50: 05 69 35 00 00 00 00 01 05 6B 35 00 00 00 00 01  // .i5......k5.....
    9A60: 05 72 35 01 00 00 00 01 05 DF 39 02 10 00 00 01  // .r5.......9.....
    9A70: 05 B3 3A 00 00 00 00 01 05 B1 3A 00 1B 5D 05 01  // ..:.......:..]..
    9A80: 05 06 3B 35 00 13 00 01 05 07 3B 36 11 00 00 01  // ..;5......;6....
    9A90: 05 08 3B 41 E6 01 00 01 05 09 3B 00 00 00 00 01  // ..;A......;.....
    9AA0: 05 0A 3B 00 00 08 2C 01 05 0C 3B 02 04 00 00 01  // ..;...,...;.....
    9AB0: 05 1F 3B 5E 4E 01 00 01 05 0A 3B 00 00 08 2C 01  // ..;^N.....;...,.
    9AC0: 05 0D 3B A4 01 00 00 01 05 0F 3B A4 01 00 00 01  // ..;.......;.....
    9AD0: 05 14 3B 00 02 00 00 01 05 15 3B 49 D2 00 00 01  // ..;.......;I....
    9AE0: 05 18 3B 20 00 00 00 01 05 19 3B 24 0D 00 00 01  // ..; ......;$....
    9AF0: 05 1C 3B 00 00 00 00 01 05 1D 3B 00 00 00 00 01  // ..;.......;.....
    9B00: 05 ED 3A 00 00 92 06 01 05 EE 3A AA 08 00 E0 01  // ..:.......:.....
    9B10: 05 C9 39 FE 01 00 00 01 05 CA 39 1E 05 00 00 01  // ..9.......9.....
    9B20: 05 CB 39 BA 04 00 00 01 05 CC 39 24 04 00 00 01  // ..9.......9$....
    9B30: 05 CD 39 A2 08 00 00 01 05 CE 39 FE 01 00 00 01  // ..9.......9.....
    9B40: 05 CF 39 1E 05 00 00 01 05 D0 39 BA 04 00 00 01  // ..9.......9.....
    9B50: 05 D1 39 24 04 00 00 01 05 D2 39 A2 08 00 00 01  // ..9$......9.....
    9B60: 05 D3 39 FE 01 00 00 01 05 D4 39 1E 05 00 00 01  // ..9.......9.....
    9B70: 05 D5 39 BA 04 00 00 01 05 D6 39 24 04 00 00 01  // ..9.......9$....
    9B80: 05 D7 39 A2 08 00 00 01 05 D8 39 FE 01 00 00 01  // ..9.......9.....
    9B90: 05 D9 39 1E 05 00 00 01 05 DA 39 BA 04 00 00 01  // ..9.......9.....
    9BA0: 05 DB 39 24 04 00 00 01 05 DC 39 A2 08 00 00 0D  // ..9$......9.....
    9BB0: 25 C8 39 02 0D 25 DA 41 01 01 25 33 47 00 01 25  // %.9..%.A..%3G..%
    9BC0: 31 47 00 01 25 32 47 00 01 25 45 48 00 01 65 8B  // 1G..%2G..%EH..e.
    9BD0: 4F F0 5B 01 05 1F 35 FF FF FF FF 01 05 20 35 1F  // O.[...5...... 5.
    9BE0: 00 00 00 01 05 3B 01 64 02 12 00 01 05 30 01 A0  // .....;.d.....0..
    9BF0: 86 11 00 01 05 31 01 3C 00 01 08 01 8D 83 38 64  // .....1.<......8d
    9C00: 00 01 25 82 38 01 01 25 32 01 00 01 05 42 35 00  // ..%.8..%2....B5.
    9C10: 00 00 00 01 05 40 35 00 00 00 00 01 05 46 35 00  // .....@5......F5.
    9C20: 00 00 00 01 05 44 35 00 00 00 00 01 05 4A 35 00  // .....D5......J5.
    9C30: 00 00 00 01 05 48 35 00 00 00 00 01 05 4E 35 00  // .....H5......N5.
    9C40: 00 00 00 01 05 4C 35 00 00 00 00 01 05 52 35 00  // .....L5......R5.
    9C50: 00 00 00 01 05 50 35 00 00 00 00 01 05 56 35 00  // .....P5......V5.
    9C60: 00 00 00 01 05 54 35 00 00 00 00 01 05 61 35 00  // .....T5......a5.
    9C70: 00 00 00 01 05 63 35 00 00 00 00 01 05 65 35 00  // .....c5......e5.
    9C80: 00 00 00 01 05 67 35 00 00 00 00 01 05 69 35 00  // .....g5......i5.
    9C90: 00 00 00 01 05 6B 35 00 00 00 00 01 05 72 35 01  // .....k5......r5.
    9CA0: 00 00 00 01 05 DF 39 02 10 00 00 01 05 B3 3A 00  // ......9.......:.
    9CB0: 00 00 00 01 05 8F 3B 10 00 00 00 01 05 6B 3C 20  // ......;......k< 
    9CC0: 00 00 00 01 05 47 3D 30 00 00 00 01 05 23 3E 40  // .....G=0.....#>@
    9CD0: 00 00 00 01 05 FF 3E 50 00 00 00 55 00 01 20 0D  // ......>P...U.. .
    9CE0: 01 DC 00 03 0A 48 40 01 05 B1 3A 00 1B 5D 05 01  // .....H@...:..]..
    9CF0: 05 06 3B 35 00 13 00 01 05 07 3B 36 11 00 00 01  // ..;5......;6....
    9D00: 05 08 3B 41 E6 01 00 01 05 09 3B 00 00 00 00 01  // ..;A......;.....
    9D10: 05 0A 3B 00 00 08 2C 01 05 0C 3B 02 04 00 00 01  // ..;...,...;.....
    9D20: 05 1F 3B 5E 4E 01 00 01 05 0A 3B 00 00 08 2C 01  // ..;^N.....;...,.
    9D30: 05 0D 3B A4 01 00 00 01 05 0F 3B A4 01 00 00 01  // ..;.......;.....
    9D40: 05 14 3B 00 02 00 00 01 05 15 3B 49 D2 00 00 01  // ..;.......;I....
    9D50: 05 18 3B 20 00 00 00 01 05 19 3B 24 0D 00 00 01  // ..; ......;$....
    9D60: 05 1C 3B 00 00 00 00 01 05 1D 3B 00 00 00 00 01  // ..;.......;.....
    9D70: 05 ED 3A 00 00 92 06 01 05 EE 3A AA 08 00 E0 2C  // ..:.......:....,
    9D80: 05 01 01 00 00 00 3D 0D 01 06 00 45 36 03 56 08  // ......=....E6.V.
    9D90: 48 01 05 C9 39 FE 01 00 00 01 05 CA 39 1E 05 00  // H...9.......9...
    9DA0: 00 01 05 CB 39 BA 04 00 00 01 05 CC 39 24 04 00  // ....9.......9$..
    9DB0: 00 01 05 CD 39 A2 08 00 00 01 05 CE 39 FE 01 00  // ....9.......9...
    9DC0: 00 01 05 CF 39 1E 05 00 00 01 05 D0 39 BA 04 00  // ....9.......9...
    9DD0: 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2 08 00  // ....9$......9...
    9DE0: 00 01 05 D3 39 FE 01 00 00 01 05 D4 39 1E 05 00  // ....9.......9...
    9DF0: 00 01 05 D5 39 BA 04 00 00 01 05 D6 39 24 04 00  // ....9.......9$..
    9E00: 00 01 05 D7 39 A2 08 00 00 01 05 D8 39 FE 01 00  // ....9.......9...
    9E10: 00 01 05 D9 39 1E 05 00 00 01 05 DA 39 BA 04 00  // ....9.......9...
    9E20: 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2 08 00  // ....9$......9...
    9E30: 00 0D 25 C8 39 02 55 00 01 66 FF 2D 0D 42 30 07  // ..%.9.U..f.-.B0.
    9E40: 03 0C 48 00 00 0D 25 DA 41 01 20 0D 01 1B 00 03  // ..H...%.A. .....
    9E50: 0A 48 40 01 21 33 47 01 01 21 31 47 01 01 21 32  // .H@.!3G..!1G..!2
    9E60: 47 01 20 0D 01 04 00 03 0A 48 40 01 21 45 48 01  // G. ......H@.!EH.
    9E70: 20 0D 01 10 00 03 0A 48 40 03 0D 40 00 F0 0F 61  //  ......H@..@...a
    9E80: 40 01 01 6A 8B 4F 40 2C 0D 01 01 00 2D 0D 42 02  // @..j.O@,....-.B.
    9E90: 00 3D 25 01 06 45 98 04 56 08 48 55 00 01 52 17  // .=%..E..V.HU..R.
    9EA0: 2C 25 01 01 3D 25 01 06 45 F6 04 02 05 01 05 02  // ,%..=%..E.......
    9EB0: 00 00 52 29 66 08 03 0C 41 0C 00 3E 0D 41 00 00  // ..R)f...A..>.A..
    9EC0: 44 3A 05 01 A5 15 01 03 01 05 13 01 10 27 00 00  // D:...........'..
    9ED0: 01 01 14 01 01 0D 25 15 01 01 4A 65 15 01 02 44  // ......%...Je...D
    9EE0: 32 05 01 01 42 01 01 01 01 46 01 01 01 01 4A 01  // 2...B....F....J.
    9EF0: 01 01 01 4E 01 01 01 01 52 01 01 01 01 56 01 01  // ...N....R....V..
    9F00: 55 00 01 52 4E 5C 05 DD 5D 00 F0 FF FF AA 0A 00  // U..RN\..].......
    9F10: 00 5C 05 63 53 FF FF FF 00 00 00 00 30 5C 05 65  // .\.cS.......0\.e
    9F20: 53 FF FF FF 00 00 00 00 30 5C 05 67 53 FF FF FF  // S.......0\.gS...
    9F30: 00 00 00 00 30 5C 05 69 53 FF FF FF 00 00 00 00  // ....0\.iS.......
    9F40: 30 5C 05 6B 53 FF FF FF 00 00 00 00 30 5C 05 6D  // 0\.kS.......0\.m
    9F50: 53 FF FF FF 00 00 00 00 30 5C 05 31 55 EE FF C0  // S.......0\.1U...
    9F60: FF 11 00 01 00 5C 05 31 56 EE FF C0 FF 11 00 01  // .....\.1V.......
    9F70: 00 5C 05 31 57 EE FF C0 FF 11 00 01 00 5C 05 31  // .\.1W........\.1
    9F80: 58 EE FF C0 FF 11 00 01 00 5C 05 31 59 EE FF C0  // X........\.1Y...
    9F90: FF 11 00 01 00 5C 05 31 5A EE FF C0 FF 11 00 01  // .....\.1Z.......
    9FA0: 00 01 05 9A 55 01 00 00 00 01 05 9A 56 01 00 00  // ....U.......V...
    9FB0: 00 01 05 9A 57 01 00 00 00 01 05 9A 58 01 00 00  // ....W.......X...
    9FC0: 00 01 05 9A 59 01 00 00 00 01 05 9A 5A 01 00 00  // ....Y.......Z...
    9FD0: 00 02 25 01 07 52 33 02 05 01 00 07 00 00 55 00  // ..%..R3.......U.
    9FE0: 02 52 4D 2C 25 01 01 3D 25 01 06 45 39 06 66 16  // .RM,%..=%..E9.f.
    9FF0: 03 A4 00 06 00 2D 0D 42 08 00 03 0A 00 42 3E A5  // .....-.B.....B>.
    A000: 00 00 44 CF 06 03 0A 42 00 03 0C 01 04 00 3E 0D  // ..D....B......>.
    A010: 01 21 21 44 76 06 3E 0D 01 21 22 49 C3 06 03 0C  // .!!Dv.>..!"I....
    A020: 40 08 00 66 16 2D 0A 42 40 03 24 40 00 00 3E 25  // @..f.-.B@.$@..>%
    A030: 40 FF 44 C3 06 3E 25 40 14 49 BB 06 03 04 40 02  // @.D..>%@.I....@.
    A040: 00 4C 05 40 00 01 00 00 44 C3 06 3E 0D 01 21 22  // .L.@....D..>..!"
    A050: 44 B3 06 01 A5 59 61 01 43 C3 06 01 A5 31 62 01  // D....Ya.C....1b.
    A060: 43 C3 06 2D 0C 42 01 00 43 81 06 2D 0D 00 10 00  // C..-.B..C..-....
    A070: 33 A5 00 01 43 56 06 66 16 03 0C 41 04 00 4C 0D  // 3...CV.f...A..L.
    A080: 41 02 00 44 E3 06 0D A5 4C 00 02 52 16 01 01 53  // A..D....L..R...S
    A090: 39 02 01 01 54 39 03 01 05 55 39 00 00 00 00 03  // 9...T9...U9.....
    A0A0: 01 41 01 15 05 41 18 01 02 C4 00 41 03 01 41 01  // .A...A.....A..A.
    A0B0: 1B 05 41 08 01 02 C9 00 41 03 00 41 55 39 01 02  // ..A.....A..AU9..
    A0C0: 59 39 41 03 01 40 03 33 01 40 02 2D 02 40 41 01  // Y9A..@.3.@.-.@A.
    A0D0: 02 5A 39 40 5B 7A 0C 00 00 00 6B 01 D6 02 41 04  // .Z9@[z....k...A.
    A0E0: 0B 29 76 2A BC 00 02 01 00 04 66 FF 56 08 47 2D  // .)v*......f.V.G-
    A0F0: 0D 42 74 00 03 21 47 00 09 25 47 F0 42 22 47 63  // .Bt..!G..%G.B"Gc
    A100: 00 5B 00 63 60 56 00 63 20 36 00 63 90 4E 00 63  // .[.c`V.c 6.c.N.c
    A110: A0 3E 00 63 B0 46 00 5A 5A 5B 2D 0D 42 30 00 43  // .>.c.F.ZZ[-.B0.C
    A120: 5B 00 2D 0D 42 24 00 43 5B 00 2D 0D 42 3C 00 43  // [.-.B$.C[.-.B<.C
    A130: 5B 00 2D 0D 42 18 00 43 5B 00 2D 0D 42 0C 00 03  // [.-.B..C[.-.B...
    A140: 21 47 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03  // !G..%G.-.BG-.BG.
    A150: 0C 48 00 00 5B 7A BC 00 00 00 80 00 00 01 80 01  // .H..[z..........
    A160: 00 02 80 02 00 00 00 01 00 02 00 03 00 04 00 05  // ................
    A170: 00 00 DC 00 B8 01 94 02 70 03 4C 04 00 00 6B 01  // ........p.L...k.
    A180: D6 02 41 04 0B 29 76 2A 00 00 D8 00 B0 01 88 02  // ..A..)v*........
    A190: 60 03 38 04 00 00 5A 00 B4 00 0E 01 68 01 C2 01  // `.8...Z.....h...
    A1A0: 72 00 01 01 00 00 37 00 00 56 00 40 03 21 40 00  // r.....7..V.@.!@.
    A1B0: 21 0D 40 6B 01 03 02 48 40 01 25 AC 41 01 3D 65  // !.@k...H@.%.A.=e
    A1C0: 00 02 49 4C 00 01 0D BD 41 01 00 54 00 BB 41 0D  // ..IL....A..T..A.
    A1D0: 25 AE 41 01 01 05 AD 41 11 00 00 00 07 A5 AC 41  // %.A....A.......A
    A1E0: FE 01 05 AF 41 11 01 11 01 43 6E 00 01 05 B1 41  // ....A....Cn....A
    A1F0: 00 00 00 01 01 05 B5 41 00 00 00 01 01 05 AF 41  // .......A.......A
    A200: 11 01 11 01 54 00 AD 41 01 0D BD 41 00 01 3A 00  // ....T..A...A..:.
    A210: 00 5B 73 00 01 01 00 00 37 00 00 52 14 03 00 41  // .[s.....7..R...A
    A220: C0 41 33 1A 41 41 03 8A 40 41 03 00 41 C1 41 33  // .A3.AA..@A..A.A3
    A230: 1A 41 41 03 0A 40 41 3E 05 40 00 00 00 00 49 36  // .AA..@A>.@....I6
    A240: 00 03 05 40 70 08 00 0F 0E 25 00 B0 52 14 3D 65  // ...@p....%..R.=e
    A250: 00 00 44 6D 00 01 02 16 4D 40 01 05 17 4D 00 00  // ..Dm....M@...M..
    A260: 00 00 01 05 18 4D 00 00 00 00 01 05 19 4D 00 00  // .....M.......M..
    A270: 00 00 5C 05 14 4D 8F FF 0F FF 31 00 00 00 5B 07  // ..\..M....1...[.
    A280: 25 14 4D FE 5B 00 43 00 01 01 00 00 37 00 00 52  // %.M.[.C.....7..R
    A290: 14 3D 65 00 01 44 3A 00 0D 65 01 50 03 54 20 01  // .=e..D:..e.P.T .
    A2A0: 50 4A A5 01 50 01 49 1B 00 54 20 0F 50 56 00 40  // PJ..P.I..T .PV.@
    A2B0: 20 25 00 01 03 0A 48 40 07 E5 E8 39 7F 43 3F 00  //  %....H@...9.C?.
    A2C0: 0D 25 01 50 01 3A 00 00 5B 00 CF 00 02 01 00 00  // .%.P.:..[.......
    A2D0: 37 00 00 42 29 00 63 00 1B 00 63 01 1B 00 63 02  // 7..B).c...c...c.
    A2E0: AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D 42 C3 00 03  // ..ZZ[f.V.@-.B...
    A2F0: 21 40 00 15 25 40 01 2D 0A 42 40 03 0C 48 00 00  // !@..%@.-.B@..H..
    A300: 3D 65 00 00 44 72 00 0D 25 CC 00 01 3A 00 00 01  // =e..Dr..%...:...
    A310: 8D C0 00 00 02 51 02 01 05 C6 00 00 00 10 00 01  // .....Q..........
    A320: 05 C8 00 00 00 50 00 01 0D C3 00 02 00 54 20 CA  // .....P.......T .
    A330: 00 01 05 C2 00 00 01 00 00 43 1A 00 07 25 CC 00  // .........C...%..
    A340: FE 3A 00 00 0D 25 CA 00 01 01 25 C2 00 01 07 A5  // .:...%....%.....
    A350: C1 00 FE 0D 25 D5 00 01 0D 65 D5 00 01 4A 65 D5  // ....%....e...Je.
    A360: 00 01 44 93 00 54 08 D5 00 54 00 C6 00 54 00 C8  // ..D..T...T...T..
    A370: 00 43 1A 00 5C 65 D4 00 FC 02 01 A1 C0 00 00 2B  // .C..\e.........+
    A380: A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C 00 00 00 02  // .........[z.....
    A390: 00 2C 00 2D 00 2E 00 2F 00 00 D5 01 03 01 04 00  // .,.-.../........
    A3A0: 37 00 00 66 08 03 05 46 10 27 00 00 3D A5 00 02  // 7..f...F.'..=...
    A3B0: 49 1E 00 02 02 00 46 5B 03 05 40 0C 00 00 00 21  // I.....F[..@....!
    A3C0: 21 40 00 66 FF 2D 0D 42 81 01 2D 0A 42 40 03 04  // !@.f.-.B..-.B@..
    A3D0: 40 00 00 03 04 41 04 00 03 04 00 08 00 01 02 00  // @....A..........
    A3E0: 00 40 03 88 40 01 00 03 18 40 01 00 09 8D 40 FF  // .@..@....@....@.
    A3F0: 01 3E 8D 40 00 00 49 99 00 01 02 00 00 41 03 00  // .>.@..I......A..
    A400: 40 01 00 09 05 40 FF 01 00 00 3E 0D 40 00 00 49  // @....@....>.@..I
    A410: 82 00 03 05 46 00 71 02 00 43 BC 00 21 02 40 46  // ....F.q..C..!.@F
    A420: 03 00 41 01 00 09 05 41 00 1E 00 00 1B 05 41 09  // ..A....A......A.
    A430: 43 B4 00 7C 02 40 46 7E 05 40 00 00 01 00 03 00  // C..|.@F~.@......
    A440: 41 01 00 09 05 41 00 F0 00 00 1B 05 41 0C 75 02  // A....A......A.u.
    A450: 40 41 03 02 46 40 3D A5 00 01 49 C8 00 02 02 00  // @A..F@=...I.....
    A460: 46 5B 3D E5 00 00 49 0B 01 56 00 40 03 29 40 00  // F[=...I..V.@.)@.
    A470: 21 0D 40 0A 00 03 02 41 00 2D 02 40 41 01 02 00  // !.@....A.-.@A...
    A480: 00 40 03 00 41 01 00 09 05 41 00 00 F0 07 1B 05  // .@..A....A......
    A490: 41 14 02 E2 00 41 3D E5 00 00 49 0B 01 02 05 00  // A....A=...I.....
    A4A0: 10 27 00 00 5B 56 00 40 03 39 40 00 55 38 00 66  // .'..[V.@.9@.U8.f
    A4B0: FF 2D 0D 42 59 01 3E 0C 40 02 00 47 2C 01 2D 0D  // .-.BY.>.@..G,.-.
    A4C0: 42 08 00 43 1C 01 33 0C 40 04 00 21 0C 40 06 00  // B..C..3.@..!.@..
    A4D0: 2D 0C 40 00 00 03 09 42 00 55 00 00 02 0A 00 40  // -.@....B.U.....@
    A4E0: 7C 05 46 40 42 0F 00 7E 01 40 00 02 02 00 40 5B  // |.F@B..~.@....@[
    A4F0: 7A 7C 00 FF FF 07 00 00 00 00 00 C8 00 3F 00 08  // z|...........?..
    A500: 00 19 00 40 06 5F 00 40 00 32 00 80 0C 7E 00 60  // ...@._.@.2...~.`
    A510: 00 64 00 00 32 7F 00 7F 00 64 00 11 6C 01 00 00  // .d..2....d..l...
    A520: 6C 01 00 4C 6C 01 00 0D 6E 01 00 00 6E 01 00 48  // l..Ll...n...n..H
    A530: 6E 01 00 0D 70 01 00 00 70 01 00 48 70 01 00 0D  // n...p...p..Hp...
    A540: 6E 01 00 00 6E 01 00 48 6E 01 00 0D 7E 01 00 00  // n...n..Hn...~...
    A550: 7E 01 00 48 7E 01 00 0E 72 01 00 00 72 01 00 49  // ~..H~...r...r..I
    A560: 72 01 00 0E B0 01 00 00 B0 01 00 49 B0 01 00 00  // r..........I....
    A570: BF 00 02 03 04 00 37 00 00 56 00 46 56 00 00 03  // ......7..V.FV...
    A580: 21 00 00 55 20 00 3D 65 00 03 44 2C 00 3D 65 00  // !..U .=e..D,.=e.
    A590: 0D 46 B4 00 02 29 00 00 32 25 00 08 0E 25 00 60  // .F...)..2%...%.`
    A5A0: 52 14 5C 22 28 55 F8 00 02 22 00 00 03 0D 41 01  // R.\"(U..."....A.
    A5B0: 00 66 FF 2D 0D 42 BB 00 2D 0A 42 41 03 24 00 00  // .f.-.B..-.BA.$..
    A5C0: 00 3D E2 00 00 48 A0 00 3E 25 00 04 44 6F 00 03  // .=...H..>%..Do..
    A5D0: 22 46 00 33 25 46 01 15 25 46 04 0F 25 46 01 33  // "F.3%F..%F..%F.3
    A5E0: 39 00 00 3E 25 00 01 44 8C 00 3E 25 00 02 44 85  // 9..>%..D..>%..D.
    A5F0: 00 03 25 46 21 03 65 00 2F 43 90 00 03 65 00 13  // ..%F!.e./C...e..
    A600: 03 79 46 00 33 65 46 01 15 2D 46 03 0F 65 46 01  // .yF.3eF..-F..eF.
    A610: 52 14 01 02 01 4D 46 01 52 00 4D 00 54 00 05 4D  // R....MF.R.M.T..M
    A620: 54 00 FF 4C 3A 00 00 5B 7A 04 00 03 02 01 04 00  // T..L:..[z.......
    A630: 5E 01 01 04 04 08 37 00 00 3D 65 02 01 49 27 01  // ^.....7..=e..I'.
    A640: 4B A5 02 03 49 2A 00 52 25 02 05 00 00 00 00 00  // K...I*.R%.......
    A650: 02 05 01 00 05 02 00 43 2F 00 55 28 02 52 25 03  // .......C/.U(.R%.
    A660: 38 00 C4 00 03 48 00 C9 00 0E 25 02 90 52 14 08  // 8....H....%..R..
    A670: 25 02 07 0D 05 B4 3A 11 11 01 00 5C 25 B3 3A 0B  // %.....:....\%.:.
    A680: 01 03 21 41 02 15 25 41 04 0D 22 B3 3A 41 0D 65  // ..!A..%A..".:A.e
    A690: B6 3A 01 5C 25 DB 3A FD 01 03 02 41 00 1B 05 41  // .:.\%.:....A...A
    A6A0: 08 01 0A CB 3A 41 01 0A CF 3A 41 15 05 00 18 01  // ....:A...:A.....
    A6B0: 02 CA 3A 00 01 02 CE 3A 00 4B A5 02 03 49 A0 00  // ..:....:.K...I..
    A6C0: 2B 05 CA 3A 00 00 10 00 2B 05 CE 3A 00 00 50 00  // +..:....+..:..P.
    A6D0: 01 0D A7 3A 80 00 01 0D B1 3A 00 03 01 0D 0C 3B  // ...:.....:.....;
    A6E0: 01 03 01 05 0A 3B 00 00 08 28 01 05 0B 3B 00 00  // .....;...(...;..
    A6F0: 08 00 01 E5 EF 3A 08 01 E5 EE 3A E0 54 00 A9 3A  // .....:....:.T..:
    A700: 01 19 AA 3A 00 01 89 AA 3A 00 01 19 AE 3A 00 01  // ...:....:....:..
    A710: 89 AE 3A 00 07 0D A5 3A FF F8 66 FF 2D 0D 42 4F  // ..:....:..f.-.BO
    A720: 01 03 0C 40 00 00 3E 0D 40 FF FF 44 0E 01 3D 8C  // ...@..>.@..D..=.
    A730: 01 00 00 44 0E 01 2D 0D 42 03 00 43 F1 00 01 24  // ...D..-.B..C...$
    A740: A5 3A 02 00 01 09 C7 3A 01 07 25 B3 3A FE 07 25  // .:.....:..%.:..%
    A750: DB 3A FE 3A 00 00 5B 0E 25 02 90 52 14 3D 65 02  // .:.:..[.%..R.=e.
    A760: 00 49 3C 01 0D 25 B3 3A 01 43 48 01 3D 65 02 10  // .I<..%.:.CH.=e..
    A770: 44 48 01 01 09 C7 3A 01 3A 00 00 5B 7A 0F 00 01  // DH....:.:..[z...
    A780: 00 01 01 01 03 01 05 02 02 00 08 FF FF 08 42 00  // ..............B.
    A790: 01 01 00 00 37 00 00 52 14 3D 65 00 01 44 21 00  // ....7..R.=e..D!.
    A7A0: 54 20 4B 50 4A 65 4B 50 01 49 16 00 43 3E 00 5C  // T KPJeKP.I..C>.\
    A7B0: 4D 1B 50 FE FF 00 01 4A A5 01 50 01 44 3E 00 0D  // M.P....J..P.D>..
    A7C0: 25 4B 50 01 4A 65 4B 50 01 44 36 00 3A 00 00 5B  // %KP.JeKP.D6.:..[
    A7D0: 13 00 01 03 00 00 37 00 00 0E 25 00 A0 52 14 3A  // ......7...%..R.:
    A7E0: 00 00 5B 00 C6 01 01 01 00 18 56 00 40 03 21 40  // ..[.......V.@.!@
    A7F0: 05 21 0D 40 80 00 03 0A 48 40 37 00 00 01 0D 47  // .!.@....H@7....G
    A800: 50 0D 00 3D 8D 01 0D 00 46 2C 00 01 19 47 50 01  // P..=....F,...GP.
    A810: 01 8D 48 50 40 01 01 0D 49 50 2C 01 03 09 41 00  // ..HP@...IP,...A.
    A820: 2D 19 41 00 03 8A 41 41 2D 8D 41 01 00 1B 1D 41  // -.A...AA-.A....A
    A830: 02 01 1A 48 50 41 33 0D 41 01 00 01 0A EA 4F 41  // ...HPA3.A.....OA
    A840: 54 08 EC 4F 01 99 EC 4F 02 03 19 41 00 33 09 41  // T..O...O...A.3.A
    A850: 02 56 18 41 03 B1 41 04 33 1A 41 41 01 8A EB 4F  // .V.A..A.3.AA...O
    A860: 41 03 19 41 00 33 09 41 02 2D 1A 41 41 2D 09 41  // A..A.3.A.-.AA-.A
    A870: 00 4B 25 04 10 44 98 00 2D 09 41 00 01 0A EB 4F  // .K%..D..-.A....O
    A880: 41 03 21 41 04 09 25 41 02 1B 25 41 01 01 22 ED  // A.!A..%A..%A..".
    A890: 4F 41 03 09 41 01 2D 19 41 01 33 0D 41 01 00 01  // OA..A.-.A.3.A...
    A8A0: 0A EF 4F 41 54 08 F7 4F 01 99 F7 4F 03 03 19 41  // ..OAT..O...O...A
    A8B0: 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41 41  // .3.A.V.A..A.3.AA
    A8C0: 01 8A F6 4F 41 03 19 41 01 33 09 41 03 2D 1A 41  // ...OA..A.3.A.-.A
    A8D0: 41 2D 09 41 01 4B 25 04 20 44 FC 00 2D 09 41 01  // A-.A.K%. D..-.A.
    A8E0: 01 0A F6 4F 41 03 21 41 04 09 25 41 04 1B 25 41  // ...OA.!A..%A..%A
    A8F0: 02 01 22 F8 4F 41 3D 65 05 00 44 21 01 07 65 01  // ..".OA=e..D!..e.
    A900: 50 EF 43 26 01 0D 65 01 50 10 03 00 46 EB 4F 02  // P.C&..e.P...F.O.
    A910: 00 02 F6 4F 56 00 40 03 21 40 05 21 0D 40 01 00  // ...OV.@.!@.!.@..
    A920: 03 0A 48 40 56 00 40 03 09 40 02 3D 65 05 00 49  // ..H@V.@..@.=e..I
    A930: 53 01 33 0D 40 02 00 15 05 40 0F 56 00 41 3D 8D  // S.3.@....@.V.A=.
    A940: 02 0D 00 48 6B 01 03 0D 41 0D 00 33 19 41 02 0F  // ...Hk...A..3.A..
    A950: 02 40 41 0F E5 40 80 01 02 E8 39 40 56 00 40 03  // .@A..@....9@V.@.
    A960: 21 40 05 21 0D 40 6B 01 03 0A 48 40 01 09 C3 41  // !@.!.@k...H@...A
    A970: 00 01 89 C3 41 01 01 09 C4 41 00 01 89 C4 41 01  // ....A....A....A.
    A980: 01 02 C0 41 46 01 01 C1 41 02 54 00 BE 41 01 31  // ...AF...A.T..A.1
    A990: BE 41 04 01 B1 BE 41 04 54 00 BF 41 01 39 BF 41  // .A....A.T..A.9.A
    A9A0: 04 01 B9 BF 41 04 3A 00 00 5B D8 01 01 01 00 00  // ....A.:..[......
    A9B0: 37 00 00 56 00 41 03 39 41 01 09 25 41 0F 3E 25  // 7..V.A.9A..%A.>%
    A9C0: 41 07 49 1C 00 5B 56 00 40 03 62 40 41 01 02 58  // A.I..[V.@.b@A..X
    A9D0: 53 40 03 0A 46 42 66 FF 2D 0D 42 C0 01 15 25 41  // S@..FBf.-.B...%A
    A9E0: 02 2D 0A 42 41 03 0C 48 00 00 07 05 90 5D 00 00  // .-.BA..H.....]..
    A9F0: 01 00 03 0C 48 02 00 03 05 40 50 C3 00 00 56 00  // ....H....@P...V.
    AA00: 41 03 21 41 00 27 02 40 41 15 05 40 10 03 25 40  // A.!A.'.@A..@..%@
    AA10: 02 01 02 62 53 40 01 05 63 53 40 00 00 30 03 0A  // ...bS@..cS@..0..
    AA20: 42 46 56 08 48 0D 25 5A 53 01 54 00 59 53 56 00  // BFV.H.%ZS.T.YSV.
    AA30: 41 03 71 41 01 0F E5 41 80 01 02 72 53 41 03 69  // A.qA...A...rSA.i
    AA40: 41 00 03 A5 41 01 01 02 72 53 41 4B 25 01 01 44  // A...A...rSAK%..D
    AA50: D5 00 03 71 41 00 03 A5 41 02 01 02 72 53 41 03  // ...qA...A...rSA.
    AA60: 79 41 00 03 A5 41 03 01 02 72 53 41 03 05 40 00  // yA...A...rSA..@.
    AA70: 31 01 00 2D A9 40 01 01 02 6E 53 40 43 08 01 03  // 1..-.@...nS@C...
    AA80: 71 41 01 0F 65 41 01 03 A5 41 02 01 02 72 53 41  // qA..eA...A...rSA
    AA90: 03 05 40 00 11 01 00 01 02 6E 53 40 03 05 40 01  // ..@......nS@..@.
    AAA0: 30 00 00 03 A9 40 01 01 02 6F 53 40 5C A5 58 53  // 0....@...oS@\.XS
    AAB0: CF 10 0D 25 58 53 01 02 65 00 02 56 00 40 03 29  // ...%XS..e..V.@.)
    AAC0: 40 01 2D 25 40 04 21 05 40 C8 00 00 00 56 00 41  // @.-%@.!.@....V.A
    AAD0: 03 21 41 00 27 02 40 41 03 0A 41 40 33 0D 41 01  // .!A.'.@A..A@3.A.
    AAE0: 00 3E 0D 41 00 00 44 AC 01 51 64 4A 25 5B 53 04  // .>.A..D..QdJ%[S.
    AAF0: 44 32 01 4A 65 5B 53 31 49 AC 01 02 65 00 01 4B  // D2.Je[S1I...e..K
    AB00: 25 01 01 49 AC 01 01 05 72 53 01 00 03 80 3D 65  // %..I....rS....=e
    AB10: 01 01 49 73 01 02 A8 00 72 53 43 AC 01 56 00 41  // ..Is....rSC..V.A
    AB20: 03 19 41 00 56 00 40 03 0A 40 41 3B 02 40 03 28  // ..A.V.@..@A;.@.(
    AB30: 40 72 53 03 68 40 72 53 03 A8 40 72 53 03 E8 40  // @rS.h@rS..@rS..@
    AB40: 72 53 04 02 00 40 2D A5 41 04 2D 0D 41 04 00 3E  // rS...@-.A.-.A..>
    AB50: A9 41 01 45 7A 01 0D 25 5A 53 02 01 25 58 53 02  // .A.Ez..%ZS..%XS.
    AB60: 51 01 54 00 58 53 5B 7A 18 00 00 00 00 00 04 00  // Q.T.XS[z........
    AB70: 02 00 08 00 04 00 0C 00 06 00 10 00 08 00 14 00  // ................
    AB80: 0A 00 46 00 02 02 00 04 37 00 00 55 30 00 32 25  // ..F.....7..U0.2%
    AB90: 00 01 20 25 00 08 56 08 48 03 22 48 40 0D A5 D5  // .. %..V.H."H@...
    ABA0: 53 01 02 A0 00 D4 53 08 A5 00 03 4A 25 D4 53 02  // S.....S....J%.S.
    ABB0: 44 3C 00 5C 0D D5 53 FF FE 01 00 43 42 00 0D 0D  // D<.\..S....CB...
    ABC0: D5 53 01 01 3A 00 00 5B 14 03 01 05 00 00 37 00  // .S..:..[......7.
    ABD0: 00 0E 25 00 60 52 14 08 25 00 0F 42 29 00 63 0F  // ..%.`R..%..B).c.
    ABE0: 53 00 63 11 09 02 63 12 66 02 63 01 CC 02 63 00  // S.c...c.f.c...c.
    ABF0: F5 02 63 08 D8 01 63 09 B9 01 63 0A C0 01 63 13  // ..c...c...c...c.
    AC00: C8 01 63 14 D0 01 63 0B E0 01 63 0C BC 02 63 0D  // ..c...c...c...c.
    AC10: E8 01 63 10 01 02 5A 5A 43 B5 01 54 00 9A 55 01  // ..c...ZZC..T..U.
    AC20: 0D 2B 55 1F 00 3D A5 00 00 44 72 00 3D A5 00 02  // .+U..=...Dr.=...
    AC30: 44 A2 01 3D A5 00 05 49 A2 01 54 00 C9 55 3D 25  // D..=...I..T..U=%
    AC40: 02 00 49 81 00 02 25 02 02 32 25 02 01 01 E1 C9  // ..I...%..2%.....
    AC50: 55 02 4A 25 CC 55 01 49 B5 01 7B 05 01 00 80 00  // U.J%.U.I..{.....
    AC60: 00 7E 05 40 8C 0A 00 00 56 00 46 03 29 46 02 27  // .~.@....V.F.)F.'
    AC70: 02 40 46 07 65 D0 55 FE 01 05 D1 55 00 80 00 00  // .@F.e.U....U....
    AC80: 01 02 D2 55 40 0D E5 D3 55 10 0D 65 28 55 04 51  // ...U@...U..e(U.Q
    AC90: 01 07 65 28 55 FB 51 01 03 21 40 02 15 25 40 05  // ..e(U.Q..!@..%@.
    ACA0: 01 E2 CA 55 40 54 20 CE 55 02 A0 02 28 55 03 0A  // ...U@T .U...(U..
    ACB0: 46 48 08 A5 02 07 56 00 40 03 31 40 02 21 0D 40  // FH....V.@.1@.!.@
    ACC0: 80 00 03 8A 46 40 03 0A 48 40 03 88 40 EA 4F 03  // ....F@..H@..@.O.
    ACD0: 08 40 EF 4F 2D 05 40 01 00 01 00 03 98 41 EB 4F  // .@.O-.@......A.O
    ACE0: 03 18 41 F6 4F 03 0A 48 46 01 02 0C 56 40 01 02  // ..A.O..HF...V@..
    ACF0: 0D 56 41 03 1A 48 46 03 00 40 EB 4F 33 1A 40 40  // .VA..HF..@.O3.@@
    AD00: 33 08 40 BE 41 33 08 40 BE 41 03 00 41 F6 4F 33  // 3.@.A3.@.A..A.O3
    AD10: 1A 41 41 33 08 41 BF 41 33 08 41 BF 41 03 0A 48  // .AA3.A.A3.A.A..H
    AD20: 46 01 0A 0F 56 41 01 8A 0F 56 40 03 1A 48 46 03  // F...VA...V@..HF.
    AD30: 00 40 EC 4F 33 8A 40 40 03 00 41 F7 4F 33 8A 41  // .@.O3.@@..A.O3.A
    AD40: 41 4A 25 ED 4F 01 44 85 01 0F E5 40 80 4A 25 F8  // AJ%.O.D....@.J%.
    AD50: 4F 01 44 91 01 0F E5 41 80 03 0A 48 46 01 1A 0E  // O.D....A...HF...
    AD60: 56 41 01 9A 0E 56 40 43 B5 01 07 E5 28 55 2F 0D  // VA...V@C....(U/.
    AD70: 65 28 55 04 51 01 07 65 28 55 FB 51 01 3A 00 00  // e(U.Q..e(U.Q.:..
    AD80: 5B 54 20 D8 55 43 B5 01 01 25 D8 55 01 43 B5 01  // [T .UC...%.U.C..
    AD90: 01 25 D8 55 02 43 B5 01 01 25 D8 55 03 43 B5 01  // .%.U.C...%.U.C..
    ADA0: 07 25 C8 55 EF 43 B5 01 0D 25 C8 55 10 43 B5 01  // .%.U.C...%.U.C..
    ADB0: 0D 65 D0 55 01 51 0A 07 25 CD 55 FE 51 0A 01 0D  // .e.U.Q..%.U.Q...
    ADC0: CC 55 01 02 51 C8 43 B5 01 0D 25 DE 55 10 43 B5  // .U..Q.C...%.U.C.
    ADD0: 01 01 69 6F 55 02 3D A5 00 03 49 25 02 4A 25 35  // ..ioU.=...I%.J%5
    ADE0: 55 10 49 25 02 01 A5 6F 55 02 43 2A 02 01 B1 6F  // U.I%...oU.C*...o
    ADF0: 55 00 3D 25 02 00 44 3F 02 32 25 02 01 14 25 02  // U.=%..D?.2%...%.
    AE00: 04 5C E1 6F 55 8F 02 3D A5 00 05 44 4D 02 3D A5  // .\.oU..=...DM.=.
    AE10: 00 00 49 5E 02 02 A5 00 00 03 39 40 00 33 25 40  // ..I^......9@.3%@
    AE20: 01 01 22 CB 55 40 02 E0 02 70 55 43 B5 01 02 E0  // ..".U@...pUC....
    AE30: 02 70 55 4B E5 02 01 44 B5 01 02 B0 00 6F 55 3D  // .pUK...D.....oU=
    AE40: A5 00 00 44 8C 02 3D A5 00 05 44 8C 02 02 E5 00  // ...D..=...D.....
    AE50: 04 43 95 02 02 E0 00 CB 55 2C E5 00 01 3D A5 00  // .C......U,...=..
    AE60: 02 44 A3 02 3D A5 00 03 49 AC 02 54 00 70 55 50  // .D..=...I..T.pUP
    AE70: 02 43 B5 01 02 A5 00 00 03 31 43 00 4A 62 6F 55  // .C.......1C.JboU
    AE80: 44 44 B5 01 54 08 CC 55 51 C8 0D 25 CD 55 01 51  // DD..T..UQ..%.U.Q
    AE90: 32 43 B5 01 0D 25 70 55 01 3D A5 00 00 44 E1 02  // 2C...%pU.=...D..
    AEA0: 01 0D A1 55 0F 01 43 B5 01 03 39 43 00 03 02 40  // ...U..C...9C...@
    AEB0: 44 33 25 40 01 01 0A A1 55 40 43 B5 01 54 00 A1  // D3%@....U@C..T..
    AEC0: 55 07 25 70 55 FE 07 0D 6F 55 FF 80 07 25 35 55  // U.%pU...oU...%5U
    AED0: EF 54 20 C8 55 54 20 D8 55 43 B5 01 0C 01 01 06  // .T .UT .UC......
    AEE0: 04 00 37 00 00 42 29 00 63 07 EA 00 63 01 25 00  // ..7..B).c...c.%.
    AEF0: 63 00 C0 00 63 0B ED 00 63 04 F2 00 5A 5A 43 05  // c...c...c...ZZC.
    AF00: 01 02 65 00 10 52 4D 3D 65 00 00 44 E6 00 02 65  // ..e..RM=e..D...e
    AF10: 00 11 52 04 4B E5 02 01 49 E6 00 3D A5 00 00 49  // ..R.K...I..=...I
    AF20: 57 00 03 01 00 00 02 65 00 0F 55 38 00 52 4D 02  // W......e..U8.RM.
    AF30: 02 00 00 02 65 00 0A 55 08 02 52 4D 3D A5 00 00  // ....e..U..RM=...
    AF40: 49 70 00 02 65 00 0B 52 4D 43 79 00 02 65 00 0E  // Ip..e..RMCy..e..
    AF50: 52 4D 43 AD 00 20 05 01 64 00 00 00 02 05 01 14  // RMC.. ..d.......
    AF60: 1E 00 02 2C 21 01 00 03 01 00 00 02 02 00 40 52  // ...,!.........@R
    AF70: 0C 26 05 00 64 00 00 00 02 02 01 40 02 02 00 00  // .&..d......@....
    AF80: 02 65 00 01 55 08 02 52 4D 51 05 02 65 00 01 52  // .e..U..RMQ..e..R
    AF90: 04 51 0A 02 65 00 09 52 4D 43 E6 00 02 65 00 12  // .Q..e..RMC...e..
    AFA0: 52 04 4B E5 02 01 44 E6 00 02 65 00 08 52 4D 02  // R.K...D...e..RM.
    AFB0: 65 00 00 52 04 3D A5 00 00 49 E6 00 02 65 00 00  // e..R.=...I...e..
    AFC0: 52 4D 3A 00 00 5B 43 E6 00 52 4D 43 E6 00 66 06  // RM:..[C..RMC..f.
    AFD0: 02 29 00 00 02 68 00 4E 00 02 8C 00 20 00 52 33  // .)...h.N.... .R3
    AFE0: 5B 02 29 00 00 52 33 5B 2E 0B 02 02 08 00 37 00  // [.)..R3[......7.
    AFF0: 00 66 FF 2D 0D 42 22 0B 56 00 40 03 21 40 00 15  // .f.-.B".V.@.!@..
    B000: 25 40 01 2D 0A 42 40 03 0C 48 00 00 3D 65 00 10  // %@.-.B@..H..=e..
    B010: 49 6D 00 02 65 00 01 3D 25 00 04 45 1B 0B 4A A5  // Im..e..=%..E..J.
    B020: F9 5D 01 44 1B 0B 02 65 00 00 4A A5 15 5E 02 49  // .].D...e..J..^.I
    B030: 1B 0B 0D 25 16 5E 01 07 05 15 5E FF FF FB FF 3D  // ...%.^....^....=
    B040: E5 00 04 45 66 00 4A A5 15 5E 01 44 1B 0B 02 65  // ...Ef.J..^.D...e
    B050: 00 01 43 1B 0B 3D 25 00 04 48 7E 00 03 05 00 01  // ..C..=%..H~.....
    B060: 01 01 01 43 BE 00 4A A5 F9 5D 01 44 74 00 4A A5  // ...C..J..].Dt.J.
    B070: 15 5E 02 49 1B 0B 0D 25 16 5E 01 07 05 15 5E FF  // .^.I...%.^....^.
    B080: FF FB FF 03 05 00 01 01 00 00 3D E5 00 01 44 BE  // ..........=...D.
    B090: 00 03 05 00 01 01 00 00 3D E5 00 02 44 BE 00 03  // ........=...D...
    B0A0: 05 00 01 01 01 01 42 29 00 63 07 E8 00 63 0A D6  // ......B).c...c..
    B0B0: 04 63 01 46 05 63 00 D3 06 63 09 75 08 63 08 E5  // .c.F.c...c.u.c..
    B0C0: 09 63 0B 98 0A 63 0E 46 0A 63 0F 07 01 5A 5A 5B  // .c...c.F.c...ZZ[
    B0D0: 01 05 FD 5D 00 00 00 00 01 05 EE 5D 00 40 00 00  // ...].......].@..
    B0E0: 5C 05 F0 5D FF FF 0F FF 00 00 40 00 43 1B 0B 4A  // \..]......@.C..J
    B0F0: A5 F9 5D 01 49 1B 0B 4A 25 00 5E 01 49 3B 01 3C  // ..].I..J%.^.I;.<
    B100: 25 F9 5D 00 49 3B 01 3C 71 F9 5D 00 49 3B 01 08  // %.].I;.<q.].I;..
    B110: E5 00 01 03 00 40 F1 5D 09 25 40 01 3E 39 40 00  // .....@.].%@.>9@.
    B120: 44 1B 0B 54 20 F9 5D 07 4D F1 5D DF FE 4A 65 F1  // D..T .].M.]..Je.
    B130: 5D 40 49 45 01 0D 05 03 5E 01 01 01 01 0D 25 00  // ]@IE....^.....%.
    B140: 5E 01 0D A5 00 5E 20 0D 25 00 5E 01 0D 05 03 5E  // ^....^ .%.^....^
    B150: 01 01 01 01 03 39 40 00 09 25 40 01 5C 22 F1 5D  // .....9@..%@.\".]
    B160: FE 40 5C 65 00 5E C1 06 0D 25 02 5E 08 0D E5 00  // .@\e.^...%.^....
    B170: 5E A0 5C 05 06 5E BB BB FF FF 33 33 00 00 5C 05  // ^.\..^....33..\.
    B180: 03 5E F7 F7 F7 F7 02 02 02 02 66 07 2D 0C 42 0A  // .^........f.-.B.
    B190: 00 56 00 40 20 25 00 0C 2D 0A 42 40 03 24 40 09  // .V.@ %..-.B@.$@.
    B1A0: 00 03 62 40 40 03 8A 40 40 5C 02 04 5E F8 F8 F8  // ..b@@..@@\..^...
    B1B0: F8 40 03 21 43 00 03 A2 46 44 3D A5 00 00 44 0E  // .@.!C...FD=...D.
    B1C0: 02 03 05 40 04 00 00 00 66 07 2D 0C 42 04 00 03  // ...@....f.-.B...
    B1D0: 04 41 00 00 3E 05 41 00 00 00 00 44 45 02 4C A4  // .A..>.A....DE.L.
    B1E0: 46 06 00 49 06 02 2D 0D 42 0C 00 43 E7 01 03 24  // F..I..-.B..C...$
    B1F0: 40 07 00 43 45 02 03 05 40 05 00 00 00 66 07 2D  // @..CE...@....f.-
    B200: 0C 42 08 00 03 04 41 00 00 3E 05 41 00 00 00 00  // .B....A..>.A....
    B210: 44 45 02 4C A4 46 04 00 49 3B 02 2D 0D 42 44 00  // DE.L.F..I;.-.BD.
    B220: 43 1C 02 2D 0D 42 08 00 03 24 40 05 00 15 05 40  // C..-.B...$@....@
    B230: 0E 5C 02 00 5E FF 3F FE FF 40 07 65 00 5E FE 3D  // .\..^.?..@.e.^.=
    B240: A5 00 00 49 F9 02 5C 05 0B 5E FF FF 8F FF 00 00  // ...I..\..^......
    B250: 20 00 0D 05 0C 5E 01 01 00 00 5C 05 0B 5E 0F 00  //  ....^....\..^..
    B260: FF FF 40 16 00 00 0D 05 0E 5E 00 00 00 01 01 05  // ..@......^......
    B270: 07 5E 05 00 66 66 01 05 0A 5E 02 00 00 00 01 05  // .^..ff...^......
    B280: 09 5E F3 20 01 00 01 05 08 5E F3 DF 00 00 01 05  // .^. .....^......
    B290: 0D 5E 00 00 00 00 5C 05 0B 5E FF FF F8 FF 00 00  // .^....\..^......
    B2A0: 00 00 5C 05 0C 5E 8F FF FF FF 20 00 00 00 0D 05  // ..\..^.... .....
    B2B0: 0E 5E 00 00 00 10 07 05 0C 5E FB FF FF FF 01 05  // .^.......^......
    B2C0: 0F 5E 3E 00 08 00 01 05 10 5E 3E 00 18 24 01 05  // .^>......^>..$..
    B2D0: 11 5E 3E 00 00 00 01 05 12 5E 3E 00 34 00 43 89  // .^>......^>.4.C.
    B2E0: 03 5C 05 0B 5E FF FF 8F FF 00 00 10 00 0D 05 0C  // .\..^...........
    B2F0: 5E 01 01 00 00 5C 05 0B 5E 0F 00 FF FF 60 0A 00  // ^....\..^....`..
    B300: 00 0D 05 0E 5E 00 00 00 01 01 05 07 5E 01 00 52  // ....^.......^..R
    B310: F8 54 00 0A 5E 01 05 09 5E E9 09 00 00 01 05 08  // .T..^...^.......
    B320: 5E 5C 0F 00 00 01 05 0D 5E 00 00 00 00 5C 05 0B  // ^\......^....\..
    B330: 5E FF FF F8 FF 00 00 04 00 07 05 0C 5E 8F FF FF  // ^...........^...
    B340: FF 0D 05 0E 5E 00 00 00 10 0D 05 0C 5E 04 00 00  // ....^.......^...
    B350: 00 01 05 0F 5E 3E 00 0C 00 01 05 10 5E 3E 00 80  // ....^>......^>..
    B360: 88 01 05 11 5E 3E 00 00 00 01 05 12 5E 3E 00 34  // ....^>......^>.4
    B370: 00 0D A5 06 5E 08 0D 25 F3 5D 01 0D 65 F1 5D 20  // ....^..%.]..e.] 
    B380: 4A 65 F1 5D 40 49 98 03 0D A5 F1 5D 01 07 25 00  // Je.]@I.....]..%.
    B390: 5E FE 07 05 03 5E FE FE FE FE 4A E5 00 5E 10 44  // ^....^....J..^.D
    B3A0: B2 03 66 07 2D 0C 42 0C 00 03 04 40 00 00 3E 05  // ..f.-.B....@..>.
    B3B0: 40 FF FF FF FF 44 E4 03 01 04 F4 5D 00 00 01 04  // @....D.....]....
    B3C0: F5 5D 04 00 2D 0D 42 08 00 43 C1 03 01 05 F4 5D  // .]..-.B..C.....]
    B3D0: 38 20 00 00 01 05 F5 5D 0C 00 00 00 56 00 01 4A  // 8 .....]....V..J
    B3E0: 05 03 5E 20 20 20 20 44 1D 04 51 02 2D 05 01 01  // ..^    D..Q.-...
    B3F0: 00 00 00 3E 05 01 A0 86 01 00 49 F7 03 01 25 F9  // ...>......I...%.
    B400: 5D 03 43 1B 0B 0D 05 00 5E 00 01 00 00 03 00 40  // ].C.....^......@
    B410: 04 5E 09 05 40 07 00 00 00 21 05 40 03 00 00 00  // .^..@....!.@....
    B420: 03 05 41 21 20 00 00 2D 02 41 40 01 02 F4 5D 41  // ..A! ..-.A@...]A
    B430: 03 00 41 F5 5D 01 05 F4 5D 84 00 00 00 01 02 F5  // ..A.]...].......
    B440: 5D 41 03 05 41 22 20 00 00 2D 02 41 40 01 02 F4  // ]A..A" ..-.A@...
    B450: 5D 41 03 00 41 F5 5D 01 05 F4 5D 85 00 00 00 01  // ]A..A.]...].....
    B460: 02 F5 5D 41 3D 25 00 04 45 B9 04 03 00 40 00 5E  // ..]A=%..E....@.^
    B470: 09 05 40 00 C0 01 00 1B 05 40 0A 01 05 F4 5D 21  // ..@......@....]!
    B480: 00 00 00 03 00 41 F5 5D 09 25 41 0F 0F 22 41 40  // .....A.].%A.."A@
    B490: 0F 25 41 80 01 05 F4 5D 21 00 00 00 01 02 F5 5D  // .%A....]!......]
    B4A0: 41 56 00 41 3D A5 00 00 44 C8 04 03 0D 41 01 01  // AV.A=...D....A..
    B4B0: 5C A2 0B 5E F8 41 0D 65 00 5E 01 43 1B 0B 03 0A  // \..^.A.e.^.C....
    B4C0: 46 48 66 07 2D 0C 42 0A 00 56 00 40 20 25 00 0C  // FHf.-.B..V.@ %..
    B4D0: 2D 0A 42 40 20 25 00 02 03 0A 48 40 01 04 2E 5D  // -.B@ %....H@...]
    B4E0: 00 00 07 E5 2D 5D FC 03 0A 48 46 03 05 40 01 01  // ....-]...HF..@..
    B4F0: 01 01 3D 25 00 04 45 28 05 4A A5 F9 5D 01 44 28  // ..=%..E(.J..].D(
    B500: 05 4A A5 06 5E 01 49 28 05 09 05 40 FF FF FE FE  // .J..^.I(...@....
    B510: 0D 02 03 5E 40 51 05 03 02 40 00 69 05 40 FF FF  // ...^@Q...@.i.@..
    B520: FF FF 07 02 03 5E 40 51 C8 51 C8 43 1B 0B 4A 25  // .....^@Q.Q.C..J%
    B530: FC 5D 01 49 1B 0B 3C 25 F9 5D 00 49 1B 0B 4C 25  // .].I..<%.].I..L%
    B540: 00 01 44 65 05 0D 05 06 5E 04 00 00 00 4C 65 00  // ..De....^....Le.
    B550: 01 44 74 05 0D 05 06 5E 40 00 00 00 4C A5 00 01  // .Dt....^@...L...
    B560: 44 83 05 0D 05 06 5E 00 04 00 00 4C E5 00 01 44  // D.....^....L...D
    B570: 92 05 0D 05 06 5E 00 40 00 00 03 02 40 00 15 05  // .....^.@....@...
    B580: 40 04 0D 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49  // @....^@V..J%.].I
    B590: 1B 0B 03 02 40 00 15 05 40 05 03 00 41 03 5E 09  // ....@...@...A.^.
    B5A0: 02 41 40 09 05 40 20 20 20 20 3E 02 41 40 44 E4  // .A@..@    >.A@D.
    B5B0: 05 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01  // .Q.-......>.....
    B5C0: 00 49 A2 05 01 25 F9 5D 04 43 1B 0B 03 02 40 00  // .I...%.].C....@.
    B5D0: 15 05 40 04 69 05 40 FF FF FF FF 07 02 03 5E 40  // ..@.i.@.......^@
    B5E0: 56 00 01 4A 25 FC 5D 01 49 1B 0B 03 02 40 00 15  // V..J%.].I....@..
    B5F0: 05 40 05 03 00 41 03 5E 09 02 41 40 3E 05 41 00  // .@...A.^..A@>.A.
    B600: 00 00 00 44 39 06 51 02 2D 05 01 01 00 00 00 3E  // ...D9.Q.-......>
    B610: 05 01 A0 86 01 00 49 FB 05 01 25 F9 5D 05 43 1B  // ......I...%.].C.
    B620: 0B 56 00 01 4A 25 FC 5D 01 49 1B 0B 4A 25 0C 5E  // .V..J%.].I..J%.^
    B630: 80 49 67 06 51 02 2D 05 01 01 00 00 00 3E 05 01  // .Ig.Q.-......>..
    B640: A0 86 01 00 49 3C 06 01 25 F9 5D 06 43 1B 0B 03  // ....I<..%.].C...
    B650: 0A 41 48 56 00 40 03 21 40 00 03 0A 48 40 0D 25  // .AHV.@.!@...H@.%
    B660: 60 01 01 51 0A 03 0A 48 41 0D 25 E8 5D 03 4A 25  // `..Q...HA.%.].J%
    B670: E8 5D 04 44 86 06 0D 65 F1 5D 12 4A 65 F1 5D 04  // .].D...e.].Je.].
    B680: 44 93 06 4C 25 00 01 44 A7 06 0D 65 F0 5D 10 4C  // D..L%..D...e.].L
    B690: 65 00 01 44 B3 06 0D 65 F0 5D 20 4C A5 00 01 44  // e..D...e.] L...D
    B6A0: BF 06 0D 65 F0 5D 40 4C E5 00 01 44 CB 06 0D 65  // ...e.]@L...D...e
    B6B0: F0 5D 80 01 71 F9 5D 00 43 1B 0B 4A 05 06 5E 44  // .]..q.].C..J..^D
    B6C0: 44 00 00 44 1B 0B 07 65 F1 5D FD 07 25 E8 5D FD  // D..D...e.]..%.].
    B6D0: 03 0A 41 48 56 00 40 03 21 40 00 03 0A 48 40 07  // ..AHV.@.!@...H@.
    B6E0: 25 60 01 FE 03 0A 48 41 4C 25 00 01 44 0F 07 07  // %`....HAL%..D...
    B6F0: 05 06 5E FB FF FF FF 4C 65 00 01 44 1E 07 07 05  // ..^....Le..D....
    B700: 06 5E BF FF FF FF 4C A5 00 01 44 2D 07 07 05 06  // .^....L...D-....
    B710: 5E FF FB FF FF 4C E5 00 01 44 3C 07 07 05 06 5E  // ^....L...D<....^
    B720: FF BF FF FF 07 65 0C 5E FE 54 00 08 5E 54 00 09  // .....e.^.T..^T..
    B730: 5E 03 00 40 06 5E 4C 25 00 01 44 60 07 5E 05 40  // ^..@.^L%..D`.^.@
    B740: FC FF FF FF 03 00 00 00 4C 65 00 01 44 72 07 5E  // ........Le..Dr.^
    B750: 05 40 CF FF FF FF 30 00 00 00 4C A5 00 01 44 84  // .@....0...L...D.
    B760: 07 5E 05 40 FF FC FF FF 00 03 00 00 4C E5 00 01  // .^.@........L...
    B770: 44 96 07 5E 05 40 FF CF FF FF 00 30 00 00 3C 02  // D..^.@.....0..<.
    B780: 06 5E 40 44 4A 08 01 02 06 5E 40 03 02 40 00 15  // .^@DJ....^@..@..
    B790: 05 40 04 0D 02 03 5E 40 56 00 01 4A 25 FC 5D 01  // .@....^@V..J%.].
    B7A0: 49 F5 07 03 02 40 00 15 05 40 05 03 00 41 03 5E  // I....@...@...A.^
    B7B0: 09 02 41 40 09 05 40 20 20 20 20 3E 02 41 40 44  // ..A@..@    >.A@D
    B7C0: F5 07 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86  // ..Q.-......>....
    B7D0: 01 00 49 B3 07 01 25 F9 5D 07 43 1B 0B 03 02 40  // ..I...%.].C....@
    B7E0: 00 15 05 40 04 69 05 40 FF FF FF FF 07 02 03 5E  // ...@.i.@.......^
    B7F0: 40 56 00 01 4A 25 FC 5D 01 49 4A 08 03 02 40 00  // @V..J%.].IJ...@.
    B800: 15 05 40 05 03 00 41 03 5E 09 02 41 40 3E 05 41  // ..@...A.^..A@>.A
    B810: 00 00 00 00 44 4A 08 51 02 2D 05 01 01 00 00 00  // ....DJ.Q.-......
    B820: 3E 05 01 A0 86 01 00 49 0C 08 01 25 F9 5D 08 43  // >......I...%.].C
    B830: 1B 0B 03 02 40 00 15 05 40 02 69 05 40 FF FF FF  // ....@...@.i.@...
    B840: FF 07 02 03 5E 40 03 02 40 00 15 05 40 01 09 05  // ....^@..@...@...
    B850: 40 02 02 02 02 0D 02 03 5E 40 43 1B 0B 4A 25 FC  // @.......^@C..J%.
    B860: 5D 01 49 1B 0B 56 00 40 20 25 00 02 03 0A 41 48  // ].I..V.@ %....AH
    B870: 03 02 48 40 0D E5 2E 5D 10 03 0A 48 41 3D A5 00  // ..H@...]...HA=..
    B880: 00 44 A1 08 0D 65 F0 5D F0 0D A5 F0 5D 01 0D A5  // .D...e.]....]...
    B890: E9 5D 01 3D A5 00 00 44 BD 08 4A 05 06 5E 33 33  // .].=...D..J..^33
    B8A0: 00 00 44 CE 09 03 02 40 00 15 05 40 01 69 05 40  // ..D....@...@.i.@
    B8B0: FF FF FF FF 07 02 03 5E 40 03 02 40 00 15 05 40  // .......^@..@...@
    B8C0: 02 09 05 40 04 04 04 04 0D 02 03 5E 40 03 00 40  // ...@.......^@..@
    B8D0: 06 5E 4C 25 00 01 44 F8 08 09 05 40 FC FF FF FF  // .^L%..D....@....
    B8E0: 4C 65 00 01 44 06 09 09 05 40 CF FF FF FF 4C A5  // Le..D....@....L.
    B8F0: 00 01 44 14 09 09 05 40 FF FC FF FF 4C E5 00 01  // ..D....@....L...
    B900: 44 22 09 09 05 40 FF CF FF FF 01 02 06 5E 40 03  // D"...@.......^@.
    B910: 02 40 00 15 05 40 04 0D 02 03 5E 40 56 00 01 4A  // .@...@....^@V..J
    B920: 25 FC 5D 01 49 1B 0B 03 02 40 00 15 05 40 05 03  // %.].I....@...@..
    B930: 00 41 03 5E 09 02 41 40 09 05 40 20 20 20 20 3E  // .A.^..A@..@    >
    B940: 02 41 40 44 79 09 51 02 2D 05 01 01 00 00 00 3E  // .A@Dy.Q.-......>
    B950: 05 01 A0 86 01 00 49 37 09 01 25 F9 5D 09 43 1B  // ......I7..%.].C.
    B960: 0B 03 02 40 00 15 05 40 04 69 05 40 FF FF FF FF  // ...@...@.i.@....
    B970: 07 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 1B 0B  // ...^@V..J%.].I..
    B980: 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41  // ..@...@...A.^..A
    B990: 40 3E 05 41 00 00 00 00 44 CE 09 51 02 2D 05 01  // @>.A....D..Q.-..
    B9A0: 01 00 00 00 3E 05 01 A0 86 01 00 49 90 09 01 25  // ....>......I...%
    B9B0: F9 5D 0A 43 1B 0B 03 02 40 00 15 05 40 03 09 05  // .].C....@...@...
    B9C0: 40 08 08 08 08 0D 02 03 5E 40 43 1B 0B 03 02 40  // @.......^@C....@
    B9D0: 00 15 05 40 03 69 05 40 FF FF FF FF 07 02 03 5E  // ...@.i.@.......^
    B9E0: 40 07 A5 F0 5D FE 4C 25 00 01 44 0A 0A 07 65 F0  // @...].L%..D...e.
    B9F0: 5D EF 4C 65 00 01 44 16 0A 07 65 F0 5D DF 4C A5  // ].Le..D...e.].L.
    BA00: 00 01 44 22 0A 07 65 F0 5D BF 4C E5 00 01 44 2E  // ..D"..e.].L...D.
    BA10: 0A 07 65 F0 5D 7F 07 A5 E9 5D FE 56 00 40 20 25  // ..e.]....].V.@ %
    BA20: 00 02 03 0A 48 40 07 E5 2E 5D EF 43 1B 0B 03 21  // ....H@...].C...!
    BA30: 43 00 03 A2 46 44 66 07 2D 0C 42 04 00 3D A5 00  // C...FDf.-.B..=..
    BA40: 03 44 6A 0A 66 07 2D 0C 42 06 00 3D A5 00 02 49  // .Dj.f.-.B..=...I
    BA50: 1B 0B 03 04 41 00 00 3E 05 41 00 00 00 00 44 1B  // ....A..>.A....D.
    BA60: 0B 3D 02 01 41 46 88 0A 4C A4 46 06 00 49 90 0A  // .=..AF..L.F..I..
    BA70: 2D 0D 42 0C 00 43 6A 0A 03 04 41 08 00 43 F7 0A  // -.B..Cj...A..C..
    BA80: 08 A5 00 1B 66 07 2D 0C 42 08 00 03 21 43 00 03  // ....f.-.B...!C..
    BA90: A2 46 44 03 04 41 00 00 3E 05 41 00 00 00 00 44  // .FD..A..>.A....D
    BAA0: 1B 0B 3D 02 01 41 46 C9 0A 4C A4 46 04 00 49 D1  // ..=..AF..L.F..I.
    BAB0: 0A 2D 0D 42 44 00 43 AB 0A 2D 0D 42 08 00 3D A4  // .-.BD.C..-.B..=.
    BAC0: 00 00 00 44 F2 0A 03 24 41 00 00 3E 25 41 18 44  // ...D...$A..>%A.D
    BAD0: F2 0A 2D 0D 42 06 00 43 D6 0A 03 04 41 01 00 5C  // ..-.B..C....A..\
    BAE0: 02 0F 5E 00 00 FC FF 41 5C 02 10 5E 00 00 FC FF  // ..^....A\..^....
    BAF0: 41 5C 02 11 5E 00 00 FC FF 41 5C 02 12 5E 00 00  // A\..^....A\..^..
    BB00: FC FF 41 3A 00 00 5B 7A 0C 00 00 00 D8 00 B0 01  // ..A:..[z........
    BB10: 88 02 60 03 38 04 1F 02 01 02 00 00 37 00 00 3D  // ..`.8.......7..=
    BB20: 0D 00 00 00 44 CE 01 56 00 41 03 21 41 01 09 25  // ....D..V.A.!A..%
    BB30: 41 0F 15 0D 41 02 03 0A 40 42 66 FF 2D 0D 42 07  // A...A...@Bf.-.B.
    BB40: 02 2D 0A 42 41 03 0C 48 02 00 0D A5 90 5D 01 54  // .-.BA..H.....].T
    BB50: 08 90 5D 03 0C 48 00 00 03 F9 41 01 15 3D 41 04  // ..]..H....A..=A.
    BB60: 5C BA 10 54 8F 41 03 0A 42 40 4A 25 10 54 01 49  // \..T.A..B@J%.T.I
    BB70: 81 00 0D 0D 10 54 01 01 0D 25 10 54 10 4A 25 10  // .....T...%.T.J%.
    BB80: 54 20 44 67 00 07 25 10 54 EF 4A 25 10 54 20 49  // T Dg..%.T.J%.T I
    BB90: 74 00 0D 25 13 54 40 56 00 41 03 09 41 00 3B 02  // t..%.T@V.A..A.;.
    BBA0: 41 03 3B 41 00 1B 25 41 04 01 A2 11 54 41 03 69  // A.;A..%A....TA.i
    BBB0: 41 01 15 2D 41 04 01 2A 11 54 41 56 00 40 0F E5  // A..-A..*.TAV.@..
    BBC0: 40 80 03 73 40 00 01 02 16 54 40 56 00 40 03 6B  // @..s@....T@V.@.k
    BBD0: 40 00 01 02 16 54 40 03 63 40 00 01 02 16 54 40  // @....T@.c@....T@
    BBE0: 03 7B 40 00 09 65 40 0F 01 02 16 54 40 3E 25 41  // .{@..e@....T@>%A
    BBF0: 04 47 10 01 33 25 41 04 2D 05 46 04 00 00 00 03  // .G..3%A.-.F.....
    BC00: 63 40 00 01 02 16 54 40 03 6B 40 00 01 02 16 54  // c@....T@.k@....T
    BC10: 40 03 73 40 00 01 02 16 54 40 03 7B 40 00 01 02  // @.s@....T@.{@...
    BC20: 16 54 40 43 D7 00 0D 25 13 54 02 0D 25 11 54 01  // .T@C...%.T..%.T.
    BC30: 03 29 40 01 21 25 40 0A 2D 25 40 64 4A 25 14 54  // .)@.!%@.-%@dJ%.T
    BC40: 01 49 42 01 51 14 33 25 40 01 3E 25 40 00 49 26  // .IB.Q.3%@.>%@.I&
    BC50: 01 02 65 01 01 43 CA 01 4A 05 14 54 F0 8F FF 00  // ..e..C..J..T....
    BC60: 44 54 01 02 65 01 02 43 CA 01 01 05 16 54 01 00  // DT..e..C.....T..
    BC70: 00 80 03 00 40 16 54 02 6A 01 40 02 B8 01 14 54  // ....@.T.j.@....T
    BC80: 08 A5 01 1F 3D A5 01 00 46 7C 01 02 65 01 03 43  // ....=...F|..e..C
    BC90: CA 01 32 A5 01 01 3D 8D 00 00 00 44 CA 01 3D A5  // ..2...=....D..=.
    BCA0: 01 00 44 CA 01 03 31 41 01 03 19 40 00 56 18 40  // ..D...1A...@.V.@
    BCB0: 3B 02 40 03 28 40 16 54 03 68 40 16 54 03 A8 40  // ;.@.(@.T.h@.T..@
    BCC0: 16 54 03 E8 40 16 54 04 02 00 40 3E 25 41 04 47  // .T..@.T...@>%A.G
    BCD0: CA 01 33 25 41 04 2D 05 46 04 00 00 00 43 9D 01  // ..3%A.-.F....C..
    BCE0: 3A 00 00 5B 66 FF 2D 0D 42 07 02 03 0C 48 00 00  // :..[f.-.B....H..
    BCF0: 01 8D 18 54 32 00 01 05 19 54 7A 1C 02 00 01 05  // ...T2....Tz.....
    BD00: 1A 54 10 11 3D 10 2D 0D 42 04 00 2C 25 00 01 3D  // .T..=.-.B..,%..=
    BD10: 25 00 06 49 D5 01 56 08 48 5B 7A 18 00 00 00 00  // %..I..V.H[z.....
    BD20: 00 1C 00 04 00 38 00 08 00 54 00 0C 00 70 00 10  // .....8...T...p..
    BD30: 00 8C 00 14 00 00 5C 00 01 02 00 04 02 25 01 04  // ......\......%..
    BD40: 03 31 41 00 09 0D 41 0F 00 15 0D 41 01 66 FF 2D  // .1A...A....A.f.-
    BD50: 0D 42 50 00 2D 0A 42 41 03 0C 48 00 00 07 A5 90  // .BP.-.BA..H.....
    BD60: 5D FE 01 0D 90 5D 11 11 50 02 4A 0D 93 5D 01 00  // ]....]..P.J..]..
    BD70: 49 41 00 02 25 01 13 54 08 90 5D 54 00 92 5D 3A  // IA..%..T..]T..]:
    BD80: 00 00 5B 7A 0C 00 00 00 04 00 08 00 0C 00 10 00  // ..[z............
    BD90: 14 00 5B 01 02 01 04 04 37 00 00 42 21 00 63 07  // ..[.....7..B!.c.
    BDA0: 29 00 63 03 4E 00 63 02 60 00 63 04 84 00 63 0C  // ).c.N.c.`.c...c.
    BDB0: 12 01 63 0D 1B 01 5A 5A 43 5A 01 01 0D 45 5D 9F  // ..c...ZZCZ...E].
    BDC0: 0F 66 06 01 24 47 5D 30 00 01 4C 47 5D 31 00 03  // .f..$G]0..LG]1..
    BDD0: 24 46 3B 00 3E 25 46 00 44 5A 01 54 20 47 5D 5B  // $F;.>%F.DZ.T G][
    BDE0: 0D E5 47 5D 01 5C 05 43 5D FF FF FF FD 11 00 03  // ..G].\.C].......
    BDF0: 00 5B 0D E5 47 5D 01 4A 25 44 5D 02 44 72 00 0D  // .[..G].J%D].Dr..
    BE00: A5 43 5D 01 0D A5 43 5D 02 5C 05 43 5D EF FF FF  // .C]...C].\.C]...
    BE10: FD 01 00 00 00 5B 4A 05 53 00 00 02 00 00 44 94  // .....[J.S.....D.
    BE20: 00 0D 25 4B 5D 01 3D 8D 00 00 00 44 11 01 03 05  // ..%K].=....D....
    BE30: 46 80 F0 FA 02 56 00 41 03 19 41 00 21 05 41 FF  // F....V.A..A.!.A.
    BE40: 0F 00 00 27 02 46 40 3E 05 41 00 00 00 00 44 C4  // ...'.F@>.A....D.
    BE50: 00 2D 0D 40 01 00 01 8A 45 5D 40 56 00 41 03 19  // .-.@....E]@V.A..
    BE60: 41 00 21 02 40 41 27 02 46 40 01 A5 4A 5D 0C 01  // A.!.@A'.F@..J]..
    BE70: 0A 4A 5D 40 15 05 40 04 56 00 41 03 29 41 00 2D  // .J]@..@.V.A.)A.-
    BE80: 0D 41 01 00 21 02 40 41 1B 05 40 08 01 0A 48 5D  // .A..!.@A..@...H]
    BE90: 40 0D E5 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D 01  // @..H]..%K].JeK].
    BEA0: 49 09 01 5B 01 05 43 5D 00 00 03 00 5B 0D E5 47  // I..[..C]....[..G
    BEB0: 5D 01 4A 05 43 5D 01 00 00 00 44 41 01 4A 05 43  // ].J.C]....DA.J.C
    BEC0: 5D 10 00 00 00 49 4E 01 4A 05 44 5D 01 00 00 00  // ]....IN.J.D]....
    BED0: 49 36 01 5C 05 43 5D FF FF FE FF 00 00 02 00 5B  // I6.\.C]........[
    BEE0: 5C 05 43 5D EF FF FD FD 01 00 00 00 5B 00 DB 00  // \.C]........[...
    BEF0: 02 01 00 00 01 05 00 C2 00 00 00 E0 01 05 3E 26  // ..............>&
    BF00: 44 00 10 00 5C 05 7E 12 FF FF E7 FF 00 00 10 00  // D...\.~.........
    BF10: 5C 05 7E 18 FF FF E7 FF 00 00 10 00 5C 05 7F 12  // \.~.........\...
    BF20: FF FF E7 FF 00 00 10 00 5C 05 7F 18 FF FF E7 FF  // ........\.......
    BF30: 00 00 10 00 01 05 17 74 2D 0B 25 00 03 00 40 26  // .......t-.%...@&
    BF40: 74 3E 05 40 F3 0C 00 00 49 78 00 01 05 0B F0 00  // t>.@....Ix......
    BF50: 00 FF 00 01 05 25 CE 32 10 32 10 01 05 26 CE 32  // .....%.2.2...&.2
    BF60: 01 32 01 43 DA 00 3E 05 40 04 01 00 00 49 A5 00  // .2.C..>.@....I..
    BF70: 01 05 90 CD 22 22 22 22 01 05 10 CD 22 22 22 22  // ....""""....""""
    BF80: 01 05 25 CE 00 00 00 00 01 05 26 CE 11 11 11 11  // ..%.......&.....
    BF90: 43 DA 00 3E 05 40 FF 0F 00 00 49 CA 00 01 05 0B  // C..>.@....I.....
    BFA0: F0 00 00 3C 00 01 05 25 CE 32 10 32 10 01 05 26  // ...<...%.2.2...&
    BFB0: CE 31 02 31 02 43 DA 00 01 05 25 CE 32 10 32 10  // .1.1.C....%.2.2.
    BFC0: 01 05 26 CE 31 02 31 02 5B 00 AF 00 03 02 0C 00  // ..&.1.1.[.......
    BFD0: 37 00 00 03 01 00 00 03 01 01 01 03 01 02 02 52  // 7..............R
    BFE0: 16 03 01 46 00 1B 05 46 08 02 02 00 00 02 02 01  // ...F...F........
    BFF0: 01 02 02 02 02 3D 65 02 00 49 36 00 2C 22 02 46  // .....=e..I6.,".F
    C000: 3D E5 02 00 49 41 00 2C A2 02 46 3D 65 02 02 49  // =...IA.,..F=e..I
    C010: 48 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05 40  // H...@...@....>.@
    C020: 00 00 00 D0 49 6E 00 01 05 63 C0 00 00 00 40 55  // ....In...c....@U
    C030: 00 00 55 20 02 43 72 00 54 00 63 C0 01 01 64 C0  // ..U .Cr.T.c...d.
    C040: 00 56 00 40 03 21 40 02 01 02 65 C0 40 01 01 66  // .V.@.!@...e.@..f
    C050: C0 01 03 31 40 02 01 02 67 C0 40 01 01 E8 C0 03  // ...1@...g.@.....
    C060: 3D 65 02 01 44 A6 00 3D E5 02 01 44 A6 00 51 02  // =e..D..=...D..Q.
    C070: 4A E5 A0 21 80 49 A6 00 5B 00 B2 01 02 02 00 00  // J..!.I..[.......
    C080: 37 00 00 3D 25 01 01 44 8D 00 3D 25 01 02 44 8E  // 7..=%..D..=%..D.
    C090: 00 3D 25 01 03 44 33 00 3D 25 01 00 49 93 01 3D  // .=%..D3.=%..I..=
    C0A0: 05 00 00 00 00 00 49 5E 00 3A 00 00 5B 52 3C 03  // ......I^.:..[R<.
    C0B0: 00 40 24 01 3E F9 40 00 44 5A 00 4A A5 24 01 10  // .@$.>.@.DZ.J.$..
    C0C0: 44 41 00 03 F9 40 00 01 02 24 01 40 4A A5 24 01  // DA...@...$.@J.$.
    C0D0: 10 44 52 00 55 38 00 5B 54 20 A4 53 52 3C 03 00  // .DR.U8.[T .SR<..
    C0E0: 40 24 01 3E 39 40 00 44 89 00 4A A5 24 01 08 44  // @$.>9@.D..J.$..D
    C0F0: 70 00 03 39 40 00 01 02 24 01 40 4A A5 24 01 08  // p..9@...$.@J.$..
    C100: 44 81 00 55 38 00 5B 5B 66 FF 2D 0D 42 9A 01 56  // D..U8.[[f.-.B..V
    C110: 00 41 03 39 41 01 15 25 41 02 2D 0A 42 41 3D 65  // .A.9A..%A.-.BA=e
    C120: 01 0B 49 01 01 20 05 00 64 00 00 00 03 0C 48 02  // ..I.. ..d.....H.
    C130: 00 03 00 41 40 01 0F 25 41 10 09 0D 41 DF FF 03  // ...A@..%A...A...
    C140: 0C 48 00 00 4A 05 01 50 01 00 00 00 44 EA 00 03  // .H..J..P....D...
    C150: 0C 48 02 00 3C 02 41 01 40 49 EA 00 3C 02 40 01  // .H..<.A.@I..<.@.
    C160: 41 44 93 01 03 0C 48 02 00 07 25 40 01 EF 01 02  // AD....H...%@....
    C170: 41 01 40 01 0A 40 01 41 43 93 01 56 00 40 03 8D  // A.@..@.AC..V.@..
    C180: 40 0C 00 3D 65 01 18 44 24 01 03 8D 40 3E 00 3D  // @..=e..D$...@>.=
    C190: 65 01 19 44 24 01 03 A9 40 01 33 A5 40 14 03 31  // e..D$...@.3.@..1
    C1A0: 40 01 09 25 40 03 15 25 40 04 0F 0D 40 01 01 56  // @..%@..%@...@..V
    C1B0: 00 41 03 29 41 01 33 25 41 14 03 0C 48 00 00 4A  // .A.)A.3%A...H..J
    C1C0: 05 01 50 01 00 00 00 44 71 01 03 0C 48 02 00 4A  // ..P....Dq...H..J
    C1D0: 25 40 01 10 49 71 01 3C 22 43 01 41 49 71 01 03  // %@..Iq.<"C.AIq..
    C1E0: 1A 48 40 3C 0A 00 01 40 44 93 01 03 1A 48 40 07  // .H@<...@D....H@.
    C1F0: 25 00 01 FE 03 0C 48 02 00 01 22 43 01 41 07 0D  // %.....H..."C.A..
    C200: 40 01 EF FF 03 1A 48 40 01 0A 00 01 40 3A 00 00  // @.....H@....@:..
    C210: 5B 7A 18 00 00 00 00 00 80 00 04 00 00 01 08 00  // [z..............
    C220: 80 01 0C 00 00 02 10 00 80 02 14 00 E7 00 01 08  // ................
    C230: 08 00 03 01 00 00 02 05 00 05 00 01 00 52 29 20  // .............R) 
    C240: 05 00 64 00 00 00 03 02 46 40 02 02 00 00 03 01  // ..d.....F@......
    C250: 00 00 55 38 00 03 05 40 00 32 00 00 3D 05 00 00  // ..U8...@.2..=...
    C260: 00 00 00 44 64 00 03 02 40 46 27 01 40 00 3E 05  // ...Dd...@F'.@.>.
    C270: 40 9C 18 00 00 47 53 00 03 05 40 00 32 00 00 3E  // @....GS...@.2..>
    C280: 05 40 C8 00 00 00 46 64 00 03 05 40 C8 00 00 00  // .@....Fd...@....
    C290: 66 FF 2D 0D 42 C7 00 3E 0C 40 02 00 47 7B 00 2D  // f.-.B..>.@..G{.-
    C2A0: 0D 42 08 00 43 6B 00 33 0C 40 00 00 03 0C 01 06  // .B..Ck.3.@......
    C2B0: 00 3E 0D 01 19 00 49 9A 00 27 0D 40 32 00 21 0D  // .>....I..'.@2.!.
    C2C0: 40 02 00 43 9F 00 27 0C 40 06 00 2D 0C 40 04 00  // @..C..'.@..-.@..
    C2D0: 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00 2D 0C  // ...@3.@..!.@..-.
    C2E0: 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00 40 5B  // @..'.F@...@...@[
    C2F0: 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80 0C 40  // z ...@.....@...@
    C300: 00 32 00 80 0C 38 18 60 00 64 00 00 32 00 32 7F  // .2...8.`.d..2.2.
    C310: 00 64 00 00 CB 00 01 01 00 00 37 00 00 3D 65 00  // .d........7..=e.
    C320: 01 44 61 00 56 00 40 20 25 00 10 03 0A 48 40 07  // .Da.V.@ %....H@.
    C330: 25 8F 4F FD 4A 25 8F 4F 04 49 20 00 52 14 07 25  // %.O.J%.O.I .R..%
    C340: 46 50 FE 4A 65 46 50 01 49 2F 00 03 21 40 00 21  // FP.JeFP.I/..!@.!
    C350: 0D 40 DC 00 03 0A 48 40 07 25 B4 3A FE 56 00 40  // .@....H@.%.:.V.@
    C360: 03 21 40 00 21 0D 40 6B 01 03 0A 48 40 07 25 85  // .!@.!.@k...H@.%.
    C370: 41 EF 43 C7 00 56 00 40 20 25 00 10 03 0A 48 40  // A.C..V.@ %....H@
    C380: 0D 25 8F 4F 02 4A 25 8F 4F 04 44 71 00 52 14 0D  // .%.O.J%.O.Dq.R..
    C390: 25 46 50 01 4A 65 46 50 01 44 80 00 56 00 40 03  // %FP.JeFP.D..V.@.
    C3A0: 21 40 00 21 0D 40 DC 00 03 0A 48 40 0D 25 B4 3A  // !@.!.@....H@.%.:
    C3B0: 01 56 00 40 03 21 40 00 21 0D 40 6B 01 03 0A 48  // .V.@.!@.!.@k...H
    C3C0: 40 0D 25 85 41 10 56 00 40 03 21 40 00 21 0D 40  // @.%.A.V.@.!@.!.@
    C3D0: 5A 00 03 0A 48 40 0D 25 4C 4D 01 3A 00 00 5B 00  // Z...H@.%LM.:..[.
    C3E0: 24 00 01 01 00 00 37 00 00 03 00 41 E3 0D 33 05  // $.....7....A..3.
    C3F0: 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 25  // A......A.....A.%
    C400: 1F 0E 03 5B C8 00 02 01 D6 09 80 02 A0 00 E0 01  // ...[............
    C410: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    C420: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    C430: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    C440: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    C450: 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05  // ..........U<0*..
    C460: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    C470: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    C480: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    C490: 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    C4A0: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    C4B0: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    C4C0: 03 00 00 00 00 00 00 00 00 00 EC 3C 34 00 02 01  // ...........<4...
    C4D0: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    C4E0: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    C4F0: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    C500: 5C 00 02 01 00 00 00 00 00 00 00 00 00 00 00 00  // \...............
    C510: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    C520: C8 00 00 00 00 00 34 21 00 00 B8 0B 00 00 00 00  // ......4!........
    C530: 7D 00 00 01 00 00 00 00 00 FF FF 00 00 00 00 00  // }...............
    C540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C550: 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 02 01  // ................
    C560: 00 00 00 00 00 00 00 00 74 00 01 01 10 01 06 12  // ........t.......
    C570: 11 01 16 12 13 01 06 6A 14 01 16 6A 16 01 06 55  // .......j...j...U
    C580: 17 01 16 55 19 01 06 EA 1A 01 16 EA 65 01 16 E9  // ...U........e...
    C590: 66 01 0A E9 21 01 0A 12 22 01 0A 6A 23 01 0A 55  // f...!..."..j#..U
    C5A0: 24 01 0A EA 45 01 16 EB 46 01 0A EB 75 01 16 EC  // $...E...F...u...
    C5B0: 76 01 0A EC D2 01 16 70 D4 01 0A 70 D8 01 16 71  // v......p...p...q
    C5C0: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    C5D0: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 14 00 02 01  // ...s...t...t....
    C5E0: 02 00 08 00 80 00 00 02 00 04 00 08 40 00 FF FF  // ............@...
    C5F0: 88 00 01 04 88 06 04 00 13 31 48 00 20 21 00 00  // .........1H. !..
    C600: 6C 00 00 00 08 00 00 00 13 32 51 00 20 22 00 00  // l........2Q. "..
    C610: 73 00 00 00 80 00 00 00 0C 31 5A 00 21 21 00 00  // s........1Z.!!..
    C620: 7A 00 00 00 00 02 00 00 0C 32 63 00 1E 21 00 00  // z........2c..!..
    C630: 81 00 00 00 00 04 00 00 01 04 91 00 02 04 02 00  // ................
    C640: FF 01 04 90 00 02 04 01 00 FF 01 04 95 00 02 04  // ................
    C650: 06 00 FF 01 04 93 00 02 04 04 00 FF 14 06 0F 00  // ................
    C660: 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 00 00 00  // ................
    C670: FF 14 06 0F 00 00 00 FF 05 00 01 01 00 00 38 00  // ..............8.
    C680: 04 03 04 00 00 00 24 F4 00 00 10 27 88 13 00 00  // ......$....'....
    C690: 00 00 00 00 00 00 C2 01 4E 0C 01 01 00 00 55 00  // ........N.....U.
    C6A0: 00 00 10 27 00 00 00 02 06 01 00 06 06 00 00 00  // ...'............
    C6B0: 00 00 00 00 00 00 02 02 05 03 0E 00 36 00 46 00  // ............6.F.
    C6C0: 5A 01 A2 01 30 75 00 00 0C 00 3F 05 3A 40 00 00  // Z...0u....?.:@..
    C6D0: 40 9C 00 00 0C 00 3F 05 3E 00 00 00 FF FF FF 00  // @.....?.>.......
    C6E0: 0C 00 3F 05 77 21 00 00 00 00 00 00 FF FF FF 00  // ..?.w!..........
    C6F0: 0C 00 3F 05 3E 00 00 00 00 00 00 00 48 3F 00 00  // ..?.>.......H?..
    C700: 3F 00 44 00 00 16 00 00 00 04 01 1F 00 00 00 04  // ?.D.............
    C710: 02 2C 00 00 00 04 03 3E 00 00 00 04 08 1B 50 00  // .,.....>......P.
    C720: 00 04 09 25 60 00 00 04 0A 35 90 00 00 04 10 21  // ...%`....5.....!
    C730: B0 00 00 04 11 2F F0 00 00 04 18 2A 40 01 00 04  // ...../.....*@...
    C740: 78 69 00 00 3F 00 44 00 00 16 00 00 00 04 01 1F  // xi..?.D.........
    C750: 00 00 00 04 02 2C 00 00 00 04 03 3E 00 00 00 04  // .....,.....>....
    C760: 08 1B 50 00 00 04 09 25 60 00 00 04 0A 35 90 00  // ..P....%`....5..
    C770: 00 04 10 21 B0 00 00 04 11 2F F0 00 00 04 18 2A  // ...!...../.....*
    C780: 40 01 00 04 F0 D2 00 00 3F 00 44 00 00 1E 00 00  // @.......?.D.....
    C790: 00 04 01 26 00 00 00 04 02 30 00 00 00 04 03 3E  // ...&.....0.....>
    C7A0: 00 00 00 04 08 22 40 00 00 04 09 2C 60 00 00 04  // ....."@....,`...
    C7B0: 0A 37 70 00 00 04 10 27 90 00 00 04 11 32 C0 00  // .7p....'.....2..
    C7C0: 00 04 18 2E 00 01 00 04 68 3C 01 00 3F 00 44 00  // ........h<..?.D.
    C7D0: 00 1E 00 00 00 04 01 26 00 00 00 04 02 30 00 00  // .......&.....0..
    C7E0: 00 04 03 3E 00 00 00 04 08 22 40 00 00 04 09 2C  // ...>....."@....,
    C7F0: 60 00 00 04 0A 37 70 00 00 04 10 27 90 00 00 04  // `....7p....'....
    C800: 11 32 C0 00 00 04 18 2E 00 01 00 04 00 00 00 00  // .2..............
    C810: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    C820: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    C830: 00 07 05 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    C840: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    C850: 02 03 00 01 00 07 05 00 08 30 00 00 9B 00 00 00  // .........0......
    C860: 07 30 00 00 46 25 00 00 08 31 00 00 9B 00 00 00  // .0..F%...1......
    C870: 07 31 00 00 46 25 00 00 08 32 00 00 9B 00 00 00  // .1..F%...2......
    C880: 07 32 00 00 46 25 00 00 08 33 00 00 9B 00 00 00  // .2..F%...3......
    C890: 07 33 00 00 46 25 00 00 56 00 00 00 05 00 00 00  // .3..F%..V.......
    C8A0: 46 00 00 00 30 00 00 00 50 00 00 00 30 00 00 00  // F...0...P...0...
    C8B0: FF FF FF FF 00 00 00 00 58 00 02 05 01 0A 02 00  // ........X.......
    C8C0: 0A 02 04 02 64 C0 00 00 65 C0 00 00 66 C0 00 00  // ....d...e...f...
    C8D0: 67 C0 00 00 E8 C0 00 00 A0 21 00 00 42 EC 00 00  // g........!..B...
    C8E0: 10 27 00 00 0A 04 00 00 BB 0B 00 00 B9 2C 00 00  // .'...........,..
    C8F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C910: DD 01 02 05 C4 01 CC 01 00 00 00 00 D4 01 DA 01  // ................
    C920: 00 00 00 00 24 50 53 50 EB 50 4F 07 16 00 00 00  // ....$PSP.PO.....
    C930: 00 00 00 00 00 00 00 00 40 04 00 00 00 00 03 00  // ........@.......
    C940: 00 00 00 00 01 00 00 00 00 60 00 00 00 30 04 00  // .........`...0..
    C950: 00 00 00 00 04 00 00 00 00 E8 00 00 00 00 00 00  // ................
    C960: 00 00 00 00 05 00 00 00 00 01 00 00 00 0A 03 00  // ................
    C970: 00 00 00 00 07 00 00 00 40 04 00 00 40 0B 03 00  // ........@...@...
    C980: 00 00 00 00 09 00 00 00 08 00 00 00 2C CA 00 00  // ............,...
    C990: 00 00 00 00 11 00 00 00 00 10 01 00 00 10 05 00  // ................
    C9A0: 00 00 00 00 12 00 00 00 00 50 00 00 00 20 06 00  // .........P... ..
    C9B0: 00 00 00 00 14 00 00 00 00 30 00 00 00 10 03 00  // .........0......
    C9C0: 00 00 00 00 21 00 00 00 10 00 00 00 00 0B 03 00  // ....!...........
    C9D0: 00 00 00 00 23 00 00 00 00 50 00 00 00 00 02 00  // ....#....P......
    C9E0: 00 00 00 00 2D 00 00 00 00 F0 00 00 00 40 03 00  // ....-........@..
    C9F0: 00 00 00 00 2E 00 00 00 00 80 00 00 00 90 04 00  // ................
    CA00: 00 00 00 00 35 00 00 00 38 00 00 00 34 CA 00 00  // ....5...8...4...
    CA10: 00 00 00 00 36 00 00 00 00 40 00 00 00 70 06 00  // ....6....@...p..
    CA20: 00 00 00 00 37 00 00 00 00 10 00 00 00 B0 06 00  // ....7...........
    CA30: 00 00 00 00 38 00 00 00 40 04 00 00 00 05 03 00  // ....8...@.......
    CA40: 00 00 00 00 3A 00 00 00 00 62 00 00 00 C0 06 00  // ....:....b......
    CA50: 00 00 00 00 3B 00 00 00 00 03 00 00 00 22 07 00  // ....;........"..
    CA60: 00 00 00 00 3D 00 00 00 00 40 00 00 00 25 07 00  // ....=....@...%..
    CA70: 00 00 00 00 03 00 00 00 00 60 00 00 00 65 07 00  // .........`...e..
    CA80: 00 00 00 00 42 00 00 00 00 08 00 00 00 C5 07 00  // ....B...........
    CA90: 00 00 00 00 01 00 00 00 00 00 00 00 04 01 00 00  // ................
    CAA0: 00 00 00 00 00 00 00 00 01 01 2C 00 00 C1 1F 73  // ..........,....s
    CAB0: 6C 00 5B 00 69 00 00 00 90 01 00 00 7C 99 05 00  // l.[.i.......|...
    CAC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CAD0: 00 00 00 00 76 31 30 30 32 31 31 00 76 31 30 30  // ....v100211.v100
    CAE0: 32 31 31 00 76 30 32 38 31 00 41 31 00 00 6C 00  // 211.v0281.A1..l.
    CAF0: 02 01 B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08  // ...].......]....
    CB00: 02 00 B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14  // ...].......]....
    CB10: 04 00 B5 5D 00 00 1A 18 05 00 B5 5D 00 00 1C 1C  // ...].......]....
    CB20: 06 00 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08  // ...].......]....
    CB30: 91 00 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08  // ...].......]....
    CB40: 93 00 A1 5D 00 00 08 08 94 00 A5 5D 00 00 08 08  // ...].......]....
    CB50: 95 00 A9 5D 00 00 08 08 97 00 8A 06 0C 00 01 E2  // ...]............
    CB60: 01 F8 08 00 00 D4 38 00 00 7D 00 08 00 00 00 1B  // ......8..}......
    CB70: 00 00 00 00 00 00 00 00 00 00 76 00 00 00 00 00  // ..........v.....
    CB80: 00 00 00 00 00 00 00 00 01 00 00 00 0A 00 00 00  // ................
    CB90: 34 08 00 00 F3 04 00 00 3E 04 00 00 F3 04 00 00  // 4.......>.......
    CBA0: F3 04 00 00 6B 03 00 00 F3 04 00 00 04 05 00 00  // ....k...........
    CBB0: 04 05 00 00 2A 03 00 00 00 00 00 00 00 00 00 00  // ....*...........
    CBC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CBD0: 2C 01 00 00 64 00 00 00 64 00 00 00 64 00 00 00  // ,...d...d...d...
    CBE0: FB 01 00 00 64 00 00 00 FB 01 00 00 34 01 00 00  // ....d.......4...
    CBF0: 2C 01 00 00 2C 01 00 00 00 00 00 00 00 00 00 00  // ,...,...........
    CC00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC10: 80 00 00 00 0E 00 00 00 1E 00 00 00 01 01 01 01  // ................
    CC20: 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00  // ................
    CC30: 00 00 00 00 00 00 00 00 00 00 00 00 66 08 00 00  // ............f...
    CC40: 66 08 00 00 66 08 00 00 B0 04 00 00 66 08 00 00  // f...f.......f...
    CC50: B0 04 00 00 66 08 00 00 B0 04 00 00 B6 03 00 00  // ....f...........
    CC60: 32 00 00 00 48 0D 00 00 48 0D 00 00 64 00 00 00  // 2...H...H...d...
    CC70: 6E 00 00 00 02 00 00 00 01 00 00 00 01 00 00 00  // n...............
    CC80: 01 00 00 00 01 00 00 00 64 00 00 00 64 00 00 00  // ........d...d...
    CC90: 64 00 00 00 64 00 00 00 64 00 00 00 64 00 00 00  // d...d...d...d...
    CCA0: 64 00 00 00 64 00 00 00 64 00 00 00 64 00 00 00  // d...d...d...d...
    CCB0: 00 00 00 00 00 00 00 00 00 00 00 00 20 03 00 00  // ............ ...
    CCC0: 20 03 00 00 20 03 00 00 EE 02 00 00 20 03 00 00  //  ... ....... ...
    CCD0: EE 02 00 00 20 03 00 00 EE 02 00 00 71 02 00 00  // .... .......q...
    CCE0: 32 00 00 00 4C 04 00 00 4C 04 00 00 19 00 00 00  // 2...L...L.......
    CCF0: 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 2...............
    CD00: 00 00 00 00 00 00 00 00 19 00 00 00 0A 00 00 00  // ................
    CD10: 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00 00 00  // ................
    CD20: 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00 00 00  // ................
    CD30: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00  // ................
    CD40: FF AF DF B3 23 06 00 00 F0 00 00 00 00 00 00 00  // ....#...........
    CD50: 00 00 00 00 00 00 00 00 B4 00 00 00 00 00 00 00  // ................
    CD60: 00 00 00 00 00 00 00 00 0E 00 00 00 CB 00 00 00  // ................
    CD70: 64 00 6C 00 69 00 73 00 73 00 73 00 73 00 00 00  // d.l.i.s.s.s.s...
    CD80: 00 00 00 00 00 00 00 00 00 00 00 00 FE 70 00 00  // .............p..
    CD90: 01 00 00 00 64 00 64 00 00 00 00 00 00 00 00 00  // ....d.d.........
    CDA0: 54 0B 54 0B B8 0B B8 0B C0 12 68 10 4C 00 00 00  // T.T.......h.L...
    CDB0: 01 00 02 00 00 00 00 00 00 00 00 00 81 26 82 3E  // .............&.>
    CDC0: A4 70 5D BE B5 1A 32 3F 01 00 02 00 00 00 80 3F  // .p]...2?.......?
    CDD0: 00 00 00 00 F1 BA 5E 3E AB B2 6F BD 45 F5 36 3F  // ......^>..o.E.6?
    CDE0: 01 01 04 00 00 00 80 3F 00 00 00 00 F1 BA 5E 3E  // .......?......^>
    CDF0: AB B2 6F BD 45 F5 36 3F 01 00 02 00 D8 F0 24 3F  // ..o.E.6?......$?
    CE00: 35 EF 08 3F 00 00 00 00 D4 2B C5 3E 57 5B 11 3F  // 5..?.....+.>W[.?
    CE10: 01 00 02 00 0A 68 02 3F 14 AE 17 3F 00 00 00 00  // .....h.?...?....
    CE20: 83 51 A9 3E 37 89 11 3F 01 00 02 00 9C C4 A0 3F  // .Q.>7..?.......?
    CE30: 8E 06 B0 BE 00 00 00 00 E3 C7 08 3F EC 2F 7B 3E  // ...........?./{>
    CE40: 01 00 02 00 61 54 52 3F D7 34 6F 3C 00 00 00 00  // ....aTR?.4o<....
    CE50: FD 87 F4 3E CA 54 81 3E 02 00 02 00 00 00 00 00  // ...>.T.>........
    CE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE70: 02 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE80: 00 00 00 00 00 00 00 00 2C 01 34 08 78 05 78 05  // ........,.4.x.x.
    CE90: 78 05 78 05 78 05 78 05 78 05 78 05 78 05 78 05  // x.x.x.x.x.x.x.x.
    CEA0: 78 05 78 05 78 05 78 05 64 00 F3 04 F3 04 F3 04  // x.x.x.x.d.......
    CEB0: F3 04 F3 04 F3 04 F3 04 64 00 3E 04 3E 04 3E 04  // ........d.>.>.>.
    CEC0: 3E 04 3E 04 3E 04 3E 04 FB 01 F3 04 B6 03 B6 03  // >.>.>.>.........
    CED0: B6 03 B6 03 B6 03 B6 03 64 00 F4 01 71 02 84 03  // ........d...q...
    CEE0: FB 01 F3 04 F3 04 F3 04 F3 04 F3 04 F3 04 F3 04  // ................
    CEF0: 34 01 04 05 04 05 04 05 04 05 04 05 04 05 04 05  // 4...............
    CF00: 2C 01 04 05 A4 04 A4 04 A4 04 A4 04 A4 04 A4 04  // ,...............
    CF10: 2C 01 2A 03 2A 03 2A 03 2A 03 2A 03 2A 03 2A 03  // ,.*.*.*.*.*.*.*.
    CF20: D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01  // ................
    CF30: D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01  // ................
    CF40: D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01  // ................
    CF50: D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01 D0 01  // ................
    CF60: 34 08 F3 04 84 03 3E 04 F3 04 F3 04 04 05 04 05  // 4.....>.........
    CF70: 2A 03 D0 01 00 03 03 03 30 01 FB 01 B8 0B B8 0B  // *.......0.......
    CF80: 8C 0A 48 0D 48 0D 48 0D 88 13 18 15 18 15 18 15  // ..H.H.H.........
    CF90: 20 03 20 03 20 03 00 00 00 00 D0 01 00 00 01 02  //  . . ...........
    CFA0: 00 00 5B 00 00 10 00 00 00 03 06 06 6B 02 6B 02  // ..[.........k.k.
    CFB0: 00 00 00 00 00 00 00 00 32 00 3C 00 90 01 90 01  // ........2.<.....
    CFC0: 90 01 90 01 90 01 90 01 90 01 90 01 90 01 90 01  // ................
    CFD0: 1A 00 0E 06 CA 08 48 0D 5B 00 20 03 01 00 01 02  // ......H.[. .....
    CFE0: 00 00 00 00 00 00 00 00 00 00 00 00 47 E6 91 3C  // ............G..<
    CFF0: AC A8 41 BD 13 44 5D 3D 00 00 00 00 00 00 00 00  // ..A..D]=........
    D000: 8F C2 F5 3C 00 00 00 00 00 00 00 00 00 00 00 00  // ...<............
    D010: 4B C8 C7 3D 98 34 46 3D 70 42 A1 BD AF 5A 19 3B  // K..=.4F=pB...Z.;
    D020: 8C A1 1C BB F8 36 BD 3D 00 00 00 00 00 00 00 00  // .....6.=........
    D030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D050: A0 00 A0 00 01 01 00 00 00 00 00 00 A0 00 A0 00  // ................
    D060: 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D090: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0C0: 00 00 00 00 00 00 00 00 A9 01 87 00 87 00 00 00  // ................
    D0D0: 00 00 00 00 00 00 00 00 00 00 00 00 19 00 19 00  // ................
    D0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1E0: 00 00 00 00 C8 00 04 05 01 00 00 00 E0 00 00 00  // ................
    D1F0: 00 00 01 01 01 00 00 00 E0 00 00 00 00 01 02 01  // ................
    D200: 01 00 00 00 E4 00 00 00 00 02 03 01 01 00 00 00  // ................
    D210: E4 00 00 00 00 03 04 01 00 00 00 00 00 00 00 00  // ................
    D220: 00 04 05 04 00 00 00 00 00 00 00 00 00 05 06 04  // ................
    D230: 00 00 00 00 00 00 00 00 00 06 07 04 00 00 00 00  // ................
    D240: 00 00 00 00 00 07 00 00 E7 18 E7 18 00 02 01 03  // ................
    D250: 00 00 00 00 09 01 00 00 40 00 00 00 11 00 00 00  // ........@.......
    D260: 20 00 00 00 FF 00 05 00 05 00 FF 00 FF FF FF 00  //  ...............
    D270: 01 20 1F 00 01 20 1F 00 01 10 21 00 00 00 00 00  // . ... ....!.....
    D280: 90 01 00 00 00 80 01 00 00 00 00 00 00 00 00 00  // ................
    D290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2A0: 00 00 00 00 00 00 00 00 00 00 00 00 6C 00 03 03  // ............l...
    D2B0: 31 00 01 11 30 75 00 00 CC 55 01 00 01 00 00 00  // 1...0u...U......
    D2C0: 2D 2C 00 00 4C 00 00 00 E8 03 52 03 46 05 EE 02  // -,..L.....R.F...
    D2D0: 02 00 00 00 80 00 00 00 00 00 00 00 02 97 50 00  // ..............P.
    D2E0: 00 00 00 00 00 00 00 00 00 00 00 00 DC 05 00 00  // ................
    D2F0: 84 03 84 03 46 05 84 03 00 00 00 00 00 00 00 00  // ....F...........
    D300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D310: 00 00 00 00 00 00 00 00 8C 11 02 04 A8 00 C0 01  // ................
    D320: A4 0C 84 0E 00 10 00 00 00 00 00 00 03 00 08 08  // ................
    D330: 00 20 00 00 FF FF 00 00 00 00 00 00 00 00 00 00  // . ..............
    D340: 00 00 00 00 29 00 00 70 10 04 62 00 00 08 00 00  // ....)..p..b.....
    D350: 00 04 04 00 00 00 00 00 00 00 20 00 00 FF FF 00  // .......... .....
    D360: 00 00 00 00 00 00 00 00 00 00 00 00 00 33 00 00  // .............3..
    D370: 70 10 04 62 00 81 08 00 00 00 04 04 00 C0 00 00  // p..b............
    D380: 00 4B 34 5A 38 30 33 32 35 42 43 00 00 20 00 00  // .K4Z80325BC.. ..
    D390: FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D3A0: 34 00 00 70 10 04 62 01 0F 08 00 00 00 04 0D 00  // 4..p..b.........
    D3B0: C0 00 00 00 4D 54 36 31 4B 32 35 36 4D 33 32 00  // ....MT61K256M32.
    D3C0: 16 00 00 00 50 4C 01 00 52 4C 01 00 00 FE 00 01  // ....PL..RL......
    D3D0: 14 FE 00 01 18 FE 00 01 1C FE 00 01 30 FE 00 01  // ............0...
    D3E0: 3C FE 00 01 40 FE 00 01 48 FE 00 01 4C FE 00 01  // <...@...H...L...
    D3F0: 50 FE 00 01 54 FE 00 01 58 FE 00 01 7C FE 00 01  // P...T...X...|...
    D400: 80 FE 00 01 88 FE 00 01 8C FE 00 01 98 FE 00 01  // ................
    D410: 9C FE 00 01 A8 FE 00 01 F8 FF 00 01 FF FF FF 00  // ................
    D420: 05 00 DB 00 00 00 06 06 06 00 03 00 48 04 48 04  // ............H.H.
    D430: 00 00 08 00 00 00 08 00 0F 0F DE 00 00 00 00 10  // ................
    D440: 04 00 00 00 38 38 2D 4A 07 07 10 0B 77 00 07 1B  // ....88-J....w...
    D450: 2A 88 48 07 00 00 00 00 A8 49 88 40 00 01 00 B0  // *.H......I.@....
    D460: 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D470: 00 00 00 00 3F FF 3F 0F FF FF FF 01 0D 00 00 09  // ....?.?.........
    D480: 00 00 08 08 06 00 07 00 48 04 4C 04 00 C0 08 43  // ........H.L....C
    D490: 00 00 08 43 0C 0F DE 00 00 00 00 00 00 00 00 00  // ...C............
    D4A0: 36 36 2D 4B 0A 0A 1F 0B 33 00 00 00 2E 8F 47 00  // 66-K....3.....G.
    D4B0: DA D8 D8 D8 A8 49 88 60 00 00 00 C0 00 00 00 00  // .....I.`........
    D4C0: 00 02 18 00 00 00 36 36 22 22 2B 2B 00 40 00 46  // ......66""++.@.F
    D4D0: 7F FF 1F 0F 00 00 00 00 1C 00 00 00 51 4C 01 00  // ............QL..
    D4E0: 5F 4C 01 00 5E 4C 01 00 60 4C 01 00 61 4C 01 00  // _L..^L..`L..aL..
    D4F0: 81 40 01 00 82 40 01 00 83 40 01 00 84 40 01 00  // .@...@...@...@..
    D500: 85 40 01 00 86 40 01 00 87 40 01 00 88 40 01 00  // .@...@...@...@..
    D510: 89 40 01 00 8A 40 01 00 8C 40 01 00 8D 40 01 00  // .@...@...@...@..
    D520: 8E 40 01 00 90 40 01 00 91 40 01 00 94 40 01 00  // .@...@...@...@..
    D530: 95 40 01 00 96 40 01 00 97 40 01 00 A3 40 01 00  // .@...@...@...@..
    D540: A4 40 01 00 98 40 01 00 A1 40 01 00 D4 30 00 01  // .@...@...@...0..
    D550: 00 00 00 00 25 01 00 00 00 00 00 00 BA 08 00 00  // ....%...........
    D560: 40 00 00 00 09 05 03 03 07 00 03 00 02 02 00 02  // @...............
    D570: 08 00 00 00 05 03 03 00 05 00 00 00 11 02 05 00  // ................
    D580: 00 00 01 01 01 00 01 01 00 11 18 00 EE 00 00 00  // ................
    D590: 0A 0A 00 00 14 00 00 00 14 00 00 00 42 51 2A 02  // ............BQ*.
    D5A0: 08 00 00 00 0C 00 0A 0A 08 03 00 01 1F 2A 0C 00  // .............*..
    D5B0: 0F 00 00 00 C9 F0 13 0F 0F 00 00 00 00 00 00 00  // ................
    D5C0: A8 61 00 01 00 00 00 00 25 01 00 00 00 00 00 00  // .a......%.......
    D5D0: BA 08 00 00 40 00 00 00 09 09 05 03 0D 00 05 00  // ....@...........
    D5E0: 02 02 00 02 08 00 00 00 05 03 03 00 05 00 00 00  // ................
    D5F0: 11 04 05 00 00 00 01 01 01 00 01 01 00 11 18 00  // ................
    D600: DB 01 00 00 0A 0A 00 00 1E 00 00 00 1E 00 00 00  // ................
    D610: 43 51 2A 02 0F 00 00 00 0C 00 0A 0A 08 03 00 01  // CQ*.............
    D620: 1F 2A 0C 00 1E 00 00 00 09 F1 13 0F 1E 00 00 00  // .*..............
    D630: 00 00 00 00 50 C3 00 01 00 00 00 00 2D 04 00 00  // ....P.......-...
    D640: 00 00 00 00 BA 08 00 00 40 00 00 00 0A 0F 09 05  // ........@.......
    D650: 17 00 08 00 02 02 00 02 08 00 00 00 05 04 04 00  // ................
    D660: 08 00 00 00 11 04 05 00 00 00 01 01 01 00 01 01  // ................
    D670: 00 12 18 00 B6 03 00 00 0A 0A 00 00 3C 00 00 00  // ............<...
    D680: 3C 00 00 00 45 51 36 02 1E 00 00 00 0C 00 0A 0A  // <...EQ6.........
    D690: 09 03 00 01 1F 2A 0C 00 3C 00 00 00 C9 F1 13 0F  // .....*..<.......
    D6A0: 3C 00 00 00 00 00 00 00 F8 24 01 01 00 00 00 00  // <........$......
    D6B0: 45 08 00 00 00 00 00 00 BA 08 00 00 40 00 00 00  // E...........@...
    D6C0: 0D 17 0D 07 23 00 0C 00 04 04 00 02 0C 00 00 00  // ....#...........
    D6D0: 05 05 05 00 0C 00 00 00 11 06 05 00 00 00 01 01  // ................
    D6E0: 01 00 01 01 00 15 18 00 91 05 00 00 0A 0A 00 00  // ................
    D6F0: 5A 00 00 00 5A 00 00 00 48 51 46 02 2D 00 00 00  // Z...Z...HQF.-...
    D700: 0C 00 0A 0A 0C 03 00 01 1F 2A 0C 00 5A 00 00 00  // .........*..Z...
    D710: 89 F2 13 0F 5A 00 00 00 00 00 00 00 CC 55 01 01  // ....Z........U..
    D720: 00 00 00 00 56 0A 00 00 00 00 00 00 CA 08 00 00  // ....V...........
    D730: 40 00 00 00 0F 1B 0F 09 29 00 0E 00 04 04 00 02  // @.......).......
    D740: 10 00 00 00 06 06 06 00 0E 00 00 00 11 88 05 00  // ................
    D750: 00 00 01 01 01 00 01 01 00 16 18 00 7F 06 00 00  // ................
    D760: 0A 0A 00 00 69 00 00 00 69 00 00 00 49 51 50 02  // ....i...i...IQP.
    D770: 35 00 00 00 0C 00 0A 0A 0E 04 00 01 1F 2A 0C 00  // 5............*..
    D780: 69 00 00 00 0A F3 13 0F 69 00 00 00 00 00 00 00  // i.......i.......
    D790: A0 86 01 01 00 00 00 00 5E 0C 00 00 00 00 00 00  // ........^.......
    D7A0: DA 08 00 00 40 00 00 00 10 1E 0F 09 2D 00 0F 00  // ....@.......-...
    D7B0: 04 04 00 02 10 00 00 00 06 06 06 00 10 00 00 00  // ................
    D7C0: 11 08 06 00 00 00 01 01 01 00 01 01 00 17 18 00  // ................
    D7D0: 6C 07 00 00 0A 0A 00 00 78 00 00 00 78 00 00 00  // l.......x...x...
    D7E0: 4A 51 56 02 3C 00 00 00 0C 00 0A 0A 0F 04 00 01  // JQV.<...........
    D7F0: 1F 2A 0C 00 78 00 00 00 4A F3 13 0F 78 00 00 00  // .*..x...J...x...
    D800: 00 00 00 00 48 E8 01 01 00 00 00 00 7E 00 00 00  // ....H.......~...
    D810: 00 00 00 00 6A 09 00 00 40 02 00 00 14 26 13 0D  // ....j...@....&..
    D820: 39 00 13 00 06 06 00 02 14 00 00 00 06 07 07 00  // 9...............
    D830: 14 00 00 00 21 8A 06 00 00 00 01 01 01 00 01 01  // ....!...........
    D840: 00 1B 18 00 47 09 00 00 0D 0D 00 00 96 00 00 00  // ....G...........
    D850: 96 00 00 00 4D 51 66 02 4B 00 00 00 0C 00 0A 0D  // ....MQf.K.......
    D860: 13 04 00 01 1F 2A 0C 00 96 00 00 00 0A F4 13 0F  // .....*..........
    D870: 96 00 00 00 00 00 00 00 78 5D 02 01 00 00 00 00  // ........x]......
    D880: 0F 04 00 00 00 00 00 00 7A 09 00 00 40 03 00 00  // ........z...@...
    D890: 16 2D 17 0F 44 00 17 00 06 06 00 02 18 00 00 00  // .-..D...........
    D8A0: 07 08 08 00 18 00 00 00 21 0C 07 00 00 00 01 01  // ........!.......
    D8B0: 01 00 01 01 00 1C 18 00 81 0B 00 00 0F 0F 00 00  // ................
    D8C0: B4 00 00 00 B4 00 00 00 4F 51 78 02 5A 00 00 00  // ........OQx.Z...
    D8D0: 0C 00 0A 0F 15 05 00 01 1F 2A 0C 00 B4 00 00 00  // .........*......
    D8E0: CB F4 13 0F B4 00 00 00 00 00 00 00 20 BF 02 01  // ............ ...
    D8F0: 00 00 00 00 1F 08 00 00 00 00 00 00 0A 09 00 00  // ................
    D900: 40 03 00 00 18 34 1B 11 4E 00 1A 00 08 08 00 02  // @....4..N.......
    D910: 20 00 00 00 07 09 09 00 1C 00 00 00 21 8E 07 00  //  ...........!...
    D920: 00 00 01 01 01 00 01 01 00 1E 18 00 5C 0D 00 00  // ............\...
    D930: 12 12 00 00 D2 00 00 00 D2 00 00 00 52 51 86 02  // ............RQ..
    D940: 69 00 00 00 0C 00 0A 12 17 05 00 01 1F 2A 0C 00  // i............*..
    D950: D2 00 00 00 8B F5 13 0F D2 00 00 00 00 00 00 00  // ................
    D960: 40 0D 03 01 00 00 00 00 28 0C 00 00 00 00 00 00  // @.......(.......
    D970: 1A 09 00 00 40 03 00 00 1A 3C 1F 13 5A 00 1E 00  // ....@....<..Z...
    D980: 08 08 00 02 20 00 00 00 08 0A 0A 00 20 00 00 00  // .... ....... ...
    D990: 21 10 08 00 00 00 01 01 01 00 01 01 00 1F 18 00  // !...............
    D9A0: D8 0E 00 00 14 14 00 00 F0 00 00 00 F0 00 00 00  // ................
    D9B0: 54 51 98 02 78 00 00 00 0C 00 0A 14 19 06 00 01  // TQ..x...........
    D9C0: 1F 2A 0C 00 F0 00 00 00 4C F6 13 0F F0 00 00 00  // .*......L.......
    D9D0: 00 00 00 00 E8 6E 03 01 00 00 00 00 38 0F 00 00  // .....n......8...
    D9E0: 00 00 00 00 2A 09 00 00 40 03 00 00 1C 44 23 15  // ....*...@....D#.
    D9F0: 66 00 22 00 0A 0A 00 02 24 00 00 00 08 0C 0C 00  // f.".....$.......
    DA00: 23 00 00 00 21 92 08 00 00 00 01 01 01 00 01 01  // #...!...........
    DA10: 00 21 18 00 B3 10 00 00 17 17 00 00 0E 01 00 00  // .!..............
    DA20: 0E 01 00 00 57 51 A8 02 87 00 00 00 0C 00 0A 17  // ....WQ..........
    DA30: 1B 06 00 01 1F 2A 0C 00 0E 01 00 00 0C F7 13 0F  // .....*..........
    DA40: 0E 01 00 00 00 00 00 00 D4 30 00 02 00 01 00 00  // .........0......
    DA50: 25 00 00 00 00 00 00 00 3A 09 00 00 40 00 00 00  // %.......:...@...
    DA60: 09 04 03 01 06 00 02 00 04 04 00 02 0C 00 00 00  // ................
    DA70: 05 03 03 00 04 00 00 00 21 06 05 00 00 00 01 01  // ........!.......
    DA80: 01 00 01 01 00 11 18 00 EE 00 00 00 0A 0A 00 00  // ................
    DA90: 0F 00 00 00 0F 00 00 00 8A 20 22 02 08 00 00 00  // ......... ".....
    DAA0: 0A 00 04 0A 08 03 00 01 1F 2A 0C 00 0E 00 00 00  // .........*......
    DAB0: C2 F0 13 0F 0E 00 00 00 00 00 00 00 20 4E 00 02  // ............ N..
    DAC0: C0 01 00 00 25 00 00 00 00 00 00 00 3A 09 00 00  // ....%.......:...
    DAD0: 40 00 00 00 09 07 05 01 0B 00 04 00 04 04 00 02  // @...............
    DAE0: 0C 00 00 00 05 03 03 00 04 00 00 00 21 06 05 00  // ............!...
    DAF0: 00 00 01 01 01 00 01 01 00 11 18 00 7C 01 00 00  // ............|...
    DB00: 0A 0A 00 00 18 00 00 00 18 00 00 00 8A 20 22 02  // ............. ".
    DB10: 0C 00 00 00 0A 00 04 0A 08 03 00 01 1F 2A 0C 00  // .............*..
    DB20: 1C 00 00 00 C2 F0 13 0F 1C 00 00 00 00 00 00 00  // ................
    DB30: 50 C3 00 02 40 03 00 00 2D 04 00 00 00 00 00 00  // P...@...-.......
    DB40: 3A 09 00 00 40 00 00 00 0A 0D 09 03 15 00 08 00  // :...@...........
    DB50: 04 04 00 02 0C 00 00 00 05 04 04 00 08 00 00 00  // ................
    DB60: 21 08 05 00 00 00 01 01 01 00 01 01 00 12 18 00  // !...............
    DB70: B6 03 00 00 0A 0A 00 00 3C 00 00 00 3C 00 00 00  // ........<...<...
    DB80: 8A 20 2E 02 1A 00 00 00 0A 00 04 0A 09 03 00 01  // . ..............
    DB90: 1F 2A 0C 00 37 00 00 00 82 F1 13 0F 37 00 00 00  // .*..7.......7...
    DBA0: 00 00 00 00 F8 24 01 02 C0 04 00 00 3D 08 00 00  // .....$......=...
    DBB0: 00 00 00 00 3A 09 00 00 40 00 00 00 0C 13 0D 07  // ....:...@.......
    DBC0: 1F 00 0C 00 04 04 00 02 0C 00 00 00 05 05 05 00  // ................
    DBD0: 0C 00 00 00 21 08 05 00 00 00 01 01 01 00 01 01  // ....!...........
    DBE0: 00 14 18 00 91 05 00 00 0A 0A 00 00 5A 00 00 00  // ............Z...
    DBF0: 5A 00 00 00 8A 20 3E 02 26 00 00 00 0A 00 04 0A  // Z.... >.&.......
    DC00: 0B 03 00 01 1F 2A 0C 00 53 00 00 00 42 F2 13 0F  // .....*..S...B...
    DC10: 53 00 00 00 00 00 00 00 CC 55 01 02 80 05 00 00  // S........U......
    DC20: 4D 0A 00 00 00 00 00 00 3A 09 00 00 40 00 00 00  // M.......:...@...
    DC30: 0E 16 0F 09 24 00 0E 00 04 04 00 02 0C 00 00 00  // ....$...........
    DC40: 05 06 06 00 0E 00 00 00 21 0A 05 00 00 00 01 01  // ........!.......
    DC50: 01 00 01 01 00 16 18 00 7F 06 00 00 0A 0A 00 00  // ................
    DC60: 69 00 00 00 69 00 00 00 8A 20 46 02 2C 00 00 00  // i...i.... F.,...
    DC70: 0A 00 04 0A 0D 03 00 01 1F 2A 0C 00 61 00 00 00  // .........*..a...
    DC80: 82 F2 13 0F 61 00 00 00 00 00 00 00 A0 86 01 02  // ....a...........
    DC90: 40 06 00 00 55 0C 00 00 00 00 00 00 4A 09 00 00  // @...U.......J...
    DCA0: 40 00 00 00 0F 19 11 0B 28 00 0F 00 04 04 00 02  // @.......(.......
    DCB0: 0C 00 00 00 05 06 06 00 10 00 00 00 21 8A 05 00  // ............!...
    DCC0: 00 00 01 01 01 00 01 01 00 17 18 00 6C 07 00 00  // ............l...
    DCD0: 0A 0A 00 00 78 00 00 00 78 00 00 00 8A 20 4C 02  // ....x...x.... L.
    DCE0: 32 00 00 00 0A 00 04 0A 0E 03 00 01 1F 2A 0C 00  // 2............*..
    DCF0: 6E 00 00 00 C2 F2 13 0F 6E 00 00 00 00 00 00 00  // n.......n.......
    DD00: 48 E8 01 02 00 08 00 00 65 00 00 00 00 00 00 00  // H.......e.......
    DD10: 5A 09 00 00 40 02 00 00 11 20 15 0F 33 00 13 00  // Z...@.... ..3...
    DD20: 06 06 00 02 0C 00 00 00 05 07 07 00 14 00 00 00  // ................
    DD30: 21 0C 06 00 00 00 01 01 01 00 01 01 00 19 18 00  // !...............
    DD40: 47 09 00 00 0A 0A 00 00 96 00 00 00 96 00 00 00  // G...............
    DD50: 8A 20 5C 02 40 00 00 00 0A 00 04 0A 10 03 00 01  // . \.@...........
    DD60: 1F 2A 0C 00 8A 00 00 00 82 F3 13 0F 8A 00 00 00  // .*..............
    DD70: 00 00 00 00 78 5D 02 02 80 09 00 00 7D 04 00 00  // ....x]......}...
    DD80: 00 00 00 00 6A 09 00 00 40 02 00 00 14 26 19 13  // ....j...@....&..
    DD90: 3D 00 17 00 06 06 00 02 10 00 00 00 05 08 08 00  // =...............
    DDA0: 18 00 00 00 21 8E 06 00 00 00 01 01 01 00 01 01  // ....!...........
    DDB0: 00 1C 18 00 81 0B 00 00 0A 0A 00 00 B4 00 00 00  // ................
    DDC0: B4 00 00 00 8A 20 6C 02 4C 00 00 00 0A 00 04 0A  // ..... l.L.......
    DDD0: 13 03 00 01 1F 2A 0C 00 A5 00 00 00 02 F4 13 0F  // .....*..........
    DDE0: A5 00 00 00 00 00 00 00 98 AB 02 02 00 0B 00 00  // ................
    DDF0: 0D 08 00 00 00 00 00 00 EA 09 00 00 40 03 00 00  // ............@...
    DE00: 16 2C 1D 17 47 00 1B 00 08 08 00 02 10 00 00 00  // .,..G...........
    DE10: 05 09 09 00 1C 00 00 00 31 90 06 00 00 00 01 01  // ........1.......
    DE20: 01 00 01 01 00 1E 18 00 FD 0C 00 00 0A 0A 00 00  // ................
    DE30: D2 00 00 00 D2 00 00 00 8A 20 7C 02 58 00 00 00  // ......... |.X...
    DE40: 0A 00 04 0A 15 03 00 01 1F 2A 0C 00 C1 00 00 00  // .........*......
    DE50: C2 F4 13 0F C1 00 00 00 00 00 00 00 20 BF 02 02  // ............ ...
    DE60: 00 0B 00 00 0D 08 00 00 00 00 00 00 EA 09 00 00  // ................
    DE70: 40 03 00 00 16 2C 1D 17 47 00 1B 00 08 08 00 02  // @....,..G.......
    DE80: 10 00 00 00 05 09 09 00 1C 00 00 00 31 90 06 00  // ............1...
    DE90: 00 00 01 01 01 00 01 01 00 1E 18 00 5C 0D 00 00  // ............\...
    DEA0: 0A 0A 00 00 D2 00 00 00 D2 00 00 00 8A 20 7C 02  // ............. |.
    DEB0: 58 00 00 00 0A 00 04 0A 15 03 00 01 1F 2A 0C 00  // X............*..
    DEC0: C1 00 00 00 C2 F4 13 0F C1 00 00 00 00 00 00 00  // ................
    DED0: 6C DC 02 02 C0 0B 00 00 15 0A 00 00 00 00 00 00  // l...............
    DEE0: FA 09 00 00 40 03 00 00 17 2F 1F 19 4C 00 1D 00  // ....@..../..L...
    DEF0: 08 08 00 02 14 00 00 00 05 0A 0A 00 1E 00 00 00  // ................
    DF00: 31 12 07 00 00 00 01 01 01 00 01 01 00 1F 18 00  // 1...............
    DF10: EB 0D 00 00 0A 0A 00 00 E1 00 00 00 E1 00 00 00  // ................
    DF20: 8A 20 84 02 5E 00 00 00 0A 00 04 0A 16 03 00 01  // . ..^...........
    DF30: 1F 2A 0C 00 CF 00 00 00 02 F5 13 0F CF 00 00 00  // .*..............
    DF40: 00 00 00 00 40 0D 03 02 80 0C 00 00 1D 0C 00 00  // ....@...........
    DF50: 00 00 00 00 FA 09 00 00 40 03 00 00 18 32 21 1B  // ........@....2!.
    DF60: 50 00 1E 00 08 08 00 02 14 00 00 00 05 0A 0A 00  // P...............
    DF70: 20 00 00 00 31 12 07 00 00 00 01 01 01 00 01 01  //  ...1...........
    DF80: 00 20 18 00 D8 0E 00 00 0A 0A 00 00 F0 00 00 00  // . ..............
    DF90: F0 00 00 00 8A 20 8A 02 64 00 00 00 0A 00 04 0A  // ..... ..d.......
    DFA0: 17 03 00 01 1F 2A 0C 00 DC 00 00 00 42 F5 13 0F  // .....*......B...
    DFB0: DC 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    DFC0: 55 4C 01 00 A0 FE 00 01 A4 FE 00 01 09 1C 00 03  // UL..............
    DFD0: C9 1A 00 03 09 1B 00 03 FF FF FF 00 00 28 00 00  // .............(..
    DFE0: C0 C0 C0 C0 C0 C0 C0 C0 D0 00 00 00 81 00 00 00  // ................
    DFF0: 91 00 00 00 FF FF FF 01 00 28 00 00 C0 C0 C0 C0  // .........(......
    E000: C0 C0 C0 C0 D0 00 00 00 81 00 00 00 91 00 00 00  // ................
    E010: FF FF FF 02 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0  // .....(..........
    E020: D0 00 00 00 81 00 00 00 91 00 00 00 FF FF FF 03  // ................
    E030: 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0 C0 00 00 00  // .(..............
    E040: 81 00 00 00 81 00 00 00 FF FF FF 04 00 28 00 00  // .............(..
    E050: C0 C0 C0 C0 C0 C0 C0 C0 D0 00 00 00 81 00 00 00  // ................
    E060: 91 00 00 00 FF FF FF 05 00 28 00 00 C0 C0 C0 C0  // .........(......
    E070: C0 C0 C0 C0 C0 00 00 00 81 00 00 00 81 00 00 00  // ................
    E080: FF FF FF 06 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0  // .....(..........
    E090: C0 00 00 00 81 00 00 00 81 00 00 00 FF FF FF 07  // ................
    E0A0: 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0 C0 00 00 00  // .(..............
    E0B0: 81 00 00 00 81 00 00 00 FF FF FF 08 00 28 00 00  // .............(..
    E0C0: C0 C0 C0 C0 C0 C0 C0 C0 D0 00 00 00 80 00 00 00  // ................
    E0D0: 90 00 00 00 FF FF FF 09 00 28 00 00 C0 C0 C0 C0  // .........(......
    E0E0: C0 C0 C0 C0 D0 00 00 00 80 00 00 00 90 00 00 00  // ................
    E0F0: FF FF FF 0A 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0  // .....(..........
    E100: D0 00 00 00 80 00 00 00 90 00 00 00 FF FF FF 0B  // ................
    E110: 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0 C0 00 00 00  // .(..............
    E120: 80 00 00 00 80 00 00 00 FF FF FF 0C 00 28 00 00  // .............(..
    E130: C0 C0 C0 C0 C0 C0 C0 C0 D0 00 00 00 80 00 00 00  // ................
    E140: 90 00 00 00 FF FF FF 0D 00 28 00 00 C0 C0 C0 C0  // .........(......
    E150: C0 C0 C0 C0 C0 00 00 00 80 00 00 00 80 00 00 00  // ................
    E160: FF FF FF 0E 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0  // .....(..........
    E170: C0 00 00 00 80 00 00 00 80 00 00 00 FF FF FF 0F  // ................
    E180: 00 28 00 00 C0 C0 C0 C0 C0 C0 C0 C0 C0 00 00 00  // .(..............
    E190: 80 00 00 00 80 00 00 00 00 00 00 00 2E 00 00 00  // ................
    E1A0: 4F 4C 01 00 51 4C 01 00 53 4C 01 00 54 4C 01 00  // OL..QL..SL..TL..
    E1B0: 56 4C 01 00 57 4C 01 00 58 4C 01 00 5E 4C 01 00  // VL..WL..XL..^L..
    E1C0: 04 FE 00 01 08 FE 00 01 0C FE 00 01 10 FE 00 01  // ................
    E1D0: 20 FE 00 01 24 FE 00 01 28 FE 00 01 2C FE 00 01  //  ...$...(...,...
    E1E0: 34 FE 00 01 38 FE 00 01 44 FE 00 01 78 FE 00 01  // 4...8...D...x...
    E1F0: 84 FE 00 01 90 FE 00 01 B4 FE 00 01 B8 FE 00 01  // ................
    E200: BC FE 00 01 F0 FE 00 01 84 FF 00 01 88 FF 00 01  // ................
    E210: 8C FF 00 01 90 FF 00 01 94 FF 00 01 98 FF 00 01  // ................
    E220: 9C FF 00 01 A0 FF 00 01 A4 FF 00 01 A8 FF 00 01  // ................
    E230: AC FF 00 01 EC FF 00 01 F0 FF 00 01 F4 FF 00 01  // ................
    E240: 02 1D 00 03 03 1D 00 03 8C 1C 00 03 A1 04 00 05  // ................
    E250: 18 04 00 05 55 02 00 05 FF FF FF 00 1A 27 20 00  // ....U........' .
    E260: 00 00 2A 00 00 04 00 00 F4 25 E5 0F 00 00 00 00  // ..*......%......
    E270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 04  // ................
    E280: 00 00 03 05 00 00 00 00 9C 00 04 00 17 10 00 00  // ................
    E290: 0F 30 00 00 22 0A 4C 56 50 05 01 00 20 40 04 00  // .0..".LVP... @..
    E2A0: 10 42 00 00 00 00 00 00 C0 D0 2C 04 C0 02 00 00  // .B........,.....
    E2B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E2C0: 00 00 00 00 1C 03 8E 03 AA 02 8E 03 E3 00 AA 02  // ................
    E2D0: E3 00 71 00 E3 00 71 00 55 01 71 00 1C 03 55 01  // ..q...q.U.q...U.
    E2E0: 1C 03 8E 03 CF 00 30 FF FF 0C 00 F3 00 80 01 90  // ......0.........
    E2F0: 00 08 80 01 05 00 00 00 0E 10 00 40 2B 00 00 00  // ...........@+...
    E300: 22 00 00 00 10 00 00 00 12 00 00 00 00 00 00 00  // "...............
    E310: 14 00 00 00 00 00 00 00 30 00 00 00 24 40 01 00  // ........0...$@..
    E320: 25 40 01 00 26 40 01 00 24 48 01 00 25 48 01 00  // %@..&@..$H..%H..
    E330: 26 48 01 00 24 40 05 00 25 40 05 00 26 40 05 00  // &H..$@..%@..&@..
    E340: 24 48 05 00 25 48 05 00 26 48 05 00 24 40 09 00  // $H..%H..&H..$@..
    E350: 25 40 09 00 26 40 09 00 24 48 09 00 25 48 09 00  // %@..&@..$H..%H..
    E360: 26 48 09 00 24 40 0D 00 25 40 0D 00 26 40 0D 00  // &H..$@..%@..&@..
    E370: 24 48 0D 00 25 48 0D 00 26 48 0D 00 24 40 11 00  // $H..%H..&H..$@..
    E380: 25 40 11 00 26 40 11 00 24 48 11 00 25 48 11 00  // %@..&@..$H..%H..
    E390: 26 48 11 00 24 40 15 00 25 40 15 00 26 40 15 00  // &H..$@..%@..&@..
    E3A0: 24 48 15 00 25 48 15 00 26 48 15 00 24 40 19 00  // $H..%H..&H..$@..
    E3B0: 25 40 19 00 26 40 19 00 24 48 19 00 25 48 19 00  // %@..&@..$H..%H..
    E3C0: 26 48 19 00 24 40 1D 00 25 40 1D 00 26 40 1D 00  // &H..$@..%@..&@..
    E3D0: 24 48 1D 00 25 48 1D 00 26 48 1D 00 FF FF FF 00  // $H..%H..&H......
    E3E0: 10 00 00 00 01 23 75 46 64 57 32 10 10 00 00 00  // .....#uFdW2.....
    E3F0: 67 54 13 02 20 31 45 76 10 00 00 00 31 20 75 46  // gT.. 1Ev....1 uF
    E400: 64 57 32 10 10 00 00 00 67 54 13 02 20 31 45 76  // dW2.....gT.. 1Ev
    E410: 10 00 00 00 01 23 75 46 56 47 32 10 10 00 00 00  // .....#uFVG2.....
    E420: 67 54 13 02 20 31 45 76 10 00 00 00 67 54 13 02  // gT.. 1Ev....gT..
    E430: 20 31 45 76 10 00 00 00 01 23 75 46 74 65 23 01  //  1Ev.....#uFte#.
    E440: 01 00 00 00 10 32 56 47 64 57 32 10 01 00 00 00  // .....2VGdW2.....
    E450: 67 54 13 02 20 31 45 76 01 00 00 00 67 54 13 02  // gT.. 1Ev....gT..
    E460: 20 31 45 76 01 00 00 00 01 23 74 65 64 57 32 10  //  1Ev.....#tedW2.
    E470: 01 00 00 00 67 54 13 02 20 31 45 76 01 00 00 00  // ....gT.. 1Ev....
    E480: 01 23 75 46 64 57 02 13 01 00 00 00 67 54 13 02  // .#uFdW......gT..
    E490: 20 31 45 76 01 00 00 00 01 23 75 46 64 57 32 10  //  1Ev.....#uFdW2.
    E4A0: 00 00 00 00 59 00 03 03 00 00 00 00 00 10 05 00  // ....Y...........
    E4B0: 00 02 01 00 00 00 44 00 64 00 E4 0C 00 08 70 00  // ......D.d.....p.
    E4C0: 10 27 00 00 CC 55 01 00 24 F4 00 00 50 C3 00 00  // .'...U..$...P...
    E4D0: 10 27 00 00 00 00 00 00 2B 00 00 00 80 00 00 00  // .'......+.......
    E4E0: 00 00 00 00 00 00 00 00 38 30 30 31 32 36 30 30  // ........80012600
    E4F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 94 00  // ................
    E500: 04 02 05 03 22 00 1A 06 60 00 00 00 00 00 94 00  // ...."...`.......
    E510: BE 00 43 00 1D 00 44 00 59 00 45 00 28 00 46 00  // ..C...D.Y.E.(.F.
    E520: 45 00 FF 00 05 07 0C 00 06 00 00 00 00 00 00 00  // E...............
    E530: 01 03 22 00 1A 06 60 00 00 00 00 00 94 00 BE 00  // .."...`.........
    E540: 43 00 1D 00 44 00 59 00 45 00 28 00 46 00 45 00  // C...D.Y.E.(.F.E.
    E550: FF 00 01 07 0C 00 04 00 00 02 00 00 00 00 04 03  // ................
    E560: 0E 00 10 06 44 00 00 00 00 00 FF 00 04 07 0C 00  // ....D...........
    E570: 0E 00 00 03 00 00 00 00 02 03 0E 00 10 06 44 00  // ..............D.
    E580: 00 00 00 00 FF 00 02 07 0C 00 0E 00 00 01 00 00  // ................
    E590: 00 00 14 00 02 02 00 00 00 00 00 00 00 00 00 00  // ................
    E5A0: 10 00 00 00 00 00 20 00 02 01 14 00 1A 00 00 00  // ...... .........
    E5B0: 00 00 08 00 00 00 04 00 00 00 00 00 00 00 00 00  // ................
    E5C0: 00 00 00 00 00 00 F4 00 03 04 01 0B 00 00 D0 07  // ................
    E5D0: 4E 0C 00 00 4E 0C 10 27 00 00 FF 00 05 00 FF 00  // N...N..'........
    E5E0: 00 01 04 00 00 00 60 CC 05 00 70 C6 00 00 18 73  // ......`...p....s
    E5F0: 01 00 70 C6 00 00 B0 CC 00 00 CC F1 00 00 0E D4  // ..p.............
    E600: 00 00 00 00 00 00 E8 DF 05 00 20 30 05 00 00 00  // .......... 0....
    E610: 00 00 00 00 00 00 02 00 00 00 00 00 F0 00 70 11  // ..............p.
    E620: 01 00 D0 84 00 00 00 00 00 00 33 33 81 01 7D 1A  // ..........33..}.
    E630: 09 96 30 14 C9 02 90 01 90 01 24 04 18 00 00 00  // ..0.......$.....
    E640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E6A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E6B0: 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    E6C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E6D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E6E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E6F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E700: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E710: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E720: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E730: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E740: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E750: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E760: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    E870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E880: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Migrations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


