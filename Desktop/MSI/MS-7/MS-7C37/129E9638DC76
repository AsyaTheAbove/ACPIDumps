
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000024  0x01  "AMD   "  "BIXBY   "  0x00001000  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000B18  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  PCCT  0x0000006E  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 06)  SSDT  0x00003AAF  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 07)  VFCT  0x0000F284  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  SSDT  0x0000381A  0x01  "AMD   "  "QOGIRN  "  0x00000001  "INTL"   0x20120913
 09)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 10)  IVRS  0x000000D0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 11)  DSDT  0x00006FFA  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 12)  SSDT  0x000010B4  0x01  "AMD   "  "QOGIRTPX"  0x00000001  "INTL"   0x20120913
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  SSDT  0x00002FA1  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 15)  SSDT  0x000010AF  0x01  "AMD   "  "QOGIRC  "  0x00000001  "INTL"   0x20120913
 16)  SSDT  0x000000C8  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 17)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 18)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 19)  SSDT  0x00008C98  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 20)  SSDT  0x0000052C  0x01  "AMD   "  "QOGIRNOI"  0x00000001  "INTL"   0x20120913
 21)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 22)  SSDT  0x00000293  0x01  "AMD   "  "QOGIRDGP"  0x00000001  "INTL"   0x20120913
 23)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 24)  FACS  0x00000040  0x02

Found 24 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 21
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 01
[05Fh 0095   1]                Local Apic ID : 01
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 03
[067h 0103   1]                Local Apic ID : 03
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 05
[06Fh 0111   1]                Local Apic ID : 05
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 07
[077h 0119   1]                Local Apic ID : 07
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 09
[07Fh 0127   1]                Local Apic ID : 09
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 0D
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 0E
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 21 41 4C 41 53 4B 41  // APIC^....!ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 01 01  // ................
    0060: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0070: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 0D 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 0E 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000B18
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2840 (0xB18)

    0000: 43 52 41 54 18 0B 00 00 01 B7 41 4D 44 00 00 00  // CRAT......AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 2C 00 00 00 01 00 00 00 00 00 00 00  // ....,...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 0C 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0060: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0090: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    00E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0110: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0120: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    0150: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0160: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0190: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    01E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0210: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0220: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0250: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0260: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0290: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    02D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    02E0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0310: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0320: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0350: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0360: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0390: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03A0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03D0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    03E0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0410: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0420: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0450: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0460: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0490: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04A0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    04E0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0510: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0520: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0550: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0560: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0590: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    05A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    05D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    05E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0610: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0620: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0650: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0660: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0690: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    06A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    06D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    06E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0710: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0720: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0750: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0760: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0790: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    07D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    07E0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0810: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0820: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0850: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0860: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0890: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08A0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    08D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    08E0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0910: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0920: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0950: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0960: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0990: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09A0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    09D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    09E0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0A10: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A20: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A50: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0A60: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0A90: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AA0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0AD0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0AE0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0B10: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0A10)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A20)
    Name (IO3L, 0x10)
    Name (IO4B, 0x0A40)
    Name (IO4L, 0x10)
    Name (SP1O, 0x4E)
    Name (IOES, Zero)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (NBTS, 0x5000)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC03000)
    Name (FDSI, 0xD4)
    Name (FESI, 0xD5)
    Name (FSSI, 0xE2)
    Name (SMIP, 0xB2)
    Name (CISI, 0x88)
    Name (LSMB, 0xB2)
    Name (AISV, 0xE3)
    Name (WMSZ, 0x0300)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (COMB, Zero)
    Name (LPTA, Zero)
    Name (PEPM, Zero)
    Name (COMA, One)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x78), 
            ,   20, 
        SI3V,   1, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            ACMX = 0xC7
            If ((ACMA == 0x55))
            {
                ACMA = Zero
            }
            Else
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x20
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PD30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2C
            }
        })
        Name (PD22, Package (0x00) {})
        Name (AR22, Package (0x00) {})
        Name (PD23, Package (0x00) {})
        Name (AR23, Package (0x00) {})
        Name (PD24, Package (0x00) {})
        Name (AR24, Package (0x00) {})
        Name (PD25, Package (0x00) {})
        Name (AR25, Package (0x00) {})
        Name (PD26, Package (0x00) {})
        Name (AR26, Package (0x00) {})
        Name (PD27, Package (0x00) {})
        Name (AR27, Package (0x00) {})
        Name (PD28, Package (0x00) {})
        Name (AR28, Package (0x00) {})
        Name (PD29, Package (0x00) {})
        Name (AR29, Package (0x00) {})
        Name (PD2A, Package (0x00) {})
        Name (AR2A, Package (0x00) {})
        Name (PD2B, Package (0x00) {})
        Name (AR2B, Package (0x00) {})
        Name (PD2C, Package (0x00) {})
        Name (AR2C, Package (0x00) {})
        Name (PD00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD21, Package (0x00) {})
        Name (AR21, Package (0x00) {})
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x1D000000)
            Name (MAB, 0x0000000820000000)
            Name (MAL, 0x00000077E0000000)
            Name (MAM, 0x0000007FFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14600000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D002)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (D022)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00050002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }

                Device (D025)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP13.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP13.APSP.CRS_ */
                    }
                }
            }

            Device (GP30)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR30) /* \_SB_.AR30 */
                    }

                    Return (PD30) /* \_SB_.PD30 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP31)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR31) /* \_SB_.AR31 */
                    }

                    Return (PD31) /* \_SB_.PD31 */
                }

                Device (SAT1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (D02C)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT1 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y25)
                        IRQ (Level, ActiveLow, Shared, _Y23)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y24)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            OPT6 = Zero
                            OPT7 = Zero
                            If (KBFG)
                            {
                                OPT6 |= 0x10
                            }
                            Else
                            {
                                OPT6 &= 0xEF
                            }

                            If (MSFG)
                            {
                                OPT6 |= 0x20
                            }
                            Else
                            {
                                OPT6 &= 0xDF
                            }

                            OPT3 = 0xFF
                            OPT4 = 0xFF
                            Local0 = (One | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        OPT3 = 0xFF
                        OPT6 &= 0xCF
                        OPT2 &= 0xFE
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08))
                        {
                            Notify (PS2K, 0x02) // Device Wake
                        }

                        If ((PMFG & 0x10))
                        {
                            Notify (PS2M, 0x02) // Device Wake
                        }
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (LDN, 0x08)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (BXBR)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PD20) /* \_SB_.PD20 */
                }

                Device (BYUP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (BYD0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (BYS0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD1)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (BYS1)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD2)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (BYS2)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD3)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (BYS3)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD4)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (BYS4)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD5)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Device (BYS5)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD6)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Device (BYS6)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD7)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Device (BYS7)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD8)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Device (XHC1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        Zero, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        Zero, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x1,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x08)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        Zero, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x40,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }

                        Device (XHC0)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x40,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        Zero, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        Zero, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    Device (PRT1)
                                    {
                                        Name (_ADR, One)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x1,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "BACK",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "LEFT",
                                                PLD_Shape              = "HORIZONTALTRAPEZOID",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x2,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x1,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x40,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                    }

                                    Device (PRT2)
                                    {
                                        Name (_ADR, 0x02)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x1,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "BACK",
                                                PLD_VerticalPosition   = "CENTER",
                                                PLD_HorizontalPosition = "LEFT",
                                                PLD_Shape              = "HORIZONTALTRAPEZOID",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x2,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x1,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x40,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                    }

                                    Device (PRT3)
                                    {
                                        Name (_ADR, 0x03)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x1,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "BACK",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "CENTER",
                                                PLD_Shape              = "HORIZONTALTRAPEZOID",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x2,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x1,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x40,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                    }

                                    Device (PRT4)
                                    {
                                        Name (_ADR, 0x04)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x1,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "BACK",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "RIGHT",
                                                PLD_Shape              = "HORIZONTALTRAPEZOID",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x2,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x1,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x40,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                    }
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x40,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP10, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            Notify (\_SB.PCI0.BXBR, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP30, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP31, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0), SPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (IC0I, 0x04)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x0A)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    Name (IC5I, 0x0F)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   4, 
            LPCE,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {14}
                    Memory32Fixed (ReadWrite,
                        0xFEDC6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC4I & 0x0F))
                Return (BUF0) /* \_SB_.I2CE._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDCB000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC5I & 0x0F))
                Return (BUF0) /* \_SB_.I2CF._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2A)
                    IRQNoFlags (_Y2B)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y2B._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2C)
                    IRQNoFlags (_Y2D)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y2D._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
        {
            If ((TCMF == Zero))
            {
                If ((TTDP == Zero))
                {
                    Return (0x310CD041)
                }
                Else
                {
                    Return ("MSFT0101")
                }
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2E)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2F)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y30)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y31)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y32,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2E._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2E._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2F._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y30._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y30._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If ((TMRQ == 0xFFFFFFFF))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y31._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y31._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y32._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB.PCI0.GP13.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB)
    {
        Device (WMIO)
        {
            Mutex (WMIX, 0x01)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MFBI")  // _UID: Unique ID
            Name (BUF4, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (BUF4, Zero, BF00)
            CreateByteField (BUF4, One, BF01)
            CreateByteField (BUF4, 0x02, BF02)
            CreateByteField (BUF4, 0x03, BF03)
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0xCE, 0x93, 0x05, 0xA8, 0x77, 0x23, 0xDA, 0x11,  // ....w#..
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0x20, 0x12, 0x07, 0x27,  // ..." ..'
                /* 0010 */  0x4D, 0x49, 0x01, 0x02                           // MI..
            })
            OperationRegion (CMOS, SystemIO, 0x72, 0x02)
            Field (CMOS, ByteAcc, NoLock, Preserve)
            {
                CMIN,   8, 
                CMDA,   8
            }

            IndexField (CMIN, CMDA, ByteAcc, NoLock, Preserve)
            {
                Offset (0xD9), 
                WDFH,   8
            }

            Method (WMMI, 3, NotSerialized)
            {
                If ((Arg1 == 0xFB))
                {
                    BUF4 = Arg2
                    If ((BF00 == Zero))
                    {
                        BUF4 = Zero
                        BF02 = One
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == One))
                    {
                        BUF4 = Zero
                        BF00 = SMIP /* \SMIP */
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == 0x02))
                    {
                        BUF4 = Zero
                        BF00 = FESI /* \FESI */
                        BF01 = FDSI /* \FDSI */
                        BF02 = FSSI /* \FSSI */
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == 0x03))
                    {
                        CMIN = 0xD9
                        BF00 = CMDA /* \_SB_.WMIO.CMDA */
                        If ((BF00 & One))
                        {
                            BF00 = One
                            Return (BUF4) /* \_SB_.WMIO.BUF4 */
                        }
                        Else
                        {
                            BF00 = Zero
                            Return (BUF4) /* \_SB_.WMIO.BUF4 */
                        }
                    }
                }

                Return (0xFFFFFFFF)
            }
        }
    }

    Scope (_SB)
    {
        Device (WMIC)
        {
            Mutex (MWMI, 0x00)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "WMIC")  // _UID: Unique ID
            Name (WMIO, 0xDCBDAA98)
            Name (WQBA, Buffer (0x06CF)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xBF, 0x06, 0x00, 0x00, 0x88, 0x2B, 0x00, 0x00,  // .....+..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD1, 0x94, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0B, 0x10, 0x0A, 0x0B, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x3C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .P<...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x06, 0x88, 0x14, 0x40, 0x48, 0x22, 0x84,  // 1...@H".
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x68, 0x73, 0x02, 0x32,  // ..."hs.2
                /* 0068 */  0x0D, 0x25, 0xA0, 0xC2, 0x31, 0x84, 0xD4, 0xF2,  // .%..1...
                /* 0070 */  0x1C, 0xA4, 0x1D, 0x49, 0x83, 0x88, 0x92, 0xC0,  // ...I....
                /* 0078 */  0x02, 0x47, 0x80, 0x12, 0x33, 0x02, 0x94, 0x4E,  // .G..3..N
                /* 0080 */  0x64, 0xC1, 0xB7, 0x88, 0x2C, 0xA1, 0x28, 0x9A,  // d...,.(.
                /* 0088 */  0x44, 0x94, 0x04, 0xD1, 0xFB, 0x46, 0xD0, 0x90,  // D....F..
                /* 0090 */  0xCA, 0x15, 0xE0, 0x5D, 0x80, 0xED, 0x11, 0x88,  // ...]....
                /* 0098 */  0xC0, 0xF0, 0x3C, 0xA6, 0x09, 0x10, 0x16, 0x63,  // ..<....c
                /* 00A0 */  0x89, 0x0A, 0xE1, 0x00, 0x06, 0xE3, 0x01, 0x44,  // .......D
                /* 00A8 */  0x72, 0x86, 0x89, 0x02, 0xB6, 0xD7, 0x69, 0xC8,  // r.....i.
                /* 00B0 */  0xE4, 0x18, 0xA9, 0x24, 0x38, 0xD4, 0x08, 0x3D,  // ...$8..=
                /* 00B8 */  0xCA, 0xE6, 0x05, 0xE8, 0x1E, 0xAC, 0x06, 0xE2,  // ........
                /* 00C0 */  0x91, 0x85, 0x64, 0xD2, 0x86, 0x82, 0x1A, 0xB6,  // ..d.....
                /* 00C8 */  0x27, 0x75, 0x4A, 0x9E, 0xA1, 0x25, 0x0F, 0x92,  // 'uJ..%..
                /* 00D0 */  0x10, 0x78, 0x14, 0x0C, 0x8D, 0x13, 0x94, 0x05,  // .x......
                /* 00D8 */  0xA1, 0x1D, 0xD1, 0x61, 0x12, 0xC0, 0x93, 0xF0,  // ...a....
                /* 00E0 */  0x0C, 0x8B, 0x1F, 0xB2, 0xA0, 0x4F, 0xE4, 0xAC,  // .....O..
                /* 00E8 */  0x0F, 0x98, 0x1D, 0x07, 0x7C, 0x04, 0xC0, 0xC1,  // ....|...
                /* 00F0 */  0x1A, 0x28, 0x5C, 0xC0, 0xF3, 0x39, 0x86, 0xC8,  // .(\..9..
                /* 00F8 */  0x71, 0x0F, 0x36, 0xC6, 0x51, 0x44, 0x4E, 0x50,  // q.6.QDNP
                /* 0100 */  0xE1, 0x44, 0xE4, 0x73, 0xD2, 0x12, 0x74, 0x04,  // .D.s..t.
                /* 0108 */  0x20, 0x60, 0xD1, 0x0C, 0xD6, 0x33, 0x38, 0x91,  //  `...38.
                /* 0110 */  0x3D, 0x02, 0x94, 0x0C, 0x08, 0x79, 0x14, 0x60,  // =....y.`
                /* 0118 */  0x55, 0xC0, 0xFF, 0x1F, 0xF7, 0x34, 0x4C, 0xD0,  // U....4L.
                /* 0120 */  0xBD, 0x00, 0x65, 0x02, 0x8C, 0x09, 0x70, 0x06,  // ..e...p.
                /* 0128 */  0x2D, 0x6F, 0x02, 0xC4, 0x41, 0x68, 0x1A, 0x6D,  // -o..Ah.m
                /* 0130 */  0x09, 0xB0, 0x76, 0x5B, 0xD0, 0xFC, 0x62, 0x44,  // ..v[..bD
                /* 0138 */  0x39, 0xCF, 0x48, 0x01, 0xC3, 0x44, 0x69, 0x0E,  // 9.H..Di.
                /* 0140 */  0x51, 0x58, 0x11, 0xA3, 0xC4, 0xA9, 0x19, 0x4C,  // QX.....L
                /* 0148 */  0x10, 0x0F, 0x0C, 0xD1, 0x22, 0x85, 0x65, 0x13,  // ....".e.
                /* 0150 */  0x08, 0xD2, 0xFE, 0x20, 0xC8, 0xA0, 0x71, 0xA3,  // ... ..q.
                /* 0158 */  0xF7, 0x5D, 0xE1, 0xC0, 0x8E, 0xE2, 0xE8, 0x8F,  // .]......
                /* 0160 */  0xE8, 0x28, 0xD9, 0x94, 0x0F, 0xEC, 0xC9, 0x20,  // .(..... 
                /* 0168 */  0xF4, 0xB1, 0x46, 0x8D, 0x71, 0x16, 0x09, 0x1C,  // ..F.q...
                /* 0170 */  0x7F, 0xA9, 0x3A, 0x50, 0x38, 0x12, 0x3C, 0xEA,  // ..:P8.<.
                /* 0178 */  0xAC, 0xE0, 0x73, 0x81, 0x87, 0x76, 0xD0, 0x9E,  // ..s..v..
                /* 0180 */  0xE3, 0x09, 0x04, 0x79, 0x6C, 0xF0, 0x79, 0xE1,  // ...yl.y.
                /* 0188 */  0x81, 0xC0, 0x63, 0x60, 0xB7, 0x09, 0x1F, 0x01,  // ..c`....
                /* 0190 */  0x7C, 0x42, 0xC0, 0xBB, 0x06, 0xD4, 0xD5, 0xE0,  // |B......
                /* 0198 */  0xC1, 0x80, 0x0D, 0x3A, 0x1C, 0x66, 0xBC, 0x1E,  // ...:.f..
                /* 01A0 */  0x7E, 0xB8, 0x13, 0x38, 0xB9, 0x87, 0x0B, 0x7E,  // ~..8...~
                /* 01A8 */  0xD0, 0xF0, 0xE0, 0x70, 0x77, 0x88, 0x93, 0x39,  // ...pw..9
                /* 01B0 */  0xB2, 0x52, 0x05, 0x98, 0x3D, 0x1C, 0xE8, 0x18,  // .R..=...
                /* 01B8 */  0xE1, 0x93, 0x06, 0x3B, 0x03, 0x60, 0xE4, 0x0F,  // ...;.`..
                /* 01C0 */  0x02, 0x35, 0x32, 0x43, 0xFB, 0x44, 0xF1, 0xC2,  // .52C.D..
                /* 01C8 */  0x61, 0xC8, 0xE7, 0x84, 0xC3, 0x62, 0x62, 0x4F,  // a....bbO
                /* 01D0 */  0x1C, 0x74, 0x3C, 0xE0, 0xBF, 0x08, 0x3C, 0x65,  // .t<...<e
                /* 01D8 */  0x78, 0xFA, 0x9E, 0xAF, 0x4F, 0x21, 0xE0, 0xC1,  // x...O!..
                /* 01E0 */  0x38, 0x83, 0x50, 0x0F, 0x0D, 0xAF, 0x0D, 0x9E,  // 8.P.....
                /* 01E8 */  0xDF, 0x3B, 0x03, 0xFE, 0x14, 0xC2, 0xFF, 0xFF,  // .;......
                /* 01F0 */  0xA7, 0x10, 0xF0, 0xE2, 0x1D, 0x00, 0xE6, 0x38,  // .......8
                /* 01F8 */  0xE0, 0x01, 0x70, 0xF0, 0xA7, 0x88, 0xB3, 0xB3,  // ..p.....
                /* 0200 */  0xD2, 0x39, 0x21, 0x4F, 0x2A, 0x60, 0x10, 0xA6,  // .9!O*`..
                /* 0208 */  0x61, 0xEC, 0x2C, 0x28, 0x85, 0x6C, 0x2C, 0xDE,  // a.,(.l,.
                /* 0210 */  0xC3, 0xA7, 0x42, 0x80, 0x74, 0xB4, 0x38, 0x3E,  // ..B.t.8>
                /* 0218 */  0x4F, 0x11, 0x1E, 0xC1, 0xE0, 0xC7, 0x07, 0x9D,  // O.......
                /* 0220 */  0x3C, 0x3C, 0x00, 0x47, 0x26, 0x51, 0xE8, 0x41,  // <<.G&Q.A
                /* 0228 */  0xD1, 0xD3, 0x0A, 0x39, 0x80, 0x50, 0x10, 0x03,  // ...9.P..
                /* 0230 */  0x3A, 0xC3, 0x39, 0x02, 0xAD, 0xE2, 0x1C, 0x41,  // :.9....A
                /* 0238 */  0xE6, 0x70, 0x14, 0xA7, 0x99, 0xA0, 0xE8, 0x2B,  // .p.....+
                /* 0240 */  0x04, 0x9D, 0xB4, 0x2F, 0x07, 0x7C, 0x59, 0x1A,  // .../.|Y.
                /* 0248 */  0x0B, 0x01, 0xB6, 0x9A, 0xCB, 0x09, 0x0A, 0xCC,  // ........
                /* 0250 */  0xF7, 0x0F, 0x4E, 0x50, 0xD7, 0x01, 0x02, 0x64,  // ..NP...d
                /* 0258 */  0xFA, 0x2E, 0x08, 0xA0, 0x00, 0xF2, 0x89, 0xC0,  // ........
                /* 0260 */  0x57, 0x80, 0x97, 0x02, 0x36, 0x86, 0xB7, 0x00,  // W...6...
                /* 0268 */  0xA3, 0x19, 0x9D, 0x87, 0x1F, 0x2A, 0x2A, 0xEE,  // .....**.
                /* 0270 */  0x50, 0x29, 0x88, 0x87, 0xEA, 0x28, 0x43, 0x45,  // P)...(CE
                /* 0278 */  0xCF, 0xC4, 0xC7, 0x09, 0xCF, 0xA8, 0x75, 0x10,  // ......u.
                /* 0280 */  0xCD, 0xD1, 0x04, 0xAF, 0x04, 0x09, 0xFE, 0xFF,  // ........
                /* 0288 */  0x8F, 0x1F, 0x70, 0x6E, 0x02, 0x21, 0x9F, 0x42,  // ..pn.!.B
                /* 0290 */  0x3C, 0x0D, 0xC3, 0x79, 0xB2, 0x1C, 0xCE, 0x93,  // <..y....
                /* 0298 */  0xE5, 0x63, 0xF1, 0xE9, 0x03, 0x7C, 0xA7, 0x09,  // .c...|..
                /* 02A0 */  0xDC, 0x6C, 0xC1, 0x08, 0x8F, 0x89, 0x35, 0x2A,  // .l....5*
                /* 02A8 */  0x7A, 0x00, 0xF2, 0xF0, 0xF8, 0xE5, 0xC0, 0xF3,  // z.......
                /* 02B0 */  0x79, 0x42, 0x38, 0xCA, 0x47, 0x0F, 0x5F, 0x5B,  // yB8.G._[
                /* 02B8 */  0x3C, 0x9B, 0xB7, 0x04, 0xDF, 0x44, 0x3C, 0x44,  // <....D<D
                /* 02C0 */  0x9F, 0x85, 0x60, 0x4D, 0xE4, 0xA4, 0x7D, 0x5B,  // ..`M..}[
                /* 02C8 */  0x38, 0xD9, 0xA0, 0xF1, 0xC3, 0x7A, 0x98, 0x9E,  // 8....z..
                /* 02D0 */  0xD3, 0xB3, 0x10, 0x58, 0x8E, 0x15, 0xEC, 0x66,  // ...X...f
                /* 02D8 */  0xF1, 0x34, 0x84, 0xB9, 0x1C, 0xF9, 0x5C, 0x81,  // .4....\.
                /* 02E0 */  0x15, 0xBB, 0x1A, 0x1D, 0x32, 0x70, 0x61, 0xDE,  // ....2pa.
                /* 02E8 */  0x05, 0xBA, 0x60, 0xB0, 0x43, 0x06, 0x4C, 0xF1,  // ..`.C.L.
                /* 02F0 */  0x90, 0x3A, 0x64, 0x70, 0xD9, 0x14, 0x12, 0x4E,  // .:dp...N
                /* 02F8 */  0xA3, 0xA3, 0x02, 0x97, 0x7A, 0xD6, 0xA0, 0x20,  // ....z.. 
                /* 0300 */  0x1E, 0xA4, 0x0F, 0x19, 0xE0, 0xFF, 0xFF, 0x1F,  // ........
                /* 0308 */  0x32, 0x80, 0x45, 0x88, 0x19, 0xA1, 0x6F, 0x3A,  // 2.E...o:
                /* 0310 */  0xD6, 0x7A, 0x57, 0x22, 0x57, 0x88, 0x07, 0x15,  // .zW"W...
                /* 0318 */  0x0F, 0x09, 0xAC, 0x43, 0xF5, 0x31, 0x04, 0xF0,  // ...C.1..
                /* 0320 */  0x3D, 0x12, 0x1F, 0x43, 0x80, 0xEB, 0xFF, 0xFF,  // =..C....
                /* 0328 */  0x18, 0x02, 0x3C, 0x87, 0xE9, 0x63, 0x08, 0x78,  // ..<..c.x
                /* 0330 */  0x2E, 0x1D, 0xEC, 0x18, 0x02, 0x3B, 0xDC, 0x19,  // .....;..
                /* 0338 */  0x91, 0x86, 0x78, 0x17, 0x28, 0xC2, 0x82, 0x28,  // ..x.(..(
                /* 0340 */  0x8C, 0xCF, 0x88, 0x80, 0xA3, 0xF3, 0x18, 0xFE,  // ........
                /* 0348 */  0x8C, 0x08, 0xF3, 0x38, 0xC6, 0x06, 0x7C, 0xC6,  // ...8..|.
                /* 0350 */  0xC1, 0x70, 0x47, 0x44, 0xD8, 0x97, 0xC2, 0xF7,  // .pGD....
                /* 0358 */  0xC2, 0x47, 0xC4, 0x23, 0x7C, 0x77, 0xB3, 0x36,  // .G.#|w.6
                /* 0360 */  0x04, 0x5D, 0x0D, 0x83, 0xC4, 0x89, 0xF0, 0x66,  // .].....f
                /* 0368 */  0xF8, 0x88, 0x68, 0xB8, 0x77, 0xB8, 0x47, 0x44,  // ..h.w.GD
                /* 0370 */  0x63, 0x04, 0x0C, 0x73, 0x34, 0xFF, 0xFF, 0x28,  // c..s4..(
                /* 0378 */  0x4F, 0x87, 0x41, 0x22, 0xFB, 0xA2, 0xF8, 0x7C,  // O.A"...|
                /* 0380 */  0x18, 0xE1, 0x75, 0xD1, 0x38, 0x0F, 0x85, 0x21,  // ..u.8..!
                /* 0388 */  0x1E, 0x11, 0x01, 0x3E, 0x9E, 0x19, 0xD8, 0x95,  // ...>....
                /* 0390 */  0x01, 0x7B, 0x44, 0x04, 0x06, 0xFF, 0xFF, 0x23,  // .{D....#
                /* 0398 */  0x22, 0xF0, 0x11, 0x74, 0x44, 0xA4, 0x21, 0x8F,  // "..tD.!.
                /* 03A0 */  0x88, 0xA8, 0x61, 0x58, 0xC6, 0x11, 0x11, 0x35,  // ..aX...5
                /* 03A8 */  0x45, 0x38, 0x27, 0x44, 0x80, 0x77, 0xFF, 0xFF,  // E8'D.w..
                /* 03B0 */  0xB3, 0x14, 0xF0, 0x0E, 0x75, 0x96, 0x02, 0x6A,  // ....u..j
                /* 03B8 */  0x90, 0x16, 0x79, 0x42, 0x04, 0xE1, 0x59, 0x08,  // ..yB..Y.
                /* 03C0 */  0x96, 0xD0, 0x03, 0x22, 0xEA, 0x08, 0xE0, 0x28,  // ..."...(
                /* 03C8 */  0x07, 0x44, 0xD4, 0x11, 0x03, 0xCE, 0xF9, 0x10,  // .D......
                /* 03D0 */  0xF0, 0xF5, 0xFF, 0x3F, 0x1F, 0x02, 0x3C, 0x3E,  // ...?..<>
                /* 03D8 */  0x84, 0x80, 0xF7, 0xFF, 0x7F, 0x08, 0x01, 0x87,  // ........
                /* 03E0 */  0x84, 0x43, 0x08, 0xA8, 0xCE, 0x87, 0x98, 0x43,  // .C.....C
                /* 03E8 */  0x08, 0xAC, 0xB0, 0x3E, 0x46, 0xC0, 0x62, 0x3C,  // ...>F.b<
                /* 03F0 */  0x0B, 0x14, 0x63, 0x3D, 0x14, 0xC6, 0xC7, 0x43,  // ..c=...C
                /* 03F8 */  0xC0, 0xD1, 0xE1, 0x0C, 0x77, 0x3C, 0x84, 0x7D,  // ....w<.}
                /* 0400 */  0xBC, 0xE4, 0x43, 0x39, 0xB1, 0x88, 0x11, 0x1E,  // ..C9....
                /* 0408 */  0xC6, 0xA2, 0xC5, 0x7C, 0x06, 0xF0, 0xF9, 0x10,  // ...|....
                /* 0410 */  0xF6, 0xDD, 0xF0, 0x71, 0xF0, 0x05, 0x22, 0xC6,  // ...q..".
                /* 0418 */  0xB3, 0xE1, 0xC3, 0xA1, 0xCF, 0x84, 0xEF, 0x85,  // ........
                /* 0420 */  0xE7, 0x11, 0xE5, 0xB9, 0xF0, 0xF9, 0x90, 0x1D,  // ........
                /* 0428 */  0xE0, 0xCE, 0x21, 0x8A, 0x41, 0x22, 0x1D, 0x43,  // ..!.A".C
                /* 0430 */  0xD4, 0x28, 0xCF, 0x8A, 0x61, 0xC3, 0xBC, 0x0D,  // .(..a...
                /* 0438 */  0x86, 0x0B, 0x11, 0x29, 0x42, 0xE4, 0x88, 0x0F,  // ...)B...
                /* 0440 */  0x89, 0x61, 0x9E, 0x0F, 0xC1, 0xF4, 0xFF, 0x3F,  // .a.....?
                /* 0448 */  0x1F, 0xE2, 0x5F, 0x18, 0x3E, 0x1F, 0x02, 0x1C,  // .._.>...
                /* 0450 */  0x39, 0x74, 0xE0, 0xCE, 0x87, 0x60, 0xB8, 0xAA,  // 9t...`..
                /* 0458 */  0xB3, 0x3B, 0x03, 0x8C, 0x03, 0x22, 0x60, 0xE0,  // .;..."`.
                /* 0460 */  0xFF, 0x7F, 0x40, 0xC4, 0x8B, 0x5B, 0xB7, 0x0E,  // ..@..[..
                /* 0468 */  0x2B, 0x56, 0x7C, 0xDC, 0x42, 0x67, 0x79, 0x01,  // +V|.Bgy.
                /* 0470 */  0x08, 0xFA, 0xE8, 0x0E, 0xC7, 0x03, 0x3E, 0x45,  // ......>E
                /* 0478 */  0x18, 0xEA, 0x8F, 0x5B, 0x28, 0xDD, 0x14, 0x52,  // ...[(..R
                /* 0480 */  0x7E, 0xDC, 0x42, 0x69, 0x3D, 0x6E, 0x51, 0x10,  // ~.Bi=nQ.
                /* 0488 */  0x9F, 0x1C, 0x1C, 0xE3, 0x48, 0x04, 0x65, 0x66,  // ....H.ef
                /* 0490 */  0x4F, 0x44, 0xBE, 0x15, 0xF8, 0x64, 0xE3, 0xFB,  // OD...d..
                /* 0498 */  0x16, 0x30, 0x8D, 0x30, 0x26, 0x34, 0x8C, 0xCF,  // .0.0&4..
                /* 04A0 */  0x03, 0x67, 0x74, 0x9A, 0xAF, 0x5B, 0x80, 0xE5,  // .gt..[..
                /* 04A8 */  0xFF, 0xFF, 0x75, 0x0B, 0x30, 0x18, 0xEE, 0xBA,  // ..u.0...
                /* 04B0 */  0x05, 0xD4, 0x4E, 0x00, 0xBE, 0xC0, 0xF8, 0xBA,  // ..N.....
                /* 04B8 */  0x05, 0xAE, 0x9B, 0x07, 0xE6, 0x82, 0x8F, 0x43,  // .......C
                /* 04C0 */  0x7D, 0xF9, 0xC0, 0x5F, 0x44, 0xE0, 0x9C, 0x4E,  // }.._D..N
                /* 04C8 */  0x1E, 0xA6, 0x0C, 0xF8, 0xEA, 0x02, 0xE7, 0x22,  // ......."
                /* 04D0 */  0x02, 0xAC, 0xFE, 0xFF, 0x17, 0x11, 0x80, 0xFF,  // ........
                /* 04D8 */  0xFF, 0xFF, 0x8B, 0x08, 0xF0, 0x1F, 0xA6, 0x2F,  // ......./
                /* 04E0 */  0x22, 0xE0, 0xBB, 0x79, 0xF0, 0x83, 0x08, 0x6C,  // "..y...l
                /* 04E8 */  0x82, 0xC9, 0x4E, 0xF4, 0xA8, 0x01, 0x5B, 0x01,  // ..N...[.
                /* 04F0 */  0x90, 0xC6, 0x7B, 0x48, 0xF1, 0x5E, 0xF9, 0xD8,  // ..{H.^..
                /* 04F8 */  0xB9, 0x2E, 0xC1, 0xE4, 0xC7, 0x79, 0x54, 0x66,  // .....yTf
                /* 0500 */  0x12, 0xA5, 0x3E, 0x29, 0xA0, 0x72, 0x9E, 0x14,  // ..>).r..
                /* 0508 */  0x28, 0x88, 0x01, 0x7D, 0xF5, 0x05, 0x56, 0xD7,  // (..}..V.
                /* 0510 */  0x79, 0x60, 0xFF, 0xFF, 0xBF, 0xCE, 0x03, 0xC6,  // y`......
                /* 0518 */  0xE3, 0x5C, 0xE7, 0x81, 0x9E, 0xBC, 0x3B, 0x06,  // .\....;.
                /* 0520 */  0x68, 0xAE, 0x14, 0xEC, 0x5F, 0xF1, 0x4C, 0x81,  // h..._.L.
                /* 0528 */  0x21, 0x98, 0xEE, 0x72, 0x81, 0xBA, 0xE0, 0x5A,  // !..r...Z
                /* 0530 */  0xC3, 0xE5, 0x02, 0x71, 0xDA, 0x08, 0x7D, 0x5C,  // ...q..}\
                /* 0538 */  0x6F, 0x17, 0xC0, 0xE8, 0xFF, 0x7F, 0xBB, 0x00,  // o.......
                /* 0540 */  0x78, 0x1A, 0xE8, 0x76, 0x01, 0xB4, 0xFE, 0xFF,  // x..v....
                /* 0548 */  0x07, 0x75, 0x7E, 0xA4, 0xC5, 0xDF, 0x2E, 0xE0,  // .u~.....
                /* 0550 */  0x1F, 0x2A, 0xB0, 0x67, 0x62, 0xBD, 0x9E, 0x7D,  // .*.gb..}
                /* 0558 */  0x46, 0xA7, 0x21, 0x8E, 0xE9, 0x80, 0xD6, 0xAB,  // F.!.....
                /* 0560 */  0x89, 0x4F, 0xCF, 0x9E, 0x6F, 0x44, 0x9F, 0xC7,  // .O..oD..
                /* 0568 */  0xC3, 0x3C, 0x3D, 0x1C, 0xF1, 0xDB, 0x83, 0x8F,  // .<=.....
                /* 0570 */  0xE9, 0xF0, 0xCF, 0xE6, 0x6F, 0xE5, 0x71, 0xDF,  // ....o.q.
                /* 0578 */  0xCF, 0x7D, 0x31, 0x7F, 0x38, 0x7F, 0x3D, 0xF7,  // .}1.8.=.
                /* 0580 */  0xE5, 0xDC, 0x87, 0x74, 0xA3, 0x18, 0xC6, 0x50,  // ...t...P
                /* 0588 */  0x86, 0x08, 0x18, 0x34, 0x56, 0x94, 0x23, 0x89,  // ...4V.#.
                /* 0590 */  0x69, 0x94, 0x10, 0x11, 0x5E, 0xD5, 0x8D, 0x15,  // i...^...
                /* 0598 */  0xD2, 0xD6, 0x8E, 0xE9, 0xA0, 0x8E, 0xBF, 0x54,  // .......T
                /* 05A0 */  0x1D, 0xD3, 0xE1, 0xFC, 0xFF, 0x8F, 0xE9, 0x00,  // ........
                /* 05A8 */  0x1F, 0xCE, 0x0C, 0xB8, 0x63, 0x3A, 0xFC, 0x43,  // ....c:.C
                /* 05B0 */  0x03, 0xBF, 0x33, 0xE0, 0x4F, 0xE9, 0x80, 0x8F,  // ..3.O...
                /* 05B8 */  0xC0, 0x77, 0x27, 0x1A, 0x96, 0x42, 0xF7, 0x28,  // .w'..B.(
                /* 05C0 */  0x3E, 0x2C, 0x0B, 0x02, 0xD2, 0xFF, 0x7F, 0x84,  // >,......
                /* 05C8 */  0xF0, 0x44, 0x40, 0x53, 0x08, 0xC7, 0x3F, 0x0E,  // .D@S..?.
                /* 05D0 */  0x01, 0x7D, 0x02, 0x1F, 0x87, 0x80, 0xF7, 0xE1,  // .}......
                /* 05D8 */  0xC3, 0xF7, 0x68, 0xE0, 0x76, 0x9E, 0x01, 0x0E,  // ..h.v...
                /* 05E0 */  0x0A, 0x6D, 0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41,  // .m..h..A
                /* 05E8 */  0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,  // ..e...S.
                /* 05F0 */  0x31, 0x63, 0xDA, 0xA0, 0x24, 0xE9, 0x80, 0x40,  // 1c..$..@
                /* 05F8 */  0x45, 0x2C, 0x49, 0x63, 0x72, 0x04, 0x10, 0xAA,  // E,Icr...
                /* 0600 */  0xEB, 0xC5, 0x22, 0x23, 0x20, 0x12, 0x09, 0x22,  // .."# .."
                /* 0608 */  0x20, 0xFF, 0xFF, 0x05, 0x7D, 0xD2, 0x04, 0x64,  //  ...}..d
                /* 0610 */  0x79, 0x20, 0x02, 0x72, 0xFE, 0xC7, 0x91, 0x80,  // y .r....
                /* 0618 */  0x2C, 0x66, 0x55, 0x02, 0x72, 0x06, 0x10, 0x01,  // ,fU.r...
                /* 0620 */  0x39, 0x10, 0x10, 0x15, 0x6F, 0x02, 0x88, 0x45,  // 9...o..E
                /* 0628 */  0x01, 0x11, 0x90, 0x83, 0xAB, 0x18, 0x0A, 0x0B,  // ........
                /* 0630 */  0xFA, 0x1E, 0x11, 0x90, 0x65, 0xDA, 0x00, 0x61,  // ....e..a
                /* 0638 */  0xC9, 0x75, 0x80, 0x32, 0x19, 0x3E, 0x80, 0x58,  // .u.2.>.X
                /* 0640 */  0x64, 0x10, 0x01, 0xF9, 0x4D, 0x60, 0x20, 0xA7,  // d...M` .
                /* 0648 */  0xA3, 0x11, 0x90, 0xA3, 0x52, 0x08, 0xC8, 0x0A,  // ....R...
                /* 0650 */  0x95, 0x00, 0x31, 0xB9, 0x20, 0x02, 0xB2, 0x34,  // ..1. ..4
                /* 0658 */  0x27, 0x40, 0x4C, 0x28, 0x88, 0x80, 0x1C, 0xEA,  // '@L(....
                /* 0660 */  0xB9, 0xA4, 0xA1, 0x38, 0x86, 0x16, 0x20, 0x26,  // ...8.. &
                /* 0668 */  0xC2, 0x0B, 0x08, 0x0B, 0xB7, 0x7A, 0x81, 0x3A,  // .....z.:
                /* 0670 */  0x29, 0x88, 0xEE, 0x83, 0xC4, 0x0C, 0x10, 0xD3,  // ).......
                /* 0678 */  0x0A, 0xA2, 0xC1, 0x92, 0xFF, 0x9D, 0x80, 0xAC,  // ........
                /* 0680 */  0x12, 0x44, 0x40, 0x56, 0xF3, 0x92, 0x10, 0x90,  // .D@V....
                /* 0688 */  0xA5, 0x81, 0x08, 0xC8, 0x79, 0x80, 0x68, 0x38,  // ....y.h8
                /* 0690 */  0x20, 0x1A, 0xC4, 0x0E, 0x10, 0x8B, 0x05, 0x22,  //  ......"
                /* 0698 */  0x20, 0xCB, 0xF6, 0x03, 0xC4, 0x32, 0x80, 0x08,  //  ....2..
                /* 06A0 */  0xC8, 0x7A, 0x0F, 0x20, 0x02, 0xB2, 0x7A, 0x10,  // .z. ..z.
                /* 06A8 */  0x01, 0x59, 0x91, 0xA2, 0x03, 0x00, 0x05, 0x11,  // .Y......
                /* 06B0 */  0x90, 0xA5, 0x38, 0x02, 0x62, 0xC2, 0x40, 0x04,  // ..8.b.@.
                /* 06B8 */  0xE4, 0x00, 0x0F, 0x2D, 0x0D, 0xCF, 0x92, 0x35,  // ...-...5
                /* 06C0 */  0x01, 0xB1, 0xC0, 0x20, 0x34, 0x86, 0x28, 0x50,  // ... 4.(P
                /* 06C8 */  0x16, 0x0A, 0x44, 0x40, 0xFE, 0xFF, 0x03         // ..D@...
            })
            OperationRegion (DEB1, SystemIO, 0x80, 0x04)
            Field (DEB1, DWordAcc, NoLock, Preserve)
            {
                DBGD,   32
            }

            OperationRegion (SMI0, SystemIO, LSMB, One)
            Field (SMI0, ByteAcc, NoLock, Preserve)
            {
                APMC,   8
            }

            OperationRegion (WMIM, SystemMemory, WMIO, WMSZ)
            Field (WMIM, AnyAcc, NoLock, Preserve)
            {
                CMD,    8, 
                ERR,    32, 
                PAR0,   32, 
                PAR1,   32, 
                PAR2,   32, 
                PAR3,   32
            }

            Field (WMIM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x15), 
                DBGM,   800, 
                RTSM,   800
            }

            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x42, 0x41, 0x01, 0x00, 0x7C, 0x78, 0x3E, 0x21,  // BA..|x>!
                /* 0018 */  0xD5, 0x50, 0x2D, 0x47, 0x9E, 0x08, 0xDF, 0x4F,  // .P-G...O
                /* 0020 */  0xB2, 0x05, 0x0D, 0x15, 0x47, 0x49, 0x02, 0x02,  // ....GI..
                /* 0028 */  0x66, 0xEA, 0x34, 0xF8, 0x42, 0xA4, 0xBD, 0x48,  // f.4.B..H
                /* 0030 */  0xBE, 0x8C, 0x18, 0x83, 0x75, 0x57, 0xC8, 0x98,  // ....uW..
                /* 0038 */  0x47, 0x42, 0x01, 0x02, 0x27, 0x24, 0x06, 0x68,  // GB..'$.h
                /* 0040 */  0x32, 0xC4, 0xA2, 0x4B, 0xB3, 0xD8, 0xF6, 0x39,  // 2..K...9
                /* 0048 */  0x49, 0xDD, 0x7A, 0x19, 0x53, 0x50, 0x03, 0x02,  // I.z.SP..
                /* 0050 */  0x38, 0x27, 0xAA, 0x81, 0xBA, 0x49, 0x98, 0x44,  // 8'...I.D
                /* 0058 */  0x82, 0x1B, 0xD3, 0x8B, 0x88, 0xD8, 0x14, 0x95,  // ........
                /* 0060 */  0x4C, 0x44, 0x01, 0x02                           // LD..
            })
            Method (TSTD, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = 0x00030D40
                While ((Local0 < Local1))
                {
                    DBGD = Arg0
                    Local0++
                }

                Return (Zero)
            }

            Mutex (MSMI, 0x07)
            Method (SMI, 5, NotSerialized)
            {
                Acquire (MSMI, 0xFFFF)
                CMD = Arg0
                PAR0 = Arg1
                PAR1 = Arg2
                PAR2 = Arg3
                PAR3 = Arg4
                APMC = AISV /* \AISV */
                While ((ERR == One))
                {
                    Sleep (0x64)
                    APMC = AISV /* \AISV */
                }

                Local0 = PAR0 /* \_SB_.WMIC.PAR0 */
                Release (MSMI)
                Return (Local0)
            }

            Method (WMII, 2, NotSerialized)
            {
                Return (SMI (0x10, Arg0, Arg1, Zero, Zero))
            }

            Method (WMIP, 2, NotSerialized)
            {
                Return (SMI (0x20, Arg0, Arg1, Zero, Zero))
            }

            Method (WMGI, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMII (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMGB, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMII (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMSP, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMIP (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMLD, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local1 = WMII (0xFF, Zero)
                Release (MWMI)
                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : F0
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DCDE8000
[028h 0040   4]                 DSDT Address : DB2F1000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000DB2F1000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 F0 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 80 DE DC 00 10 2F DB 00 01 09 00  // ........../.....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 10 2F DB  // ............../.
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : CB0DB68E
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 8E B6 0D CB 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D6
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 D6 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 56 57 57  // ....$FID.x.1AVWW
    0030: 30 31 00 00 B0 D2 A3 0A CD 9B E9 9A 9A DB 36 CD  // 01............6.
    0040: 08 19 80 3B 30 35 00 31 37 00 30 30 00 30 31 00  // ...;05.17.00.01.
    0050: E4 07 0C 1D 0F 32 09 FF FF 41 4C 41 53 4B 41 41  // .....2...ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 77
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000DB23C000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000DB2A1000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 77 41 4C 41 53 4B 41  // FPDTD....wALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 C0 23 DB  // ..............#.
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 10 2A DB  // ..............*.
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD380000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6F

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 0D
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 0E
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FD380000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 058F77EF22294ADE
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                   Entry Type : 03
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1]                 Data Setting : 00

[0A4h 0164   1]                   Entry Type : 04
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1]                 Data Setting : 00

[0A8h 0168   1]                   Entry Type : 43
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1]                 Data Setting : 00
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                   Entry Type : 04
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1]                 Data Setting : 00

[0B4h 0180   1]                   Entry Type : 00
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1]                 Data Setting : 00

[0B8h 0184   1]                   Entry Type : 48
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1]                 Data Setting : 00
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                   Entry Type : 48
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1]                 Data Setting : D7
[0C4h 0196   1]                       Handle : 0D
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                   Entry Type : 48
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1]                 Data Setting : 00
[0CCh 0204   1]                       Handle : 0E
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 4E 41 4D 44 20 20 00  // IVRS.....NAMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 38 FD 00 00 00 00  // ..H...@...8.....
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 0D A0 00 01  // H.......H.......
    0070: 48 00 00 00 0E 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 38 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..8.............
    0090: DE 4A 29 22 EF 77 8F 05 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 0D A0 00 01 48 00 00 00 0E 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


PCCT
----
[000h 0000   4]                    Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : BE
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]        Flags (decoded below) : 00000000
                                    Platform : 0
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Generic Communications Subspace]
[031h 0049   1]                       Length : 3E

[032h 0050   6]                     Reserved : 000000000000
[038h 0056   8]                 Base Address : 00000000DD500000
[040h 0064   8]               Address Length : 0000000000010000

[048h 0072  12]            Doorbell Register : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 04 [QWord Access:64]
[04Ch 0076   8]                      Address : 00000000FD010540

[054h 0084   8]                Preserve Mask : FFFFFFFF00000000
[05Ch 0092   8]                   Write Mask : 0000000000000001
[064h 0100   4]              Command Latency : 00000FA0
[068h 0104   4]          Maximum Access Rate : 0000EA60
[06Ch 0108   2]      Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 02 BE 41 4D 44 00 00 00  // PCCTn.....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 50 DD 00 00 00 00  // .>........P.....
    0040: 00 00 01 00 00 00 00 00 00 40 00 04 40 05 01 FD  // .........@..@...
    0050: 00 00 00 00 00 00 00 00 FF FF FF FF 01 00 00 00  // ................
    0060: 00 00 00 00 A0 0F 00 00 60 EA 00 00 00 00        // ........`.....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "BIXBY", 0x00001000)
{


SSDT10
------
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRDGP", 0x00000001)
{
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP8.M434, UnknownObj)
    External (M049, UnknownObj)
    External (M097, UnknownObj)
    External (M128, UnknownObj)

    Scope (\_SB.PCI0.GPP8)
    {
        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP8.SWUS.DDPM */
            }

            Device (SWDS)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP8.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00) {}
                    })
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (M432, Zero)
                    Name (M433, Zero)
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (M435, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (M435, Zero, M436)
                                CreateBitField (M435, 0x05, M445)
                                CreateBitField (M435, 0x0A, M437)
                                CreateBitField (M435, 0x0B, M438)
                                If ((Arg1 >= 0x04))
                                {
                                    M436 = One
                                    M445 = One
                                    ((0x66 = (M049 >> M128)) /* External reference */ & 0x04)
                                    One
                                    M432
                                    ((0x66 = (M049 >> M128)) /* External reference */ & 0x05)
                                    One
                                    M433
                                    If ((M432 == One))
                                    {
                                        M437 = One
                                    }

                                    If ((M433 == One))
                                    {
                                        M438 = One
                                    }
                                }
                                Else
                                {
                                    M436 = One
                                    M445 = One
                                }

                                Return (M435) /* \_SB_.PCI0.GPP8.SWUS.SWDS._DSM.M435 */
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x0A)
                            {
                                Return (One)
                            }
                            Case (0x0B)
                            {
                                Local0 = ToInteger (Arg3)
                                If ((Local0 <= 0x2710))
                                {
                                    \_SB.PCI0.GPP8.M434 = 0x2710
                                }
                                Else
                                {
                                    Local0 = 0x2710
                                }

                                Return (Local0)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Set VDDIO", 
                "Set VTT", 
                "Command Buffer Start", 
                "Command Buffer End"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xFD)
            {
                0x00020001, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x122A, 
                0x12F2, 
                One, 
                0x00020037, 
                0x04B0, 
                0x09C4, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x0333, 
                0x062D, 
                0x03, 
                0x00030002, 
                0x0199, 
                0x0316, 
                0x03, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x11)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCF)
            {
                0x00020001, 
                0x4A, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x53)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214) {})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8) {})
            OperationRegion (AODT, SystemMemory, 0xDCDEA018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                MRSD,   88, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRN", 0x00000001)
{
    /*
     * iASL Warning: There were 21 external control methods found during
     * disassembly, but only 0 were resolved (21 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xDCDEF018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
            Local3 = 0x14301000
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x10
            Local3 = 0x14601000
        }
        ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            Local2 = 0x0A
            Local3 = 0x14301000
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x0B
            Local3 = 0x14301000
        }
        Else
        {
            Local2 = 0x10
            Local3 = 0x14301000
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local6 = (0x11840294 + ((Local4 - 0x08) << 0x0C))
                    Local7 = 0x11880188
                }
                Else
                {
                    Local6 = (0x11440294 + (Local4 << 0x0C))
                    Local7 = 0x11480188
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x05) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local6 = (0x11240294 + ((Local4 - 0x08) << 0x0C))
                Local7 = 0x11280188
            }
            Else
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }

            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local2 = (0x11840280 + ((Local4 - 0x08) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11440280 + (Local4 << 0x0C))
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x05) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local2 = (0x11240280 + ((Local4 - 0x08) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Name (M448, Package (0x02)
            {
                One, 
                One
            })
            Local0 = M04A (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08) {}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                If ((M085 == 0x0E))
                {
                    If (CondRefOf (\_SB.ALIB))
                    {
                        Local3 = \_SB.ALIB (0x0C)
                        Local4
                    }
                }
                ElseIf (CondRefOf (\_SB.ALIB))
                {
                    Local3 = \_SB.ALIB (0x0C)
                    M448
                }

                If (CondRefOf (\_SB.APAD))
                {
                    If ((M085 == 0x0E))
                    {
                        \_SB.APAD.M446 [One] = Local4
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                    Else
                    {
                        Local1 = Zero
                        Local2 = Zero
                        Local1 = M448 [Zero]
                        Local2 = M448 [One]
                        \_SB.APAD.M446 [One] = Local2
                        If ((Local1 == 0x02))
                        {
                            Notify (\_SB.APAD, 0x85) // Device-Specific
                        }
                        ElseIf ((Local1 == One))
                        {
                            Notify (\_SB.APAD, 0x84) // Reserved
                        }
                        Else
                        {
                            Notify (\_SB.APAD, 0x80) // Status Change
                        }
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Local0 = M04A (M128, 0x91)
                If (((Local0 & 0xC0) == 0xC0))
                {
                    Local3 = Buffer (0x08) {}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        \_SB.ALIB (0x0C)
                        Local3
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRTPX", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GPP8.SWUS.SWDS.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (One, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            M133 (0x11, Local0) = M049 /* External reference */
            Store (M113 (Local0, Local6, M023 (Zero, M091, M090), If ((M192 && Local6))
                    {
                        M000 (0x0D86)
                        M112 (Local0, Zero)
                        M111 (Local0, One)
                        Sleep (0x20)
                        M112 (Local0, 0x02)
                        M112 (Local0, One)
                        M000 (0x0D87)
                        HPOK = Zero
                        Sleep (0x14)
                        M201 = One
                        0x06 = \_SB.ALIB /* External reference */
                        Local7
                        Local6
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            M023 (Zero, M091, M090)
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                0xA5 = M021 (Zero, M091, M090)
                                Local0
                                Local0 &= 0x7F
                                If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                M090 = M024 (Zero, M091)
                                Local5
                                If (Local5)
                                {
                                    M026 (Zero, M091, M090)
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    Local0 = Zero
                                    If ((M025 == Zero))
                                    {
                                        M091
                                        M090
                                        Zero
                                        Ones
                                        Local0 = One
                                    }

                                    If (Local0)
                                    {
                                        M111 (M049, M133 (0x17, One))
                                        M111 (M049, M133 (0x18, One))
                                        HPOK = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        HPOK = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!HPOK)
                        {
                            M000 (0x0D88)
                            Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                Local5 = 0x05, While ((Local4 && Local5))
                                        {
                                            0xA5 = M021 (Zero, M091, M090)
                                            Local0
                                            Local0 &= 0x7F
                                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                            {
                                                Local4 = Zero
                                            }
                                            Else
                                            {
                                                Store (M019 (M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Local5--), 
                                                    M201 = Zero, \_SB.ALIB, 0x06), Local7, If ((M097 (Zero, 0x54 = M019 (
                                                    Zero, M091, M090), Local0, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC)), 
                                                    M232 (M097 (Zero, 0x10, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF)), 
                                                    M000 (0x0D89), Else
                                                                                {
                                                                                    M000 (0x0D8A)
                                                                                    M201 = Zero
                                                                                    \_SB.ALIB
                                                                                    0x06
                                                                                    Local7
                                                                                    M000 (0x0D8B)
                                                                                    M111 (M049, M133 (0x17, Zero))
                                                                                    M111 (M049, M133 (0x18, Zero))
                                                                                    M112 (Local0, Zero)
                                                                                    Sleep (0x0A)
                                                                                    M111 (Local0, Zero)
                                                                                    M023 (Zero, M091, M090)
                                                                                    Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                                                                        Local5 = 0x05, While ((Local4 && Local5))
                                                                                                {
                                                                                                    0xA5 = M021 (Zero, M091, M090)
                                                                                                    Local0
                                                                                                    Local0 &= 0x7F
                                                                                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                                                    {
                                                                                                        Local4 = Zero
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Local5--), 
                                                                                                            HPOK = 0x02, M000 (0x0D8C), If (HPOK)
                                                                                                                    {
                                                                                                                        Local5 = 0x7FFFFFFF
                                                                                                                        Local5 |= 0x80000000
                                                                                                                        0x54 = M019 (Zero, M091, M090)
                                                                                                                        Local1
                                                                                                                        M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local0), If (((HPOK == One) && 
                                                                                                                            (Local0 != Local5)))
                                                                                                                                        {
                                                                                                                                            M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                                                Local5))
                                                                                                                                                        {
                                                                                                                                                            M020 (M095 (M094 (M191 = (M093 (One, Zero) + 0x4C), Sleep (0x0A), M020 (
                                                                                                                                                                Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF)))))
                                                                                                                                                        })))
                                                                                                                                        })))
                                                                                                                    }))
                                                                                                    }
                                                                                                }))
                                                                                }))) != )) {})
                                            }
                                        }))
                        }
                    })
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049, M133 (0x17, One))
            }
            Else
            {
                M111 (M049, M133 (0x17, Zero))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049, M133 (0x18, One))
            }
            Else
            {
                M111 (M049, M133 (0x18, Zero))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, Zero), 0x10, Local0)
            Else
            {
                One = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000000C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000001C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000010C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000011C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000020C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000021C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000030C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000031C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000040C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000041C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000050C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000051C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000060C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000061C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000070C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000071C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000800, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000804, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000808, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000080C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000814, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000818, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000081C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000840, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000844, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000848, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000850, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000900, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000904, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000908, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000090C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000914, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000918, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000091C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000940, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000944, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000948, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000950, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Method (NFPR, 0, NotSerialized)
    {
        Local0 = 0xDD500000
        OperationRegion (SHRM, SystemMemory, Local0, 0x0C08)
        Field (SHRM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x48), 
            V000,   1, 
            Offset (0x148), 
            V001,   1, 
            Offset (0x248), 
            V002,   1, 
            Offset (0x348), 
            V003,   1, 
            Offset (0x448), 
            V004,   1, 
            Offset (0x548), 
            V005,   1, 
            Offset (0x648), 
            V006,   1, 
            Offset (0x748), 
            V007,   1, 
            Offset (0x848), 
            V008,   1, 
            Offset (0x948), 
            V009,   1, 
            Offset (0xA48), 
            V00A,   1, 
            Offset (0xB48), 
            V00B,   1
        }

        If ((V000 == One))
        {
            Notify (\_PR.C000, 0x84) // Reserved
        }

        If ((V001 == One))
        {
            Notify (\_PR.C001, 0x84) // Reserved
        }

        If ((V002 == One))
        {
            Notify (\_PR.C002, 0x84) // Reserved
        }

        If ((V003 == One))
        {
            Notify (\_PR.C003, 0x84) // Reserved
        }

        If ((V004 == One))
        {
            Notify (\_PR.C004, 0x84) // Reserved
        }

        If ((V005 == One))
        {
            Notify (\_PR.C005, 0x84) // Reserved
        }

        If ((V006 == One))
        {
            Notify (\_PR.C006, 0x84) // Reserved
        }

        If ((V007 == One))
        {
            Notify (\_PR.C007, 0x84) // Reserved
        }

        If ((V008 == One))
        {
            Notify (\_PR.C008, 0x84) // Reserved
        }

        If ((V009 == One))
        {
            Notify (\_PR.C009, 0x84) // Reserved
        }

        If ((V00A == One))
        {
            Notify (\_PR.C00A, 0x84) // Reserved
        }

        If ((V00B == One))
        {
            Notify (\_PR.C00B, 0x84) // Reserved
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRC", 0x00000001)
{
    External (_SB_.I2CA, DeviceObj)
    External (_SB_.I2CB, DeviceObj)
    External (_SB_.I2CC, DeviceObj)
    External (_SB_.I2CD, DeviceObj)

    Name (MWTT, 0xFF)
    Scope (\_SB.I2CA)
    {
        Device (WT1A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1A)
        {
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2A)
        {
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3A)
        {
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4A)
        {
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5A)
        {
            Name (_HID, "STK0005A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT5A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CB)
    {
        Device (WT1B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1B)
        {
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2B)
        {
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3B)
        {
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4B)
        {
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5B)
        {
            Name (_HID, "STK0005B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT5B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CC)
    {
        Device (WT1C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1C)
        {
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2C)
        {
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3C)
        {
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4C)
        {
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5C)
        {
            Name (_HID, "STK0005C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT5C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CD)
    {
        Device (WT1D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1D)
        {
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2D)
        {
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3D)
        {
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4D)
        {
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5D)
        {
            Name (_HID, "STK0005D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT5D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06) {}
        Processor (C001, 0x01, 0x00000810, 0x06) {}
        Processor (C002, 0x02, 0x00000810, 0x06) {}
        Processor (C003, 0x03, 0x00000810, 0x06) {}
        Processor (C004, 0x04, 0x00000810, 0x06) {}
        Processor (C005, 0x05, 0x00000810, 0x06) {}
        Processor (C006, 0x06, 0x00000810, 0x06) {}
        Processor (C007, 0x07, 0x00000810, 0x06) {}
        Processor (C008, 0x08, 0x00000810, 0x06) {}
        Processor (C009, 0x09, 0x00000810, 0x06) {}
        Processor (C00A, 0x0A, 0x00000810, 0x06) {}
        Processor (C00B, 0x0B, 0x00000810, 0x06) {}
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 0028 */  0x1F, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10530, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B1057C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B109C4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B109C8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B109CC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B109D0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B109D4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B109D8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)) {}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)) {}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)) {}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)) {}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x3D, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x3B, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x3C, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x3E, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x2F, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRNOI", 0x00000001)
{
    /*
     * iASL Warning: There were 20 external control methods found during
     * disassembly, but only 0 were resolved (20 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN0))
        {
            \_SB.PCI0.GPP8.VGA.AFN0 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN0))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN1))
        {
            \_SB.PCI0.GPP8.VGA.AFN1 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN1))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN2))
        {
            \_SB.PCI0.GPP8.VGA.AFN2 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN2))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN3))
        {
            \_SB.PCI0.GPP8.VGA.AFN3 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN3))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN4))
        {
            \_SB.PCI0.GPP8.VGA.AFN4 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN4))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN5))
        {
            \_SB.PCI0.GPP8.VGA.AFN5 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN5))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN6))
        {
            \_SB.PCI0.GPP8.VGA.AFN6 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN6))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN7))
        {
            \_SB.PCI0.GPP8.VGA.AFN7 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN7))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN8))
        {
            \_SB.PCI0.GPP8.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFNC))
        {
            \_SB.PCI0.GPP8.VGA.AFNC (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFNC))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
        }
    }
}



VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000F284
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 97
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 62084 (0xF284)

    0000: 56 46 43 54 84 F2 00 00 01 97 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 2F 00 00 00  // ............/...
    0050: 00 00 00 00 00 00 00 00 02 10 7F 68 00 00 00 00  // ...........h....
    0060: 01 00 00 00 00 F2 00 00 55 AA 79 E9 E3 02 00 00  // ........U.y.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 94 02 00 00 00 00 49 42 4D 66 A8 8A 00 00 00 00  // ......IBMf......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 6A 02 00 00 00 00 00 00 30 33 2F 32 30 2F 31 38  // j.......03/20/18
    00C0: 20 30 36 3A 31 38 00 00 38 00 00 00 E9 D1 03 00  //  06:18..8.......
    00D0: E9 DB 03 00 00 00 48 01 09 00 00 00 0B 80 13 E8  // ......H.........
    00E0: 07 00 00 00 00 80 00 80 00 80 00 18 F4 38 8A 50  // .............8.P
    00F0: E3 28 44 20 7A C1 CB 38 9E F2 FF FF 00 00 00 00  // .(D z..8........
    0100: 00 00 8C AF 00 00 00 7F 68 F8 AA 0C 03 F1 00 00  // ........h.......
    0110: 30 55 00 38 88 6F 00 B8 83 38 82 AF 3A 14 84 00  // 0U.8.o...8..:...
    0120: 60 C0 FB 88 91 42 00 82 80 CD 31 32 00 00 00 00  // `....B....12....
    0130: 1E 10 00 29 40 0C 06 07 05 00 00 00 00 68 01 00  // ...)@........h..
    0140: 00 00 02 00 00 00 00 00 22 10 06 04 3C 00 00 00  // ........"...<...
    0150: 08 00 00 00 01 00 00 00 07 01 00 00 32 00 00 00  // ............2...
    0160: 0C 00 00 00 00 00 00 00 01 00 00 00 00 87 0C 00  // ................
    0170: 8C 14 88 23 00 00 00 00 C3 04 00 00 00 00 00 00  // ...#............
    0180: 00 00 00 00 F9 49 22 10 04 06 00 19 00 00 00 00  // .....I".........
    0190: 30 24 30 10 00 80 5E 00 20 70 00 00 65 00 00 00  // 0$0...^. p..e...
    01A0: 00 04 00 C0 E8 A2 00 00 F8 D0 8F 08 00 00 00 00  // ................
    01B0: 31 31 31 00 56 45 47 41 31 30 00 50 43 49 5F 45  // 111.VEGA10.PCI_E
    01C0: 58 50 52 45 53 53 00 48 42 4D 32 00 0D 0A 56 45  // XPRESS.HBM2...VE
    01D0: 47 41 31 30 20 41 31 20 58 4C 20 38 47 42 20 4A  // GA10 A1 XL 8GB J
    01E0: 38 33 32 30 4A 41 44 2E 52 4F 4D 20 31 38 35 57  // 8320JAD.ROM 185W
    01F0: 20 46 41 4E 20 53 54 4F 50 20 37 30 20 20 20 20  //  FAN STOP 70    
    0200: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0210: 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20  //           ..... 
    0220: 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 31 30  // ...(C) 1988-2010
    0230: 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F  // , Advanced Micro
    0240: 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41  //  Devices, Inc..A
    0250: 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45  // TOMBIOSBK-AMD VE
    0260: 52 30 31 36 2E 30 30 31 2E 30 30 31 2E 30 30 30  // R016.001.001.000
    0270: 2E 30 30 30 30 30 30 00 4A 38 33 32 30 4A 41 44  // .000000.J8320JAD
    0280: 2E 52 4F 4D 00 31 35 32 39 34 32 38 20 00 34 31  // .ROM.1529428 .41
    0290: 31 32 37 30 20 20 00 20 20 20 20 20 20 20 20 00  // 1270  .        .
    02A0: 54 55 4C 5F 56 45 47 41 31 30 5F 50 32 30 46 46  // TUL_VEGA10_P20FF
    02B0: 5F 46 41 4E 5F 53 54 4F 50 33 5F 4E 49 43 4B 31  // _FAN_STOP3_NICK1
    02C0: 38 35 57 37 30 5C 63 6F 6E 66 69 67 2E 68 00 00  // 85W70\config.h..
    02D0: 00 90 28 00 02 02 41 54 4F 4D 00 C0 E3 03 10 02  // ..(...ATOM......
    02E0: B9 02 64 01 16 04 00 00 00 00 8C 14 88 23 94 02  // ..d..........#..
    02F0: F4 8D 9A 8E 00 00 00 9D 00 00 00 00 50 43 49 52  // ............PCIR
    0300: 02 10 7F 68 00 00 18 00 00 00 00 03 79 00 01 10  // ...h........y...
    0310: 00 00 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    0320: 00 80 24 9C 26 00 00 00 00 00 00 00 00 00 00 00  // ..$.&...........
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66  // ...fPfQfRfSfUfVf
    0360: 57 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8 D9 28 0B  // W.......... ..(.
    0370: C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A  // .u....f_f^f]f[fZ
    0380: 66 59 66 58 07 1F CB E8 F3 29 E8 C5 27 32 D2 8D  // fYfX.....)..'2..
    0390: 3E 6A 02 89 55 16 E8 7D 0E E8 3D 0E E8 97 0F E8  // >j..U..}..=.....
    03A0: AD 02 E8 D9 24 0B C0 74 0C E8 39 00 E8 AF 4F E8  // ....$..t..9...O.
    03B0: 3C 0E E8 04 50 E8 A9 00 B4 80 E8 BF 27 8A C7 66  // <...P.......'..f
    03C0: C1 E0 10 8A E3 B0 20 66 A3 A8 8A E8 AC 02 E8 4F  // ...... f.......O
    03D0: 0E E8 CE 29 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ...)f_f^f]f[fZfY
    03E0: 66 58 07 1F CB 2E 8B 1E 08 00 83 3E F5 03 00 75  // fX.........>...u
    03F0: 04 89 1E F3 03 1E 2E 8E 1E EB 03 9C FA 66 C7 06  // .............f..
    0400: 08 01 65 F0 00 F0 C7 06 40 00 16 04 89 1E 42 00  // ..e.....@.....B.
    0410: C7 06 B4 01 16 04 89 1E B6 01 C7 06 7C 00 8A 58  // ............|..X
    0420: 89 1E 7E 00 C7 06 0C 01 9D 5C 89 1E 0E 01 C7 06  // ..~......\......
    0430: A8 04 BC 52 89 1E AA 04 2E 8E 1E F3 03 8B C3 A3  // ...R............
    0440: BE 52 A3 CE 52 A3 E0 52 9D 1F C3 50 4D 49 44 16  // .R..R..R...PMID.
    0450: 04 EE 42 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00  // ..B.............
    0460: 00 BB 00 00 E8 A2 0D 66 C1 E8 10 A3 9A 02 BB 0B  // .......f........
    0470: 00 E8 95 0D 8D 3E 6A 02 66 89 45 18 C3 00 E8 FC  // .....>j.f.E.....
    0480: 28 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05  // (...u..=.....Ou.
    0490: E8 E9 3D EB 07 E8 3E 43 EB 02 B4 01 E8 03 29 CF  // ..=...>C......).
    04A0: E8 DA 28 E8 20 00 EB 02 B4 01 E8 F5 28 CB E8 CC  // ..(. .......(...
    04B0: 28 80 FC 4F 75 05 E8 C3 3D EB 07 E8 18 43 EB 02  // (..Ou...=....C..
    04C0: B4 01 E8 DD 28 CB 1E 06 66 50 66 51 66 52 66 53  // ....(...fPfQfRfS
    04D0: 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00  // fUfVfW..<.u)....
    04E0: 66 C1 E0 10 2E A1 18 00 8D 36 62 01 8A 3C 80 EF  // f........6b..<..
    04F0: 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89  // 0.....^..F.f....
    0500: 46 00 E9 28 01 3C 05 75 18 E8 70 26 E8 43 26 2E  // F..(.<.u..p&.C&.
    0510: A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0C  // ......V..F..^...
    0520: 01 3C 06 75 32 E8 C9 0C 66 D1 E0 8B EC 89 46 14  // .<.u2...f.....F.
    0530: BB 02 00 E8 D3 0C 88 46 18 E8 BD 0C 66 89 46 0C  // .......F....f.F.
    0540: BB 09 00 E8 C3 0C 33 C0 66 89 46 00 2E 8B 16 9A  // ......3.f.F.....
    0550: 02 89 56 10 E9 D6 00 3C 0B 75 24 0A DB 75 11 B9  // ..V....<.u$..u..
    0560: 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 BD 00  // ........^..N....
    0570: 8A C7 E8 D0 00 E8 34 01 0F 84 A9 00 E9 AE 00 3C  // ......4........<
    0580: 17 75 1D E8 72 0F 74 06 E8 E3 0A E8 4A 14 E8 22  // .u..r.t.....J.."
    0590: 06 E8 38 0C 33 C9 8B C8 8B EC 89 4E 14 E9 8D 00  // ..8.3......N....
    05A0: 3C 18 75 45 0A FF 75 10 E8 F9 0E 8B EC 89 46 0C  // <.uE..u.......F.
    05B0: E8 6F 06 89 4E 10 EB 75 E8 3D 0F 75 68 BB 00 1C  // .o..N..u.=.uh...
    05C0: E8 76 27 66 0B C0 74 5D 23 C9 74 59 E8 11 0F BE  // .v'f..t]#.tY....
    05D0: 00 1C E8 61 0C 74 4E BE 00 1C B0 40 E8 B0 0C E8  // ...a.tN....@....
    05E0: C2 0E 8B EC 89 46 0C EB 44 3C 82 75 1A 80 FB 05  // .....F..D<.u....
    05F0: 75 15 0A FF 75 0A E8 06 0E 8B EC 89 46 14 EB 2D  // u...u.......F..-
    0600: E8 D3 0D 74 18 EB 26 3C 8E 75 12 80 FF 01 74 08  // ...t..&<.u....t.
    0610: 80 FF 02 75 08 80 C1 02 E8 2C 0E EB 10 8B EC C6  // ...u.....,......
    0620: 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B  // F.......F....2..
    0630: EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ..f.f_f^f]f[fZfY
    0640: 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8  // fX...Q.......Y..
    0650: 76 27 C3 0C 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42  // v'....PQ...C.3.B
    0660: B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8  // ...B.a.....a....
    0670: 00 E8 7F 23 E6 61 59 58 C3 00 1E 56 0E 1F 80 3E  // ...#.aYX...V...>
    0680: 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00 C1 E1  // ...v............
    0690: 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB  // ....!..3.2......
    06A0: F6 D4 FE C4 88 26 21 00 5E 1F C3 00 57 0B C0 75  // .....&!.^...W..u
    06B0: 0F E8 82 09 74 25 E8 24 00 F6 C3 04 74 F3 EB 11  // ....t%.$....t...
    06C0: 8B C8 E8 B9 21 23 C1 74 12 E8 11 00 F6 C3 04 74  // ....!#.t.......t
    06D0: 0A 5F 8D 5C 28 E8 D2 04 0B F6 C3 5F C3 50 E8 37  // ._.\(......_.P.7
    06E0: 09 E8 0B 21 E8 19 21 0A C9 74 59 0A ED 74 10 8A  // ...!..!..tY..t..
    06F0: CD B5 02 E8 80 22 B1 02 8D 9C 48 01 E8 DE 25 E8  // ....."....H...%.
    0700: 25 02 F6 C3 04 74 08 E8 4A 0A E8 7C 1F 74 35 8D  // %....t..J..|.t5.
    0710: 5C 28 E8 34 00 E8 64 14 33 C9 50 8D 9C 28 01 E8  // \(.4..d.3.P..(..
    0720: 17 26 66 0B C0 74 03 B9 00 08 58 0A C0 75 0E 8D  // .&f..t....X..u..
    0730: 5C 28 80 CD 02 E8 1A 00 74 03 80 CD 04 8D 9C 48  // \(......t......H
    0740: 01 E8 99 25 E8 E0 01 58 C3 51 B9 49 00 E8 52 22  // ...%...X.Q.I..R"
    0750: 59 C3 51 E8 1A 00 75 14 E8 9D 01 3C 01 75 0D B9  // Y.Q...u....<.u..
    0760: 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3  //  ..'.u......3.Y.
    0770: 53 E8 C5 25 66 3D 00 FF FF FF 75 0E 83 C3 04 E8  // S..%f=....u.....
    0780: B7 25 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2  // .%f=....u.[.PR2.
    0790: E8 A6 25 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83  // ..%....f........
    07A0: C3 04 E2 EC 0A D2 5A 58 C3 E8 6C 08 8D 9C 4C 01  // ......ZX..l...L.
    07B0: E8 1D 01 E8 71 01 B5 13 F6 C3 08 75 0C E8 94 09  // ....q......u....
    07C0: 8A EA 80 FD 13 75 02 B5 03 66 50 8D 9C B8 02 66  // .....u...fP....f
    07D0: 33 C0 8A C5 E8 C2 24 66 58 A9 C8 0E 74 48 E8 46  // 3.....$fX...tH.F
    07E0: 01 F6 C3 08 74 0C 8D 5C 28 E8 EB 00 75 04 E8 5D  // ....t..\(...u..]
    07F0: 00 C3 B5 02 E8 0A 01 E8 2D 01 F6 C3 04 74 17 8D  // ........-....t..
    0800: 5C 28 E8 30 01 E8 30 03 E8 12 01 80 FD 00 75 3D  // \(.0..0.......u=
    0810: B5 02 E8 FE 00 C3 8D 9C 68 01 B8 00 55 E8 D1 0E  // ........h...U...
    0820: B5 02 E8 EE 00 C3 A9 02 00 74 22 B5 04 E8 D1 00  // .........t".....
    0830: 8D 9C 68 01 56 E8 D1 22 8B F7 E8 3B 03 5E E8 7F  // ..h.V.."...;.^..
    0840: 22 E8 CF 00 8D 5C 28 E8 9F 22 E8 EB 02 C3 B5 01  // "....\(.."......
    0850: E8 AE 00 B5 02 E8 BB 00 E8 CC 00 F6 C3 04 75 0C  // ..............u.
    0860: B8 00 55 E8 8B 0E B5 02 E8 17 00 C3 E8 C6 00 B5  // ..U.............
    0870: 02 8D 5C 28 E8 6E 00 75 02 B5 01 E8 04 00 E8 B7  // ..\(.n.u........
    0880: 02 C3 8D 9C B4 02 B1 02 E8 52 24 B5 02 E8 83 00  // .........R$.....
    0890: C3 8D 9C 4C 01 E8 38 00 E8 8C 00 F6 C3 04 74 23  // ...L..8.......t#
    08A0: 8D 5C 28 E8 8F 00 E8 60 22 8D 9C 68 01 06 0E 07  // .\(....`"..h....
    08B0: B9 07 00 E8 26 21 07 E8 63 00 E8 97 08 8D 5C 28  // ....&!..c.....\(
    08C0: E8 51 22 8D 5C 28 E8 00 22 B8 02 00 E8 DA FE C3  // .Q".\(..".......
    08D0: B9 61 00 E8 CC 20 C3 53 81 C3 05 01 E8 5A 24 24  // .a... .S.....Z$$
    08E0: 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3  // .<.[....=..u.S..
    08F0: 18 E8 45 24 5B A8 01 C3 53 83 C3 12 E8 3A 24 5B  // ..E$[...S....:$[
    0900: C3 8D 9C B4 02 32 C9 E8 D3 23 C3 8D 9C B4 02 E8  // .....2...#......
    0910: 27 24 C3 8D 9C B4 02 B1 01 E8 C1 23 C3 8D 9C B4  // '$.........#....
    0920: 02 B1 01 E8 CF 23 C3 66 50 8D 9C 48 01 E8 09 24  // .....#.fP..H...$
    0930: 8A D8 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08  // ..fX.UWQ........
    0940: 00 2B D9 D1 E3 8D 58 4E E8 EE 23 E8 98 01 E2 EE  // .+....XN..#.....
    0950: 8D 5C 4B E8 E3 23 B9 04 00 8B D0 BF 5A 09 85 55  // .\K..#......Z..U
    0960: 06 74 17 66 8B 05 8D 9A F4 01 E8 2C 23 8B 45 04  // .t.f.......,#.E.
    0970: 8D 9A F8 01 E8 3A 23 83 C5 08 83 C7 08 E2 DF 8D  // .....:#.........
    0980: 7C 5E B9 04 00 33 ED 8B DF E8 AD 23 0B C0 74 09  // |^...3.....#..t.
    0990: E8 12 01 E8 4C 00 83 C5 1C 83 C7 12 E2 E9 32 ED  // ....L.........2.
    09A0: E8 70 FF 8D 5C 28 E8 4F FF 3D 01 04 75 10 83 C3  // .p..\(.O.=..u...
    09B0: 14 E8 85 23 24 70 C0 E8 04 8A E8 E8 55 FF 59 5F  // ...#$p......U.Y_
    09C0: 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00  // ]. .X.<.......<.
    09D0: 00 08 00 05 00 04 4B 00 00 01 80 02 E0 01 3C 00  // ......K.......<.
    09E0: 20 00 51 8D 1D E8 51 23 8D 9A 68 01 E8 C2 22 8D  //  .Q...Q#..h...".
    09F0: 5D 02 E8 44 23 8D 9A 6A 01 E8 89 00 8D 5D 05 E8  // ]..D#..j.....]..
    0A00: 37 23 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 2A 23 8B  // 7#..n..|..]..*#.
    0A10: C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE  // ...f............
    0A20: 04 8A EC C0 E5 06 8A FC C0 E7 04 80 E7 03 80 E4  // ................
    0A30: 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A  // ........?.......
    0A40: F4 8B C3 8D 9A 74 01 E8 67 22 8D 9A 72 01 8B C1  // .....t..g"..r...
    0A50: E8 5E 22 8D 9A 76 01 33 C0 8A C6 E8 53 22 8D 9A  // .^"..v.3....S"..
    0A60: 78 01 33 C0 8A C2 E8 48 22 8D 5D 0C E8 CA 22 8D  // x.3....H".]...".
    0A70: 9A 7A 01 E8 0F 00 8D 5D 0F E8 BD 22 8D 9A 7E 01  // .z.....]..."..~.
    0A80: E8 2E 22 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80  // .."Y.....f......
    0A90: E6 0F 8A E8 C0 ED 04 8B C1 E8 15 22 83 C3 02 8B  // ..........."....
    0AA0: C2 E8 0D 22 C3 8D 5D 11 E8 8E 22 8A E0 BA 06 00  // ..."..]...".....
    0AB0: C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C  // ...t.........$.<
    0AC0: 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01  // .u...@<.u.......
    0AD0: 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A  // t......t........
    0AE0: 80 01 E8 CC 21 C3 3C 01 74 3D 8B D0 0F B6 C6 24  // ....!.<.t=.....$
    0AF0: 3F 04 3C 8D 9A F8 01 E8 B7 21 0F B6 C2 83 C0 1F  // ?.<......!......
    0B00: C1 E0 03 8D 9A F4 01 E8 A7 21 0F B6 DE C1 EB 06  // .........!......
    0B10: C1 E3 02 2E F7 A7 C2 0A 2E F7 B7 C0 0A 8D 9A F6  // ................
    0B20: 01 E8 8D 21 83 C5 08 C3 01 00 01 00 04 00 03 00  // ...!............
    0B30: 05 00 04 00 10 00 09 00 57 66 51 8D 9C 68 01 8B  // ........WfQ..h..
    0B40: FB 8B DF E8 3D 00 0B C9 74 0B 66 8B D1 E8 4F 0E  // ....=...t.f...O.
    0B50: 83 C7 1C EB EC 66 59 5F C3 50 53 51 B9 07 00 53  // .....fY_.PSQ...S
    0B60: 8B DA E8 D4 21 83 F8 00 5B 74 09 66 C1 E3 10 8B  // ....!...[t.f....
    0B70: DA E8 43 1E 59 5B 58 C3 51 53 B9 07 00 E8 50 1E  // ..C.Y[X.QS....P.
    0B80: 5B 59 C3 66 50 53 83 C3 06 E8 AD 21 5B 8B C8 66  // [Y.fPS.....![..f
    0B90: C1 E1 10 53 83 C3 02 E8 9F 21 8B C8 5B 66 58 C3  // ...S.....!..[fX.
    0BA0: 8D 9C 48 01 32 C9 E8 34 21 C3 57 B9 20 00 E8 2B  // ..H.2..4!.W. ..+
    0BB0: 1E 5F C3 33 C9 E8 B4 1E 75 3C 66 BA 37 F1 FF FF  // ._.3....u<f.7...
    0BC0: 66 33 C0 E8 ED 05 33 C0 E8 6B 04 74 1C A9 C8 0E  // f3....3..k.t....
    0BD0: 74 F6 E8 08 FB F6 C3 04 75 05 F6 C3 18 74 E9 E8  // t.......u....t..
    0BE0: 30 00 50 E8 C3 FB 58 EB DF E8 1C 00 75 08 E8 31  // 0.P...X.....u..1
    0BF0: 00 8B C1 E8 B3 FB C3 8D 5D 28 66 C1 E3 10 8D 5C  // ........](f....\
    0C00: 28 B9 49 00 E8 B0 1D C3 66 50 E8 BF 05 8B C8 66  // (.I.....fP.....f
    0C10: 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 94 05 66  // X.fRf.....3....f
    0C20: 5A C3 50 53 52 E8 E0 FF 75 09 33 C0 E8 07 04 8B  // Z.PSR...u.3.....
    0C30: C8 EB 10 83 F9 02 74 0B E8 3C 09 80 FB 01 75 03  // ......t..<....u.
    0C40: 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF  // ...Z[X.Vf3.f....
    0C50: FF E8 5F 08 66 C1 E6 10 E8 E8 03 0B C0 74 03 E8  // .._.f........t..
    0C60: 1C 00 E8 3F 08 5E C3 66 52 66 8B D0 E8 4B 16 8D  // ...?.^.fRf...K..
    0C70: 9C 1C 03 E8 C3 20 8A C2 E8 1E 20 66 5A C3 50 51  // ..... .... fZ.PQ
    0C80: E8 95 03 50 32 C0 E8 0A 05 E8 16 03 E8 98 00 8D  // ...P2...........
    0C90: 9C 40 03 E8 A3 20 38 E8 74 0A 8A C5 E8 FA 1F B0  // .@... 8.t.......
    0CA0: 02 E8 EF 04 58 E8 CA 00 E8 A8 00 E8 8C 00 8D 9C  // ....X...........
    0CB0: 4C 01 E8 84 20 8B C8 8B D3 8D 9C 00 03 E8 79 20  // L... .........y 
    0CC0: 3B C1 74 05 B0 02 E8 CA 04 E8 8D FE 8D 9C 00 03  // ;.t.............
    0CD0: E8 C4 15 8D 9C D8 02 E8 BF 1F E8 8A FF 66 C1 CE  // .............f..
    0CE0: 10 8B FE 66 C1 CE 10 E8 95 00 E8 D1 00 E8 48 04  // ...f..........H.
    0CF0: 8A E9 8D 9C DC 02 32 C9 E8 E2 1F E8 31 04 66 25  // ......2.....1.f%
    0D00: FF 0F 00 00 59 58 66 BA FF FF FF FF 33 D0 E8 A2  // ....YXf.....3...
    0D10: 07 33 D2 C3 53 66 50 8D 9C D4 02 E8 1B 20 8A C4  // .3..SfP...... ..
    0D20: E8 76 1F 66 58 5B C3 53 66 50 8D 9C D4 02 E8 08  // .v.fX[.SfP......
    0D30: 20 8A E0 E8 63 1F 66 58 5B C3 E8 97 03 E8 52 03  //  ...c.fX[.....R.
    0D40: 8A DD E8 0A 17 8A E9 8D 9C 3C 03 32 C9 E8 8D 1F  // .........<.2....
    0D50: 0B DB C3 83 EC 08 8B EC E8 79 03 E8 34 03 E8 90  // .........y..4...
    0D60: 16 8D 9C 4C 03 E8 D1 1F 8A 46 00 E8 2B 1F 83 C4  // ...L.....F..+...
    0D70: 08 C3 8D 9C D4 02 E8 C0 1F 32 C0 E8 1B 1F C3 E8  // .........2......
    0D80: 0A 00 8D 9C D0 02 32 C9 E8 52 1F C3 B5 00 8D 1D  // ......2..R......
    0D90: E8 A6 1F 66 8B D0 8D 9C 02 03 E8 9C 1F 0B C0 74  // ...f...........t
    0DA0: 1C 51 8B C8 8D 9C 06 03 E8 8E 1F 66 C1 E0 10 8B  // .Q.........f....
    0DB0: C1 59 66 3B C2 75 04 B5 00 EB 02 B5 02 C3 E8 4F  // .Yf;.u.........O
    0DC0: 03 8D 9C 40 03 B1 03 E8 13 1F E8 50 FB 8D 9C 40  // ...@.......P...@
    0DD0: 03 B1 02 E8 07 1F E8 B9 02 80 FD 00 75 1D E8 94  // ............u...
    0DE0: 00 66 81 FA F0 D2 00 00 75 06 66 BA 78 69 00 00  // .f......u.f.xi..
    0DF0: E8 BE 00 E8 F7 00 E8 8D 03 EB 38 E8 63 03 E8 85  // ..........8.c...
    0E00: 03 66 52 E8 D9 02 0B D2 74 07 E8 3C 16 66 5A EB  // .fR.....t..<.fZ.
    0E10: 22 E8 40 03 E8 A2 18 66 5A 51 E8 75 02 80 FD 02  // ".@....fZQ.u....
    0E20: 59 75 10 B5 04 66 81 FA 74 40 00 00 76 05 B5 08  // Yu...f..t@..v...
    0E30: 66 D1 EA 8D 9C 54 03 66 8B C2 E8 5C 1E 8D 9C 40  // f....T.f...\...@
    0E40: 03 E8 F5 1E 8A E5 E8 50 1E E8 26 01 8D 9C 48 03  // .......P..&...H.
    0E50: 32 C9 E8 88 1E E8 7C 02 E8 37 02 E8 EE 15 8D 9C  // 2.....|..7......
    0E60: 58 03 32 C9 E8 76 1E E8 6A 02 E8 25 02 8D 9C 60  // X.2..v..j..%...`
    0E70: 03 E8 9B 15 C3 53 8D 9C 29 01 E8 BC 1E 66 33 D2  // .....S..)....f3.
    0E80: 0A C0 75 05 BA 48 3F 5B C3 8A D0 66 B8 8C 0A 00  // ..u..H?[...f....
    0E90: 00 66 F7 E2 66 8B F8 E8 BA 02 E8 EC 17 74 0D E8  // .f..f........t..
    0EA0: 32 02 B3 00 E8 D7 14 66 3B D7 76 03 66 8B D7 5B  // 2......f;.v.f..[
    0EB0: C3 B7 01 53 8D 9C 42 03 E8 7E 1E 8A C8 5B 66 52  // ...S..B..~...[fR
    0EC0: E8 83 00 E8 9B 02 66 3B D1 66 5A 76 09 D0 E7 E8  // ......f;.fZv....
    0ED0: 07 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A 01 E8 58  // ..8.r....S..*..X
    0EE0: 1E 24 0F 8A E8 0A ED 75 02 B5 01 5B C3 51 83 EC  // .$.....u...[.Q..
    0EF0: 08 8B EC 66 C7 46 00 48 3F 78 69 66 C7 46 04 F0  // ...f.F.H?xif.F..
    0F00: D2 00 00 E8 D9 01 0B D2 74 03 E8 52 15 8A FD 53  // ........t..R...S
    0F10: 8D 9C 42 03 E8 22 1E 8A C8 5B E8 58 FF 66 33 C0  // ..B.."...[.X.f3.
    0F20: 8B 46 00 66 3B C2 73 19 66 8B D0 E8 18 00 E8 30  // .F.f;.s.f......0
    0F30: 02 66 3B D1 72 05 83 C5 02 EB D4 66 33 D2 8B 56  // .f;.r......f3..V
    0F40: 00 83 C4 08 59 C3 66 52 52 32 ED 83 C1 02 B8 06  // ....Y.fRR2......
    0F50: 00 F7 E1 66 33 C9 8B C8 5A 51 66 33 C0 8B C2 8A  // ...f3...ZQf3....
    0F60: CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66  // .f..f...Yf..f..f
    0F70: 5A C3 E8 6A 01 0B D2 74 0B E8 16 00 0A ED 75 11  // Z..j...t......u.
    0F80: E8 50 14 C3 B5 00 E8 CB 01 E8 F9 16 75 03 E8 01  // .P..........u...
    0F90: 00 C3 B5 00 8D 9C 31 01 E8 9E 1D A8 01 74 02 B5  // ......1......t..
    0FA0: 01 C3 53 E8 39 01 66 C1 E2 10 E8 27 01 8D 9C B8  // ..S.9.f....'....
    0FB0: 02 E8 85 1D 8A E8 E8 F7 13 8A EB 5B C3 57 53 53  // ...........[.WSS
    0FC0: E8 DF FF E8 0E 01 5B E8 55 14 74 49 80 FD 00 75  // ......[.U.tI...u
    0FD0: 24 53 E8 A0 FE E8 45 F9 8A CD E8 FC FE 8A FD E8  // $S....E.........
    0FE0: 64 FF 5B E8 53 1D 66 25 FF FF 00 00 66 3B C8 73  // d.[.S.f%....f;.s
    0FF0: 21 32 DB EB 20 80 FD 02 75 18 53 E8 56 01 E8 95  // !2.. ...u.S.V...
    1000: 16 5B 74 0E 8D 1F E8 30 1D 3D 74 40 76 04 32 DB  // .[t....0.=t@v.2.
    1010: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 60 18 23 F0  // .....[_.S...`.#.
    1020: 74 09 8B C6 E8 FF 16 8B F3 0B DB 5B C3 51 E8 F1  // t..........[.Q..
    1030: FB E8 0F 00 59 C3 51 50 E8 43 18 8B C8 58 E8 02  // ....Y.QP.C...X..
    1040: 00 59 C3 57 53 E8 74 18 0B C0 74 09 8B 1D 83 C7  // .Y.WS.t...t.....
    1050: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
    1060: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
    1070: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB 00 E8 22 19  // ...t..........".
    1080: 83 C6 08 E8 A8 17 EB E8 BB F0 16 B8 5A A5 E8 20  // ............Z.. 
    1090: 1C C3 53 66 50 8D 9C 40 03 E8 9D 1C 8A E8 66 58  // ..SfP..@......fX
    10A0: 5B C3 8D 9C 69 03 E8 90 1C C3 8D 9C 64 03 E8 88  // [...i.......d...
    10B0: 1C 0B C0 C3 53 66 50 8D 9C D4 02 E8 7B 1C 8A C8  // ....SfP.....{...
    10C0: 66 58 5B C3 53 66 50 8D 9C D5 02 E8 6B 1C 8A C8  // fX[.SfP.....k...
    10D0: 66 58 5B C3 53 8D 5C 14 E8 5E 1C 8B D0 5B C3 53  // fX[.S.\..^...[.S
    10E0: 66 50 8D 5C 16 E8 51 1C 8B D0 66 58 5B C3 53 66  // fP.\..Q...fX[.Sf
    10F0: 50 8D 9C 50 03 E8 41 1C 66 8B D0 66 58 5B C3 53  // P..P..A.f..fX[.S
    1100: 66 50 8D 9C 54 03 E8 30 1C 66 8B D0 66 58 5B C3  // fP..T..0.f..fX[.
    1110: 53 66 50 8D 5C 10 E8 20 1C 8B C8 66 58 5B C3 66  // SfP.\.. ...fX[.f
    1120: 50 53 8D 9C 41 03 E8 10 1C 5B 8A D8 66 58 C3 53  // PS..A....[..fX.S
    1130: 8D 5C 08 E8 03 1C 5B C3 53 50 8D 9C 4C 03 E8 F8  // .\....[.SP..L...
    1140: 1B 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 EA 1B 8A  // ...X[.SP..M.....
    1150: C8 58 5B C3 53 50 8D 5C 0C E8 DD 1B 8B D0 58 5B  // .X[.SP.\......X[
    1160: C3 53 66 50 8D 9C 00 03 E8 CE 1B 66 33 D2 8B D0  // .SfP.......f3...
    1170: 66 58 5B C3 8D 5C 04 E8 BF 1B C3 51 8D 5C 04 32  // fX[..\.....Q.\.2
    1180: C9 E8 59 1B 59 C3 8D 9C 50 03 E8 AC 1B 8B C2 E8  // ..Y.Y...P.......
    1190: 07 1B C3 53 51 8A E8 E8 DA FF 24 FD 0A E8 E8 DA  // ...SQ.....$.....
    11A0: FF 59 5B C3 66 50 8D 9C D8 02 E8 8C 1B 66 8B D0  // .Y[.fP.......f..
    11B0: 66 58 C3 53 66 50 51 66 8B C8 BB 00 00 E8 47 15  // fX.SfPQf......G.
    11C0: 23 C2 0B C1 E8 49 15 59 66 58 5B C3 BB 00 00 E8  // #....I.YfX[.....
    11D0: 35 15 66 25 CA 0E 00 00 C3 E8 84 17 E8 4E 17 E8  // 5.f%.........N..
    11E0: 2C 17 75 09 E8 C6 18 E8 A6 16 E8 2D 17 C3 B0 01  // ,.u........-....
    11F0: C3 55 B3 01 E8 36 19 5D C3 66 53 66 BB 04 00 00  // .U...6.].fSf....
    1200: 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3 10 BB 00  // ....3.f[.Uf.....
    1210: 00 E8 19 19 5D C3 E8 40 18 BB 0A 00 E8 F1 14 C3  // ....]..@........
    1220: BB 0A 00 E8 E1 14 66 8B C8 E8 2D 18 BB 0A 00 66  // ......f...-....f
    1230: 2B C1 E8 DB 14 C3 E8 29 00 0B C9 74 22 E8 07 FA  // +......)...t"...
    1240: E8 21 07 66 51 66 8B C8 BB 07 00 E8 B9 14 66 25  // .!.fQf........f%
    1250: 00 FE 00 00 66 0B C1 E8 B6 14 66 59 0C 01 C3 32  // ....f.....fY...2
    1260: C0 C3 E8 6B 02 0B C9 75 06 E8 B6 F9 E8 71 02 51  // ...k...u.....q.Q
    1270: E8 AF F9 66 C1 E6 10 33 C0 E8 B1 FD 74 09 E8 09  // ...f...3....t...
    1280: 03 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3 A8  // .u.3...X#.f.....
    1290: 10 75 63 E8 E0 06 66 C1 E6 10 33 C0 E8 97 FD 74  // .uc...f...3....t
    12A0: 35 E8 74 FD 50 51 8B C8 E8 F9 01 85 C1 59 58 74  // 5.t.PQ.......YXt
    12B0: 0D 50 E8 BF FE 24 03 3C 03 58 75 E0 EB 0C 50 E8  // .P...$.<.Xu...P.
    12C0: B2 FE A8 01 58 74 D5 E8 5D FA 50 E8 CA 07 58 B5  // ....Xt..].P...X.
    12D0: 00 E8 A7 FE EB C6 E8 CB 01 E8 3C FD E8 34 01 B1  // ..........<..4..
    12E0: 00 E8 3E 07 66 C1 EE 10 E8 84 06 A8 20 75 42 A8  // ..>.f....... uB.
    12F0: 40 75 03 E8 4B 0D E8 6B 06 0A C0 75 07 32 C9 B5  // @u..K..k...u.2..
    1300: 01 E8 C1 0D E8 9D 01 E8 0E FD E8 47 FE E8 79 13  // ...........G..y.
    1310: 75 14 E8 62 02 0A DB 74 0D E8 0B FA E8 79 07 B5  // u..b...t.....y..
    1320: 00 E8 57 FE EB 08 E8 51 07 B5 01 E8 4D FE E8 E6  // ..W....Q....M...
    1330: 00 C3 E8 49 15 C3 E8 35 FD E8 9C 06 33 C9 E8 9F  // ...I...5....3...
    1340: 01 66 33 D2 66 33 C0 E8 69 FE E8 52 00 B1 FF E8  // .f3.f3..i..R....
    1350: 84 00 33 C0 E8 DF FC 74 0A E8 BC FC 50 E8 D1 07  // ..3....t....P...
    1360: 58 EB F1 32 C9 E8 C4 01 E8 13 15 0B C0 C3 E8 FD  // X..2............
    1370: FC E8 64 06 66 33 C0 66 BA 00 F0 FF FF E8 33 01  // ..d.f3.f......3.
    1380: 51 B1 01 E8 8C 01 59 33 C0 E8 AA FC 74 0A E8 87  // Q.....Y3....t...
    1390: FC 50 E8 67 07 58 EB F1 E8 B6 0C E8 15 F8 C3 B8  // .P.g.X..........
    13A0: 02 00 E8 73 FC 74 2E B1 07 E8 34 11 B8 02 00 E8  // ...s.t....4.....
    13B0: 2B F3 F6 C3 04 75 12 E8 4F 17 83 3D 00 75 0A E8  // +....u..O..=.u..
    13C0: BC 14 83 E0 FD E8 BF 14 C3 66 B8 02 00 00 00 E8  // .........f......
    13D0: E1 FD E8 BC F4 C3 E8 40 13 74 23 38 E1 76 04 8A  // .......@.t#8.v..
    13E0: CC EB 06 38 C1 73 02 8A C8 BB 02 00 E8 18 13 8A  // ...8.s..........
    13F0: E1 E8 1C 13 B1 04 E8 E7 10 0C 01 C3 0C 01 C3 51  // ...............Q
    1400: E8 16 13 74 0C 8A CC BB 02 00 E8 FA 12 8A C4 8A  // ...t............
    1410: E1 59 C3 E8 EE 05 C3 E8 F9 05 C3 E8 4E 16 75 18  // .Y..........N.u.
    1420: E8 81 00 E8 F2 FB 80 F9 01 75 0E 51 E8 4B 06 B5  // .........u.Q.K..
    1430: 01 E8 47 FD 59 E8 DF FF C3 E8 D7 FF 51 E8 BC 06  // ..G.Y.......Q...
    1440: B5 00 E8 36 FD 59 C3 B8 02 00 E8 CB FB 74 03 E8  // ...6.Y.......t..
    1450: 8E 10 C3 E8 AD 04 3B C1 7C 3A 8B C1 E8 ED 04 E8  // ......;.|:......
    1460: 26 0E 8B C8 51 E8 1D 05 E8 E1 04 59 E8 19 0E 3B  // &...Q......Y...;
    1470: C8 72 02 8B C1 8D 5C 04 E8 36 18 32 C9 B5 0F E8  // .r....\..6.2....
    1480: 07 0C E8 14 15 FE C1 38 C1 72 F2 8D 5C 04 E8 A8  // .......8.r..\...
    1490: 18 0B C0 C3 33 C0 C3 BB 00 18 33 C0 8A C2 C1 E0  // ....3.....3.....
    14A0: 02 03 D8 C3 53 BB 03 00 E8 5C 12 66 25 FF 0F 00  // ....S....\.f%...
    14B0: 00 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 46  // .[.SfPfQf......F
    14C0: 12 66 23 C2 66 0B C1 E8 46 12 66 59 66 58 5B C3  // .f#.f...F.fYfX[.
    14D0: 66 50 BB 05 00 E8 2F 12 25 FF 0F 8B C8 66 58 C3  // fP..../.%....fX.
    14E0: E8 9B 13 23 C8 66 50 BB 05 00 E8 1A 12 25 00 F0  // ...#.fP......%..
    14F0: 0B C1 E8 1B 12 66 58 C3 66 50 53 BB 06 00 E8 06  // .....fX.fPS.....
    1500: 12 A8 10 75 09 BB F0 16 E8 2E 18 3D 5A A5 5B 66  // ...u.......=Z.[f
    1510: 58 C3 66 50 53 BB 06 00 E8 EC 11 80 F1 01 C0 E1  // X.fPS...........
    1520: 04 24 EF 0A C1 E8 E8 11 5B 66 58 C3 53 66 50 BB  // .$......[fX.SfP.
    1530: F8 16 E8 04 18 8A C1 E8 5F 17 66 58 5B C3 53 BB  // ........_.fX[.S.
    1540: F8 16 E8 F4 17 83 E0 01 5B C3 53 66 50 BB 07 00  // ........[.SfP...
    1550: E8 B4 11 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3  // ......fX..t...[.
    1560: 53 BB 07 00 E8 A0 11 80 E4 FE 80 FD 06 74 03 80  // S............t..
    1570: CC 01 E8 9B 11 5B C3 66 50 BB 06 00 E8 88 11 24  // .....[.fP......$
    1580: 40 C0 E8 06 8A D8 66 58 C3 C3 50 66 51 E8 88 FA  // @.....fX..PfQ...
    1590: 83 EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC  // .....f3.f.F.3...
    15A0: 68 01 8D 1D E8 92 17 0B C0 74 1F 8B DF B0 00 E8  // h........t......
    15B0: 0F 01 74 11 8B DF E8 CA F5 66 3B 4E 00 72 06 8B  // ..t......f;N.r..
    15C0: D7 66 89 4E 00 83 C7 1C EB D8 0B D2 74 0A 8D 9C  // .f.N........t...
    15D0: 4C 01 E8 84 F5 E9 88 00 66 33 C0 66 89 46 00 8D  // L.......f3.f.F..
    15E0: BC F4 01 33 D2 8D 1D E8 4F 17 0B C0 74 58 66 50  // ...3....O...tXfP
    15F0: E8 18 F3 3C 01 66 58 74 05 3D 40 06 73 43 66 52  // ...<.fXt.=@.sCfR
    1600: 66 8B D0 8D 5D 04 E8 30 17 E8 5D 00 8B CA 66 5A  // f...]..0..]...fZ
    1610: 74 2F 56 8D 9C 4C 01 8B F1 E8 5C F5 5E B0 00 E8  // t/V..L....\.^...
    1620: 9F 00 74 1D 8D 1D E8 10 17 8B D9 8B 47 06 66 C1  // ..t.........G.f.
    1630: E0 10 8B 47 02 66 3B 46 00 72 06 8B D1 66 89 46  // ...G.f;F.r...f.F
    1640: 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C 4C 01 8B  // ........t.V..L..
    1650: F2 E8 24 F5 5E 53 8D 9C 62 01 33 C0 E8 52 16 5B  // ..$.^S..b.3..R.[
    1660: 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8 6B 12 3B  // .....fYX.WSQ.k.;
    1670: 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D  // U.u.f.....f...;]
    1680: 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2  // .u...t.:E.t.....
    1690: DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3 51 66 52  // .3.......Y[_.QfR
    16A0: E8 37 12 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B 74  // .7.:e.u...t.:E.t
    16B0: 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66 5A 59 C3  // ......3.....fZY.
    16C0: C3 66 51 66 52 53 53 66 C1 CE 10 8B DE 66 C1 CE  // .fQfRSSf.....f..
    16D0: 10 E8 65 16 5B 66 8B D0 E8 A8 F4 3B CA 72 0A 66  // ..e.[f.....;.r.f
    16E0: 3B CA 72 05 E8 D6 F8 75 02 32 C0 5B 66 5A 66 59  // ;.r....u.2.[fZfY
    16F0: C3 56 57 E8 A7 FF 8B F7 E8 7D F4 5F 5E C3 66 50  // .VW......}._^.fP
    1700: 53 66 51 52 57 56 51 8B DE B9 08 00 E8 93 12 59  // SfQRWVQ........Y
    1710: 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 7B 15 F6 C2  // .\...f......{...
    1720: 03 75 24 8B C1 24 7F BF E1 17 80 3D FF 0F 84 0F  // .u$..$.....=....
    1730: 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05 02 00 E9  // .:.u.f.E.f......
    1740: 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B C1 E8 70  // ..........t%...p
    1750: 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0 75 12 8D  // .....3.......u..
    1760: 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8 2A 15 EB  // \.f%....f....*..
    1770: B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA  // ................
    1780: 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25 80 EC 70  // .....pr*..us%..p
    1790: 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8 72 05 33  // ..2.P.0...X8.r.3
    17A0: C0 E9 9C 00 E8 28 02 E8 8F 15 0B C0 0F 84 90 00  // .....(..........
    17B0: EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C 16 8B 05  // ..2.........\...
    17C0: E8 EE 14 8B 45 06 66 C1 E0 10 8B 45 02 50 E8 B7  // ....E.f....E.P..
    17D0: 0A 66 C1 E1 10 8B C8 58 8D 1C E8 BC 14 66 50 8D  // .f.....X.....fP.
    17E0: 5C 04 66 8B C1 E8 B1 14 66 58 66 C1 E8 10 66 81  // \.f.....fXf...f.
    17F0: E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06 E8 39 15  // .....f..fP.\..9.
    1800: 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8  // ..fXf..f...@.\..
    1810: 9F 14 BF 41 18 83 F9 01 74 11 BF 49 18 81 F9 01  // ...A....t..I....
    1820: 01 74 08 BF 51 18 83 F9 02 75 15 8D 5C 0C 66 8B  // .t..Q....u..\.f.
    1830: 05 E8 65 14 8D 5C 10 66 8B 45 04 E8 5B 14 0B DB  // ..e..\.f.E..[...
    1840: 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90 01 01 40  // ^_ZfY[fX..@....@
    1850: 01 90 01 02 80 02 90 01 03 80 02 90 01 04 40 01  // ..............@.
    1860: 90 01 05 40 01 90 01 06 80 02 90 01 07 D0 02 5E  // ...@...........^
    1870: 01 0D 40 01 90 01 0E 80 02 90 01 0F 80 02 5E 01  // ..@...........^.
    1880: 10 80 02 5E 01 11 80 02 E0 01 12 80 02 E0 01 13  // ...^............
    1890: 80 02 90 01 23 20 04 90 01 32 20 04 B0 02 33 20  // ....# ...2 ...3 
    18A0: 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05 05 00 00  // ...b............
    18B0: 00 05 0B 06 05 05 00 00 00 08 10 08 08 08 00 00  // ................
    18C0: 00 56 E8 E9 11 80 E4 01 3B 04 74 09 83 C6 04 E2  // .V......;.t.....
    18D0: F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53 50 E8  // .3....D...^.WSP.
    18E0: CC 11 83 E9 0A E8 E0 00 83 F8 05 76 03 B8 05 00  // ...........v....
    18F0: D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF AB 58  // ...............X
    1900: 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77 00 66 C1  // [_.fSQfR.A..w.f.
    1910: E8 10 66 0F B7 D8 66 B8 00 00 00 01 66 D3 E8 66  // ..f...f.....f..f
    1920: 33 D2 66 F7 F3 E8 60 09 66 5A 59 66 5B C3 53 66  // 3.f...`.fZYf[.Sf
    1930: 50 BB 07 00 E8 D0 0D 0A C0 66 58 5B C3 53 66 50  // P........fX[.SfP
    1940: BB 07 00 E8 C1 0D A8 01 66 58 5B C3 53 66 50 8D  // ........fX[.SfP.
    1950: 5C 06 E8 E4 13 8A C8 66 58 5B C3 51 B9 08 00 E8  // \......fX[.Q....
    1960: 55 10 59 C3 53 8D 5C 08 E8 CE 13 24 03 5B C3 8D  // U.Y.S.\....$.[..
    1970: 5C 09 E8 C4 13 C3 51 53 B1 01 8A E8 8D 5C 08 E8  // \.....QS.....\..
    1980: 5B 13 5B 59 C3 53 8D 1C E8 AE 13 5B C3 53 8D 5C  // [.[Y.S.....[.S.\
    1990: 04 E8 A5 13 5B C3 53 8D 5C 16 E8 9C 13 5B C3 53  // ....[.S.\....[.S
    19A0: 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34 00 74 16  // fR3....fZu..4.t.
    19B0: E8 15 00 40 83 F8 05 73 0D E8 DD 12 48 E8 0F 00  // ...@...s....H...
    19C0: 66 8B C2 E8 D3 12 5B C3 BB 00 1E E8 6B 13 C3 BB  // f.....[.....k...
    19D0: 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32 00 E8 C1  // ............2...
    19E0: 0F C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08 1E E8  // ..Q.....t.......
    19F0: 47 13 66 3B C2 74 07 83 C3 08 E2 F3 0B DB 59 C3  // G.f;.t........Y.
    1A00: C3 00 C3 00 BB 20 DF E8 D1 32 E8 A7 F6 B5 01 E8  // ..... ...2......
    1A10: DF 06 C3 BB 00 DF E8 C2 32 E8 98 F6 B5 00 E8 D0  // ........2.......
    1A20: 06 C3 80 F9 00 75 0A E8 75 0F 8A C8 B5 02 E8 8C  // .....u..u.......
    1A30: 08 0B F6 74 29 E8 7C F6 B5 01 E8 BB 06 56 33 F6  // ...t).|......V3.
    1A40: B5 00 E8 44 06 5E B5 01 E8 ED F6 E8 6F 08 E8 2C  // ...D.^......o..,
    1A50: 09 E8 60 F6 8D 9C 00 03 E8 A4 06 E8 ED 06 66 C1  // ..`...........f.
    1A60: CE 10 B5 01 E8 22 06 E8 05 FF A8 40 75 07 32 C0  // .....".....@u.2.
    1A70: B5 01 E8 F2 07 66 C1 CE 10 C3 E8 37 F6 B5 01 E8  // .....f.....7....
    1A80: 4A 06 B5 00 E8 71 06 E8 D4 06 B1 0F E8 DB 09 B1  // J....q..........
    1A90: 10 E8 D6 09 E8 26 00 C3 E8 61 00 E8 26 F6 B5 00  // .....&...a..&...
    1AA0: E8 29 06 B5 00 E8 50 06 E8 9B F6 E8 F1 0E 38 C1  // .)....P.......8.
    1AB0: 74 0A 80 F9 0B 74 05 B5 03 E8 01 08 C3 E8 1F F6  // t....t..........
    1AC0: 0B D2 74 0C E8 AD F6 3C 01 74 05 B1 0F E8 D8 09  // ..t....<.t......
    1AD0: B1 0C E8 7A 00 B1 01 E8 06 0A E8 B5 F5 80 FD 00  // ...z............
    1AE0: 75 0D E8 E6 01 B1 0D E8 80 09 B1 03 E8 60 00 E8  // u............`..
    1AF0: ED F5 0B D2 74 05 B1 01 E8 AD 09 C3 E8 E0 F5 0B  // ....t...........
    1B00: D2 74 05 B1 00 E8 A0 09 B1 02 E8 42 00 E8 64 F6  // .t.........B..d.
    1B10: A8 01 74 12 E8 7B F5 80 FD 00 75 0A B1 0C E8 49  // ..t..{....u....I
    1B20: 09 B0 02 E8 0D 04 B1 00 E8 B5 09 B1 0D E8 1F 00  // ................
    1B30: C3 B1 07 E8 AA 09 E8 A6 F5 0B D2 75 0C E8 14 F6  // ...........u....
    1B40: E8 42 0B 75 09 E8 49 0A C3 B1 07 E8 5A 09 C3 E8  // .B.u..I.....Z...
    1B50: 02 F6 E8 30 0B 75 24 51 E8 85 09 59 80 F9 0C 75  // ...0.u$Q...Y...u
    1B60: 1A 33 D2 56 83 C6 08 E8 59 0B 5E 0A C0 75 0C B9  // .3.V....Y.^..u..
    1B70: 0A 00 E8 7E 0E 42 83 FA 1E 75 E8 C3 56 83 C6 08  // ...~.B...u..V...
    1B80: E8 E1 0A 5E E8 58 F5 0B D2 74 03 E8 54 08 80 FD  // ...^.X...t..T...
    1B90: 01 0F 84 CC 00 80 FD 02 0F 85 ED 00 B1 0C E8 AE  // ................
    1BA0: FF 56 83 C6 08 E8 1B 0B 5E 0A C0 0F 84 DA 00 E8  // .V......^.......
    1BB0: DA 00 0A DB 0F 85 D1 00 8D 9C 35 01 E8 7A 11 A8  // ..........5..z..
    1BC0: 01 74 03 E8 7A 03 E8 16 F5 0B D2 74 00 66 33 C9  // .t..z......t.f3.
    1BD0: E8 3D F5 66 BA 50 01 40 50 66 C1 C9 10 8A C1 66  // .=.f.P.@Pf.....f
    1BE0: C1 C9 10 E8 D7 09 0F 85 9F 00 66 BA 50 01 50 4F  // ..........f.P.PO
    1BF0: 52 E8 EB F4 80 FA 22 5A 74 0D 8D 9C 2D 01 E8 38  // R....."Zt...-..8
    1C00: 11 24 06 3C 02 75 02 B6 02 8D 5C 28 66 C1 C9 10  // .$.<.u....\(f...
    1C10: 03 D9 66 C1 C9 10 E8 A4 09 75 6E 8A DF 32 FF 66  // ..f......un..2.f
    1C20: C1 C9 10 03 CB 66 C1 C9 10 66 BA 50 01 10 30 33  // .....f...f.P..03
    1C30: DB E8 89 09 75 53 66 C1 C9 10 8B C1 66 C1 C9 10  // ....uSf.....f...
    1C40: 0B C0 74 45 83 F8 10 75 0F 8D 5C 28 E8 EA 10 66  // ..tE...u..\(...f
    1C50: 0B C0 0F 85 7D FF EB 31 3D 80 00 0F 82 74 FF EB  // ....}..1=....t..
    1C60: 25 E8 AC F4 8A E9 B1 A0 BA 00 80 BF 32 00 8D 5C  // %...........2..\
    1C70: 28 E8 1E 09 80 FF 01 74 0D B1 A2 8D 5C 28 E8 11  // (......t....\(..
    1C80: 09 80 FF 01 75 03 B0 00 C3 B0 01 C3 E8 2B 00 74  // ....u........+.t
    1C90: 0C B0 01 E8 9D 02 75 21 E8 1F 00 75 1C 66 BA 0C  // ......u!...u.f..
    1CA0: 00 90 43 8D 9C 30 01 E8 13 09 66 BA 20 00 90 41  // ..C..0....f. ..A
    1CB0: 8D 9C 34 01 E8 06 09 33 DB C3 E8 53 F4 66 BA 00  // ..4....3...S.f..
    1CC0: 00 90 47 8D 9C 28 01 E8 F3 08 C3 E8 A6 F4 3C 01  // ..G..(........<.
    1CD0: 75 0E E8 ED 02 80 FD 01 75 06 B5 02 E8 12 03 C3  // u.......u.......
    1CE0: 8D 9C AC 03 B9 10 00 E8 B8 0C B0 01 E8 44 02 74  // .............D.t
    1CF0: 08 B5 04 E8 11 03 E9 19 01 B1 08 E8 6C 07 E8 66  // ............l..f
    1D00: 02 B1 09 E8 64 07 E8 AC 01 8D 9C B8 03 66 33 C0  // ....d........f3.
    1D10: E8 86 0F E8 47 01 B9 90 01 E8 CC 0C B0 01 E8 F7  // ....G...........
    1D20: 01 B5 02 E8 D5 02 E8 5B 01 E8 E7 02 E8 C7 01 B5  // .......[........
    1D30: 03 E8 C7 02 33 C9 E8 E7 00 F6 C5 01 75 2E B5 02  // ....3.......u...
    1D40: E8 B8 02 E8 07 01 F6 C5 04 74 08 B5 01 E8 B7 02  // .........t......
    1D50: E9 BF 00 8A FD 80 E7 03 E8 CF 00 80 E3 03 38 FB  // ..............8.
    1D60: 75 07 E8 33 01 0F 84 A9 00 E8 54 01 FE C1 E8 AE  // u..3......T.....
    1D70: F3 38 D9 75 C1 8D 9C AC 03 E8 BD 0F 3C 03 74 05  // .8.u........<.t.
    1D80: E8 DA 00 EB A1 8D 9C B0 03 66 33 C0 E8 0A 0F 8D  // .........f3.....
    1D90: 9C 2A 01 E8 A3 0F A8 40 74 0C B1 13 E8 CB 06 B0  // .*.....@t.......
    1DA0: 03 E8 74 01 EB 0A B1 0A E8 BF 06 B0 02 E8 68 01  // ..t...........h.
    1DB0: B5 04 E8 46 02 E8 CC 00 E8 58 02 E8 38 01 B5 05  // ...F.....X..8...
    1DC0: E8 38 02 33 C9 E8 58 00 80 FD 07 75 05 E8 73 00  // .8.3..X....u..s.
    1DD0: 75 27 51 B5 04 E8 23 02 59 F6 C5 01 75 07 B5 03  // u'Q...#.Y...u...
    1DE0: E8 24 02 EB 2D E8 65 00 8A D5 E8 D3 00 E8 5D 00  // .$..-.e.......].
    1DF0: 38 EA 75 05 E8 A1 00 74 19 FE C1 E8 21 F3 38 D9  // 8.u....t....!.8.
    1E00: 75 C3 8D 9C AC 03 E8 30 0F 3C 04 75 05 E8 4D 00  // u......0.<.u..M.
    1E10: EB A3 B0 00 E8 01 01 B1 0B E8 4E 06 E8 A3 01 C3  // ..........N.....
    1E20: 8D 9C C0 03 E8 0F 00 8A E8 C3 53 8D 9C C4 03 E8  // ..........S.....
    1E30: 04 00 5B 8A D8 C3 51 E8 FF 0E C0 E1 02 D3 E8 24  // ..[...Q........$
    1E40: 0F 59 C3 8D 9C C2 03 E8 EF 0E A8 01 C3 8D 9C B8  // .Y..............
    1E50: 03 E8 A1 0E C3 8D 9C B8 03 E8 81 0E C3 33 C9 33  // .............3.3
    1E60: D2 E8 E9 FF 38 D5 76 02 8A D5 FE C1 E8 B0 F2 38  // ....8.v........8
    1E70: D9 72 EE 33 C9 8A EA 8D 9C 5C 03 E8 5F 0E B1 0B  // .r.3.....\.._...
    1E80: E8 5D 06 C3 E8 89 F2 8D 9C B8 03 E8 AB 0E 66 BA  // .]............f.
    1E90: 03 01 80 83 E8 26 07 C3 51 53 8D 9C B0 03 E8 54  // .....&..QS.....T
    1EA0: 0E FE C5 E8 37 0E 80 FD 06 72 07 B5 02 E8 57 01  // ....7....r....W.
    1EB0: 33 C9 5B 59 C3 66 33 C0 8D 9C B0 03 E8 DA 0D C3  // 3.[Y.f3.........
    1EC0: 32 ED E8 65 FF 80 E3 0C C0 EB 02 B7 03 2A FB C0  // 2..e.........*..
    1ED0: E3 03 8A EB 80 FB 18 72 03 80 CD 20 E8 4B FF 80  // .......r... .K..
    1EE0: E3 03 38 FB 72 02 8A DF 80 FB 03 75 03 80 CD 04  // ..8.r......u....
    1EF0: 0A EB E8 60 FF C3 E8 17 F2 8D 9C C0 03 66 BA 02  // ...`.........f..
    1F00: 02 90 45 E8 B7 06 C3 E8 06 F2 66 BA 00 01 90 42  // ..E.......f....B
    1F10: 8D 9C B4 03 E8 A6 06 C3 E8 F5 F1 66 BA 02 01 80  // ...........f....
    1F20: 50 E8 99 06 C3 E8 D7 F1 8B C2 66 33 D2 B9 8C 0A  // P.........f3....
    1F30: F7 F1 C3 E8 DA F1 66 BA 00 06 80 50 E8 7E 06 C3  // ......f....P.~..
    1F40: E8 CD F1 66 BA 11 01 80 50 B0 04 E8 6F 06 C3 E8  // ...f....P...o...
    1F50: BE F1 66 BA 00 06 90 40 8D 9C C8 03 E8 5E 06 8D  // ..f....@.....^..
    1F60: 9C C8 03 E8 D3 0D C3 E8 BB FF E8 B2 F1 8A E3 80  // ................
    1F70: CC 80 50 E8 9A F1 58 66 BA 00 01 80 61 E8 3D 06  // ..P...Xf....a.=.
    1F80: 33 C9 E8 25 F1 0B C0 74 02 B5 10 8D 9C BC 03 E8  // 3..%...t........
    1F90: 4B 0D 8A C5 E8 79 F1 66 BA 07 01 80 50 E8 1D 06  // K....y.f....P...
    1FA0: E8 B1 F1 E8 E3 06 75 19 8D 9C 48 03 E8 8A 0D 0A  // ......u...H.....
    1FB0: C0 74 0E E8 5A F1 66 BA 0A 01 80 50 B0 01 E8 FC  // .t..Z.f....P....
    1FC0: 05 C3 E8 42 FF E8 2E FF E8 84 FF 3C 01 75 1C E8  // ...B.......<.u..
    1FD0: 71 FE 74 17 33 C9 E8 47 FE 80 FD 07 75 0D FE C1  // q.t.3..G....u...
    1FE0: E8 3C F1 38 D9 75 EF B5 01 EB 02 B5 00 E8 01 00  // .<.8.u..........
    1FF0: C3 8D 9C AC 03 B1 02 E8 E3 0C C3 51 8D 9C AC 03  // ...........Q....
    2000: 32 C9 E8 D8 0C 59 C3 51 8D 9C AC 03 B1 01 E8 CC  // 2....Y.Q........
    2010: 0C 59 C3 8D 9C 32 01 E8 1F 0D 24 07 75 15 B9 64  // .Y...2....$.u..d
    2020: 00 8D 9C AC 03 E8 11 0D 3C 02 74 03 B9 90 01 E8  // ........<.t.....
    2030: B6 09 C3 32 E4 B1 04 33 D2 F6 E1 8B C8 E8 B3 09  // ...2...3........
    2040: C3 51 8D 5C 14 E8 F1 0C 66 C1 E0 10 E8 58 01 59  // .Q.\....f....X.Y
    2050: C3 33 C9 E8 43 09 38 C1 73 05 B5 00 E8 74 00 B5  // .3..C.8.s....t..
    2060: 00 E8 68 00 FE C1 E8 33 09 38 C1 72 E6 B1 14 8A  // ..h....3.8.r....
    2070: E9 E8 2B 09 38 C1 74 05 B5 03 E8 40 02 FE C1 E8  // ..+.8.t....@....
    2080: 14 09 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC 0B F6  // ....8.v.........
    2090: 74 1E E8 F0 F8 66 C1 C8 10 66 89 46 00 8D 5C 04  // t....f...f.F..\.
    20A0: E8 96 0C 66 89 46 04 8D 5C 08 E8 8C 0C 88 46 0A  // ...f.F..\.....F.
    20B0: 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 2C  // .N...f......+..,
    20C0: 08 83 C4 0C C3 BB 25 00 E8 0F 00 C3 BB 23 00 E8  // ......%......#..
    20D0: 08 00 C3 BB 17 00 E8 01 00 C3 83 EC 04 8B EC 89  // ................
    20E0: 4E 00 8C D0 66 C1 E0 10 8B C4 E8 00 08 83 C4 04  // N...f...........
    20F0: C3 BB 22 00 E8 E3 FF C3 BB 2C 00 E8 DC FF C3 E8  // .."......,......
    2100: 37 0C 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC 55  // 7.f.....t@.....U
    2110: 51 B9 04 00 83 C3 02 E8 1F 0C 66 89 46 00 83 C5  // Q.........f.F...
    2120: 04 83 C3 04 E2 F1 83 C3 04 E8 0D 0C 66 C1 C8 10  // ............f...
    2130: 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10 8B  // f.F.Y].N...f....
    2140: C4 BB 31 00 E8 A6 07 83 C4 18 C3 E8 66 EF 8D 9C  // ..1.........f...
    2150: D0 02 E8 E4 0B 8A E8 BB 21 00 E8 7D FF C3 8D 9C  // ........!..}....
    2160: 3C 03 E8 D4 0B 8A F8 E8 28 EF 8A DD 53 8D 9C 42  // <.......(...S..B
    2170: 03 E8 C5 0B 8A E8 5B E8 3A EF E8 D7 EF E8 09 05  // ......[.:.......
    2180: 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01 88  // u.........N..~..
    2190: 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A 00  // ^..n...f......*.
    21A0: E8 4A 07 83 C4 04 C3 83 EC 10 8B EC 66 8B C8 66  // .J..........f..f
    21B0: 33 C0 66 89 46 04 BB 00 17 E8 DD 0A 66 B8 00 80  // 3.f.F.......f...
    21C0: 00 D0 66 89 46 0C 66 33 C0 66 89 46 08 56 E8 F7  // ..f.F.f3.f.F.V..
    21D0: 06 66 8B 44 04 66 50 66 C1 E8 16 88 46 08 66 58  // .f.D.fPf....F.fX
    21E0: 66 C1 E0 0A 66 05 00 17 00 00 66 89 46 00 5E 8C  // f...f.....f.F.^.
    21F0: D0 66 C1 E0 10 8B C4 BB 35 00 E8 F0 06 8B EC 66  // .f......5......f
    2200: B8 00 80 00 00 66 2B C8 66 89 46 04 66 05 00 00  // .....f+.f.F.f...
    2210: 00 40 66 89 46 0C 66 33 C0 66 89 46 08 66 89 46  // .@f.F.f3.f.F.f.F
    2220: 00 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 BE 06 8B  // ...f......5.....
    2230: EC 66 8B 46 0C 66 25 FF FF 1F 00 66 01 46 04 66  // .f.F.f%....f.F.f
    2240: 3B C8 76 1F 66 2B C8 66 8B 46 04 66 3D 00 FF 01  // ;.v.f+.f.F.f=...
    2250: 00 76 06 66 B8 00 FF 01 00 66 3B C8 73 AE 66 8B  // .v.f.....f;.s.f.
    2260: C1 EB A9 83 C4 10 C3 83 EC 08 8B EC 89 4E 00 66  // .............N.f
    2270: 89 56 02 89 5E 06 8C D0 66 C1 E0 10 8B C4 BB 2D  // .V..^...f......-
    2280: 00 E8 69 06 83 C4 08 C3 3D C0 7F 76 04 B8 C0 7F  // ..i.....=..v....
    2290: C3 83 C0 3F 24 C0 C3 51 E8 9E 0A 66 33 D2 B9 0A  // ...?$..Q...f3...
    22A0: 00 F7 F1 8B C8 E8 91 0A 03 C1 66 25 FF FF 00 00  // ..........f%....
    22B0: 59 3D 10 27 73 03 B8 10 27 C3 32 D2 C3 80 FD 02  // Y=.'s...'.2.....
    22C0: 75 19 E8 DF EE 66 BB 00 08 00 00 E8 8E 00 66 33  // u....f........f3
    22D0: D2 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75 10  // .f............u.
    22E0: 66 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB 36  // f3...f3.f......6
    22F0: 51 33 D2 E8 9C ED 8A D5 66 C1 E2 10 E8 D5 ED 8A  // Q3......f.......
    2300: F2 8A D1 66 8B C2 66 0D 00 00 00 80 E8 10 EE 80  // ...f..f.........
    2310: FB 04 76 06 66 0D 00 00 00 08 E8 44 EE E8 94 ED  // ..v.f......D....
    2320: 66 33 DB 8A D9 59 83 EC 10 8B EC 66 89 46 04 66  // f3...Y.....f.F.f
    2330: 89 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00 66  // .^.f..f3.f.d...f
    2340: F7 E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10 8B  // ..f.F......f....
    2350: C4 E8 99 05 8B EC B3 01 83 C4 10 C3 83 EC 10 8B  // ................
    2360: EC 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66 C1  // .f.V.f.^......f.
    2370: E0 10 8B C4 E8 76 05 B3 01 83 C4 10 C3 C3 53 51  // .....v........SQ
    2380: 66 50 B9 A0 8C 80 FB 00 75 1C B9 78 69 E8 81 04  // fP......u..xi...
    2390: 83 E3 03 80 FB 03 75 0E E8 D1 05 66 3D 50 C3 00  // ......u....f=P..
    23A0: 00 72 03 B9 F0 D2 66 33 D2 8B D1 66 58 59 5B C3  // .r....f3...fXY[.
    23B0: 66 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13  // fR..f......u....
    23C0: 74 0E 80 FD 14 74 09 B3 01 80 FD 0E 74 02 B3 02  // t....t......t...
    23D0: 66 5A C3 B5 11 80 FA 23 74 07 80 FA 22 74 02 B5  // fZ.....#t..."t..
    23E0: 00 C3 B5 02 80 FA 23 74 07 80 FA 22 74 02 B3 01  // ......#t..."t...
    23F0: C3 32 C9 80 FD 00 75 08 C7 46 00 0B 01 B1 01 C3  // .2....u..F......
    2400: 50 33 C0 E8 6C 01 04 14 89 46 00 58 B1 01 C3 C3  // P3..l....F.X....
    2410: 8B DA B7 22 80 FE 21 74 02 B7 21 C3 0C 01 C3 E8  // ..."..!t..!.....
    2420: 17 09 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 08  // ..f.....t.S.....
    2430: 09 5B 3D E0 01 72 0F 53 83 C3 18 E8 FB 08 5B A8  // .[=..r.S......[.
    2440: 80 75 03 0C 01 C3 32 C0 C3 B5 0C C3 B5 02 C3 50  // .u....2........P
    2450: E8 1F 01 B1 03 0A C0 74 04 B1 08 02 C8 58 C3 80  // .......t.....X..
    2460: FA 22 75 05 C7 46 00 78 69 C3 E8 E8 00 80 FD FF  // ."u..F.xi.......
    2470: 74 35 83 EC 0C 8B EC 88 4E 01 88 6E 00 80 F9 0F  // t5......N..n....
    2480: 75 05 E8 24 00 EB 0F 80 F9 10 75 0A 8D 9C 48 03  // u..$......u...H.
    2490: E8 A6 08 88 46 02 8C D0 66 C1 E0 10 8B C4 BB 04  // ....F...f.......
    24A0: 00 E8 49 04 83 C4 0C C3 C3 66 53 E8 51 EC 66 8B  // ..I......fS.Q.f.
    24B0: C2 66 33 D2 66 BB 8C 0A 00 00 66 F7 F3 66 5B 8A  // .f3.f.....f..f[.
    24C0: E8 88 6E 09 8D 9C 40 03 E8 6E 08 88 46 02 88 66  // ..n...@..n..F..f
    24D0: 03 66 C1 E8 10 88 46 08 E8 13 EC 66 89 56 04 C3  // .f....F....f.V..
    24E0: 83 EC 20 8B EC 80 F9 04 75 0A 88 4E 01 32 C0 88  // .. .....u..N.2..
    24F0: 46 00 EB 4F E8 DD EB E8 78 00 88 46 00 88 4E 01  // F..O....x..F..N.
    2500: E8 51 EC 88 56 0A 80 F9 01 74 11 80 F9 0B 75 33  // .Q..V....t....u3
    2510: 8D 9C 5C 03 E8 22 08 88 46 02 EB 27 E8 F1 EB 88  // ..\.."..F..'....
    2520: 6E 08 E8 C9 EB 66 89 56 04 E8 F3 EB 88 5E 03 E8  // n....f.V.....^..
    2530: 60 EB 88 6E 02 51 E8 1C 00 8A CD B0 01 D2 E0 59  // `..n.Q.........Y
    2540: 88 46 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 9C  // .F...f......L...
    2550: 03 83 C4 20 C3 8D 9C 3C 03 E8 DD 07 32 ED 3C 03  // ... ...<....2.<.
    2560: 74 0C 3C 09 72 09 3C 0E 77 05 2C 08 8A E8 C3 B5  // t.<.r.<.w.,.....
    2570: FF C3 52 32 C0 80 EE 21 80 FA 1E 74 10 B0 02 80  // ..R2...!...t....
    2580: FA 20 74 09 B0 04 80 FA 21 74 02 B0 06 02 C6 5A  // . t.....!t.....Z
    2590: C3 C3 83 EC 08 8B EC 89 7E 00 89 5E 02 89 56 04  // ........~..^..V.
    25A0: 89 4E 06 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 3C  // .N...f......6..<
    25B0: 03 8B EC 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6  // ....^..~.....V3.
    25C0: 66 F7 C2 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0  // f......u.P3.....
    25D0: 32 F6 58 53 BB 04 1F E8 BF 06 66 8B C2 BB 00 1F  // 2.XS......f.....
    25E0: E8 B6 06 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B  // ...[f......u.3..
    25F0: D3 66 C1 E2 10 BA 00 1F 83 EC 08 8B EC 66 89 56  // .f...........f.V
    2600: 00 88 4E 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6  // ..N......F..F...
    2610: 46 06 00 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 CC  // F....f......N...
    2620: 02 8B EC 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32  // ....^..~......t2
    2630: 51 B9 90 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A  // Q..... t....u...
    2640: 00 8B C6 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8  // .....t....<.t...
    2650: 03 E8 94 03 59 8B C6 FE C4 8B F0 80 FC 06 76 98  // ....Y.........v.
    2660: 0A DB 5E C3 8D 5C 04 E8 CF 06 8B D0 B5 02 E8 14  // ..^..\..........
    2670: 00 74 11 B5 01 80 FA 13 75 0A E8 61 00 80 FA 13  // .t......u..a....
    2680: 75 02 B5 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA  // u...........t...
    2690: 0E C3 80 FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80  // .........t......
    26A0: FA 01 74 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3  // ..t........u....
    26B0: 80 FA 04 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02  // ...u..........t.
    26C0: B5 04 C3 8D 5C 09 E8 70 06 8A C8 0A C9 75 03 32  // ....\..p.....u.2
    26D0: C0 C3 B5 02 E8 9F 02 8A C5 24 02 D0 E8 C3 8D 5C  // .........$.....\
    26E0: 08 E8 55 06 8A D0 B6 01 83 EC 10 8B EC 89 56 02  // ..U...........V.
    26F0: 8C D0 66 C1 E0 10 8B C4 BB 4F 00 E8 EF 01 8B EC  // ..f......O......
    2700: 8A 56 04 83 C4 10 C3 53 83 C3 4C E8 F9 05 5B C3  // .V.....S..L...[.
    2710: 53 83 C3 4C E8 4B 05 5B C3 56 E8 96 01 8B 44 38  // S..L.K.[.V....D8
    2720: 83 7D 20 00 5E C3 52 50 0F BC D8 32 FF 80 FB 01  // .} .^.RP...2....
    2730: 75 05 BB 00 24 EB 0C FE CB B8 00 04 F7 E3 05 00  // u...$...........
    2740: 20 8B D8 58 5A C3 57 E8 56 00 74 0A 8B 5D 02 E8  //  ..XZ.W.V.t..]..
    2750: 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B  // ...._.3._.RQ..t.
    2760: 56 E8 36 01 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74  // V.6...^3..O..?.t
    2770: 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3  // .:.t.....3...YZ.
    2780: 56 51 E8 15 01 32 C9 8D 7C 08 3B 5D 04 74 0C 83  // VQ...2..|.;].t..
    2790: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    27A0: 56 51 E8 F5 00 32 C9 8D 7C 08 3B 1D 74 0C 83 C7  // VQ...2..|.;.t...
    27B0: 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56  // ...:L.r.3...Y^.V
    27C0: 51 E8 D6 00 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7  // Q...2..|.;E.t...
    27D0: 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57  // ...:L.r.3...Y^.W
    27E0: 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53  // P......]..n.X_.S
    27F0: 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3  // 2......t..O...[.
    2800: 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B  // S2......t..o...[
    2810: C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0 14  // .PW...h.u.3.....
    2820: 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50  // .]..4.t.._._X.fP
    2830: 53 51 57 8D 1C 66 25 FF FF 00 00 E8 5B 04 8B D8  // SQW..f%.....[...
    2840: E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50  // .;.#.t1.u...t*fP
    2850: 66 8B 45 04 8D 5C 0C E8 3F 04 66 33 C0 8B 05 8D  // f.E..\..?.f3....
    2860: 5C 04 E8 34 04 66 58 E8 85 FF E8 93 FF 8D 5C 08  // \..4.fX.......\.
    2870: 66 33 C0 8B C1 E8 21 04 5F 59 5B 66 58 C3 56 E8  // f3....!._Y[fX.V.
    2880: 18 00 8B 44 04 5E C3 56 E8 0F 00 89 44 04 5E C3  // ...D.^.V....D.^.
    2890: C3 BF 8A 02 8B 3D 8B 7D 0C C3 BE 8A 02 8B 34 8B  // .....=.}......4.
    28A0: 74 30 C3 1E 0E 1F BF 8A 02 8B 3D 8B 7D 0E 83 C7  // t0........=.}...
    28B0: 04 1F C3 BE 8A 02 8B 34 8B 74 10 C3 BF 8A 02 8B  // .......4.t......
    28C0: 3D 8B 7D 26 83 C7 04 C3 BE 8A 02 8B 34 8B 74 1A  // =.}&........4.t.
    28D0: C3 BE 8A 02 8B 34 8B 74 3A C3 BF 8A 02 8B 3D 8B  // .....4.t:.....=.
    28E0: 7D 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC 06  // }...............
    28F0: 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02 06  // ...F.f3..F...F..
    2900: 52 8A D3 8B C5 E8 55 16 5A 07 83 C4 06 C3 E8 80  // R.....U.Z.......
    2910: FF 66 F7 45 10 01 00 00 00 C3 50 E8 73 FF B8 01  // .f.E......P.s...
    2920: 00 09 45 10 58 C3 E8 68 FF 88 45 10 C3 66 53 83  // ..E.X..h..E..fS.
    2930: EC 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66 C1  // .H..f.^.f.N...f.
    2940: E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B E8  // ............Hf[.
    2950: 2F 01 BB 04 00 E8 AF FD 66 C1 E8 10 E8 C7 FF C3  // /.......f.......
    2960: E8 2E FF 66 8B 5D 08 66 8B 4D 0C C3 56 E8 61 FF  // ...f.].f.M..V.a.
    2970: 66 8B 44 08 5E C3 83 EC 04 8B EC 89 4E 00 8C D0  // f.D.^.......N...
    2980: 66 C1 E0 10 8B C4 BB 38 00 E8 61 FF 8B EC 8A 6E  // f......8..a....n
    2990: 02 83 C4 04 C3 C3 B0 06 C3 B0 01 C3 B0 06 C3 B0  // ................
    29A0: 08 C3 53 66 50 66 33 C0 E8 EE 02 83 C3 04 E2 F8  // ..SfPf3.........
    29B0: 66 58 5B C3 32 C0 C3 FC E8 7E 03 66 C1 CB 10 E8  // fX[.2....~.f....
    29C0: D7 02 66 C1 CB 10 66 81 C3 04 00 04 00 E2 E9 C3  // ..f...f.........
    29D0: FC 66 AD E8 C3 02 83 C3 04 E2 F6 C3 FC E8 59 03  // .f............Y.
    29E0: 66 AB 83 C3 04 E2 F6 C3 66 50 B8 1B 00 E8 10 00  // f.......fP......
    29F0: 66 58 C3 66 50 B8 BC 34 D1 E1 E8 03 00 66 58 C3  // fX.fP..4.....fX.
    2A00: 52 F7 E1 8B CA E8 4A 01 66 53 8B D9 66 C1 E3 10  // R.....J.fS..f...
    2A10: 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2 04 66 33  // ..f.......f...f3
    2A20: C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF B2 04 66  // .f.f.......f...f
    2A30: ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00 00 80  // .3.f..s.f.f.....
    2A40: 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B C1 72  // u.f.f;.s.f...;.r
    2A50: 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8 A8 02 66  // .....f[Z..B....f
    2A60: 33 D2 66 BB 1B 00 00 00 66 F7 F3 C3 66 50 53 BB  // 3.f.....f...fPS.
    2A70: 07 00 E8 92 FC 25 00 02 35 00 02 0B C0 5B 66 58  // .....%..5....[fX
    2A80: C3 B3 01 E8 A7 00 66 C1 E0 0A 66 83 E8 20 E8 37  // ......f...f.. .7
    2A90: FE 66 89 44 04 C7 44 08 20 00 C3 56 1E 0E 1F E8  // .f.D..D. ..V....
    2AA0: 26 FE 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 BE 8A  // &.f.D.f....^....
    2AB0: 02 8B 34 8B 74 1E 83 C6 04 B9 1C 00 C3 33 FF C3  // ..4.t........3..
    2AC0: 56 E8 EF FD 8A 6C 33 5E C3 56 E8 E6 FD 53 81 C3  // V....l3^.V...S..
    2AD0: 09 01 E8 64 02 8A E8 5B 53 81 C3 00 01 E8 59 02  // ...d...[S.....Y.
    2AE0: 5B 8A C5 66 89 44 34 5E C3 56 E8 C6 FD 66 8B 44  // [..f.D4^.V...f.D
    2AF0: 34 53 81 C3 00 01 E8 A0 01 5B 53 81 C3 08 01 B1  // 4S.......[S.....
    2B00: 01 8A E8 E8 D7 01 5B 5E C3 56 E8 A6 FD 8B FE 83  // ......[^.V......
    2B10: C7 04 5E C3 56 E8 9B FD 8A 44 24 80 FD 00 74 05  // ..^.V....D$...t.
    2B20: 88 6C 33 0C 02 88 44 24 5E C3 32 C0 C3 66 53 83  // .l3...D$^.2..fS.
    2B30: EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00  // ......f.....f.^.
    2B40: BB 06 00 E8 A7 FD 8B EC 66 8B 46 00 83 C4 04 66  // ........f.F....f
    2B50: 5B C3 66 50 8C C8 3D 00 C0 75 0C BA C3 03 EC 8A  // [.fP..=..u......
    2B60: F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2 20 E8  // ...t...S...... .
    2B70: D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B 1E 14  // ....[2.f.fX.....
    2B80: 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8  // ....u.Kt.C;.w...
    2B90: 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3  // ..+..........+..
    2BA0: 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9  // ;.r.u.;.w.+...+.
    2BB0: 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56  // +.....+.+.....UV
    2BC0: 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77  // +.......r.E;.r.w
    2BD0: 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B  // .;.v....Mx ....+
    2BE0: C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03  // ....r...Mx......
    2BF0: C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B  // ...s............
    2C00: C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91  // .3.^]..P...t....
    2C10: 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66  // ..t.....X.....Rf
    2C20: 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA  // P....f.......$..
    2C30: F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3  // ..f.fXZ.R...f.Z.
    2C40: 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF  // R...f.Z..1......
    2C50: E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF  // ......$.........
    2C60: 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B 5A C3  // ..RfSfP...fXf[Z.
    2C70: 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 75 01 C3 66  // f...f.......u..f
    2C80: 50 66 C1 E3 10 66 C1 EB 10 E8 0F FE 66 03 D8 66  // Pf...f......f..f
    2C90: 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04 00 66  // ......fX.RfS...f
    2CA0: 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 45 01 66 58  // [Z.fP.......E.fX
    2CB0: C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0  // .RQfSfP.........
    2CC0: E1 03 E8 8D FE E8 B7 FF E8 0F 01 66 D3 C8 58 50  // ...........f..XP
    2CD0: 66 D3 C0 E8 1D 01 66 58 66 5B 59 5A C3 66 50 51  // f.....fXf[YZ.fPQ
    2CE0: C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8  // ....S.f....f....
    2CF0: FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00 66 D3  // .YfX.fPQ....;.f.
    2D00: C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE 66 C1  // .Y..fX.._...D.f.
    2D10: E3 10 66 C1 EB 0E E8 C1 00 C3 E8 35 FE 66 C1 E3  // ..f........5.f..
    2D20: 02 E8 B6 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8  // .....RfS...f[Z..
    2D30: 20 FE E8 4A FF E8 A2 00 C3 51 66 52 8A EB 8A CB  //  ..J.....QfR....
    2D40: 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74  // ...............t
    2D50: 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66  // .f...........f.f
    2D60: 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C FF 66  // .....fZY.RfS...f
    2D70: 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66 50 55  // [Z.RfS...f[Z.fPU
    2D80: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD 2E A1  // RfP...V..V......
    2D90: D9 02 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    2DA0: 5D C3 66 50 55 52 8B EC E8 A7 FD B2 00 66 8B 46  // ].fPUR.......f.F
    2DB0: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    2DC0: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 84 FD B2 18  // .Z]fXfX.fPR.....
    2DD0: 66 ED 2E A3 D9 02 5A 66 58 C3 66 81 FB FF 00 00  // f.....ZfX.f.....
    2DE0: 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04  // .w.....f....f...
    2DF0: 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A  // f..f......w.....
    2E00: 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55  // f...f.f...f....U
    2E10: 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28  // ..SQ..&.\.&.L..(
    2E20: 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24  // ..f.Y[].SQ..&.\$
    2E30: 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26  // 3....Y[.U..SQ..&
    2E40: 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00  // .\.&.L...RVW....
    2E50: 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01  // ...N.....&.|&.E.
    2E60: 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA  // 2.. .+..........
    2E70: D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1  // .....M.2........
    2E80: D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C  // .......&!D.&!|..
    2E90: D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B  // ...&.|&.M.2.. .+
    2EA0: C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC  // ...f.F........n.
    2EB0: D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3  // .^....M.2....V..
    2EC0: 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03  // .......#F.#V..M.
    2ED0: 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09  // 2.........&.D.&.
    2EE0: 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B  // T.._^Z.U..SQRWP.
    2EF0: D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8  // .&..&.E.2.. .+..
    2F00: FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88  // .............M..
    2F10: 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1  // N..F.....N......
    2F20: D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A  // ...&.G.&....f._Z
    2F30: E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77  // ...SQRW......&.w
    2F40: 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF  // &.L.2.. .+......
    2F50: 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D  // ..........&..&.M
    2F60: 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // .2..............
    2F70: D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B  // .&!G.&!W._...SV.
    2F80: D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C  // .....&.w&.<.ts.<
    2F90: 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26  // .uX.D.2.&....uL&
    2FA0: 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 DC 8B 26 01  // ;G.uF..k......&.
    2FB0: 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A  // G&....&.w&.<.t..
    2FC0: 04 32 E4 6B F0 03 8B C3 FF 94 DA 8B 26 8B 77 26  // .2.k........&.w&
    2FD0: 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47  // ..2....D.&)G&&.G
    2FE0: 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A  // &&.G.&.w...&.w&.
    2FF0: 04 32 E4 6B F0 03 8A 84 DC 8B 26 01 47 26 E9 80  // .2.k......&.G&..
    3000: FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8  // .3.3...^[.SQRV..
    3010: 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00  // .w5&.T.&.W.&.G..
    3020: 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54  // ...&.G 3.&.G.&.T
    3030: 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80  // .....&.G/.....&.
    3040: 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26  // .4.u"&.w.&.w.u.&
    3050: D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B  // .g.&.W.&.g.&.W..
    3060: C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00  // ..y....&.G42....
    3070: 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7  // .&.G.&.W........
    3080: 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0  // .SV...w5&.D.2...
    3090: 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F  // .&.7&.4..&.G.&._
    30A0: 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8  // .&..&.\.^[.SRV..
    30B0: 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21  // ...w5..&.T...@s!
    30C0: 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26  // &.w.2....&.t...&
    30D0: 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F  // .W.&.G.&..&.D...
    30E0: 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89  // ...Au.&.G.&.W.&.
    30F0: 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47  // G.&.W..h..@u.&.G
    3100: 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80  // .&.W.&.G.&.W..Q.
    3110: FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA  // .Bu.&.G.&.G".B..
    3120: 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46  // Cu.&.G.&.G3.3..F
    3130: 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89  // u.&.W.&.G.&.W.&.
    3140: 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47  // G.....Gu.&.G.&.G
    3150: 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20  // $....Hu.&.G.&.G 
    3160: 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32  // ^Z[.SV...w5&.D.2
    3170: E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56  // .&.G.&.G...^[.SV
    3180: 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89  // ..&.w.&.t...2.&.
    3190: 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02  // G.&.G...&._.&.G.
    31A0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    31B0: 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26  // 4&.w.&.G...&._.&
    31C0: 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // .G..^[.SV..&.w.&
    31D0: 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16  // .t....t.&.G.&.w.
    31E0: 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B  // &._.&.G..^[.SRV.
    31F0: D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  // ..p...&.G.&.W...
    3200: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  // ......&.G.&.T...
    3210: E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47  // .+..J.S..&._.&.G
    3220: 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B  // .[.S..&._.&.G..[
    3230: C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0  // .SV...k...&.W 3.
    3240: 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E  // &.W.&.D.....&.G.
    3250: 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B  // 2....=..u.2.3.^[
    3260: C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26  // .&.G.2....=..t.&
    3270: 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A  // ..4.u..../.^[.&.
    3280: 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3  // G42.&.G.&.G.....
    3290: E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14  // ...^[.S.....&.G.
    32A0: C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B  // ...&..&....&..&.
    32B0: 57 02 5B C3 BA 32 AF 32 C5 32 14 33 CB 32 E3 32  // W.[..2.2.2.3.2.2
    32C0: FD 32 08 33 0E 33 53 51 56 8B D8 E8 B0 FE 8C D2  // .2.3.3SQV.......
    32D0: 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B  // ..&....u"&...@s.
    32E0: 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03  // &.w.&._....&.D..
    32F0: D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26  // .&..&.W..{.&.w.&
    3300: 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C  // .G.......uq...wl
    3310: 03 F6 2E FF A4 4C 32 26 8B 47 10 26 8B 57 12 E9  // .....L2&.G.&.W..
    3320: 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47  // T.&.G.&.W..I.&.G
    3330: 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06  // ".K&.O32....3...
    3340: D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32  // .........+.&.O32
    3350: ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ....3...........
    3360: F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05  // .....&.G.&.W....
    3370: 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2  // &.G$..&.G ..3.3.
    3380: E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18  // ...SV.......&.G.
    3390: 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14  // &.W.........&.G.
    33A0: 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2  // &.T......^[.3.3.
    33B0: C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22  // .SV.....&.w.&.w"
    33C0: 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04  // ...T.^[.S..&.G+.
    33D0: E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8  // ...&.G.&.W.[.S..
    33E0: 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47  // &.G+......S..&.G
    33F0: 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F  // +......S....5&._
    3400: 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 6A 8B 5B  // .......2.....j.[
    3410: C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .SRV..&.G,2.....
    3420: 8B C3 FF 94 86 8B 26 89 47 08 26 89 57 0A 26 8A  // ......&.G.&.W.&.
    3430: 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 9E 8B 26 89  // G-2...........&.
    3440: 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A  // G.&.W....SQV..&.
    3450: 4F 2B 32 ED 8B F1 8A 8C CE 8B E3 0A 26 D1 6F 06  // O+2.........&.o.
    3460: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    3470: 02 8B 8C AE 8B 8B B4 B0 8B 26 21 4F 04 26 21 77  // .........&!O.&!w
    3480: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C D6 8B E3 0A 26  // .&.O*2.........&
    3490: D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77  // .g.&.W...&.O.&.w
    34A0: 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56  // .&.O.&.w....SQRV
    34B0: 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // W......&.G+2....
    34C0: E6 02 26 8A 47 2A 8B F8 8A 8D D6 8B 32 ED 8B 84  // ..&.G*......2...
    34D0: AE 8B 8B 94 B0 8B E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    34E0: F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4  // ..&!G.&!W.&.G*2.
    34F0: 8B F0 8A 8C D6 8B 32 ED E3 0A 26 D1 6F 0A 26 D1  // ......2...&.o.&.
    3500: 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 AE  // _...&.G+........
    3510: 8B 8B 94 B0 8B 26 21 47 08 26 21 57 0A 26 8A 47  // .....&!G.&!W.&.G
    3520: 2A 32 E4 8B F0 8A 8C D6 8B 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3530: 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26  // .&.W...&.G.&.W.&
    3540: 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56  // .G.&.W._^ZY[.SQV
    3550: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C CE 8B E3 0A  // ..&.O+2.........
    3560: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    3570: 8B F1 C1 E6 02 8B 8C AE 8B 8B B4 B0 8B 26 21 4F  // .............&!O
    3580: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C D6  // .&!w.&.O*2......
    3590: 8B E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    35A0: 2B 32 ED 8B F1 C1 E6 02 8B 8C AE 8B 8B B4 B0 8B  // +2..............
    35B0: 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8  // &!O.&!w....QRW..
    35C0: 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32  // ....&..+.t.&.G,2
    35D0: E4 8B F0 03 F0 8B C3 FF 94 86 8B 26 89 47 08 26  // ...........&.G.&
    35E0: 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .W...&.G,2......
    35F0: C3 FF 94 92 8B 26 8A 47 2D 32 E4 8B F0 03 F0 8B  // .....&.G-2......
    3600: C3 FF 94 9E 8B 26 89 47 04 26 89 57 06 8C D2 8E  // .....&.G.&.W....
    3610: C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0  // .&..+.tJ&.G+2...
    3620: C1 E6 02 26 8A 47 2A 8B F8 8A 8D D6 8B 32 ED 8B  // ...&.G*......2..
    3630: 84 AE 8B 8B 94 B0 8B E3 06 D1 E0 D1 D2 E2 FA F7  // ................
    3640: D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD  // ...&!G.&!W......
    3650: 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    3660: EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89  // ..&.W.&.G.&.W.&.
    3670: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3680: 7A 8B 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47  // z._ZY.SQRVW..&.G
    3690: 2A 32 E4 8B F0 8A 8C D6 8B 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    36A0: 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32  // .&.W.......&.G+2
    36B0: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D D6 8B  // ......&.G*......
    36C0: 32 ED 8B 84 AE 8B 8B 94 B0 8B E3 06 D1 E0 D1 D2  // 2...............
    36D0: E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B  // ......&.G.&.W.&.
    36E0: 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56  // G.&.W.&!G.&!W..V
    36F0: FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B  // .U..QRP..&.G,2..
    3700: F0 03 F0 8B C3 FF 94 86 8B 26 89 47 08 26 89 57  // .........&.G.&.W
    3710: 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47  // .&.G+.F......&.G
    3720: 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B  // .&.W.&.O-2......
    3730: C3 FF 94 9E 8B 26 89 47 14 26 89 57 16 8B C3 E8  // .....&.G.&.W....
    3740: 44 FF 8A 46 FA 32 E4 8B F0 8A 8C CE 8B E3 0A 26  // D..F.2.........&
    3750: D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B  // .o.&._...&.W+2..
    3760: F2 C1 E6 02 8B 84 AE 8B 8B 94 B0 8B 26 21 47 14  // ............&!G.
    3770: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C D6 8B  // &!W.&.G*2.......
    3780: 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B  // 2...&.g.&.W...&.
    3790: 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A  // G.&.W.&.G.&.W.&.
    37A0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 7A 8B 8D 66  // G,2.........z..f
    37B0: FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32  // .ZY].Q...V.&.O+2
    37C0: ED 8B F1 8A 8C CE 8B E3 0A 26 D1 6F 06 26 D1 5F  // .........&.o.&._
    37D0: 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1  // ........&.O,2...
    37E0: 03 F1 8B C3 FF 94 7A 8B 59 C3 8B D8 E8 22 FC 8B  // ......z.Y...."..
    37F0: C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08  // ..U.&.G.&.w.&.G.
    3800: 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.w.&.G,2.......
    3810: FF 94 7A 8B C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28  // ..z..SV........(
    3820: FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77  // .&.G.&.w.&1G.&1w
    3830: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 7A  // .&.G,2.........z
    3840: 8B 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8  // .^[.SQV.........
    3850: FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2  // .&.O...&.g.&.W..
    3860: F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1  // ....F.&.O,2.....
    3870: 8B C3 FF 94 7A 8B 5E 59 5B C3 53 51 56 8B D8 E8  // ....z.^Y[.SQV...
    3880: 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F  // .......&.O...&.o
    3890: 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B  // .&._.....R...r..
    38A0: C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01  // ......&.G.&.W.&.
    38B0: 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32  // G.&.T......&.G,2
    38C0: E4 8B F0 03 F0 8B C3 FF 94 7A 8B 5A C3 52 8B D8  // .........z.Z.R..
    38D0: E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B  // .>....q...&.G.&.
    38E0: 57 06 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0  // W.&)G.&.T...QR..
    38F0: E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A  // ......U.&.D.&.T.
    3900: 26 8B 5C 04 26 8B 4C 06 E8 FB F2 26 89 44 0C 26  // &.\.&.L....&.D.&
    3910: 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C  // .T.ZY.R........,
    3920: FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA  // ....\.Z.QRW.....
    3930: 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C  // .....&.D.&.T.&.\
    3940: 04 26 8B 4C 06 E8 3A F2 26 89 44 0C 26 89 54 0E  // .&.L..:.&.D.&.T.
    3950: 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ....&.D.&.T.&.\.
    3960: 26 8B 4C 06 E8 1B F2 26 89 5C 10 26 89 4C 12 E9  // &.L....&.\.&.L..
    3970: 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8  // ..R.............
    3980: D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB  // ..Z.QR..........
    3990: 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06  // ....&.G.&.W.&;W.
    39A0: 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3  // u.&;G.u.&.G0.ZY.
    39B0: 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B  // ..&.G.&;G.r.u.&;
    39C0: 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A  // W.s.3......&.G0Z
    39D0: 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03  // Y.QRW..&.G,2....
    39E0: F0 8B C3 FF 94 86 8B 26 89 47 08 26 89 57 0A 8C  // .......&.G.&.W..
    39F0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8  // ...&.G+2........
    3A00: 8A 8D CE 8B 32 ED 8B 84 AE 8B 8B 94 B0 8B E3 06  // ....2...........
    3A10: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21  // ..........&!G.&!
    3A20: 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8  // W..M.U..QRW.....
    3A30: 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D CE  // &.G+2...........
    3A40: 8B 32 ED 8B 84 AE 8B 89 46 F4 8B 84 B0 8B 89 46  // .2......F......F
    3A50: F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46  // ....f..V....~..F
    3A60: F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // ..F.&.G,2.......
    3A70: FF 94 86 8B 26 89 47 08 26 89 57 0A 8B C3 E8 47  // ....&.G.&.W....G
    3A80: F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6  // .&.G.&.W......V.
    3A90: F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14 26 89  // ..&#G.&#W.&.G.&.
    3AA0: 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D  // W.&!...F.&!G....
    3AB0: 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A  // w5..&.<.s.&.O...
    3AC0: 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04  // &.g.&.W.....&.O.
    3AD0: E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08  // ..&.o.&._...&!..
    3AE0: 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26  // .F.&!G.&.W.&.G.&
    3AF0: 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03  // .W.&.G.&.G,2....
    3B00: F0 8B C3 FF 94 7A 8B 8D 66 FA 5F E9 A3 FC 52 8B  // .....z..f._...R.
    3B10: D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57  // .......4.&.G.&.W
    3B20: 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8 03 00  // .&.W.u.&.G.t....
    3B30: EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B  // .....&.G0Z.SQRV.
    3B40: D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 9E 8B 26  // .&.O-2.........&
    3B50: 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A  // .G.&.W.&.G+2....
    3B60: 8C CE 8B E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26  // .....&.o.&._...&
    3B70: 8A 47 2B 8B F0 C1 E6 02 8B 84 AE 8B 8B 94 B0 8B  // .G+.............
    3B80: 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA  // &!G.&!W....R....
    3B90: FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57  // .&.G.&.W.&.G.&.W
    3BA0: 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B  // .Z.QR.........&.
    3BB0: 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02  // w.&.t..<ZZt[&.w.
    3BC0: 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44  // &.t..<cu.&.w.&.D
    3BD0: 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3  // ....!.&.G.&.W...
    3BE0: E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26  // ...&.G.&.W.....&
    3BF0: 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57  // .W.&.G.&;G.u.&;W
    3C00: 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE  // .u.&.w.&..&.G...
    3C10: 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02  // &.G.ZY.&._.&.G..
    3C20: 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26  // ZY.RW......&.w.&
    3C30: 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00  // .t..T...u.&.G"..
    3C40: EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B  // ./...u.&.w.&.?&.
    3C50: 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3  // 4&+u.&.w"..&....
    3C60: 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47  // .....2.......&.G
    3C70: 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26  // "&._.&.G.._Z...&
    3C80: 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26  // .g/.&.w.&.t..D.&
    3C90: 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26  // .G4&._.&.G.....&
    3CA0: 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3  // .w.&.t..t.&.w ..
    3CB0: 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9  // S..&.G,2.$.&.g/.
    3CC0: C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02  // ...&.G..O...&.w.
    3CD0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    3CE0: 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02  // ......@.&._.&.G.
    3CF0: 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // ....&.w.&.t..D.2
    3D00: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04  // .&.G.&.G........
    3D10: EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..SV..&.w.&.t..D
    3D20: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    3D30: 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74  // .....SV..&.w.&.t
    3D40: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    3D50: 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02  // ......c.SV..&.w.
    3D60: 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02  // ..&._.._....&.\.
    3D70: 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02  // ^[.QR..&.w.&.D..
    3D80: 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32  // &.......&.w(.D.2
    3D90: E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28  // ........<.tO&.w(
    3DA0: 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B  // .T.2......&.G1&.
    3DB0: 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1  // w.&.4.D....2.$..
    3DC0: E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09  // ..2.$.&.g/....&.
    3DD0: 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26  // G.&.7&.G.......&
    3DE0: 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B  // ..&.G2.&.O(ZY.S.
    3DF0: D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26  // .&.G2.[.W......&
    3E00: 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E  // ..,.t.&.G,&:G0u.
    3E10: 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B  // &.w.&.t.&...&.=.
    3E20: 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B  // t...&._.&.w._.&.
    3E30: 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6  // _.&.G.._.SVW....
    3E40: 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47  // ..&..0.t.&.G0&:G
    3E50: 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26  // ,u &.w.&.t.&...&
    3E60: 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F  // .=.t...&._.&.w._
    3E70: 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56  // ^[.&._.&.G....SV
    3E80: 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3  // W......&..0.t...
    3E90: 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74  // U..SQRW..&.w.&.t
    3EA0: 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D  // ...&.G=.....&..=
    3EB0: 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C  // .s &.w.&.W=2.&.|
    3EC0: 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47  // .........&.T5&.G
    3ED0: 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02  // =..&.....2......
    3EE0: 8A 94 FB 8B 26 01 55 02 26 8B 7F 28 8A 55 01 80  // ....&.U.&..(.U..
    3EF0: E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03  // ..&.W-&..(.U....
    3F00: 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA  // ...&.W+&..(.U...
    3F10: 06 26 88 57 2A 8A 94 FA 8B 26 88 57 2C 8D 66 F8  // .&.W*....&.W,.f.
    3F20: 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6  // _ZY[].SV..&.w...
    3F30: 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0  // .tH.....t.......
    3F40: 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // .^[.SV..&.w....t
    3F50: 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55  // H.....t .......U
    3F60: 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3  // ..SQVW..@...F...
    3F70: FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89  // ....F.&.E.._....
    3F80: 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6  // ^..F........F.2.
    3F90: 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03  // .F......2....^..
    3FA0: DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6  // ..?...e..F..f...
    3FB0: 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00  // F...F...f.F.....
    3FC0: C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C  // .F....F....<....
    3FD0: 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83  // ..V...2....^....
    3FE0: 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32  // ?.tu&.E......G.2
    3FF0: E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07  // ......2.......t.
    4000: D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0  // ..3.P.......F...
    4010: 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B  // tA...&.G...2....
    4020: 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07  // ^...&.E....^.&..
    4030: 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA  // .^.&.....&.G..^.
    4040: 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA  // .v.&.w..^..^..F.
    4050: 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA  // ....F.....F...F.
    4060: 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32  // 2.........f..F.2
    4070: E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B  // ..........^...&.
    4080: 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75  // _..^..^.&._..?[u
    4090: 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B  // J.F...^.&._..^..
    40A0: 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32  // ^.&...G.2......2
    40B0: ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC  // .......^..^...t.
    40C0: 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &...G....2.$....
    40D0: C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF  // ....^.&)....F...
    40E0: FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02  // ....F......2....
    40F0: 8D 46 B8 FF 97 F8 8B E9 72 FF 83 7E F6 00 0F 85  // .F......r..~....
    4100: C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D  // ...~..t..F...2..
    4110: 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04  // f._^....SQ..&.O.
    4120: 32 ED E8 C3 E8 59 5B C3 53 51 8B D8 26 8A 4F 04  // 2....Y[.SQ..&.O.
    4130: 32 ED E8 BE E8 59 5B C3 53 8B D8 26 8A 47 04 32  // 2....Y[.S..&.G.2
    4140: E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // ...[.SQ..&.O.2..
    4150: B0 D8 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26  // ..Y[.S..fPfRfQf&
    4160: 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1  // .G.f&.W.f&.O.f..
    4170: 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58  // f&.G.f&.W.fYfZfX
    4180: 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08  // [.S..fPfRfQf&.G.
    4190: 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89  // f&.O.f..f&.G.f&.
    41A0: 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B  // W.fYfZfX[.SW..&.
    41B0: 5F 14 E8 56 EB 8B D0 66 C1 E8 10 92 5F 5B C3 53  // _..V...f...._[.S
    41C0: 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // W..&.G.&.W.....f
    41D0: C1 E3 10 8B DA C1 E3 02 E8 54 EB EB D8 53 52 57  // .........T...SRW
    41E0: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    41F0: C2 26 8B 5F 14 E8 78 EA 5F 5A 5B C3 53 52 8B D8  // .&._..x._Z[.SR..
    4200: 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
    4210: 8B 5F 26 8B 5F 01 E8 57 EA 5A 5B C3 53 52 56 8B  // ._&._..W.Z[.SRV.
    4220: F0 26 8B 5C 26 8B 5F 01 E8 E0 EA 8B D0 66 C1 E8  // .&.\&._......f..
    4230: 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51  // ..&.D.&.T.^Z[.SQ
    4240: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    4250: 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87  // .....&.G.&.W....
    4260: D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 34 EA 5F  // .f...........4._
    4270: 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50  // ZY[...f.......fP
    4280: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0  // fQfRfSfUfVfW....
    4290: 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9  // u.......<.u..7..
    42A0: 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B  // ..<.u.._....<.u.
    42B0: E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB  // ......^....<.u..
    42C0: 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C  // }<.u.......V..q<
    42D0: 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56  // .u.......^..N..V
    42E0: 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03  // ..]<.u..U<.u....
    42F0: 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75  // ...~..I<.u..A<.u
    4300: 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB  // ..e....N..~..F..
    4310: 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC  // /<.u..'<.u..Z...
    4320: 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8  // .^...<.u...<.u..
    4330: 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0  // .....^....O...2.
    4340: 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...F.f_f^f]f[fZf
    4350: 59 66 58 07 1F C3 50 1E 2E 8E 1E F3 03 8C D8 A3  // YfX...P.........
    4360: BE 52 A3 CE 52 A3 E0 52 2E 8E 1E EB 03 A3 AA 04  // .R..R..R........
    4370: 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41 00 03  // .X..01.00.VESA..
    4380: AC 02 00 00 01 00 00 00 00 00 00 00 00 01 01 10  // ................
    4390: BB 01 00 00 4C 01 00 00 0C 43 00 00 B9 3F 00 8B  // ....L....C...?..
    43A0: DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 12 43  // .....f3..f.....C
    43B0: B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18  // ."......O..G..O.
    43C0: 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 0B  // .O..O ..".......
    43D0: D5 B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3  // ..O2..VQW...f3..
    43E0: 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07  // f._Y.........E..
    43F0: C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45  // .E.@..E.@..E...E
    4400: 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84  // ...E...E..f.E>..
    4410: D7 17 8E DB E8 E2 CD 66 0B C0 0F 84 E1 00 06 1F  // .......f........
    4420: 66 89 45 28 8C C8 66 C1 E0 10 B8 CB 46 66 89 45  // f.E(..f.....Ff.E
    4430: 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E  // ..............S.
    4440: DB BE 80 1C E8 B7 D2 5B 06 1F 0F 84 B1 00 53 E8  // .......[......S.
    4450: 33 D5 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 D8  // 3.f.E..E....\...
    4460: E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 CA E8 66  // .f.E.f.E6.\....f
    4470: 89 45 23 66 89 45 3A 8D 5C 08 E8 BC E8 0A C0 75  // .E#f.E:.\......u
    4480: 03 5B EB 7B E8 FE D4 66 C1 E8 10 3D 58 02 74 0D  // .[.{...f...=X.t.
    4490: 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17  // =^.t.w..E.....E.
    44A0: 0E 2E A1 ED 03 89 45 08 8D 5C 04 E8 8B E8 66 8B  // ......E..\....f.
    44B0: C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2  // .f......E..E2...
    44C0: E0 88 45 19 8D 5C 14 E8 6F E8 5B 3D 00 01 77 2F  // ..E..\..o.[=..w/
    44D0: 53 8B D8 B8 00 01 33 D2 F7 F3 5B FE C8 88 45 1D  // S.....3...[...E.
    44E0: 88 45 35 88 45 34 8E DB 57 53 BE 80 1C E8 72 CD  // .E5.E4..WS....r.
    44F0: 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4  // [_..u....%.2....
    4500: 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF  // ..O..^......th..
    4510: 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE  // u....!...ua.....
    4520: 20 1C E8 D9 D1 74 55 E8 3A D4 0A C0 75 0E 66 C1  //  ....tU.:...u.f.
    4530: E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 B9 CF 74  // ...........:...t
    4540: 06 E8 2A CE E8 6C C6 BE 20 1C E8 E9 CC 74 2D E8  // ..*..l.. ....t-.
    4550: A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 FD D3 BE 00  // ...,.f. ........
    4560: 1C E8 00 D4 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74  // ....f.....2....t
    4570: 02 B0 40 E8 19 CD B0 4F 32 E4 EB 04 B0 4F B4 03  // ..@....O2....O..
    4580: C3 56 06 33 C0 8E C0 BE 20 1C E8 F8 D3 8B C8 66  // .V.3.... ......f
    4590: C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04  // ........&..J....
    45A0: FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06  // ..&....&..Q..&..
    45B0: 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0  // P..&..I.b&..L...
    45C0: 26 C6 06 85 04 10 26 C7 06 0C 01 9D 5C 8C C8 26  // &.....&.....\..&
    45D0: A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40  // ....^..........@
    45E0: 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    45F0: 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9  // ................
    4600: 04 00 B4 01 BE 6E 45 AC 86 E0 EF 8A E0 FE C4 E2  // .....nE.........
    4610: F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE 72 45  // ...........2..rE
    4620: 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9  // ....B.J.........
    4630: 14 00 BA C0 03 32 E4 BE 7B 45 8A C4 EE AC EE FE  // .....2..{E......
    4640: C4 E2 F7 C3 BE 00 1C E8 1A D3 66 C1 E8 10 8B D8  // ..........f.....
    4650: E8 EA D2 75 05 E8 D6 D2 75 04 B8 4F 00 C3 B8 4F  // ...u....u..O...O
    4660: 03 C3 E8 D8 D2 74 53 BE 00 1C 80 FB 00 74 18 80  // .....tS......t..
    4670: FB 01 75 05 E8 16 D3 EB 1D 80 FB 02 75 10 8B C1  // ..u.........u...
    4680: E8 C9 D2 D3 E8 8B C8 E8 C9 CD 74 2E EB 08 80 FB  // ..........t.....
    4690: 03 75 24 E8 6D D2 E8 B3 D2 8B D8 D3 E3 50 33 C0  // .u$.m........P3.
    46A0: BA 00 01 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    46B0: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    46C0: 0A DB 75 07 8A EF E8 97 CE EB 05 E8 7C CE 8A F8  // ..u.........|...
    46D0: B0 4F 32 E4 C3 00 E8 64 D2 74 2C BE 00 1C E8 83  // .O2....d.t,.....
    46E0: D2 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    46F0: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 09 E6 D1 E8  // ......u.........
    4700: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4710: 53 66 50 81 E2 FF 00 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4720: 8B C2 BB 13 00 E8 3A E5 BB 12 00 E8 34 E5 66 58  // ......:.....4.fX
    4730: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4740: 66 56 66 57 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B  // fVfW...4.....S..
    4750: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4760: 5A 66 59 66 58 07 1F 9D CB 0E 07 BF A0 8A 2E 8B  // ZfYfX...........
    4770: 0E 9E 8A B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10  // ....O.....u.....
    4780: EB 26 80 FB 01 75 14 E8 6E CD 75 21 53 B1 01 0A  // .&...u..n.u!S...
    4790: FF 74 02 B1 00 E8 83 CC 5B EB 0D 80 FB 02 75 0D  // .t......[.....u.
    47A0: E8 9B CD 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03  // .........O2...O.
    47B0: C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 37  // .......u.......7
    47C0: CD 75 0E 33 C0 53 E8 E3 BE 5B 74 05 B0 4F 32 E4  // .u.3.S...[t..O2.
    47D0: C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06  // ..O......r..B...
    47E0: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    47F0: 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 B8 47 66 5F  // P.......X....Gf_
    4800: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E  // f^f]f[fZfYfX....
    4810: 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 B8 47 C3  // .P.......X....G.
    4820: F2 47 08 81 21 81 3E 81 E5 48 41 78 73 78 E6 78  // .G..!.>..HAxsx.x
    4830: 69 79 F7 7A FB 7A 04 7E D5 7E 58 7F BF 7F 5A 81  // iy.z.z.~.~X...Z.
    4840: BC 81 65 84 FE 4A AC 88 A6 47 A6 47 A6 47 A6 47  // ..e..J...G.G.G.G
    4850: A6 47 A6 47 7C 89 7F 6D D3 6E 2E 8E 1E EB 03 80  // .G.G|..m.n......
    4860: 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B D3 75  // &...P........;.u
    4870: 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01  // .X........0&.G..
    4880: 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01  // t.... ..uI......
    4890: 74 41 B5 0B 53 E8 70 41 0A FF 5B 75 0B 80 26 88  // tA..S.pA..[u..&.
    48A0: 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26  // .......+X......&
    48B0: 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08  // .........c......
    48C0: 00 C6 06 84 04 18 C7 06 0C 01 8A 54 8C 0E 0E 01  // ...........T....
    48D0: CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E  // .B..&.......XSP.
    48E0: 1F 33 C9 8A C8 E8 10 CC 74 06 E8 81 CA E8 C3 C2  // .3......t.......
    48F0: B2 08 BE 40 1C E8 06 CE BE 40 1C E8 38 C9 58 5B  // ...@.....@..8.X[
    4900: 0F 84 6E FF 2E 8E 1E EB 03 0E 07 E8 19 29 0E 1F  // ..n..........)..
    4910: 53 66 BB 40 1C 00 1C E8 41 D0 BE 00 1C B0 20 E8  // Sf.@....A..... .
    4920: 6D C9 5B 2E 8E 1E EB 03 0E 07 E8 22 2E E8 24 00  // m.[........"..$.
    4930: E8 2E 3D E8 D1 01 E8 8E 01 E8 B4 3E 0E 1F BE 00  // ..=........>....
    4940: 1C B0 10 E8 49 C9 E8 FD 2D E8 F5 2D C3 8B EC C6  // ....I...-..-....
    4950: 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00  // F..../........R.
    4960: E8 62 0A C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8  // .b..S.....c.....
    4970: 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80  // .0.2.&.'.C....[.
    4980: C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00  // ..2...S.........
    4990: B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0  // ..&.'<.u... .C..
    49A0: E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03  // ..[&.G..........
    49B0: EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75  // ......#...&.G..u
    49C0: 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04  // ........t.......
    49D0: 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04  // ........t....&..
    49E0: EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4  // .F.....S......2.
    49F0: B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4  // .......&...C....
    4A00: EE 32 C0 EE 1E 06 E8 4F 2D 0B ED 74 09 1F 1E B9  // .2.....O-..t....
    4A10: 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09  // ....F...[.S..7..
    4A20: 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B  // .2....&.'.C....[
    4A30: C3 BB BC 4C 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00  // ...L......}.....
    4A40: C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20  // .3.....<J.....u 
    4A50: A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74  // ...$.<.~$<.t <.t
    4A60: 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3  // .<.t..@.........
    4A70: B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6  // .@............@.
    4A80: E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05  // .......u......u.
    4A90: 81 C3 00 01 C3 81 C3 00 05 C3 BF 3E 4A BE 5F 4A  // ...........>J._J
    4AA0: 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0 00 0D  // 3..N............
    4AB0: 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05 12 80  // ............@...
    4AC0: 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB 07 7F  // ....b@.S..I.....
    4AD0: 10 32 FF D1 E3 2E 8B 87 7B 4A A2 65 04 88 26 66  // .2......{J.e..&f
    4AE0: 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E  // .[.,0(0-0)0*0.0.
    4AF0: 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83  // ?)0.8%u...].3...
    4B00: C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E EB 03 F6 06  // ..;.u...........
    4B10: 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9  // ...uI.>L..tB.I..
    4B20: 00 20 2E 8B 3E F1 03 26 F6 47 33 01 75 0E 26 F6  // . ..>..&.G3.u.&.
    4B30: 47 09 01 75 1B 2E 8B 3E EF 03 EB 14 3C 06 7E 0B  // G..u...>....<.~.
    4B40: 2E 8B 3E ED 03 26 8A 67 37 B5 40 66 33 C0 EB 06  // ..>..&.g7.@f3...
    4B50: 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26  // f. . ...f3..f..&
    4B60: 87 04 7F 07 1F C3 2E 8E 1E EB 03 80 FB 10 75 03  // ..............u.
    4B70: E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F  // .z... u......2u.
    4B80: BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00  // .....u..........
    4B90: FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80  // .......$........
    4BA0: FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00  // .5u(<.u.....@...
    4BB0: F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE  // ....@...........
    4BC0: C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB 30 74  // .u............0t
    4BD0: 03 E9 96 00 50 E8 30 3E 8A EF BA CC 03 EC 8A C8  // ....P.0>........
    4BE0: 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B  // X..u0.....u...u.
    4BF0: A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10  // ...$0<0u........
    4C00: 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E  // .$0<0u....&..o..
    4C10: 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09  // ....6<.uA.&..o..
    4C20: F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B  // ...u......$0<0t.
    4C30: B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C  // ....t........$0<
    4C40: 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80  // 0u.....t........
    4C50: E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26  // .........)<.u+.&
    4C60: 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A  // ..o.........1u..
    4C70: C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26  // .t.<.u.........&
    4C80: 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C  // ......F.....3u.<
    4C90: 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E  // .t.<.u..&.......
    4CA0: 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26  // .......4u.<.u..&
    4CB0: 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3  // .....<.u........
    4CC0: C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF  // ...6u&. .<.t....
    4CD0: 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03  // <.t.............
    4CE0: B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7  // ...B."..........
    4CF0: 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0  // .......u........
    4D00: B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E  // ....%.......^..N
    4D10: 16 C6 46 1A 12 C3 9C FA C7 06 14 00 6C 72 8C 0E  // ..F.........lr..
    4D20: 16 00 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27  // ....(........c-'
    4D30: 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // (.+.............
    4D40: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // ................
    4D50: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    4D60: 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F  // ....P........c_O
    4D70: 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // P.U.............
    4D80: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    4D90: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    4DA0: 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27  // ....(...@....c-'
    4DB0: 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // (.+.............
    4DC0: 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10  // ................
    4DD0: 11 12 13 14 15 16 17 01 00 03 00 00 00 00 00 00  // ................
    4DE0: 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F  // 0...P...@....c_O
    4DF0: 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // P.T.............
    4E00: 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17  // .(..............
    4E10: 17 17 17 17 17 17 17 01 00 01 00 00 00 00 00 00  // ................
    4E20: 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F  // ....P........._O
    4E30: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    4E40: 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10  // ](.c............
    4E50: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    4E60: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F  // ....P........._O
    4E70: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    4E80: DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08  // .P..............
    4E90: 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00  // ................
    4EA0: 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32  // @..........(..-2
    4EB0: 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28  //  $8?......... $(
    4EC0: 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F  // -28?..........%/
    4ED0: 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A  // 83.*%')*,#..#%'*
    4EE0: 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35  // ,+*))-27;9742345
    4EF0: 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A  // 51,'/0234433258:
    4F00: 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09  // =<:98899:741....
    4F10: 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13  // ................
    4F20: 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14 16 18  // ................
    4F30: 1A 19 18 17 16 17 17 17 18 15 14 11 15 15 16 17  // ................
    4F40: 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19  // ................
    4F50: 1A 18 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C  // ................
    4F60: 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B  // ................
    4F70: 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D  // ................
    4F80: 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F  // ................
    4F90: 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00  // ................
    4FA0: 00 00 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27  // ....(... ....c-'
    4FB0: 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // (.+.............
    4FC0: 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // ................
    4FD0: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    4FE0: 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F  // ....P...@....c_O
    4FF0: 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // P.T.............
    5000: 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    5010: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    5020: 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20  // ..........%(... 
    5030: 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C  // ..(,..%*..26..',
    5040: 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26  // . 49...$..,0..!&
    5050: 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32  // ...3..+0.$8=..-2
    5060: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    5070: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    5080: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    5090: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    50A0: 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F  //  $8?P........._O
    50B0: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    50C0: 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00  // ](.c............
    50D0: 08 00 00 00 18 00 00 0B 00 05 00 00 00 00 00 00  // ................
    50E0: 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F  // ....P........._O
    50F0: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    5100: 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    5110: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    5120: 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27  // ....(.........-'
    5130: 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // (.+....M........
    5140: 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ]..c...........8
    5150: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    5160: 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F  // ....P........._O
    5170: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    5180: 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    5190: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    51A0: 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27  // ....(........g-'
    51B0: 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // (.+....O........
    51C0: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // ...............8
    51D0: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    51E0: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F  // ....P........g_O
    51F0: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    5200: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    5210: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    5220: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F  // ....P........f_O
    5230: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    5240: 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10  // .(..............
    5250: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    5260: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    5270: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    5280: DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F  // .(......????????
    5290: 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00  // ???????.........
    52A0: 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    52B0: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    52C0: DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    52D0: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    52E0: 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F  // ....(... ....c_O
    52F0: 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E  // P.T....A........
    5300: 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08  // .(@.............
    5310: 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00  // .......A........
    5320: 40 05 0F FF BC 4C 00 C0 00 00 00 00 00 00 00 00  // @....L..........
    5330: 00 00 00 00 DC 52 00 C0 00 00 00 00 00 00 00 00  // .....R..........
    5340: 00 00 00 00 1A 00 7A 8A 00 C0 00 00 00 00 00 00  // ......z.........
    5350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1E E8  // ................
    5360: 10 00 2E 8E 1E EB 03 E8 FE 36 E8 D5 36 E8 76 1A  // .........6..6.v.
    5370: 1F C3 2E 8E 1E EB 03 C7 06 87 04 60 F9 C6 06 8A  // ...........`....
    5380: 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 73  // .......$.......s
    5390: 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06  // .....&....... ..
    53A0: 63 04 D4 03 0E 1F E8 79 B8 F7 C1 02 00 75 03 E8  // c......y.....u..
    53B0: 01 B8 B8 03 00 E8 57 F4 C3 1E 2E 8E 1E EB 03 0E  // ......W.........
    53C0: 07 EB 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8  // ..........t..S..
    53D0: 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F  // ..........>c..u/
    53E0: BE 3E 54 B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1  // .>T.@.3.........
    53F0: EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04  // ..........B...E.
    5400: EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26  // ...E....J......&
    5410: 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF 3C 4E  // .G+.....t1....<N
    5420: 3C 08 74 11 B9 40 00 BF BC 4F 3C 38 74 07 3C 3F  // <.t..@...O<8t.<?
    5430: 74 03 BF FC 4F 33 DB 9C FA 8A C3 EE 2E 8A 01 42  // t...O3.........B
    5440: EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C  // .....J....I<.t%<
    5450: 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 43 D4  // 8t.<?t*...3.Q.C.
    5460: B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59  // .......t.....g.Y
    5470: E2 EA EB 20 E8 2C D4 B9 10 00 33 DB E8 57 00 EB  // ... .,....3..W..
    5480: 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE  // ..@.3.Q.(...../.
    5490: C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F  // .Y..[..*.*.*.*.?
    54A0: 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A  // .?.?.?.*.?.*.?.*
    54B0: 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 2E 54 8B  // .?............T.
    54C0: FB D1 EF 83 E7 0F 2E 8A AD 2E 54 8B FB 83 E7 0F  // ..........T.....
    54D0: 2E 8A 8D 2E 54 C3 9C 8A C3 FA EE 2E 8A 05 42 EE  // ....T.........B.
    54E0: 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7  // G....G....G..J..
    54F0: 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99  // ..........~.....
    5500: 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38  // .~|.....|.....|8
    5510: 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10  // ...8|.|8...8....
    5520: 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18  // 8.8|..l.8...<~<.
    5530: 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C  // ............<ff<
    5540: 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC  // .............6x.
    5550: CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70  // .x~..~.~.......p
    5560: F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C  // .`>>66.f...<f.f<
    5570: DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06  // .............>..
    5580: 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00  // ...<~.~<..fffff.
    5590: 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38  // f...{;....<f8ll8
    55A0: CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C  // .x.........<~.~<
    55B0: 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C  // .~.<~.........~<
    55C0: 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30  // ...........0p.p0
    55D0: 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24  // ...........$f.f$
    55E0: 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10  // ....8||.....||8.
    55F0: 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00  // ...........<<...
    5600: 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C  // ..lll.....ll.l.l
    5610: 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60  // l..~.|........0`
    5620: C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00  // ..8l8v..v...0...
    5630: 00 00 18 30 60 60 60 30 18 00 60 30 18 18 18 30  // ...0```0..`0...0
    5640: 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18  // `...|.|......~..
    5650: 00 00 00 00 00 00 18 18 30 00 00 00 00 FE 00 00  // ........0.......
    5660: 00 00 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0  // .......88....0`.
    5670: 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18  // ..|.....|..x....
    5680: 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6  // ~.|...0f..|..<..
    5690: 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6  // |...<l..........
    56A0: 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18  // |.|.....|.......
    56B0: 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6  // ..|..|..|.|..~..
    56C0: 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18  // |...............
    56D0: 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE  // .0..0`0.........
    56E0: 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00  // ..`0...0`.|.....
    56F0: 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6  // ..|.....~.8l....
    5700: C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66  // ...ff|ff..<f...f
    5710: 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2  // <..lfffl........
    5720: FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6  // ...b`|``..|.....
    5730: 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18  // |.........<.....
    5740: 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC  // <.<.....p.......
    5750: C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6  // ...````b........
    5760: C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6  // ..........|.....
    5770: 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6  // |..ff|``..|.....
    5780: 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6  // |.........|..|..
    5790: 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6  // |.~Z....<.......
    57A0: 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE  // |.....l8........
    57B0: C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18  // ...l888l..fff<..
    57C0: 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60  // <.....0b..|`````
    57D0: 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C  // |..`0.....|.....
    57E0: 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // |..8l...........
    57F0: 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC  // ..00........x.|.
    5800: 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6  // ~..`|fff....|...
    5810: 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0  // |...|...~...|...
    5820: 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E  // |..60.00x...v..~
    5830: 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18  // .|.`|fff....8...
    5840: 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C  // <........x.`flxl
    5850: E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6  // ............l...
    5860: C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6  // .....ffff...|...
    5870: 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C  // |....ff|`...v..|
    5880: 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06  // .....f``....|.|.
    5890: 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC  // |.00.006........
    58A0: 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE  // v.....l8........
    58B0: 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76  // l....l8l.......v
    58C0: 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18  // .|....0d.....p..
    58D0: 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E 18 18  // ..........p.....
    58E0: 70 00 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C  // p.v.........88ll
    58F0: FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE  // ..<f.f<..x......
    5900: 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC  // v...|...|.|.x.|.
    5910: 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC  // ~...x.|.~...x.|.
    5920: 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18  // ~.88x.|.~...|.|.
    5930: 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0  // l8|.|...|...|...
    5940: 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18  // |...|...|.f.8...
    5950: 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18  // <.|.8...<...8...
    5960: 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE  // <..8l.....88.|..
    5970: C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8  // ............l.~.
    5980: 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6  // n.~.......|..|..
    5990: 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6  // |....|..|....|..
    59A0: 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE  // |.|.....v.......
    59B0: 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C  // v...<...<..8l..l
    59C0: 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E  // 8.......|...~..~
    59D0: 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C  // ..8l`.f.l..f<~.<
    59E0: 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C  // ..>c8.c>...>a<.|
    59F0: 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18  // ....x.|.~...8...
    5A00: 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC  // <....|..|.......
    5A10: 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE  // v.....ff........
    5A20: C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E  // ..>.>`gc=.>.v..~
    5A30: 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60  // .|...0`f<....|``
    5A40: 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36  // .....|.......0|6
    5A50: 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C  // .>...0l<~.....<<
    5A60: 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8  // ...6l.l6....l6l.
    5A70: 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA  // ..".".".".U.U.U.
    5A80: 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18  // U..w.w.w.w......
    5A90: 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18  // ................
    5AA0: 18 18 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36  // ..6666.666.....6
    5AB0: 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36  // 66........66...6
    5AC0: 36 36 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36  // 6666666666.....6
    5AD0: 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00  // 6666......6666..
    5AE0: 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18  // ................
    5AF0: 18 18 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00  // ................
    5B00: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18  // ................
    5B10: 18 18 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18  // ................
    5B20: 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36  // ..........666676
    5B30: 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36  // 666670?.....?076
    5B40: 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36  // 6666...........6
    5B50: 36 36 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00  // 6666707666......
    5B60: 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00  // ..66...666......
    5B70: 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18  // ..6666..........
    5B80: 18 18 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00  // .......6666666?.
    5B90: 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18  // ................
    5BA0: 18 18 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36  // ......?6666666.6
    5BB0: 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00  // 66..............
    5BC0: 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF  // ................
    5BD0: FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0  // ................
    5BE0: F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00  // ................
    5BF0: 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6  // ....f...f..x....
    5C00: CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C  // ....b```....llll
    5C10: 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8  // l...`0`....~....
    5C20: 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18  // p..ffff|...v....
    5C30: 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C  // 8..8l.l8..8l...l
    5C40: 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC  // 8.8l..ll..>`8f..
    5C50: 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C  // x...~..~...|...|
    5C60: C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6  // ..8`...`8.|.....
    5C70: C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00  // ............~...
    5C80: 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00  // ~.0...0.~...0...
    5C90: 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78  // ~..............x
    5CA0: 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC  // 0.....~....v..v.
    5CB0: 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00  // ..|..|..........
    5CC0: 00 00 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38  // ...............8
    5CD0: 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00  // ...lll....p.0...
    5CE0: 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00  // ....||||........
    5CF0: 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    5D00: 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D10: 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81  // .......~........
    5D20: 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE  // ~......|........
    5D30: 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38  // |.......l.....|8
    5D40: 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00  // .........8|.|8..
    5D50: 00 00 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10  // .........88.l.l.
    5D60: 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10  // 8.......8||...l.
    5D70: 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00  // 8..........<<<..
    5D80: 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF  // ................
    5D90: FF FF FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18  // ..........<fff<.
    5DA0: 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7  // ................
    5DB0: FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC  // ..........6x....
    5DC0: 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18  // x......<fff<.~..
    5DD0: 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8  // ..............x.
    5DE0: 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E  // p......>6>66v.f.
    5DF0: 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB  // .........~<ff<~.
    5E00: 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0  // ................
    5E10: 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E  // ..........>~.~>.
    5E20: 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C  // ........<~....~<
    5E30: 18 00 00 00 00 00 00 66 66 66 66 66 66 66 00 66  // .......fffffff.f
    5E40: 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B  // f...........{...
    5E50: 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C  // .......|..`|..|.
    5E60: C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE  // ..|.............
    5E70: FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18  // ........<~...~<.
    5E80: 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18  // ~.......<~......
    5E90: 18 00 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C  // ..............~<
    5EA0: 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00  // ................
    5EB0: 00 00 00 00 00 00 00 00 00 00 30 70 FE 70 30 00  // ..........0p.p0.
    5EC0: 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00  // ................
    5ED0: 00 00 00 00 00 00 00 00 00 00 24 66 FF 66 24 00  // ..........$f.f$.
    5EE0: 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE  // .........888||..
    5EF0: 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10  // ..........|||88.
    5F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F10: 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18  // ........<<<<....
    5F20: 18 00 00 00 00 00 36 36 36 36 14 00 00 00 00 00  // ......6666......
    5F30: 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C  // .......lll.ll.ll
    5F40: 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6  // l........|..x<..
    5F50: 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18 30 66  // |.........bf..0f
    5F60: C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC  // .......8l80v~...
    5F70: 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // v...............
    5F80: 00 00 00 00 00 00 00 0C 18 30 30 30 30 30 30 18  // .........000000.
    5F90: 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18  // .......0........
    5FA0: 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00  // 0.........l8.8l.
    5FB0: 00 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00  // ............~...
    5FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
    5FD0: 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00 00 00  // ................
    5FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    5FF0: 18 00 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0  // .............0`.
    6000: 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6  // .......|........
    6010: 7C 00 00 00 00 00 00 18 78 18 18 18 18 18 18 18  // |.......x.......
    6020: 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6  // ~......|.....0`.
    6030: FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6  // .......|...<....
    6040: 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C  // |........<l.....
    6050: 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6  // ................
    6060: 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6  // |......|........
    6070: 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30  // |...........0000
    6080: 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6  // 0......|...|....
    6090: 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6  // |......|....~...
    60A0: 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // |...............
    60B0: 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // ................
    60C0: 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18  // ..........0`.`0.
    60D0: 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00  // ................
    60E0: 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30  // ........`0.....0
    60F0: 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18  // `......|........
    6100: 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0  // .......|........
    6110: 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6  // ~......8l.......
    6120: C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66  // ........fff|ffff
    6130: FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66  // .......<f......f
    6140: 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C  // <.......lffffffl
    6150: F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66  // ........f`d|d``f
    6160: FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60  // ........f`d|d```
    6170: F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6  // .......|........
    6180: 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6  // |...............
    6190: C6 00 00 00 00 00 00 3C 18 18 18 18 18 18 18 18  // .......<........
    61A0: 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8  // <......<........
    61B0: 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6  // p...............
    61C0: C6 00 00 00 00 00 00 F0 60 60 60 60 60 60 62 66  // ........``````bf
    61D0: FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6  // ................
    61E0: C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6  // ................
    61F0: C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
    6200: 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60  // |.......ffff|```
    6210: F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6  // .......|........
    6220: 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66  // |.......fff|xlff
    6230: E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6  // .......|...p....
    6240: 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18  // |......~Z.......
    6250: 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6  // <...............
    6260: 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38  // |.............l8
    6270: 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6  // ................
    6280: C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6  // ..........l88l..
    6290: C6 00 00 00 00 00 00 66 66 66 66 66 3C 18 18 18  // .......fffff<...
    62A0: 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6  // <...........0`..
    62B0: FE 00 00 00 00 00 00 7C 60 60 60 60 60 60 60 60  // .......|````````
    62C0: 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06  // |..........`0...
    62D0: 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C  // .......|........
    62E0: 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00 00 00  // |......8l.......
    62F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6300: 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00 00 00  // ................
    6310: 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC  // ..........x.|...
    6320: 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // v.......``|fffff
    6330: FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6  // ..........|.....
    6340: 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC  // |.........|.....
    6350: 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6  // ~.........|.....
    6360: 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30  // |.......600.0000
    6370: 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76  // x.........v....v
    6380: 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // ..|.....``|fffff
    6390: E6 00 00 00 00 00 00 18 18 00 38 18 18 18 18 18  // ..........8.....
    63A0: 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C  // <...............
    63B0: CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66  // ..x.....``fflxlf
    63C0: E6 00 00 00 00 00 00 18 18 18 18 18 18 18 18 18  // ................
    63D0: 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6  // ..........l.....
    63E0: C6 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 66  // ...........fffff
    63F0: 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6  // f.........|.....
    6400: 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C  // |..........ffff|
    6410: 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C  // ``........v....|
    6420: 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60  // ...........f````
    6430: F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6  // ..........|..|..
    6440: 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30 30 36  // |......000.00006
    6450: 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC CC CC  // ................
    6460: 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38  // v.............l8
    6470: 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE  // ................
    6480: 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6  // l...........l8l.
    6490: C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76  // ...............v
    64A0: 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62  // ..|...........0b
    64B0: FE 00 00 00 00 00 00 0E 18 18 18 70 18 18 18 18  // ...........p....
    64C0: 0E 00 00 00 00 00 00 18 18 18 18 00 18 18 18 18  // ................
    64D0: 18 00 00 00 00 00 00 70 18 18 18 0E 18 18 18 18  // .......p........
    64E0: 70 00 00 00 00 00 00 76 DC 00 00 00 00 00 00 00  // p......v........
    64F0: 00 00 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE  // ...........88ll.
    6500: 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18  // .......<f....f<.
    6510: 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE  // ..8.............
    6520: 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6  // v.......0.|.....
    6530: 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC  // |.....0x..x.|...
    6540: 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC  // v.........x.|...
    6550: 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC  // v.....`0..x.|...
    6560: 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC  // v.....8l8.x.|...
    6570: 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18  // v........|....|.
    6580: 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6  // .l8...0x..|.....
    6590: 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6  // |.........|.....
    65A0: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6  // |.....0...|.....
    65B0: 7C 00 00 00 00 00 00 66 00 00 38 18 18 18 18 18  // |......f..8.....
    65C0: 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18 18 18  // <......<f.8.....
    65D0: 3C 00 00 00 00 00 00 00 00 00 38 18 18 18 18 18  // <.........8.....
    65E0: 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6  // <.......8l......
    65F0: C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6  // .....8l8.8l.....
    6600: C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60  // .......0..``|```
    6610: FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF  // .........f......
    6620: 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8  // v......~........
    6630: DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6  // ......0x..|.....
    6640: 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6  // |.........|.....
    6650: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6  // |.....0...|.....
    6660: 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE  // |.....0x........
    6670: 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE  // v.....`0........
    6680: 76 00 00 00 00 00 18 00 3C 18 18 18 18 18 18 18  // v.......<.......
    6690: 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6  // <.......|.......
    66A0: 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6  // |...............
    66B0: 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18  // |........|....|.
    66C0: 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6  // ......8l``.```f.
    66D0: 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18  // l.....ffff<.~.<.
    66E0: 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E  // .......>cc0..cc>
    66F0: 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E  // ..........>c8.c>
    6700: 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC  // ........0.x.|...
    6710: 76 00 00 00 00 00 0C 18 30 00 38 18 18 18 18 18  // v.......0.8.....
    6720: 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6  // <.......0.|.....
    6730: 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC CC DC  // |......0`.......
    6740: 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66  // v......v...fffff
    6750: E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6  // ......v.........
    6760: C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33  // ......!...3``gc3
    6770: 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66  // ......B<.;fff>.f
    6780: 3C 00 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6  // <......00.000`..
    6790: 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60 60 60  // |...........~```
    67A0: 00 00 00 00 00 00 00 00 00 00 00 00 7E 06 06 06  // ............~...
    67B0: 00 00 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36  // ......``bfl.0`.6
    67C0: 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36  // ..>...``bfl.6n.6
    67D0: 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C  // ~...........<<<<
    67E0: 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00  // ..........6l.l6.
    67F0: 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00  // ...........l6l..
    6800: 00 00 00 00 00 11 44 11 44 11 44 11 44 11 44 11  // ......D.D.D.D.D.
    6810: 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.D.U.U.U.U.U.
    6820: 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.U.w.w.w.w.w.
    6830: 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18  // w.w.w...........
    6840: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
    6850: 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    6860: 18 18 18 18 18 36 36 36 36 36 36 36 F6 36 36 36  // .....6666666.666
    6870: 36 36 36 36 36 00 00 00 00 00 00 00 FE 36 36 36  // 66666........666
    6880: 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18  // 66666...........
    6890: 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36  // .....66666...666
    68A0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    68B0: 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36  // 66666........666
    68C0: 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00  // 6666666666......
    68D0: 00 00 00 00 00 36 36 36 36 36 36 36 FE 00 00 00  // .....6666666....
    68E0: 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00  // ................
    68F0: 00 00 00 00 00 00 00 00 00 00 00 00 F8 18 18 18  // ................
    6900: 18 18 18 18 18 18 18 18 18 18 18 18 1F 00 00 00  // ................
    6910: 00 00 00 00 00 18 18 18 18 18 18 18 FF 00 00 00  // ................
    6920: 00 00 00 00 00 00 00 00 00 00 00 00 FF 18 18 18  // ................
    6930: 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 18 18  // ................
    6940: 18 18 18 18 18 00 00 00 00 00 00 00 FF 00 00 00  // ................
    6950: 00 00 00 00 00 18 18 18 18 18 18 18 FF 18 18 18  // ................
    6960: 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18  // ................
    6970: 18 18 18 18 18 36 36 36 36 36 36 36 37 36 36 36  // .....66666667666
    6980: 36 36 36 36 36 36 36 36 36 36 37 30 3F 00 00 00  // 666666666670?...
    6990: 00 00 00 00 00 00 00 00 00 00 3F 30 37 36 36 36  // ..........?07666
    69A0: 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00  // 6666666666......
    69B0: 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36  // .............666
    69C0: 36 36 36 36 36 36 36 36 36 36 37 30 37 36 36 36  // 6666666666707666
    69D0: 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00  // 66666...........
    69E0: 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36  // .....66666...666
    69F0: 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00  // 66666...........
    6A00: 00 00 00 00 00 36 36 36 36 36 36 36 FF 00 00 00  // .....6666666....
    6A10: 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18  // ................
    6A20: 18 18 18 18 18 00 00 00 00 00 00 00 FF 36 36 36  // .............666
    6A30: 36 36 36 36 36 36 36 36 36 36 36 36 3F 00 00 00  // 666666666666?...
    6A40: 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00  // ................
    6A50: 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    6A60: 18 18 18 18 18 00 00 00 00 00 00 00 3F 36 36 36  // ............?666
    6A70: 36 36 36 36 36 36 36 36 36 36 36 36 FF 36 36 36  // 666666666666.666
    6A80: 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18  // 66666...........
    6A90: 18 18 18 18 18 18 18 18 18 18 18 18 F8 00 00 00  // ................
    6AA0: 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 18 18  // ................
    6AB0: 18 18 18 18 18 FF FF FF FF FF FF FF FF FF FF FF  // ................
    6AC0: FF FF FF FF FF 00 00 00 00 00 00 00 00 FF FF FF  // ................
    6AD0: FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    6AE0: F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    6AF0: 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00  // ................
    6B00: 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC  // .........v......
    6B10: 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6  // v......x........
    6B20: CC 00 00 00 00 00 00 FE 66 62 60 60 60 60 60 60  // ........fb``````
    6B30: 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C  // `..........lllll
    6B40: 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6  // l........b0..0b.
    6B50: FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8  // ..........~.....
    6B60: 70 00 00 00 00 00 00 00 00 66 66 66 66 66 7C 60  // p........fffff|`
    6B70: C0 80 00 00 00 00 00 00 00 00 76 DC 18 18 18 18  // ..........v.....
    6B80: 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38  // ........88l..l88
    6B90: FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C  // ........8l.....l
    6BA0: 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C  // 8......8l....lll
    6BB0: EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC  // .......>``<f....
    6BC0: 78 00 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00  // x.........~...~.
    6BD0: 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60  // .........|....|`
    6BE0: C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30  // .........0``|``0
    6BF0: 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
    6C00: C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE  // ................
    6C10: 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00  // ...........~....
    6C20: 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00  // ~......0.....0..
    6C30: 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00  // ~........0`0....
    6C40: 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18  // ~...............
    6C50: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 58  // ...............X
    6C60: 78 30 00 00 00 00 00 00 00 18 18 00 7E 00 18 18  // x0..........~...
    6C70: 00 00 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC  // ...........v..v.
    6C80: 00 00 00 00 00 00 00 78 CC CC 78 00 00 00 00 00  // .......x..x.....
    6C90: 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00  // ................
    6CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 00 00  // ................
    6CB0: 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78  // ...............x
    6CC0: 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00  // 8.......lllll...
    6CD0: 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00  // .......p..0`....
    6CE0: 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E  // ..........~~~~~~
    6CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6D00: 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
    6D10: 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30  // ....../........0
    6D20: 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB  // `......0..~.....
    6D30: C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF  // ...~....M.......
    6D40: DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18  // .........T......
    6D50: 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3  // .....<....V.....
    6D60: C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3  // ....f<.....W....
    6D70: C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00 00 C3  // .......f....X...
    6D80: C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00  // ..f<<f.......Y..
    6D90: C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00  // ....f<...<....\.
    6DA0: 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D  // ....`0.........m
    6DB0: 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00  // .....f..........
    6DC0: 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00  // v.........f<....
    6DD0: 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00  // .w...........f..
    6DE0: 00 00 00 00 9D 5C C3 0B DB 74 03 E9 46 01 57 32  // .....\...t..F.W2
    6DF0: C0 B9 40 00 F3 AA 5F BB 6A 8A 26 89 1D 26 8C 4D  // ..@..._.j.&..&.M
    6E00: 02 2E 8E 1E EB 03 57 BE 49 04 B9 1E 00 83 C7 04  // ......W.I.......
    6E10: FC 8A 04 26 88 05 46 47 E2 F7 5F A0 84 04 FE C0  // ...&..FG.._.....
    6E20: 26 88 45 22 A1 85 04 26 89 45 23 57 E8 D9 1B 5F  // &.E"...&.E#W..._
    6E30: 26 88 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC 05 74  // &.]%&.}&..I....t
    6E40: 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A 87 42 8A 32  // ......2......B.2
    6E50: E4 0A C0 74 01 40 26 89 45 27 2E 8A 87 43 8A 26  // ...t.@&.E'...C.&
    6E60: 88 45 29 A1 85 04 8A 16 84 04 FE C2 F6 E2 B2 00  // .E).............
    6E70: 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90  // =..~...=^.~...=.
    6E80: 01 7E 07 B2 03 3D E0 01 7E 00 26 88 55 2A 8A 26  // .~...=..~.&.U*.&
    6E90: 87 04 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0  // ....$...........
    6EA0: 80 F4 10 A0 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0  // ......$.........
    6EB0: 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C 01 26 88 45  // 0.B.$........&.E
    6EC0: 2D B0 03 26 88 45 31 E8 77 08 1E 06 32 D2 C4 1E  // -..&.E1.w...2...
    6ED0: A8 04 8C C1 8C CE 3B CE 74 34 26 C5 77 04 8C D9  // ......;.t4&.w...
    6EE0: 0B F1 74 03 80 CA 10 26 C5 77 0C 8C D9 0B F1 74  // ..t....&.w.....t
    6EF0: 03 80 CA 08 26 C5 77 08 8C D9 0B F1 74 03 80 CA  // ....&.w.....t...
    6F00: 04 26 C5 77 10 8C D9 0B F1 74 03 80 CA 01 07 1F  // .&.w.....t......
    6F10: 26 88 55 32 B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC  // &.U2............
    6F20: 02 8A D4 8A F2 D0 EE 81 E2 04 04 25 03 03 0B C2  // ...........%....
    6F30: 26 89 45 2B 8B EC C6 46 1A 1B C3 0A C0 74 0F FE  // &.E+...F.....t..
    6F40: C8 74 36 FE C8 74 56 8B EC C6 46 1A 00 C3 B8 20  // .t6..tV...F.... 
    6F50: 00 F6 C1 01 74 03 83 C0 60 F6 C1 02 74 03 83 C0  // ....t...`...t...
    6F60: 3A F6 C1 04 74 03 05 03 03 83 C0 3F C1 E8 06 8B  // :...t......?....
    6F70: EC 89 46 0E C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1  // ..F..F....... ..
    6F80: 01 74 03 E8 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1  // .t.......t......
    6F90: 04 74 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6 C1 01  // .t.......F......
    6FA0: 74 06 E8 16 15 E8 25 01 F6 C1 02 74 03 E8 85 01  // t.....%....t....
    6FB0: F6 C1 04 74 03 E8 12 02 EB DC 8A C4 EE 42 EC AA  // ...t.........B..
    6FC0: FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15 00 32  // ..J....k.......2
    6FD0: E4 EC 87 EA 8A C4 EE 42 EC AA FE C4 4A 87 EA E2  // .......B....J...
    6FE0: F0 EC 87 EA B0 20 EE C3 26 8A 05 88 04 47 46 E2  // ..... ..&....GF.
    6FF0: F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4  // ..&.%.G.........
    7000: EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B  // .&..G........QW.
    7010: C7 2B C3 26 89 07 8B F7 E8 0A 04 EC 26 88 44 01  // .+.&........&.D.
    7020: 26 89 54 41 B2 CE EC 26 88 44 02 B2 CC EC 26 88  // &.TA...&.D....&.
    7030: 44 09 B2 CA EC 26 88 44 04 B2 C4 EC 26 88 04 83  // D....&.D....&...
    7040: C7 05 B9 04 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE  // ........p.&.....
    7050: 83 C7 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B FF 26  // ...&.TA2.....[.&
    7060: 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9 09 00 E8 49  // .D..._...2.....I
    7070: FF 26 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B  // .&.D.._Y..`.....
    7080: C7 2B C3 26 89 47 02 51 57 2E 8E 1E EB 03 A0 10  // .+.&.G.QW.......
    7090: 04 24 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1  // .$0..I..........
    70A0: 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3  // ................
    70B0: A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE  // ..t......|......
    70C0: 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26  // ......_Y..:....&
    70D0: 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05 BA C4 03 B8  // .?....Q.........
    70E0: 00 01 EF B0 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A  // ...........G..&.
    70F0: 44 09 EE B2 C4 B8 00 03 EF 26 8A 04 EE 26 8B 54  // D........&...&.T
    7100: 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A 44 01  // A......2....&.D.
    7110: EE 80 C2 06 26 8A 44 04 EE EC B1 15 32 E4 E8 DB  // ....&.D.....2...
    7120: FE B0 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44  // .. ...2......&.D
    7130: 02 EE 59 9D C3 9C FA 26 8B 7F 02 03 FB 06 51 2E  // ..Y....&......Q.
    7140: 8E 1E EB 03 26 8A 05 80 26 10 04 CF 08 06 10 04  // ....&...&.......
    7150: 47 BE 49 04 B9 1E 00 E8 8E FE BE 84 04 B1 07 E8  // G.I.............
    7160: 86 FE BE A8 04 B1 04 E8 7E FE BE 14 00 B1 04 E8  // ........~.......
    7170: 76 FE BE 74 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8  // v..t....n..|....
    7180: 66 FE BE 0C 01 B1 04 E8 5E FE 59 07 9D C3 9C FA  // f.......^.Y.....
    7190: 8B C7 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE  // ..+.&.G.......4.
    71A0: 42 EC 26 88 05 BA C8 03 EC 26 88 45 01 50 4A 4A  // B.&......&.E.PJJ
    71B0: EC 26 88 45 02 83 C7 03 B9 00 03 42 32 C0 EE 42  // .&.E.......B2..B
    71C0: 42 EC AA E2 FC 58 4A EE 9D C3 9C FA 26 8B 77 04  // B....XJ.....&.w.
    71D0: 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6  // ...l....4.&.....
    71E0: 03 26 8A 44 02 EE 56 42 42 83 C6 03 32 C0 EE 42  // .&.D..VBB...2..B
    71F0: B9 00 03 26 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44  // ...&...F..^..&.D
    7200: 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3  // ........$.......
    7210: E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4 EE EB  // ................
    7220: 00 EB 00 B0 20 EE C3 50 8A E0 80 E4 80 80 26 87  // .... ..P......&.
    7230: 04 7F 08 26 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6  // ...&..$...<.~.&.
    7240: 47 33 01 75 17 3C 23 74 13 3C 32 74 0F 3C 33 74  // G3.u.<#t.<2t.<3t
    7250: 0B B4 03 26 F6 47 09 01 75 02 B4 07 88 26 49 04  // ...&.G..u....&I.
    7260: BA B4 03 80 0E 87 04 02 26 F6 47 09 01 74 07 B2  // ........&.G..t..
    7270: D4 80 26 87 04 FD 89 16 63 04 C7 06 4E 04 00 00  // ..&.....c...N...
    7280: C6 06 62 04 00 B9 08 00 BF 50 04 FC 06 1E 07 33  // ..b......P.....3
    7290: C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04 26 8A 47 01  // ....&..2..J.&.G.
    72A0: A2 84 04 26 8A 47 02 A3 85 04 26 8B 47 03 A3 4C  // ...&.G....&.G..L
    72B0: 04 26 8B 47 14 86 C4 A3 60 04 58 C3 52 32 E4 33  // .&.G....`.X.R2.3
    72C0: D2 B0 0D CD 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A  // .......)u.2.3...
    72D0: CD 17 5A C3 06 1E 60 2E 8E 1E EB 03 2E 83 0E F5  // ..Z...`.........
    72E0: 03 00 75 6E 80 3E 00 05 01 74 67 C6 06 00 05 01  // ..un.>...tg.....
    72F0: 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E  // ..b.2.......P..>
    7300: 62 04 50 32 F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A  // b.P2.....2.AQ..J
    7310: 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51 52 89 95 50  // .2......)u=QR..P
    7320: 04 B4 08 E8 B0 D4 0A C0 75 02 B0 20 33 D2 32 E4  // ........u.. 3.2.
    7330: CD 17 F6 C4 29 75 1F 5A FE C2 59 E2 DE FE C6 59  // ....)u.Z..Y....Y
    7340: E2 CA E8 77 FF 32 C0 A2 00 05 58 89 85 50 04 E8  // ...w.2....X..P..
    7350: AF 03 61 1F 07 CF 5A 59 59 B0 FF EB EA 52 2A F5  // ..a...ZYY....R*.
    7360: 38 C6 7D 02 32 C0 2E 8E 06 ED 03 5A C3 A0 85 04  // 8.}.2......Z....
    7370: F6 E3 8A F7 8B D8 8B CA BA C4 03 B8 02 0F EF B4  // ................
    7380: 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD  // ..m...2.........
    7390: 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E 62 04  // ..Ku.2..W..S..b.
    73A0: 0B C0 75 04 0A DB 74 03 E8 35 03 5B 8B F8 2B D1  // ..u...t..5.[..+.
    73B0: 81 C2 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A  // ......2....2.+..
    73C0: DB 74 2A 2A C3 F6 26 85 04 8B C8 52 B4 01 E8 20  // .t**..&....R... 
    73D0: 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3  // .......Z........
    73E0: A4 03 F5 03 FD 48 75 F5 1F E8 81 FF C3 8A D8 EB  // .....Hu.........
    73F0: F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3  // .......B.$....J.
    7400: 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E EB 03  // ...B...J........
    7410: 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E 1E EB 03 8B  // ..c.............
    7420: 16 63 04 1F C3 50 BA CC 03 EC B2 D4 A8 01 75 02  // .c...P........u.
    7430: B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E 1E EB  // ..X.............
    7440: 03 80 3E 49 04 03 74 13 80 3E 49 04 02 74 0C 80  // ..>I..t..>I..t..
    7450: 3E 49 04 01 74 05 80 3E 49 04 00 1F C3 50 2E 8E  // >I..t..>I....P..
    7460: 06 EF 03 A0 10 04 24 30 3C 30 74 05 2E 8E 06 F1  // ......$0<0t.....
    7470: 03 58 0B C0 74 03 E8 E1 01 03 06 4E 04 81 C2 01  // .X..t......N....
    7480: 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6  // .+.2...J........
    7490: E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E 02 8A  // .......u...8.~..
    74A0: DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04  // ............:.J.
    74B0: 74 06 06 1F E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A  // t..........@....
    74C0: D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F E8 01  // ..........+.....
    74D0: 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B EA E3  // ..S..*.2.2.+.+..
    74E0: 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE CC 75 F4 58  // .............u.X
    74F0: B0 20 8A CA F3 AB 03 FD FE CB 75 F6 C3 53 8A C6  // . ........u..S..
    7500: 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91  // *.t.......X.....
    7510: B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E 1E F1 03 8A  // . ..............
    7520: C3 22 DF D3 E3 A8 80 74 03 30 1C C3 F6 D7 8A 34  // .".....t.0.....4
    7530: 22 F7 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E 1E F1  // "...............
    7540: 03 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74  // ....."...(.....t
    7550: 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0  // ................
    7560: F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1  // ................
    7570: 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06 F1 03 8B C1  // ................
    7580: E8 86 00 75 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8  // ...u......$.....
    7590: 2E 8E 06 F1 03 8A C1 8A E6 E8 6D 00 75 02 8A DE  // ..........m.u...
    75A0: F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01 00 C3  // ..........+.....
    75B0: 8A CE 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13  // ..*..,Q..VW.....
    75C0: C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00 20 81 C7 00  // .....+.+.... ...
    75D0: 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59  //  ........_^....Y
    75E0: E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3  // ........W.......
    75F0: AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3  // ...+.... .......
    7600: AA 5F 03 FD FE CB 75 DE C3 E8 B0 00 81 C2 01 01  // ._....u.........
    7610: 2B D1 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59  // +.8.v.2.Q......Y
    7620: 32 ED BD 50 00 80 3E 49 04 06 74 04 D0 E2 D1 E0  // 2..P..>I..t.....
    7630: 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A  // .......P.....RS.
    7640: DF 32 FF D1 E3 8B 87 50 04 E8 0E 00 50 D1 EB A1  // .2.....P....P...
    7650: 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04  // L...[..[Z.R...J.
    7660: F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E  // ..2.....Z.......
    7670: 8A A6 1A 76 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 1A  // ...v............
    7680: 76 C3 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3  // v.....03<?......
    7690: FC FF 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A  // ..&..........t..
    76A0: D6 D0 EE C1 E0 02 75 F2 88 56 00 45 C3 8B 16 63  // ......u..V.E...c
    76B0: 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A  // ............R...
    76C0: C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A  // ..&J....2...Z.S.
    76D0: DF 32 FF D1 E3 8B 87 50 04 D1 EB E8 02 00 5B C3  // .2.....P......[.
    76E0: 52 8B D0 32 F6 52 8A C4 F6 26 85 04 F7 26 4A 04  // R..2.R...&...&J.
    76F0: 5A 03 C2 0A DB 74 08 03 06 4C 04 FE CB 75 F8 5A  // Z....t...L...u.Z
    7700: C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03  // .R...J...2......
    7710: 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2  // .N..........Z...
    7720: F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A  // .&J..........t..
    7730: C7 32 E4 F7 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC  // .2..&L..........
    7740: C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8  // ............ ...
    7750: EF FF B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04  // ....2....>..&.}.
    7760: 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8  // .....S..........
    7770: 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E E8 7F  // ..........U.....
    7780: FC 3C AA 74 0D B0 0F E8 76 FC 3C 55 74 04 32 C0  // .<.t....v.<Ut.2.
    7790: 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF B0 01 0A C0  // [...............
    77A0: 5B C3 8A EE 8A 36 85 04 06 1F 0A DB 74 25 8A C5  // [....6......t%..
    77B0: 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2  // *.....R2........
    77C0: 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8  // +.Q....+.+.Y..Z.
    77D0: 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A  // ................
    77E0: E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5 8B CB  // .2..........+...
    77F0: F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E EB 03 89 0E 60  // ..+.Nu.........`
    7800: 04 8A C5 24 60 A8 20 74 06 B9 00 1E E9 94 00 F6  // ...$`. t........
    7810: 06 87 04 01 0F 85 8B 00 80 3E 49 04 07 74 06 E8  // .........>I..t..
    7820: 19 FC 74 01 C3 F6 06 87 04 08 74 03 CD 42 C3 8A  // ..t.......t..B..
    7830: 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A  // 6......8.~...td.
    7840: E9 8A CE FE C9 EB 5C 38 D1 74 58 8A CE 80 FD 03  // ......\8.tX.....
    7850: 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E 44 8A  // |........I...~D.
    7860: E1 2A E5 0A E4 75 0A 38 CA 74 38 FE CA 38 CA 74  // .*...u.8.t8..8.t
    7870: 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD  // 2....8.~....~...
    7880: 02 7F C8 80 FC 03 7D BF 8A D6 FE CA 38 D1 74 13  // ......}.....8.t.
    7890: 8A CE FE C9 FE C9 8A E9 2A EC 80 FE 08 7F 04 FE  // ........*.......
    78A0: C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E EB 03 A2 62  // ...............b
    78B0: 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A  // .2....&L..N....z
    78C0: FB 74 07 80 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC  // .t..>I..w.......
    78D0: FD D1 E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E EB 03  // .....P..'.......
    78E0: 8A 26 49 04 E8 47 A0 74 07 C7 06 50 04 00 00 C3  // .&I..G.t...P....
    78F0: E8 48 FB 74 0B 80 FC 07 74 06 77 08 E8 77 FC C3  // .H.t....t.w..w..
    7900: E8 9F FB C3 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A  // .......|.t...N..
    7910: D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7  // ........J.R.&...
    7920: E5 8B F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B  // .....Z.....0....
    7930: C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7  // ..g....R..J.....
    7940: 26 85 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E  // &........Z.U....
    7950: 1E EB 03 8A 26 49 04 E8 E1 FA 74 0C 80 FC 07 74  // ....&I....t....t
    7960: 07 77 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E FC C3  // .w@......S......
    7970: E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E  // ..............+>
    7980: 4A 04 C1 E7 03 52 F7 26 85 04 F7 26 4A 04 C1 E0  // J....R.&...&J...
    7990: 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8  // ...+.Z..J.......
    79A0: 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8  // ......|.t.......
    79B0: 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26  // .........R..J..&
    79C0: 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9  // ....+...+.Z.....
    79D0: C3 2E 8E 1E EB 03 2E 8E 06 F1 03 E8 5D FA 74 11  // ............].t.
    79E0: 80 3E 49 04 07 7C 18 2E 8E 06 EF 03 74 03 E9 B1  // .>I..|......t...
    79F0: 00 E8 49 FC 8B D8 26 8B 07 8B EC 89 46 1A C3 A1  // ..I...&.....F...
    7A00: 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC 80 3E  // P.........+....>
    7A10: 49 04 06 75 1F B9 04 00 26 8A 04 88 46 00 45 26  // I..u....&...F.E&
    7A20: 8A 84 00 20 88 46 00 45 83 C6 50 E2 EB B8 00 02  // ... .F.E..P.....
    7A30: B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6 00 20  // ..........V.... 
    7A40: E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C  // .O.........+..>.
    7A50: 01 32 F6 80 FB 0E 75 09 26 83 7D FE 10 75 02 B6  // .2....u.&.}..u..
    7A60: 80 16 1F 8B F5 8B CB F6 C6 80 74 01 47 56 57 F3  // ..........t.GVW.
    7A70: A6 5F 5E 74 23 FE C0 03 FB F6 C6 80 74 01 47 FE  // ._^t#.......t.G.
    7A80: CA 75 E2 FE CC 74 0F 2E 8E 1E EB 03 C4 3E 7C 00  // .u...t.......>|.
    7A90: B0 80 B2 80 EB CB 32 C0 8B E5 03 E3 8B EC 89 46  // ......2........F
    7AA0: 1A C3 80 3E 49 04 13 7C 05 75 02 EB 5A C3 2E 8E  // ...>I..|.u..Z...
    7AB0: 06 ED 03 E8 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC  // ............+...
    7AC0: B8 05 08 B9 05 00 BA CE 03 80 3E 49 04 0F 72 1A  // ..........>I..r.
    7AD0: F6 06 87 04 60 75 13 B4 0A F7 C6 01 00 75 02 B4  // ....`u.......u..
    7AE0: 05 B0 07 EF B8 05 18 B9 05 01 EF 51 8B CB 26 8A  // ...........Q..&.
    7AF0: 04 F6 D0 88 46 00 45 03 36 4A 04 E2 F1 58 EF B8  // ....F.E.6J...X..
    7B00: 00 01 32 D2 E9 44 FF 2E 8E 06 ED 03 A1 50 04 8B  // ..2..D.......P..
    7B10: D0 32 F6 52 8A C4 32 E4 F7 26 4A 04 F7 26 85 04  // .2.R..2..&J..&..
    7B20: 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E  // Z........+...S.>
    7B30: 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4 26 8A  // J.O.........2.&.
    7B40: 04 D0 E4 0A C0 74 03 80 CC 01 46 E2 F1 88 66 00  // .....t....F...f.
    7B50: 45 03 F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC FE 33  // E..Ku.[...2....3
    7B60: ED EB 03 BD 01 00 2E 8E 1E EB 03 2E 8E 06 F1 03  // ................
    7B70: 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06 EF 03 80 FC  // .&I....t........
    7B80: 07 74 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF  // .t.|=.........2.
    7B90: D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03  // ....P....J...2..
    7BA0: C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04 03 F8  // .......t....L...
    7BB0: FE CB 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2  // ..u.....u.....G.
    7BC0: FC C3 50 2E 8E 06 F1 03 A1 50 04 E8 EE FA 8B F8  // ..P......P......
    7BD0: A0 50 04 8A 26 4A 04 8B E8 58 A8 80 74 08 24 7F  // .P..&J...X..t.$.
    7BE0: C5 36 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0  // .6|....6....2...
    7BF0: 03 03 F0 80 FF 06 74 69 D1 E7 8A F3 B0 55 80 E3  // ......ti.....U..
    7C00: 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6 80 75  // .........P.....u
    7C10: 27 AC E8 55 FA 23 C3 AB AC E8 4E FA 23 C3 26 89  // '..U.#....N.#.&.
    7C20: 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE 08 81 EF 3E  // .....N..u......>
    7C30: 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31  // .X.r........#.&1
    7C40: 05 AC E8 25 FA 23 C3 26 31 85 00 20 83 C7 50 FE  // ...%.#.&1.. ..P.
    7C50: CA 75 E5 83 EE 08 81 EF 3E 01 58 E8 49 00 E2 A9  // .u......>.X.I...
    7C60: C3 8B C5 50 B2 04 F6 C3 80 74 1F AC 26 30 05 AC  // ...P.....t..&0..
    7C70: 26 30 85 00 20 83 C7 50 FE CA 7F EF 83 EE 08 81  // &0.. ..P........
    7C80: EF 3F 01 58 E8 20 00 E2 DA C3 AC AA AC 26 88 85  // .?.X. .......&..
    7C90: FF 1F 83 C7 4F FE CA 7F F1 83 EE 08 81 EF 3F 01  // ....O.........?.
    7CA0: 58 E8 03 00 E2 BD C3 FE C0 38 E0 72 06 32 C0 81  // X........8.r.2..
    7CB0: C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA  // ............2...
    7CC0: 66 0F B6 06 51 04 F6 E2 66 0F B7 16 4A 04 83 FA  // f...Q...f...J...
    7CD0: 64 75 03 BA 68 00 83 FA 5A 75 03 BA 60 00 81 FA  // du..h...Zu..`...
    7CE0: AF 00 75 03 BA B0 00 52 F7 E2 66 0F B7 F8 66 0F  // ..u....R..f...f.
    7CF0: B6 06 50 04 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7  // ..P.f..f.....f..
    7D00: 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03  // .....f...Z..J...
    7D10: A0 50 04 50 C5 06 0C 01 03 F0 2E 8E 06 ED 03 58  // .P.P...........X
    7D20: 57 51 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A  // WQP.....;.......
    7D30: C7 D0 E4 73 02 8A C3 26 88 05 66 47 FE CD 75 EF  // ...s...&..fG..u.
    7D40: 66 03 FA E2 E2 9D 58 59 5F 83 C7 08 FE C0 38 E0  // f.....XY_.....8.
    7D50: 72 0E 51 32 C0 8B CD 49 03 FA 83 C7 08 E2 F9 59  // r.Q2...I.......Y
    7D60: 2B F5 E2 BC C3 06 52 33 C0 8E C0 66 C1 C7 10 8B  // +.....R3...f....
    7D70: C7 66 C1 C7 10 E8 B6 9B 74 16 38 E0 74 12 0F B6  // .f......t.8.t...
    7D80: D0 E8 8B C9 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10  // ......f.....f...
    7D90: 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F  // Z.....|.......b.
    7DA0: 84 11 FF E8 01 00 C3 80 FC 11 75 06 80 E3 80 80  // ..........u.....
    7DB0: CB 0F 50 53 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E  // ..PS..2.....P.[.
    7DC0: 8E 06 ED 03 E8 07 F9 8B F8 8B 2E 85 04 58 32 F6  // .............X2.
    7DD0: 52 8B 36 4A 04 56 8A 26 85 04 C5 36 0C 01 80 FC  // R.6J.V.&...6....
    7DE0: 0E 75 09 83 7C FE 10 75 03 B4 10 46 F6 E4 03 F0  // .u..|..u...F....
    7DF0: B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A 58 50  // .....um......ZXP
    7E00: 52 4A 8A E0 57 51 51 57 8B CD 32 C0 AA 03 FA E2  // RJ..WQQW..2.....
    7E10: FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B CD 49 03 FA  // ._G..8.v.2...I..
    7E20: 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0 02 8A E3 EF  // G..Y..Y_........
    7E30: 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA 03 FB E2 F7  // [KZQW...&.%.....
    7E40: 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B CD 49 03 FB  // _G+.B;.v.3...I..
    7E50: 47 E2 FB 59 E2 DD BA CE 03 B8 03 00 EF B2 C4 B8  // G..Y............
    7E60: 02 0F EF C3 B2 CE B8 03 18 EF EB BC 2E 8E 1E EB  // ................
    7E70: 03 80 3E 63 04 B4 74 0B BA CC 03 EC A8 01 75 04  // ..>c..t.......u.
    7E80: CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F  // .B.......u......
    7E90: 80 26 66 04 E0 08 26 66 04 E8 2D 00 8A 1E 66 04  // .&f...&f..-...f.
    7EA0: 80 E3 20 B1 05 D2 EB E8 91 F5 74 19 A0 66 04 24  // .. .......t..f.$
    7EB0: DF 80 E3 01 74 02 0C 20 A2 66 04 24 10 0C 02 0A  // ....t.. .f.$....
    7EC0: D8 E8 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB  // ..S...~..SP.....
    7ED0: D0 E3 81 E3 10 07 0A DF E8 60 F5 74 0E B4 00 8A  // .........`.t....
    7EE0: C3 E8 2C F3 0B ED 74 03 26 88 1D 8A C3 E8 0B 00  // ..,...t.&.......
    7EF0: 0B ED 74 04 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E  // ..t.&.].X[......
    7F00: 1E EB 03 80 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8  // ....>I.3........
    7F10: FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03  // ....0...........
    7F20: 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74 04 47 26 88  // ...........t.G&.
    7F30: 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E  // ......... ......
    7F40: EB 03 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07 77 06  // ...&I....t....w.
    7F50: 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3 8A D8  // t........|.tL...
    7F60: E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E ED 03 F6 C3  // ................
    7F70: 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00 8A E3  // .u........%.....
    7F80: EF 8A 25 B4 FF 88 25 EF B2 CE B8 08 FF EF C3 B8  // ..%...%.........
    7F90: 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25  // ...........%...%
    7FA0: EF B2 CE B8 03 00 EF EB E1 50 2E 8E 06 ED 03 A1  // .........P......
    7FB0: 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58 26 88 05 C3  // J..........X&...
    7FC0: 2E 8E 1E EB 03 8A 26 49 04 E8 6F F4 74 0F 80 FC  // ......&I..o.t...
    7FD0: 07 77 0B 74 08 E8 5F F5 8B EC 89 46 1A C3 80 FC  // .w.t.._....F....
    7FE0: 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E ED 03  // .|.t)..5........
    7FF0: BA CE 03 32 FF B8 04 03 EF D0 E7 8A 1D 22 D9 74  // ...2.........".t
    8000: 03 80 CF 01 FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A  // ......}....~...J
    8010: 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E 1E ED 03 8A  // ................
    8020: 05 8B EC 88 46 1A C3 2E 8E 1E EB 03 8A 3E 62 04  // ....F........>b.
    8030: 8A CF D0 E1 32 ED BE 50 04 03 F1 8B 14 8A 0E 49  // ....2..P.......I
    8040: 04 3C 0D 76 4A 2E 8E 06 F1 03 E8 EE F3 75 33 8A  // .<.vJ........u3.
    8050: 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03  // .J..............
    8060: 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE C2 38 DA 73  // .N........A..8.s
    8070: 59 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0  // Y....c..........
    8080: EF C3 2E 8E 06 EF 03 80 F9 07 74 C3 E9 83 00 75  // ..........t....u
    8090: 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9  // .2...<.u.:6..u..
    80A0: 93 00 FE C6 89 14 E8 92 F3 75 05 80 F9 07 7F 05  // .........u......
    80B0: 8B C2 E8 4C F6 C3 3C 07 75 04 E8 99 85 C3 3C 08  // ...L..<.u.....<.
    80C0: 75 83 0A D2 74 DE FE CA EB DA 32 FF 32 D2 2B CB  // u...t.....2.2.+.
    80D0: 3A 36 84 04 74 06 FE C6 03 CB EB 95 89 14 8B 16  // :6..t...........
    80E0: 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB  // c...........+.+.
    80F0: 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0  // &.e.P.>N........
    8100: 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3  // ............X. .
    8110: AB C3 B9 01 00 B4 0A E8 BC C6 FE C2 3A 16 4A 04  // ............:.J.
    8120: 74 03 89 14 C3 32 FF 32 D2 89 14 3A 36 84 04 74  // t....2.2...:6..t
    8130: 2E FE C6 EB ED 89 14 2E 8E 06 F1 03 E8 FC F2 74  // ...............t
    8140: 0E 2E 8E 06 EF 03 80 F9 07 74 04 32 FF EB 10 8B  // .........t.2....
    8150: C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33  // ........O..J...3
    8160: C9 8A 36 84 04 8A 16 4A 04 FE CA B0 01 E9 70 F7  // ..6....J......p.
    8170: 2E 8E 1E EB 03 F6 06 87 04 08 74 03 CD 42 C3 E8  // ..........t..B..
    8180: 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E EB 03 8A DF  // v....F..........
    8190: 32 FF D1 E3 89 97 50 04 D0 EB 38 1E 62 04 75 05  // 2.....P...8.b.u.
    81A0: 8B C2 E8 5C F5 C3 2E 8E 1E EB 03 8A DF 32 FF D1  // ...\.........2..
    81B0: E3 8B 97 50 04 8B 0E 60 04 8B EC 89 4E 16 89 56  // ...P...`....N..V
    81C0: 12 C3 2E 8E 1E EB 03 A0 87 04 24 80 0A 06 49 04  // ..........$...I.
    81D0: 8A 26 4A 04 F6 06 87 04 08 75 2D E8 5D F2 74 07  // .&J......u-.].t.
    81E0: 80 3E 49 04 07 7F 21 51 8A CC 8A 2E 84 04 BE B3  // .>I...!Q........
    81F0: 81 81 FE BC 81 74 10 2E 3B 0C 74 05 83 C6 03 EB  // .....t..;.t.....
    8200: F0 24 80 2E 0A 44 02 59 8A 3E 62 04 8B EC 89 46  // .$...D.Y.>b....F
    8210: 1A 89 5E 0E 89 4E 16 89 56 12 C3 84 18 23 84 2B  // ..^..N..V....#.+
    8220: 33 84 2A 32 2E 8E 1E EB 03 3C 04 7F 1B 50 52 BA  // 3.*2.....<...PR.
    8230: CC 03 EC A8 01 5A 58 74 08 80 3E 63 04 D4 74 08  // .....ZXt..>c..t.
    8240: C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8  // ..>c..u.<.s.2...
    8250: D1 E5 2E FF A6 EF 81 27 82 47 82 59 82 8E 82 D8  // .......'.G.Y....
    8260: 81 D8 81 D8 81 B3 82 CB 82 CF 82 D8 81 D8 81 D8  // ................
    8270: 81 D8 81 D8 81 D8 81 FD 82 D8 81 01 83 1C 83 D8  // ................
    8280: 81 5B 83 D8 81 69 83 84 83 8B 83 97 83 BB 83 80  // .[...i..........
    8290: 3E 49 04 13 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF  // >I..t.........p.
    82A0: 0B ED 74 07 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8  // ..t...2.&.......
    82B0: A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D 11 EB  // .....D...t.&.}..
    82C0: EA 80 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B ED 74  // ..>I..t........t
    82D0: 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9  // .............2..
    82E0: 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4  // ................
    82F0: AC E8 07 FC EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0  // .........w..C...
    8300: B0 30 E8 FB F0 24 F7 80 26 65 04 DF 80 FB 00 74  // .0...$..&e.....t
    8310: 07 0C 08 80 0E 65 04 20 EE EB 90 E8 9D 01 8A C3  // .....e. ........
    8320: B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F  // ......... ....N.
    8330: E9 78 FF B3 11 EB E4 8B FA E8 05 F4 B9 10 00 32  // .x.............2
    8340: E4 B2 C0 8A C4 9C FA EE 42 EC 26 88 05 FE C4 4A  // ........B.&....J
    8350: EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26 88 05  // ..G.......B..&..
    8360: E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A  // ....Z......Q..&.
    8370: 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7 03 43  // 5&.m.&.M.......C
    8380: 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8  // Y.....u.......0.
    8390: 6E F0 24 7F F6 C7 01 74 02 0C 80 B4 30 E8 70 EE  // n.$....t....0.p.
    83A0: EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0  // ....u.......0.P.
    83B0: EE A8 80 75 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8  // ...u.....4...Q..
    83C0: 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16 88 76 13  // ...........N..v.
    83D0: C3 8B FA 51 8B C3 E8 C3 00 26 88 35 26 88 6D 01  // ...Q.....&.5&.m.
    83E0: 26 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A  // &.M....CY.......
    83F0: C3 EE C3 BA C6 03 EC 32 E4 8B EC 89 46 0E C3 E8  // .......2....F...
    8400: 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF  // ?....4.......0..
    8410: EF B3 01 A8 80 75 05 B3 00 C0 EF 02 8B EC 89 5E  // .....u.........^
    8420: 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52  // ...Q...s..*....R
    8430: 00 43 59 E2 EE C3 F6 06 89 04 02 74 03 E8 16 00  // .CY........t....
    8440: 8A C3 E8 39 00 C3 F6 06 89 04 02 74 03 E8 06 00  // ...9.......t....
    8450: 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5  // ......P....P.;..
    8460: 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6 F1 80  // P....Y..Y...d...
    8470: FC 32 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3 52 E8  // .2|.........X.R.
    8480: 39 00 5A 53 8B DA BA C8 03 9C FA EE 42 8A C7 EE  // 9.ZS........B...
    8490: 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA  // .......[....S...
    84A0: C7 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB  // ...BB...........
    84B0: 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2  // .........[.PQ...
    84C0: B9 FF 7F EC A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E  // ......u...YX....
    84D0: EB 03 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06  // ....$...........
    84E0: 7F 18 2E FF A5 7F 84 87 84 9C 84 3A 85 96 85 3C  // ...........:...<
    84F0: 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03  // .t.<............
    8500: 8A E3 EF C3 3C 04 77 F2 50 53 50 52 8B 16 63 04  // ....<.w.PSPR..c.
    8510: B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40 74 03  // .............@t.
    8520: 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF  // ........@.......
    8530: EE A8 80 74 04 D1 2E 85 04 A1 85 04 8B D0 3D F4  // ...t..........=.
    8540: 01 73 1B BA E0 01 3D C2 01 73 13 BA 90 01 3D 7C  // .s....=..s....=|
    8550: 01 73 0B BA 5E 01 3D 4A 01 73 03 BA C8 00 89 16  // .s..^.=J.s......
    8560: 85 04 5A 58 C6 06 84 04 FF E8 5D 01 5B 58 8A DF  // ..ZX......].[X..
    8570: 32 FF 0A C0 74 0E B3 0E 3C 01 74 08 B3 08 3C 02  // 2...t...<.t...<.
    8580: 74 02 B3 10 8A CB 8A E9 81 E9 01 02 80 F9 08 7E  // t..............~
    8590: 04 81 E9 01 01 87 1E 85 04 53 E8 5B F2 5B E8 85  // .........S.[.[..
    85A0: 02 C3 0A C0 74 11 FE C8 74 1A FE C8 74 38 FE C8  // ....t...t...t8..
    85B0: 74 3C FE C8 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3  // t<..t@...|...~..
    85C0: 8C C8 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A 97 7A  // ........t.2....z
    85D0: 85 89 0E 85 04 88 16 84 04 89 2E 0C 01 8C 06 0E  // ................
    85E0: 01 C3 00 0D 18 2A E8 09 03 B9 0E 00 EB D6 BD 8A  // .....*..........
    85F0: 54 B9 08 00 EB CA BD 9D 5C B9 10 00 EB C2 0A C0  // T.......\.......
    8600: 75 BD 8B 0E 85 04 8A 16 84 04 80 FF 07 77 35 80  // u............w5.
    8610: FF 01 77 10 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E  // ..w...u...|..&..
    8620: 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E  // ... ...u........
    8630: 7C 6D EB 10 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E  // |m......2.......
    8640: 8B AF ED 85 8B C5 8B EC 89 4E 16 89 56 12 89 46  // .........N..V..F
    8650: 0A 8C 46 1E C3 9D 5C 8A 54 8A 58 8A 5C 9D 5C 9D  // ..F...\.T.X.\.\.
    8660: 6C 53 06 8A 26 49 04 E8 C7 C3 26 8A 47 02 26 8A  // lS..&I....&.G.&.
    8670: 67 33 F6 C4 01 74 22 BD 9D 5C 3C 10 7D 0E E8 71  // g3...t"..\<.}..q
    8680: 02 8C 06 0E 01 3C 0E 7D 07 BD 8A 54 8C 0E 0E 01  // .....<.}...T....
    8690: 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D 13 B4  // ........-..<.}..
    86A0: 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05 80 CC 80  // .<.t.....<.t....
    86B0: EB 0A 26 F6 47 05 01 74 03 80 E4 7F 86 C4 32 DB  // ..&.G..t......2.
    86C0: E8 06 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA CE 03  // .......[........
    86D0: EC B8 05 00 EF B8 06 04 EF B2 C4 EC B8 02 04 EF  // ................
    86E0: B8 04 07 EF 8B D6 8B C7 50 24 7F 0A C0 74 22 0E  // ........P$...t".
    86F0: 07 33 D2 B9 00 01 3C 04 75 07 B7 10 BD 9D 5C EB  // .3....<.u.....\.
    8700: 10 FE C8 75 07 B7 0E E8 E8 01 EB 05 B7 08 BD 8A  // ...u............
    8710: 54 E8 2D 00 58 A8 80 74 00 BA C4 03 B8 02 03 EF  // T.-.X..t........
    8720: B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A  // ............u...
    8730: B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF  // ..P.X....2......
    8740: C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE  // ....u.....u.&.~.
    8750: 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 ED 03 8B FA  // .u..............
    8760: C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74  // ....@S.....[...t
    8770: 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86  // .. .........(2..
    8780: FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB  // .2.Q...t.F......
    8790: 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01  //  t.. .+...Y...t.
    87A0: 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E  // F..u....&I.P.W.>
    87B0: A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7  // ..&.}.....t0....
    87C0: 07 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B  // .&..<.t$8.t.G...
    87D0: FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04  // .&.......&.E....
    87E0: 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3  // &.}..>......_.X.
    87F0: 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08  // &.G3.t......&._.
    8800: 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15  // ....t....&..<.t.
    8810: 47 38 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04  // G8.I.u.&..2.....
    8820: 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC  // ........c..&....
    8830: 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24  // ........t....B.$
    8840: E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D  // ....J...B.$.....
    8850: 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75  // ...........>...u
    8860: 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1  // .............t..
    8870: E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26  // .H......c...J..&
    8880: 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A  // ............L...
    8890: 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5  // &I.P.W.>..&.}...
    88A0: 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E  // ..tJ.....&..<.t>
    88B0: 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01  // 8.t.G....&.=&.].
    88C0: 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02  // &.M.&.U.&.E.<.t.
    88D0: FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58  // ..P......&.....X
    88E0: A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07  // ...&.}...2...._.
    88F0: 58 C3 50 53 51 52 2E A1 F5 03 0B C0 74 09 2E 8B  // X.PSQR......t...
    8900: 2E 7C 6D 0E 07 EB 08 B8 30 11 B7 02 E8 C7 BE 5A  // .|m.....0......Z
    8910: 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E EB  // Y[X.<.|....S....
    8920: 03 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B  // ...2.......P..5[
    8930: 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F  // ..V..QS&.F.E<...
    8940: 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 05  // u.2..@<.t2<.u...
    8950: 7D EB 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7  // }.b<.u...tZ...'.
    8960: C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8  // ...t.&.^.E......
    8970: 64 BE FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36  // d...:.J.r.2...:6
    8980: 84 04 73 06 FE C6 89 15 EB 2B 50 E8 AD EA 75 08  // ..s......+P...u.
    8990: B8 00 08 E8 40 BE EB 09 80 3E 49 04 07 74 F1 32  // ....@....>I..t.2
    89A0: E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E  // ..>b.S..U.%.][.>
    89B0: 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02  // b.X..[Y..Z....u.
    89C0: 89 15 8B 05 3A 3E 62 04 75 03 E8 34 ED C3 E9 64  // ....:>b.u..4...d
    89D0: FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06  // .3..6....J......
    89E0: E8 F3 BD C3 2E 8E 1E EB 03 0A C0 75 0D E8 18 00  // ...........u....
    89F0: 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41  // ...^..F...<.u..A
    8A00: 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 7A 8A 2E 3A  // ....F.......z..:
    8A10: 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D  // .r.....2.......]
    8A20: 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04  // ...t...u........
    8A30: 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74  // $0<0t....u.....t
    8A40: E9 C3 BF 7A 8A 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D  // ...z....2.....;.
    8A50: 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8  // t....;.t......8.
    8A60: 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02  // ~...............
    8A70: 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00  // t..........t....
    8A80: BA B4 03 E8 DF EC 74 21 B7 01 E8 8C E9 80 FA D4  // ......t!........
    8A90: 74 17 86 FB C3 BA D4 03 E8 CA EC 74 0C B7 02 E8  // t..........t....
    8AA0: 77 E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08  // w....t..........
    8AB0: 0F 08 03 01 03 01 01 01 00 08 01 01 01 01 01 01  // ................
    8AC0: 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01  // ................
    8AD0: FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00  // ................
    8AE0: 3F 00 10 01 08 00 00 00 00 01 00 02 02 01 00 04  // ?...............
    8AF0: 04 01 00 05 02 05 00 06 01 06 05 06 00 08 01 08  // ................
    8B00: 00 07 02 07 06 07 CA 00 34 00 90 00 96 00 00 00  // ........4.......
    8B10: 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF  // ...._W..PfR.....
    8B20: 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA  // .........f....f.
    8B30: FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03  // ...2.f..fZX.f.O.
    8B40: 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF  // fRfVSWP..uD.....
    8B50: 66 33 F6 66 BB 53 00 E8 48 00 00 00 C1 E8 10 F6  // f3.f.S..H.......
    8B60: C4 40 75 2B 66 81 E2 FF 00 66 D1 E2 66 8B C2 66  // .@u+f....f..f..f
    8B70: 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 30 00 00 00  // @...f..f....0...
    8B80: 66 BB 12 00 E8 27 00 00 00 66 58 32 E4 66 50 58  // f....'...fX2.fPX
    8B90: 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 C3 90 66 B8  // _[f^fZ..f.O...f.
    8BA0: 4F 03 C3 90 66 52 E8 11 00 00 00 ED 66 5A C3 90  // O...fR......fZ..
    8BB0: 66 52 E8 05 00 00 00 EF 66 5A C3 90 66 8B D7 50  // fR......fZ..f..P
    8BC0: 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF 66 83 C2 04  // 3.f..f......f...
    8BD0: 58 C3 82 33 75 33 75 33 75 33 60 33 60 33 60 33  // X..3u3u3u3`3`3`3
    8BE0: 60 33 A2 2F 19 30 43 30 84 31 83 31 83 31 C9 31  // `3./.0C0.1.1.1.1
    8BF0: 2E 32 5E 32 1B 33 44 33 44 33 BB 31 AE 31 AE 31  // .2^2.3D3D3.1.1.1
    8C00: AE 31 AE 31 AE 31 C9 31 2E 32 5E 32 1B 33 49 33  // .1.1.1.1.2^2.3I3
    8C10: 8F 33 44 33 44 33 FF FF FF FF FF FF 00 00 FF FF  // .3D3D3..........
    8C20: 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    8C30: 00 00 FF 00 00 00 00 00 08 10 00 08 10 18 00 08  // ................
    8C40: 10 18 A6 2D 01 A6 2D 02 B4 41 03 94 41 03 CB 2E  // ...-..-..A..A...
    8C50: 03 7F 2E 03 A7 2D 04 C0 2D 04 D0 2D 04 A6 2D 03  // .....-..-..-..-.
    8C60: 00 00 00 00 53 35 00 02 53 35 01 02 53 35 02 02  // ....S5..S5..S5..
    8C70: 53 35 03 02 53 35 04 02 53 35 05 02 4D 37 00 02  // S5..S5..S5..M7..
    8C80: 4D 37 01 02 4D 37 02 02 4D 37 03 02 4D 37 04 02  // M7..M7..M7..M7..
    8C90: 4D 37 05 02 82 37 00 02 82 37 01 02 82 37 02 02  // M7...7...7...7..
    8CA0: 82 37 03 02 82 37 04 02 82 37 05 02 BD 39 00 02  // .7...7...7...9..
    8CB0: BD 39 01 02 BD 39 02 02 BD 39 03 02 BD 39 04 02  // .9...9...9...9..
    8CC0: BD 39 05 02 BD 39 00 02 BD 39 01 02 BD 39 02 02  // .9...9...9...9..
    8CD0: BD 39 03 02 BD 39 04 02 BD 39 05 02 84 38 00 02  // .9...9...9...8..
    8CE0: 84 38 01 02 84 38 02 02 84 38 03 02 84 38 04 02  // .8...8...8...8..
    8CF0: 84 38 05 02 C0 38 00 02 C0 38 01 02 C0 38 02 02  // .8...8...8...8..
    8D00: C0 38 03 02 C0 38 04 02 C0 38 05 02 31 38 00 02  // .8...8...8..18..
    8D10: 31 38 01 02 31 38 02 02 31 38 03 02 31 38 04 02  // 18..18..18..18..
    8D20: 31 38 05 02 65 38 00 02 65 38 01 02 65 38 02 02  // 18..e8..e8..e8..
    8D30: 65 38 03 02 65 38 04 02 65 38 05 02 15 3C 00 00  // e8..e8..e8...<..
    8D40: 48 3C 01 00 48 3C 02 00 35 3C 00 00 23 3B 00 02  // H<..H<..5<..#;..
    8D50: 1C 39 00 02 1C 39 01 02 1C 39 02 02 1C 39 03 02  // .9...9...9...9..
    8D60: 1C 39 04 02 1C 39 05 02 3B 3B 00 02 90 3D 05 00  // .9...9..;;...=..
    8D70: 90 3D 01 00 90 3D 00 00 90 3D 02 00 D1 3D 00 00  // .=...=...=...=..
    8D80: D1 3D 02 00 16 3E 00 00 A6 3A 00 02 A6 3A 01 02  // .=...>...:...:..
    8D90: A6 3A 02 02 A6 3A 03 02 A6 3A 04 02 A6 3A 05 02  // .:...:...:...:..
    8DA0: 62 3C 00 00 8A 3C 00 00 0B 3D 00 00 86 3D 00 00  // b<...<...=...=..
    8DB0: 6A 39 00 02 6A 39 01 02 6A 39 02 02 6A 39 03 02  // j9..j9..j9..j9..
    8DC0: 6A 39 04 02 6A 39 05 02 85 3D 00 01 85 3D 00 01  // j9..j9...=...=..
    8DD0: 89 36 00 02 89 36 01 02 89 36 02 02 89 36 03 02  // .6...6...6...6..
    8DE0: 89 36 04 02 89 36 05 02 AA 3C 00 00 86 3D 00 00  // .6...6...<...=..
    8DF0: 86 3D 00 00 86 3D 00 00 BB 3B 00 00 AD 37 00 02  // .=...=...;...7..
    8E00: AD 37 01 02 AD 37 02 02 AD 37 03 02 AD 37 04 02  // .7...7...7...7..
    8E10: AD 37 05 02 DC 37 00 02 DC 37 01 02 DC 37 02 02  // .7...7...7...7..
    8E20: DC 37 03 02 DC 37 04 02 DC 37 05 02 12 38 00 02  // .7...7...7...8..
    8E30: 12 38 01 02 12 38 02 02 12 38 03 02 12 38 04 02  // .8...8...8...8..
    8E40: 12 38 05 02 CD 3C 00 00 F0 3C 00 00 AE 38 01 02  // .8...<...<...8..
    8E50: AE 38 02 02 0A 39 01 02 0A 39 02 02 A6 00 02 01  // .8...9...9......
    8E60: D8 9D 00 00 C2 A9 DE C9 32 DD F6 A9 DA AA 2C CA  // ........2.....,.
    8E70: A8 A8 46 B6 10 B7 42 B7 6C B7 68 BD 9A BE 00 00  // ..F...B.l.h.....
    8E80: 1E DB 00 00 0C C0 00 00 FA C0 26 AB 68 AE BC BC  // ..........&.h...
    8E90: E8 B2 00 B3 12 B3 A0 B3 48 9F 00 00 EA E6 62 E7  // ........H.....b.
    8EA0: 38 E9 88 C1 00 C2 74 C2 00 00 B2 C2 00 00 00 00  // 8.....t.........
    8EB0: 00 00 DE C2 AE C4 74 C5 1C C7 66 C7 10 ED FC C7  // ......t...f.....
    8EC0: 18 C8 36 C8 00 00 14 EA 8A C9 62 EC 5E CB 00 00  // ..6.......b.^...
    8ED0: 90 CD D6 CD E0 CD EA CD 22 D7 C2 D8 9A DF 1C D9  // ........".......
    8EE0: 06 DA 00 00 00 00 4E DB 00 00 DE EB 2A DD A8 BE  // ......N.....*...
    8EF0: 04 C0 00 00 00 00 00 00 C4 DF 0A E1 42 E4 8E E6  // ............B...
    8F00: B0 DC 4A 00 02 01 00 00 D4 9C 00 00 E4 8E AC 8F  // ..J.............
    8F10: F4 8F 28 90 00 00 8C 9C EC 9C 00 00 84 90 90 90  // ..(.............
    8F20: 04 91 A8 9C 78 91 00 00 20 94 00 00 00 00 00 00  // ....x... .......
    8F30: 00 00 34 94 DC 94 BC 94 00 00 00 00 54 9C E2 94  // ..4.........T...
    8F40: 00 00 00 00 AC 9A 7E 9B 00 00 00 00 C8 00 02 01  // ......~.........
    8F50: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
    8F60: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
    8F70: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
    8F80: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
    8F90: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
    8FA0: 06 00 55 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ..U<0*......(.`.
    8FB0: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    8FC0: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    8FD0: 03 00 00 00 00 00 00 00 00 00 EA 3C 8F 2F 78 05  // ...........<./x.
    8FE0: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    8FF0: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    9000: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    9010: 00 00 EC 3C 48 00 03 01 00 01 01 10 D0 4C 01 00  // ...<H........L..
    9020: 80 38 01 00 01 00 00 00 81 28 00 00 4C 00 00 00  // .8.......(..L...
    9030: 84 03 00 00 E2 04 00 00 01 00 00 00 F4 00 00 00  // ................
    9040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9050: 00 00 00 00 00 00 00 00 00 00 00 00 34 00 02 01  // ............4...
    9060: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    9070: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    9080: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    9090: 5C 00 02 01 00 00 00 00 00 00 00 00 00 00 00 00  // \...............
    90A0: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    90B0: C8 00 00 00 00 00 34 21 00 00 B8 0B 07 5A 5A 7D  // ......4!.....ZZ}
    90C0: 00 5A 07 01 00 00 00 00 00 FF FF 00 00 00 00 00  // .Z..............
    90D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    90E0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 02 01  // ................
    90F0: 00 00 00 00 00 00 00 00 74 00 02 01 CB 55 00 00  // ........t....U..
    9100: 00 00 01 00 CB 55 00 00 08 08 02 00 CB 55 00 00  // .....U.......U..
    9110: 10 10 03 00 CB 55 00 00 18 14 04 00 CB 55 00 00  // .....U.......U..
    9120: 1A 18 05 00 CB 55 00 00 1C 1C 06 00 A7 55 00 00  // .....U.......U..
    9130: 08 08 90 00 AB 55 00 00 08 08 91 00 AF 55 00 00  // .....U.......U..
    9140: 08 08 92 00 B3 55 00 00 08 08 93 00 B7 55 00 00  // .....U.......U..
    9150: 08 08 94 00 BB 55 00 00 08 08 95 00 D7 55 00 00  // .....U.......U..
    9160: 01 04 96 00 BF 55 00 00 08 08 97 00 74 00 01 01  // .....U......t...
    9170: 10 01 06 12 11 01 16 12 13 01 06 6A 14 01 16 6A  // ...........j...j
    9180: 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01 16 EA  // ...U...U........
    9190: 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01 0A 6A  // e...f...!..."..j
    91A0: 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01 0A EB  // #..U$...E...F...
    91B0: 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01 0A 70  // u...v......p...p
    91C0: D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01 0A 72  // ...q...q...r...r
    91D0: E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01 0A 74  // ...s...s...t...t
    91E0: A7 02 08 01 00 5C 00 68 07 00 00 4F 2D 00 00 1B  // .....\.h...O-...
    91F0: 00 48 00 00 00 80 A9 03 00 F0 49 02 00 32 00 08  // .H........I..2..
    9200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 01  // ................
    9210: 5C 00 40 02 37 02 94 00 8F 01 B4 00 1E 01 7A 00  // \.@.7.........z.
    9220: 8C 00 AD 01 00 00 00 00 63 02 00 00 90 00 99 02  // ........c.......
    9230: 5E 01 34 01 88 01 68 36 02 00 71 02 02 02 00 00  // ^.4...h6..q.....
    9240: 00 00 00 00 08 00 00 00 00 00 00 00 05 00 07 00  // ................
    9250: 03 00 05 00 00 00 00 00 00 00 01 08 20 03 84 03  // ............ ...
    9260: B6 03 E8 03 1A 04 4C 04 7E 04 B0 04 01 01 E2 04  // ......L.~.......
    9270: 01 01 84 03 00 06 60 EA 00 00 00 40 19 01 00 01  // ......`....@....
    9280: DC 4A 01 00 02 00 77 01 00 03 90 91 01 00 05 6C  // .J....w........l
    9290: B0 01 00 07 01 08 D0 4C 01 00 00 00 80 00 00 00  // .......L........
    92A0: 00 00 00 1C 83 01 00 01 00 00 00 00 00 00 00 00  // ................
    92B0: 88 BC 01 00 02 00 00 00 00 00 00 00 00 B4 EF 01  // ................
    92C0: 00 03 00 00 00 00 00 00 00 00 80 00 02 00 04 00  // ................
    92D0: 00 00 00 00 00 00 00 C8 3F 02 00 05 00 00 00 00  // ........?.......
    92E0: 01 00 00 00 C8 58 02 00 06 00 00 00 00 01 00 00  // .....X..........
    92F0: 00 18 6D 02 00 07 00 00 00 00 01 00 00 00 00 04  // ..m.............
    9300: 60 EA 00 00 00 40 19 01 00 00 DC 4A 01 00 00 90  // `....@.....J....
    9310: 5F 01 00 00 00 08 28 6E 00 00 00 2C C9 00 00 01  // _.....(n...,....
    9320: F8 0B 01 00 02 80 38 01 00 03 90 5F 01 00 04 F4  // ......8...._....
    9330: 91 01 00 05 D0 B0 01 00 06 C0 D4 01 00 07 00 08  // ................
    9340: 6C 39 00 00 00 24 5E 00 00 01 FC 85 00 00 02 AC  // l9...$^.........
    9350: BC 00 00 03 34 D0 00 00 04 68 6E 01 00 05 08 97  // ....4....hn.....
    9360: 01 00 06 EC A3 01 00 07 00 01 68 3C 01 00 00 01  // ..........h<....
    9370: 04 3C 41 00 00 00 00 00 50 C3 00 00 00 00 00 70  // .<A.....P......p
    9380: 11 01 00 01 00 00 80 38 01 00 02 00 00 01 08 00  // .......8........
    9390: 98 85 00 00 40 B5 00 00 60 EA 00 00 50 C3 00 00  // ....@...`...P...
    93A0: 01 80 BB 00 00 60 EA 00 00 94 0B 01 00 50 C3 00  // .....`.......P..
    93B0: 00 02 78 FF 00 00 40 19 01 00 B4 27 01 00 50 C3  // ..x...@....'..P.
    93C0: 00 00 03 B4 27 01 00 DC 4A 01 00 DC 4A 01 00 50  // ....'...J...J..P
    93D0: C3 00 00 04 80 38 01 00 90 5F 01 00 DC 4A 01 00  // .....8..._...J..
    93E0: 50 C3 00 00 05 DC 4A 01 00 00 77 01 00 90 5F 01  // P.....J...w..._.
    93F0: 00 50 C3 00 00 06 00 77 01 00 00 77 01 00 90 5F  // .P.....w...w..._
    9400: 01 00 50 C3 00 00 07 00 77 01 00 90 91 01 00 00  // ..P.....w.......
    9410: 77 01 00 50 C3 00 00 01 18 00 00 00 00 00 00 00  // w..P............
    9420: 0B E4 12 D0 07 D8 0E 46 00 19 00 54 03 90 01 90  // .......F...T....
    9430: 01 90 01 90 01 90 01 90 01 90 01 01 32 00 37 00  // ............2.7.
    9440: 02 09 26 07 B9 00 B9 00 B9 00 2C 01 00 00 5B 00  // ..&.......,...[.
    9450: 69 00 50 00 50 00 5F 00 68 00 66 00 64 00 40 00  // i.P.P._.h.f.d.@.
    9460: 90 92 97 60 96 00 90 55 00 00 00 00 00 00 00 00  // ...`...U........
    9470: 00 00 00 00 00 00 00 00 00 02 02 D4 30 00 00 02  // ............0...
    9480: 10 60 EA 00 00 02 10 00 14 00 02 01 02 00 08 00  // .`..............
    9490: 80 00 00 02 00 04 00 08 40 00 FF FF 88 00 01 04  // ........@.......
    94A0: 88 06 04 00 13 31 48 00 21 21 00 00 6C 00 00 00  // .....1H.!!..l...
    94B0: 08 00 00 00 13 32 51 00 21 22 00 00 73 00 00 00  // .....2Q.!"..s...
    94C0: 80 00 00 00 0C 31 5A 00 1E 21 00 00 7A 00 00 00  // .....1Z..!..z...
    94D0: 00 02 00 00 0C 32 63 00 1E 22 00 00 81 00 00 00  // .....2c.."......
    94E0: 00 04 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    94F0: 00 02 04 02 00 FF 01 04 94 00 02 04 05 00 FF 01  // ................
    9500: 04 95 00 02 04 06 00 FF 14 06 0F 00 00 00 FF 14  // ................
    9510: 06 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F  // ................
    9520: 00 00 00 FF 20 00 03 01 94 E6 C5 00 00 70 03 00  // .... ........p..
    9530: D9 1F 00 00 00 00 00 00 00 00 B8 0B 00 06 60 00  // ..............`.
    9540: 8C 0A 00 00 05 00 01 01 00 00 CA 05 02 03 9A 00  // ................
    9550: DA 00 00 00 56 05 00 00 00 00 00 00 00 00 03 00  // ....V...........
    9560: 00 04 00 20 00 00 FF FF 00 00 00 00 00 00 00 00  // ... ............
    9570: 00 00 00 00 00 00 21 00 00 60 10 07 35 00 00 02  // ......!..`..5...
    9580: 00 00 00 00 20 00 00 FF FF 00 00 00 00 00 00 00  // .... ...........
    9590: 00 00 00 00 00 00 00 2B 00 00 60 10 07 35 01 01  // .......+..`..5..
    95A0: 02 21 00 4B 48 41 38 34 33 38 30 31 42 00 00 20  // .!.KHA843801B.. 
    95B0: 00 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    95C0: 00 00 36 00 00 60 10 07 35 00 06 02 44 00 48 35  // ..6..`..5...D.H5
    95D0: 56 52 33 32 45 53 4D 34 48 5F 52 45 56 31 5F 50  // VR32ESM4H_REV1_P
    95E0: 52 4F 44 00 04 00 00 00 4F 5C 01 00 02 00 00 01  // ROD.....O\......
    95F0: 03 00 00 01 07 00 00 01 FF FF FF 00 5C 1A AB 63  // ............\..c
    9600: DD F9 DD DD F8 00 AA 55 00 00 00 00 FF FF FF 01  // .......U........
    9610: 5C 1A AB 61 CC F9 CC CC A8 00 AA 55 00 00 10 00  // \..a.......U....
    9620: 00 00 00 00 16 00 00 00 81 40 01 00 82 40 01 00  // .........@...@..
    9630: 83 40 01 00 84 40 01 00 85 40 01 00 86 40 01 00  // .@...@...@...@..
    9640: 87 40 01 00 88 40 01 00 89 40 01 00 8A 40 01 00  // .@...@...@...@..
    9650: 8C 40 01 00 8D 40 01 00 8E 40 01 00 8F 40 01 00  // .@...@...@...@..
    9660: 90 40 01 00 91 40 01 00 94 40 01 00 95 40 01 00  // .@...@...@...@..
    9670: 96 40 01 00 97 40 01 00 98 40 01 00 A1 40 01 00  // .@...@...@...@..
    9680: 3C 41 00 01 0A 06 03 03 09 09 03 03 02 02 00 05  // <A..............
    9690: 08 00 00 00 03 03 05 00 04 00 00 00 00 02 00 00  // ................
    96A0: 03 02 01 03 03 02 01 03 01 0D 00 00 8C 02 00 00  // ................
    96B0: 08 0C 00 00 2E 00 00 00 00 00 11 00 04 00 00 00  // ................
    96C0: 55 14 0D 01 1B 00 07 00 04 00 02 05 09 01 0C 01  // U...............
    96D0: 00 00 02 00 2C 00 00 00 44 04 00 00 30 75 00 01  // ....,...D...0u..
    96E0: 0B 0A 05 03 0F 0F 05 05 02 02 00 05 08 00 00 00  // ................
    96F0: 03 03 05 00 06 00 00 00 00 03 00 00 03 02 01 03  // ................
    9700: 03 02 01 03 01 0E 00 00 92 04 00 00 08 0C 00 00  // ................
    9710: 51 00 00 00 00 00 11 00 04 00 00 00 55 14 0E 01  // Q...........U...
    9720: 30 00 07 00 04 00 02 05 0A 01 0C 01 00 00 02 00  // 0...............
    9730: 4E 00 00 00 44 04 00 00 50 C3 00 01 0C 11 08 05  // N...D...P.......
    9740: 18 18 07 07 02 03 00 05 08 00 00 00 04 03 05 00  // ................
    9750: 09 00 00 00 00 04 00 00 03 02 01 03 03 02 01 03  // ................
    9760: 01 0E 00 00 9E 07 00 00 08 0C 00 00 87 00 00 00  // ................
    9770: 00 00 11 00 04 00 00 00 55 14 11 01 50 00 07 00  // ........U...P...
    9780: 04 00 02 05 0B 02 0C 01 00 00 02 00 82 00 00 00  // ................
    9790: 44 04 00 00 80 38 01 01 11 1B 0D 08 27 27 0C 0C  // D....8......''..
    97A0: 04 05 00 05 0D 00 00 00 06 03 07 00 0D 00 00 00  // ................
    97B0: 00 07 00 00 03 02 01 03 03 02 01 03 01 11 00 00  // ................
    97C0: 30 0C 00 00 08 0C 00 00 D8 00 00 00 00 00 11 00  // 0...............
    97D0: 06 00 00 00 86 20 18 01 80 00 07 00 06 00 02 06  // ..... ..........
    97E0: 10 04 0C 01 00 00 02 00 D0 00 00 00 44 04 00 00  // ............D...
    97F0: A0 86 01 01 14 21 10 0A 2F 2F 0E 0E 04 06 00 05  // .....!..//......
    9800: 10 00 00 00 07 04 09 00 10 00 00 00 00 08 00 00  // ................
    9810: 03 02 01 03 03 02 01 03 01 13 00 00 3C 0F 00 00  // ............<...
    9820: 08 0F 00 00 0E 01 00 00 00 00 11 00 08 00 00 00  // ................
    9830: A8 28 1C 01 A0 00 07 00 08 00 02 08 13 05 0C 01  // .(..............
    9840: 00 00 02 00 04 01 00 00 44 04 00 00 3C 41 00 02  // ........D...<A..
    9850: 0A 05 05 03 08 08 03 03 03 03 00 05 0C 00 00 00  // ................
    9860: 04 04 04 00 04 00 00 00 00 03 00 00 03 02 01 03  // ................
    9870: 03 02 01 03 01 0C 00 00 9C 02 00 00 04 0C 00 00  // ................
    9880: 2E 00 00 00 00 00 00 00 2E 00 00 00 55 14 0D 01  // ............U...
    9890: 15 00 07 00 03 00 02 05 09 02 0C 01 00 00 02 00  // ................
    98A0: 25 00 00 00 44 04 00 00 30 75 00 02 0C 09 09 05  // %...D...0u......
    98B0: 0E 0E 05 05 03 03 00 05 0C 00 00 00 04 04 04 00  // ................
    98C0: 06 00 00 00 00 03 00 00 03 02 01 03 03 02 01 03  // ................
    98D0: 01 0E 00 00 B0 04 00 00 04 0C 00 00 51 00 00 00  // ............Q...
    98E0: 00 00 00 00 51 00 00 00 55 14 0D 01 24 00 07 00  // ....Q...U...$...
    98F0: 03 00 02 05 0B 02 0C 01 00 00 02 00 42 00 00 00  // ............B...
    9900: 44 04 00 00 50 C3 00 02 0D 0F 0E 07 17 17 08 08  // D...P...........
    9910: 03 03 00 05 0C 00 00 00 04 04 04 00 09 00 00 00  // ................
    9920: 00 04 00 00 03 02 01 03 03 02 01 03 01 0F 00 00  // ................
    9930: D0 07 00 00 04 0C 00 00 87 00 00 00 00 00 00 00  // ................
    9940: 87 00 00 00 55 14 10 01 3C 00 07 00 04 00 02 05  // ....U...<.......
    9950: 0C 02 0C 01 00 00 02 00 6E 00 00 00 44 04 00 00  // ........n...D...
    9960: 70 11 01 02 11 15 13 09 21 21 0C 0C 03 03 00 06  // p.......!!......
    9970: 0D 00 00 00 06 04 04 00 0B 00 00 00 00 07 00 00  // ................
    9980: 03 02 01 03 03 02 01 03 01 11 00 00 AA 0A 00 00  // ................
    9990: 04 0C 00 00 BD 00 00 00 00 00 00 00 BD 00 00 00  // ................
    99A0: 87 20 17 01 54 00 07 00 07 00 02 07 10 04 0C 01  // . ..T...........
    99B0: 00 00 02 00 9A 00 00 00 44 04 00 00 80 38 01 02  // ........D....8..
    99C0: 12 18 16 0A 25 25 0D 0D 03 03 00 06 0D 00 00 00  // ....%%..........
    99D0: 06 04 04 00 0C 00 00 00 00 07 00 00 03 02 01 03  // ................
    99E0: 03 02 01 03 01 12 00 00 80 0C 00 00 04 0C 00 00  // ................
    99F0: D8 00 00 00 00 00 00 00 D8 00 00 00 87 20 17 01  // ............. ..
    9A00: 60 00 07 00 07 00 02 07 11 04 0C 01 00 00 02 00  // `...............
    9A10: B0 00 00 00 44 04 00 00 A0 86 01 02 14 1D 1C 0E  // ....D...........
    9A20: 2D 2D 10 10 03 03 00 07 10 00 00 00 08 05 06 00  // --..............
    9A30: 11 00 00 00 00 08 00 00 03 02 01 03 03 02 01 03  // ................
    9A40: 01 12 00 00 3C 0F 00 00 04 0F 00 00 0E 01 00 00  // ....<...........
    9A50: 00 00 00 00 0E 01 00 00 A8 28 1B 01 78 00 07 00  // .........(..x...
    9A60: 08 00 02 08 13 06 0C 01 00 00 02 00 DC 00 00 00  // ................
    9A70: 44 04 00 00 00 00 00 00 00 00 00 00 FF FF FF 00  // D...............
    9A80: FF FF FF 01 FF FF FF 02 FF FF FF 03 FF FF FF 04  // ................
    9A90: FF FF FF 05 FF FF FF 06 FF FF FF 07 00 00 00 00  // ................
    9AA0: 0D 00 00 00 50 5C 01 00 51 5C 01 00 52 5C 01 00  // ....P\..Q\..R\..
    9AB0: 53 5C 01 00 54 5C 01 00 55 5C 01 00 56 5C 01 00  // S\..T\..U\..V\..
    9AC0: 57 5C 01 00 00 00 00 01 01 00 00 01 04 00 00 01  // W\..............
    9AD0: 05 00 00 01 06 00 00 01 FF FF FF 00 04 80 00 00  // ................
    9AE0: 00 00 00 00 20 01 00 00 00 00 00 00 00 00 00 00  // .... ...........
    9AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 B6 01 00  // ................
    9B00: 00 00 00 07 00 00 00 00 00 00 00 00 02 02 02 02  // ................
    9B10: 00 00 00 00 D2 00 04 02 B0 04 00 00 20 03 00 00  // ............ ...
    9B20: FB 00 00 00 35 04 00 00 62 00 00 00 1B 00 00 00  // ....5...b.......
    9B30: 00 00 B3 35 FD FF 33 B9 01 00 1D 5A 02 00 1E 43  // ...5..3....Z...C
    9B40: FD FF 77 74 01 00 86 28 02 00 00 00 00 00 DD 00  // ..wt...(........
    9B50: 00 00 CC FF FF FF 00 00 00 00 9F 00 00 00 DC FF  // ................
    9B60: FF FF C0 12 00 01 00 01 00 01 00 00 00 00 00 00  // ................
    9B70: AC 09 00 00 49 0A 00 00 00 00 00 00 AC 09 00 00  // ....I...........
    9B80: 49 0A 00 00 00 00 00 00 9A 01 00 00 00 00 00 00  // I...............
    9B90: 00 00 00 00 9A 01 00 00 00 00 00 00 00 00 00 00  // ................
    9BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9BB0: 25 00 00 00 01 01 00 00 00 00 06 09 00 00 56 0D  // %.............V.
    9BC0: 00 00 00 00 00 00 06 09 00 00 56 0D 00 00 00 00  // ..........V.....
    9BD0: 00 00 9A 01 00 00 00 00 00 00 00 00 00 00 9A 01  // ................
    9BE0: 00 00 00 00 00 00 D6 00 04 01 01 03 BA 00 1A 06  // ................
    9BF0: 60 00 00 00 00 00 35 00 E7 00 35 00 E8 00 27 00  // `.....5...5...'.
    9C00: 34 00 3F 00 64 00 40 00 9D 00 41 00 71 00 42 00  // 4.?.d.@...A.q.B.
    9C10: 38 00 6B 00 01 00 3B 00 F0 00 74 00 BB 00 61 00  // 8.k...;...t...a.
    9C20: 60 00 76 00 84 00 77 00 E3 00 28 00 FF 00 49 00  // `.v...w...(...I.
    9C30: D6 00 37 00 14 00 94 00 67 00 92 00 0A 00 93 00  // ..7.....g.......
    9C40: A0 00 95 00 22 00 43 00 9D 00 44 00 19 00 45 00  // ....".C...D...E.
    9C50: 2E 00 46 00 38 00 6C 00 01 00 62 00 A0 00 78 00  // ..F.8.l...b...x.
    9C60: 60 00 79 00 F3 00 29 00 40 00 4A 00 DE 00 38 00  // `.y...).@.J...8.
    9C70: 1E 00 48 00 FC 00 47 00 07 00 E8 00 03 00 51 00  // ..H...G.......Q.
    9C80: 67 00 E8 00 07 00 99 00 FC 00 4B 00 40 00 4C 00  // g.........K.@.L.
    9C90: 44 00 5E 00 44 00 5C 00 4A 00 5D 00 14 00 66 00  // D.^.D.\.J.]...f.
    9CA0: CC 00 FF 00 01 07 0C 00 2E 00 01 FF 00 FF 00 00  // ................
    9CB0: 02 07 0C 00 2E 00 01 FF 00 20 00 00 38 00 04 01  // ......... ..8...
    9CC0: 04 00 00 00 60 EA 00 00 8C 0A 46 05 00 00 00 00  // ....`.....F.....
    9CD0: 00 00 00 00 7C 01 4E 0C 01 01 00 00 55 00 00 00  // ....|.N.....U...
    9CE0: 8C 0A 00 00 00 0C 06 01 01 06 06 00 00 00 00 00  // ................
    9CF0: 00 00 00 00 1C 00 03 01 00 09 00 00 F4 01 4E 0C  // ..............N.
    9D00: 00 00 4E 0C 8C 0A 00 00 FF 00 05 00 FF 00 00 01  // ..N.............
    9D10: 2C 00 02 02 00 09 04 04 10 01 04 04 64 C0 00 00  // ,...........d...
    9D20: 65 C0 00 00 66 C0 00 00 67 C0 00 00 E8 C0 00 00  // e...f...g.......
    9D30: A0 21 00 00 42 EC 00 00 8C 0A 00 00 18 00 02 01  // .!..B...........
    9D40: 00 07 00 04 00 10 70 08 00 10 70 08 00 A4 1F 00  // ......p...p.....
    9D50: 00 A4 1F 00 EC 00 02 02 00 00 00 00 00 00 00 00  // ................
    9D60: 00 00 00 00 00 00 00 00 24 50 53 50 26 7F 5A A5  // ........$PSP&.Z.
    9D70: 0C 00 00 00 00 00 00 00 00 00 00 00 40 02 00 00  // ............@...
    9D80: 00 00 02 00 00 00 00 00 01 00 00 00 00 A0 00 00  // ................
    9D90: 00 D0 02 00 00 00 00 00 03 00 00 00 40 03 00 00  // ............@...
    9DA0: 00 04 02 00 00 00 00 00 04 00 00 00 00 F2 00 00  // ................
    9DB0: 00 00 00 00 00 00 00 00 05 00 00 00 00 01 00 00  // ................
    9DC0: 00 08 02 00 00 00 00 00 07 00 00 00 00 10 00 00  // ................
    9DD0: 00 10 02 00 00 00 00 00 09 00 00 00 08 00 00 00  // ................
    9DE0: D0 9D 00 00 00 00 00 00 11 00 00 00 00 84 00 00  // ................
    9DF0: 00 70 03 00 00 00 00 00 12 00 00 00 00 03 00 00  // .p..............
    9E00: 00 09 02 00 00 00 00 00 14 00 00 00 00 50 00 00  // .............P..
    9E10: 00 80 02 00 00 00 00 00 21 00 00 00 10 00 00 00  // ........!.......
    9E20: 00 0C 02 00 00 00 00 00 23 00 00 00 00 50 00 00  // ........#....P..
    9E30: 00 20 02 00 00 00 00 00 01 00 00 00 00 00 00 00  // . ..............
    9E40: 70 01 02 01 00 08 37 00 00 4B E5 00 04 49 59 01  // p.....7..K...IY.
    9E50: 4B E5 00 02 44 21 00 4B E5 00 40 49 CB 00 43 53  // K...D!.K..@I..CS
    9E60: 01 4A 65 53 00 02 49 53 01 4B E5 01 01 49 46 00  // .JeS..IS.K...IF.
    9E70: 08 E5 01 FD 66 18 03 24 41 1B 00 4C 25 41 02 44  // ....f..$A..L%A.D
    9E80: 46 00 0E E5 01 02 02 05 02 06 00 00 00 52 15 02  // F............R..
    9E90: 01 02 00 52 47 52 1B 02 05 02 00 07 00 00 52 0D  // ...RGR........R.
    9EA0: 52 3D 52 02 02 01 02 00 0E E5 02 08 52 0A 52 08  // R=R.........R.R.
    9EB0: 02 01 02 01 52 05 02 25 02 07 52 1C 52 1A 52 16  // ....R..%..R.R.R.
    9EC0: 52 18 52 19 02 05 02 00 02 00 00 52 0D 02 25 02  // R.R........R..%.
    9ED0: 01 52 1C 02 05 02 00 01 00 00 55 00 03 4B E5 01  // .R........U..K..
    9EE0: 02 44 A8 00 02 25 03 01 52 15 3D E5 02 01 49 53  // .D...%..R.=...IS
    9EF0: 01 4B E5 00 40 49 CB 00 02 05 02 00 03 00 00 02  // .K..@I..........
    9F00: 05 03 01 00 00 00 52 15 43 53 01 02 05 02 00 03  // ......R.CS......
    9F10: 00 00 02 05 03 02 00 00 00 52 15 02 05 02 01 00  // .........R......
    9F20: 00 00 52 15 3D E5 02 01 49 53 01 02 05 02 02 06  // ..R.=...IS......
    9F30: 12 00 52 15 3D E5 02 00 44 00 01 55 00 02 52 1D  // ..R.=...D..U..R.
    9F40: 02 05 02 02 0C 09 00 52 15 02 05 02 02 0D 0A 00  // .......R........
    9F50: 52 15 02 05 02 02 2A 14 00 52 15 02 05 02 02 2B  // R.....*..R.....+
    9F60: 15 00 52 15 02 05 02 02 2C 16 00 52 15 02 05 02  // ..R.....,..R....
    9F70: 02 0E 08 00 52 15 02 05 02 02 0F 07 00 52 15 02  // ....R........R..
    9F80: 05 02 02 10 13 00 52 15 02 05 02 05 00 00 00 52  // ......R........R
    9F90: 15 50 14 0D 65 53 00 02 5B 02 05 02 00 07 00 00  // .P..eS..[.......
    9FA0: 52 0D 02 05 02 00 02 00 00 52 0D 52 3D 52 18 5B  // R........R.R=R.[
    9FB0: 5F 09 01 01 08 00 37 00 00 3D 25 00 01 44 BC 01  // _.....7..=%..D..
    9FC0: 52 0E 03 01 00 00 15 05 00 02 01 05 10 74 00 00  // R............t..
    9FD0: 00 00 01 05 44 70 71 00 00 00 03 02 01 00 1B 05  // ....Dpq.........
    9FE0: 01 02 33 05 01 01 00 00 00 15 05 01 04 01 02 13  // ..3.............
    9FF0: 76 01 1B 05 01 0C 15 05 01 0C 5E 05 01 00 F2 FF  // v.........^.....
    A000: FF 00 00 00 00 01 02 45 70 01 01 05 C0 70 81 03  // .......Ep....p..
    A010: 30 00 03 02 41 00 33 05 41 24 00 00 00 15 05 41  // 0...A.3.A$.....A
    A020: 02 01 02 C1 70 41 03 02 41 00 33 05 41 21 00 00  // ....pA..A.3.A!..
    A030: 00 15 05 41 02 01 02 C2 70 41 03 02 41 00 15 05  // ...A....pA..A...
    A040: 41 0A 33 05 41 00 90 00 00 0F 25 41 01 01 02 C3  // A.3.A.....%A....
    A050: 70 41 01 05 C4 70 81 03 20 00 03 02 41 00 33 05  // pA...p.. ...A.3.
    A060: 41 20 00 00 00 15 05 41 02 01 02 C5 70 41 03 02  // A .....A....pA..
    A070: 41 00 33 05 41 01 00 00 00 15 05 41 02 01 02 C6  // A.3.A......A....
    A080: 70 41 03 02 41 00 15 05 41 0A 33 05 41 00 80 00  // pA..A...A.3.A...
    A090: 00 0F 25 41 01 01 02 C7 70 41 01 05 42 70 71 00  // ..%A....pA..Bpq.
    A0A0: 00 00 09 05 01 00 F0 FF 0F 0F 25 01 10 01 02 43  // ..........%....C
    A0B0: 70 01 66 FF 2D 0D 42 F0 01 56 00 40 03 0C 40 00  // p.f.-.B..V.@..@.
    A0C0: 00 3E 0D 40 00 00 44 2C 01 01 02 00 00 40 01 04  // .>.@..D,.....@..
    A0D0: 01 00 02 00 2D 0D 42 06 00 43 09 01 66 FF 2D 0D  // ....-.B..C..f.-.
    A0E0: 42 18 09 56 00 40 03 A4 40 00 00 3E A5 40 FF 44  // B..V.@..@..>.@.D
    A0F0: 7B 01 3E A5 40 00 44 4D 01 03 25 40 01 01 02 10  // {.>.@.DM..%@....
    A100: 74 40 56 00 40 03 0C 40 01 00 01 02 41 74 40 03  // t@V.@..@....At@.
    A110: 0C 40 03 00 01 02 42 74 40 03 0C 40 05 00 01 02  // .@....Bt@..@....
    A120: 43 74 40 2D 0D 42 07 00 43 33 01 01 05 10 74 00  // Ct@-.B..C3....t.
    A130: 00 00 00 01 05 14 72 09 00 00 00 01 05 10 72 00  // ......r.......r.
    A140: 00 0F 40 01 05 11 72 DB F7 60 85 01 05 12 72 00  // ..@...r..`....r.
    A150: 88 00 00 01 05 FC 70 01 00 00 00 01 05 D8 75 0D  // ......p.......u.
    A160: 00 20 00 01 05 D4 75 00 00 00 0E 5B 01 05 C9 71  // . ....u....[...q
    A170: FF FF 00 00 01 05 CA 71 0E 00 00 00 52 3E 01 04  // .......q....R>..
    A180: CB 71 04 00 01 05 41 71 03 00 00 00 01 05 10 74  // .q....Aq.......t
    A190: 02 00 00 00 01 05 C0 75 00 30 00 00 5B 7A 6F 07  // .......u.0..[zo.
    A1A0: 66 71 36 00 00 00 67 71 41 60 04 00 61 71 37 00  // fq6...gqA`..aq7.
    A1B0: 00 00 62 71 41 60 04 00 38 71 10 00 00 00 39 71  // ..bqA`..8q....9q
    A1C0: 10 00 00 00 34 71 10 10 02 00 10 74 01 00 20 00  // ....4q.....t.. .
    A1D0: 38 71 18 00 00 00 39 71 14 00 00 00 34 71 20 20  // 8q....9q....4q  
    A1E0: 00 00 10 74 01 00 21 00 38 71 18 00 00 00 39 71  // ...t..!.8q....9q
    A1F0: 14 00 00 00 34 71 20 20 00 00 10 74 01 00 22 00  // ....4q  ...t..".
    A200: 38 71 10 00 00 00 39 71 10 00 00 00 34 71 10 10  // 8q....9q....4q..
    A210: 00 00 10 74 01 00 23 00 5D 71 02 00 70 1C 5E 71  // ...t..#.]q..p.^q
    A220: 00 00 00 00 5F 71 01 00 10 18 60 71 00 00 00 00  // ...._q....`q....
    A230: 59 71 7F 00 80 20 5A 71 00 00 00 00 5B 71 7F 00  // Yq... Zq....[q..
    A240: 10 3C 5C 71 00 00 00 00 10 74 00 00 00 00 3B 71  // .<\q.....t....;q
    A250: 13 11 98 00 3D 71 19 C8 41 00 3C 71 0C 10 56 00  // ....=q..A.<q..V.
    A260: 3E 71 0E 66 20 00 49 71 00 00 30 00 45 71 00 08  // >q.f .Iq..0.Eq..
    A270: 01 00 4A 71 00 00 40 00 47 71 00 00 10 02 4C 71  // ..Jq..@.Gq....Lq
    A280: 24 00 00 00 53 71 00 00 10 00 4F 71 00 04 01 00  // $...Sq....Oq....
    A290: 54 71 00 00 10 00 46 71 00 84 00 00 50 71 00 84  // Tq....Fq....Pq..
    A2A0: 00 00 51 71 00 00 10 00 10 74 01 00 26 00 3B 71  // ..Qq.....t..&.;q
    A2B0: 11 11 78 00 3D 71 19 C8 41 00 3C 71 0B 10 46 00  // ..x.=q..A.<q..F.
    A2C0: 3E 71 0E 66 20 00 47 71 00 84 10 02 51 71 00 84  // >q.f .Gq....Qq..
    A2D0: 10 00 10 74 01 00 2D 00 3B 71 13 11 80 09 3D 71  // ...t..-.;q....=q
    A2E0: 19 C8 10 04 3C 71 0C 10 60 05 3E 71 0E 66 00 02  // ....<q..`.>q.f..
    A2F0: 48 71 00 00 10 02 4D 71 24 00 00 00 46 71 00 00  // Hq....Mq$...Fq..
    A300: 00 00 50 71 00 00 00 00 47 71 00 84 00 00 4C 71  // ..Pq....Gq....Lq
    A310: 00 00 00 00 51 71 00 84 00 00 52 71 00 00 10 00  // ....Qq....Rq....
    A320: 10 74 01 00 32 00 3B 71 12 81 09 00 3D 71 0F 18  // .t..2.;q....=q..
    A330: 06 00 3C 71 0B 60 05 00 3E 71 08 06 02 00 46 71  // ..<q.`..>q....Fq
    A340: 00 00 10 02 4B 71 25 00 00 00 45 71 00 84 00 00  // ....Kq%...Eq....
    A350: 4A 71 00 00 00 00 4F 71 00 84 00 00 54 71 00 00  // Jq....Oq....Tq..
    A360: 00 00 50 71 00 00 10 00 47 71 00 00 00 00 4C 71  // ..Pq....Gq....Lq
    A370: 00 00 00 00 51 71 00 00 00 00 10 74 01 00 33 00  // ....Qq.....t..3.
    A380: 3B 71 12 81 09 00 3D 71 0F 18 06 00 3C 71 0B 60  // ;q....=q....<q.`
    A390: 05 00 3E 71 08 06 02 00 46 71 00 00 10 02 4B 71  // ..>q....Fq....Kq
    A3A0: 25 00 00 00 45 71 00 84 00 00 4A 71 00 00 00 00  // %...Eq....Jq....
    A3B0: 4F 71 00 84 00 00 54 71 00 00 00 00 50 71 00 00  // Oq....Tq....Pq..
    A3C0: 10 00 47 71 00 00 00 00 4C 71 00 00 00 00 51 71  // ..Gq....Lq....Qq
    A3D0: 00 00 00 00 10 74 01 00 34 00 3B 71 12 81 09 00  // .....t..4.;q....
    A3E0: 3D 71 0F 18 06 00 3C 71 0B 60 05 00 3E 71 08 06  // =q....<q.`..>q..
    A3F0: 02 00 46 71 00 00 10 02 4B 71 25 00 00 00 45 71  // ..Fq....Kq%...Eq
    A400: 00 84 00 00 4A 71 00 00 00 00 4F 71 00 84 00 00  // ....Jq....Oq....
    A410: 54 71 00 00 00 00 50 71 00 00 10 00 47 71 00 00  // Tq....Pq....Gq..
    A420: 00 00 4C 71 00 00 00 00 51 71 00 00 00 00 10 74  // ..Lq....Qq.....t
    A430: 01 00 35 00 3B 71 12 81 09 00 3D 71 0F 18 06 00  // ..5.;q....=q....
    A440: 3C 71 0B 60 05 00 3E 71 08 06 02 00 46 71 00 00  // <q.`..>q....Fq..
    A450: 10 02 4B 71 25 00 00 00 45 71 00 84 00 00 4A 71  // ..Kq%...Eq....Jq
    A460: 00 00 00 00 4F 71 00 84 00 00 54 71 00 00 00 00  // ....Oq....Tq....
    A470: 50 71 00 00 10 00 47 71 00 00 00 00 4C 71 00 00  // Pq....Gq....Lq..
    A480: 00 00 51 71 00 00 00 00 10 74 01 00 36 00 3B 71  // ..Qq.....t..6.;q
    A490: 10 11 C2 00 3D 71 1E CA 44 00 3C 71 0F 11 C1 00  // ....=q..D.<q....
    A4A0: 3E 71 13 86 41 00 44 71 00 8C 01 00 49 71 00 00  // >q..A.Dq....Iq..
    A4B0: 50 00 45 71 00 8C 01 00 4A 71 00 00 50 00 46 71  // P.Eq....Jq..P.Fq
    A4C0: 00 84 00 00 47 71 00 84 10 02 4C 71 25 00 00 00  // ....Gq....Lq%...
    A4D0: 4E 71 00 84 01 00 53 71 00 00 20 00 4F 71 00 84  // Nq....Sq.. .Oq..
    A4E0: 01 00 54 71 00 00 30 00 50 71 00 84 00 00 51 71  // ..Tq..0.Pq....Qq
    A4F0: 00 84 10 00 10 74 01 00 37 00 3B 71 14 11 4C 02  // .....t..7.;q..L.
    A500: 3D 71 20 CA 44 02 3C 71 10 11 1D 00 3E 71 14 87  // =q .D.<q....>q..
    A510: 14 00 44 71 00 8C 01 00 49 71 00 00 30 00 45 71  // ..Dq....Iq..0.Eq
    A520: 00 8C 01 00 4A 71 00 00 50 00 46 71 00 00 10 02  // ....Jq..P.Fq....
    A530: 4B 71 25 00 00 00 4E 71 00 84 01 00 53 71 00 00  // Kq%...Nq....Sq..
    A540: 20 00 54 71 00 00 30 00 4F 71 00 84 01 00 50 71  //  .Tq..0.Oq....Pq
    A550: 00 00 10 00 47 71 00 00 00 00 4C 71 00 00 00 00  // ....Gq....Lq....
    A560: 51 71 00 00 00 00 10 74 01 00 38 00 3B 71 1E A7  // Qq.....t..8.;q..
    A570: C1 00 3D 71 1A 0B 0F 00 3C 71 14 09 B0 00 3E 71  // ..=q....<q....>q
    A580: 19 0A 0F 00 44 71 00 84 10 00 49 71 00 00 41 00  // ....Dq....Iq..A.
    A590: 46 71 00 8C 01 00 4B 71 00 00 61 00 4E 71 00 84  // Fq....Kq..a.Nq..
    A5A0: 10 00 53 71 00 00 20 00 50 71 00 84 01 00 55 71  // ..Sq.. .Pq....Uq
    A5B0: 00 00 30 00 45 71 00 00 00 00 4A 71 00 00 00 00  // ..0.Eq....Jq....
    A5C0: 4F 71 00 00 00 00 54 71 00 00 00 00 47 71 00 00  // Oq....Tq....Gq..
    A5D0: 10 00 4C 71 00 00 00 00 51 71 00 00 10 00 10 74  // ..Lq....Qq.....t
    A5E0: 01 00 39 00 3B 71 16 D1 80 00 3D 71 1E 0F A5 00  // ..9.;q....=q....
    A5F0: 3C 71 14 B0 90 00 3E 71 18 0C 84 00 44 71 00 8C  // <q....>q....Dq..
    A600: 01 00 49 71 00 00 62 00 47 71 00 8C 11 00 4C 71  // ..Iq..b.Gq....Lq
    A610: 04 00 00 00 4E 71 00 84 01 00 53 71 00 00 30 00  // ....Nq....Sq..0.
    A620: 51 71 00 04 12 00 45 71 00 00 10 00 4A 71 00 00  // Qq....Eq....Jq..
    A630: 00 00 4F 71 00 00 10 00 54 71 00 00 00 00 46 71  // ..Oq....Tq....Fq
    A640: 00 00 00 00 50 71 00 00 00 00 10 74 01 00 26 00  // ....Pq.....t..&.
    A650: 4C 74 10 FF 00 00 10 74 01 00 27 00 4C 74 19 FF  // Lt.....t..'.Lt..
    A660: 00 00 29 71 F3 01 FF 01 10 74 01 00 28 00 4C 74  // ..)q.....t..(.Lt
    A670: 16 FF 00 00 29 71 F3 01 FF 01 10 74 01 00 29 00  // ....)q.....t..).
    A680: 4C 74 1F FF 00 00 29 71 F3 01 FF 01 10 74 01 00  // Lt....)q.....t..
    A690: 2A 00 4C 74 14 FF 00 00 29 71 F3 01 FF 01 10 74  // *.Lt....)q.....t
    A6A0: 01 00 2B 00 4C 74 1D FF 00 00 29 71 F3 01 FF 01  // ..+.Lt....)q....
    A6B0: 10 74 01 00 2C 00 4C 74 12 FF 00 00 29 71 F3 01  // .t..,.Lt....)q..
    A6C0: FF 01 10 74 01 00 2D 00 4D 74 1B FF 00 00 29 71  // ...t..-.Mt....)q
    A6D0: F3 01 FF 01 10 74 01 00 2E 00 4C 74 18 FF 00 00  // .....t....Lt....
    A6E0: 29 71 F3 01 FF 01 10 74 01 00 2F 00 4C 74 11 FF  // )q.....t../.Lt..
    A6F0: 00 00 29 71 F3 01 FF 01 10 74 01 00 30 00 4C 74  // ..)q.....t..0.Lt
    A700: 1E FF 00 00 29 71 F3 01 FF 01 10 74 01 00 31 00  // ....)q.....t..1.
    A710: 4C 74 17 FF 00 00 29 71 F3 01 FF 01 10 74 01 00  // Lt....)q.....t..
    A720: 32 00 4B 74 1C FF 00 00 29 71 F3 01 FF 01 10 74  // 2.Kt....)q.....t
    A730: 01 00 33 00 4B 74 15 FF 00 00 29 71 F3 01 FF 01  // ..3.Kt....)q....
    A740: 10 74 01 00 34 00 4B 74 1A FF 00 00 29 71 F3 01  // .t..4.Kt....)q..
    A750: FF 01 10 74 01 00 35 00 4B 74 13 FF 00 00 29 71  // ...t..5.Kt....)q
    A760: F3 01 FF 01 10 74 00 00 00 00 44 74 00 00 40 00  // .....t....Dt..@.
    A770: 10 74 01 00 36 00 44 74 00 00 00 00 29 71 F3 01  // .t..6.Dt....)q..
    A780: FF 01 10 74 01 00 37 00 44 74 00 00 00 00 29 71  // ...t..7.Dt....)q
    A790: F3 01 FF 01 10 74 01 00 38 00 44 74 00 00 00 00  // .....t..8.Dt....
    A7A0: 29 71 F3 01 FF 01 10 74 01 00 39 00 44 74 00 00  // )q.....t..9.Dt..
    A7B0: 00 00 29 71 F3 01 FF 01 10 74 01 00 10 00 29 71  // ..)q.....t....)q
    A7C0: F3 01 FF 01 10 74 01 00 11 00 29 71 F3 01 FF 01  // .....t....)q....
    A7D0: 10 74 01 00 12 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A7E0: 13 00 29 71 F3 01 FF 01 10 74 01 00 14 00 29 71  // ..)q.....t....)q
    A7F0: F3 01 FF 01 10 74 01 00 15 00 29 71 F3 01 FF 01  // .....t....)q....
    A800: 10 74 01 00 16 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A810: 17 00 29 71 F3 01 FF 01 10 74 01 00 18 00 29 71  // ..)q.....t....)q
    A820: F3 01 FF 01 10 74 01 00 19 00 29 71 F3 01 FF 01  // .....t....)q....
    A830: 10 74 01 00 1A 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A840: 1B 00 29 71 F3 01 FF 01 10 74 01 00 1C 00 29 71  // ..)q.....t....)q
    A850: F3 01 FF 01 10 74 01 00 1D 00 29 71 F3 01 FF 01  // .....t....)q....
    A860: 10 74 01 00 1E 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A870: 1F 00 29 71 F3 01 FF 01 10 74 00 00 00 00 30 74  // ..)q.....t....0t
    A880: F1 05 00 00 10 74 01 00 20 00 30 74 F1 06 00 00  // .....t.. .0t....
    A890: 36 74 00 00 00 00 10 74 01 00 21 00 30 74 F1 06  // 6t.....t..!.0t..
    A8A0: 00 00 36 74 00 00 00 00 10 74 01 00 22 00 30 74  // ..6t.....t..".0t
    A8B0: F1 0B 00 00 36 74 10 00 00 00 10 74 00 00 00 00  // ....6t.....t....
    A8C0: 33 74 03 0B 0E 00 00 00 00 55 01 55 01 55 01 2D  // 3t.......U.U.U.-
    A8D0: 4D 02 4D 02 4D 02 32 9B 00 9B 00 9B 00 33 9B 00  // M.M.M.2......3..
    A8E0: 9B 00 9B 00 34 9B 00 9B 00 9B 00 35 9B 00 9B 00  // ....4......5....
    A8F0: 9B 00 36 6C 02 6C 02 6C 02 37 6C 02 6C 02 6C 02  // ..6l.l.l.7l.l.l.
    A900: 38 93 01 55 01 83 60 39 55 01 93 01 41 70 FF 00  // 8..U..`9U...Ap..
    A910: 1A 01 01 01 04 00 37 00 00 01 05 0C 00 08 00 18  // ......7.........
    A920: 11 5C 05 0D 00 FC 7F FF FF 02 00 00 00 01 05 0C  // .\..............
    A930: 00 40 00 18 11 5C 05 0D 00 FF FF 9D FF 00 10 E3  // .@...\..........
    A940: 80 01 05 0C 00 84 00 18 11 5C 05 0D 00 7F FF FF  // .........\......
    A950: FF 80 00 00 00 01 05 0C 00 00 01 18 11 5C 05 0D  // .............\..
    A960: 00 BE 3F FF FF 40 40 01 00 01 05 0C 00 C0 01 14  // ..?..@@.........
    A970: 11 01 05 0D 00 00 40 00 01 01 05 0C 00 80 02 14  // ......@.........
    A980: 11 5C 05 0D 00 0F FF FE DF 10 00 01 60 01 05 0C  // .\..........`...
    A990: 00 88 02 14 11 5C 05 0D 00 7F F3 97 FF 86 04 88  // .....\..........
    A9A0: DA 01 05 0C 00 90 02 14 11 5C 05 0D 00 1B F0 FF  // .........\......
    A9B0: FF 20 0D 40 04 01 05 0C 00 C4 02 14 11 5C 05 0D  // . .@.........\..
    A9C0: 00 FF 2D FF FF 80 52 18 96 01 05 0C 00 8C 01 18  // ..-...R.........
    A9D0: 11 5C 05 0D 00 9F FF FF FF 62 00 00 00 01 05 0C  // .\.......b......
    A9E0: 00 EC 02 14 11 5C 05 0D 00 FF FF DF FF 10 00 20  // .....\......... 
    A9F0: 8A 01 05 0C 00 40 00 14 11 5C 05 0D 00 FF FF FF  // .....@...\......
    AA00: FC 09 00 01 02 01 05 0C 00 44 00 18 11 5C 05 0D  // .........D...\..
    AA10: 00 FF FE FF C7 0F 00 00 18 01 05 0C 00 C8 B0 00  // ................
    AA20: 12 01 05 0D 00 00 00 06 00 5B 34 00 01 01 04 00  // .........[4.....
    AA30: 37 00 00 52 39 02 0D 00 01 03 52 43 02 05 00 01  // 7..R9.....RC....
    AA40: 00 84 03 52 43 02 0D 00 02 03 52 43 02 05 00 02  // ...RC.....RC....
    AA50: 00 E2 04 52 43 66 04 01 A4 50 00 24 00 5B E4 00  // ...RCf...P.$.[..
    AA60: 01 01 08 04 37 00 00 03 01 01 00 02 01 01 00 55  // ....7..........U
    AA70: 38 01 52 10 01 05 00 00 91 2D 01 00 01 05 01 00  // 8.R......-......
    AA80: 0F 00 00 80 01 05 00 00 91 2D 01 00 3C 05 01 00  // .........-..<...
    AA90: 0F 00 00 80 49 26 00 66 1C 2D 0C 42 0A 00 55 00  // ....I&.f.-.B..U.
    AAA0: 01 52 12 02 01 01 00 52 1E 02 05 01 08 00 00 00  // .R.....R........
    AAB0: 52 1F 02 05 01 0A 00 00 00 52 1F 4C E5 01 20 44  // R........R.L.. D
    AAC0: 71 00 01 05 00 00 4F 5C 01 00 0D 25 01 00 20 02  // q.....O\...%.. .
    AAD0: 25 01 FF 52 40 52 3E 03 24 41 1C 00 3E 25 41 00  // %..R@R>.$A..>%A.
    AAE0: 49 CE 00 52 03 01 05 00 00 4F 5C 01 00 03 00 00  // I..R.....O\.....
    AAF0: 01 00 09 05 00 C0 00 00 00 02 01 01 00 52 1E 02  // .............R..
    AB00: 05 01 08 00 00 00 52 1F 01 05 00 00 4F 5C 01 00  // ......R.....O\..
    AB10: 5C 22 01 00 3F 00 52 3E 02 8C 01 12 00 3D 8D 01  // \"..?.R>.....=..
    AB20: 00 00 44 CE 00 02 0D 01 02 00 52 43 02 25 01 0F  // ..D.......RC.%..
    AB30: 52 40 02 25 01 00 52 40 02 01 01 00 55 38 01 52  // R@.%..R@....U8.R
    AB40: 3B 5B 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // ;[K.....7..B!.c.
    AB50: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    AB60: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    AB70: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    AB80: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 41 03  // [.....[.....[.A.
    AB90: 02 01 08 08 37 00 00 3D 25 00 00 44 4C 00 66 0B  // ....7..=%..DL.f.
    ABA0: 03 04 00 04 00 15 05 00 0A 03 04 01 04 00 1B 05  // ................
    ABB0: 01 16 2D 05 01 F4 00 00 00 42 21 00 63 01 CA 00  // ..-......B!.c...
    ABC0: 63 02 1D 02 63 03 9B 02 63 04 82 00 63 05 A7 00  // c...c...c...c...
    ABD0: 63 06 96 00 5A 5A 55 38 00 5B 01 05 00 00 61 60  // c...ZZU8.[....a`
    ABE0: 01 00 3C E5 01 00 80 49 54 00 01 05 00 00 62 60  // ..<....IT.....b`
    ABF0: 01 00 01 01 01 00 01 56 00 40 03 A9 40 00 01 05  // .......V.@..@...
    AC00: 00 00 61 60 01 00 01 02 01 00 40 02 E5 00 01 5B  // ..a`......@....[
    AC10: 01 05 00 00 65 60 01 00 4A 25 01 00 01 44 7D 00  // ....e`..J%...D}.
    AC20: 55 38 00 5B 01 05 00 00 61 60 01 00 3C E5 01 00  // U8.[....a`..<...
    AC30: 80 49 9E 00 5B 01 05 00 00 80 60 01 00 01 05 01  // .I..[.....`.....
    AC40: 00 00 00 03 00 01 05 00 00 80 60 01 00 4A E5 01  // ..........`..J..
    AC50: 00 80 44 B7 00 43 7D 00 56 00 46 01 05 00 00 91  // ..D..C}.V.F.....
    AC60: 60 01 00 03 00 40 01 00 50 02 01 05 00 00 91 60  // `....@..P......`
    AC70: 01 00 3C 02 01 00 40 49 00 01 2D 05 46 01 00 00  // ..<...@I..-.F...
    AC80: 00 3E 05 46 D0 07 00 00 45 CD 00 43 48 00 03 05  // .>.F....E..CH...
    AC90: 46 00 00 00 00 03 02 40 00 2D 05 40 00 10 00 00  // F......@.-.@....
    ACA0: 04 02 00 40 04 02 01 01 04 05 02 00 10 00 00 03  // ...@............
    ACB0: 02 40 00 2D 05 40 00 50 00 00 04 02 03 40 04 02  // .@.-.@.P.....@..
    ACC0: 04 01 04 05 05 78 56 34 12 57 00 06 57 00 07 57  // .....xV4.W..W..W
    ACD0: 00 08 57 00 09 57 00 0A 57 00 0B 57 00 0C 57 00  // ..W..W..W..W..W.
    ACE0: 0D 57 00 0E 57 00 0F 2D 05 46 40 00 00 00 3E 05  // .W..W..-.F@...>.
    ACF0: 46 00 04 00 00 45 07 01 03 05 46 00 17 00 00 57  // F....E....F....W
    AD00: 00 00 02 02 02 00 2C 05 02 00 17 00 00 02 02 03  // ......,.........
    AD10: 00 2C 05 03 00 10 00 00 02 05 04 00 00 00 00 03  // .,..............
    AD20: 02 40 01 33 05 40 F4 00 00 00 02 22 04 40 02 A2  // .@.3.@.....".@..
    AD30: 04 40 02 05 05 00 04 00 D0 52 35 01 05 00 00 81  // .@.......R5.....
    AD40: 60 01 00 54 00 01 00 01 05 00 00 82 60 01 00 54  // `..T........`..T
    AD50: 00 01 00 03 05 40 00 00 00 00 2D 02 40 00 01 05  // .....@....-.@...
    AD60: 00 00 85 60 01 00 01 02 01 00 40 01 05 00 00 86  // ...`......@.....
    AD70: 60 01 00 01 02 01 00 01 01 05 00 00 87 60 01 00  // `............`..
    AD80: 01 05 01 00 00 10 00 00 01 05 00 00 80 60 01 00  // .............`..
    AD90: 01 05 01 00 00 00 02 00 01 05 00 00 80 60 01 00  // .............`..
    ADA0: 4A E5 01 00 80 44 0A 02 43 7D 00 66 09 3E 0D 42  // J....D..C}.f.>.B
    ADB0: 00 00 44 81 00 03 0C 40 00 00 2D 0A 40 42 2D 0D  // ..D....@..-.@B-.
    ADC0: 42 24 00 3D 64 00 00 00 44 4C 02 2D 0D 42 10 00  // B$.=d...DL.-.B..
    ADD0: 3E 0A 42 40 45 35 02 43 48 00 02 04 02 08 00 02  // >.B@E5.CH.......
    ADE0: 02 03 00 2C 05 03 00 80 00 00 2C 04 03 08 00 02  // ...,......,.....
    ADF0: 05 04 00 02 00 00 02 A2 04 01 32 A5 04 F4 02 05  // ..........2.....
    AE00: 05 00 00 00 54 2C 04 05 04 00 52 35 02 02 01 00  // ....T,....R5....
    AE10: 2C 05 01 00 80 00 00 2C 04 01 08 00 02 02 02 01  // ,......,........
    AE20: 32 25 02 F4 02 04 03 04 00 03 05 46 00 50 00 00  // 2%.........F.P..
    AE30: 57 00 00 03 05 46 00 10 00 00 04 05 00 00 04 00  // W....F..........
    AE40: 00 04 05 01 01 00 00 00 04 05 02 06 00 00 00 04  // ................
    AE50: 01 07 01 03 01 40 02 2D 05 40 F4 00 00 00 04 02  // .....@.-.@......
    AE60: 08 40 04 01 09 03 56 00 40 03 31 40 00 04 02 0A  // .@....V.@.1@....
    AE70: 40 03 05 46 00 50 00 00 04 05 00 00 00 00 00 01  // @..F.P..........
    AE80: 05 00 00 80 60 01 00 3C 05 01 00 FF FF FF FF 44  // ....`..<.......D
    AE90: 48 00 01 05 00 00 83 60 01 00 03 00 40 01 00 2D  // H......`....@..-
    AEA0: 05 40 10 00 00 00 3E 05 40 00 01 00 00 45 28 03  // .@....>.@....E(.
    AEB0: 56 00 40 44 48 00 01 02 01 00 40 03 05 46 00 50  // V.@DH.....@..F.P
    AEC0: 00 00 3F 05 00 78 56 34 12 49 34 03 43 7D 00 00  // ..?..xV4.I4.C}..
    AED0: 7F 04 01 01 00 00 37 00 00 02 05 00 01 00 00 00  // ......7.........
    AEE0: 52 06 01 05 00 00 6E A0 01 00 01 05 01 00 03 00  // R.....n.........
    AEF0: 00 00 01 05 00 00 EE A0 01 00 01 05 01 00 03 00  // ................
    AF00: 00 00 01 05 80 29 00 F4 00 00 01 05 00 00 2C A8  // .....)........,.
    AF10: 01 00 01 05 01 00 00 F4 00 00 1A 0D 00 04 2C 05  // ..............,.
    AF20: 00 FF F3 00 00 01 01 81 29 00 01 05 00 00 2D A8  // ........).....-.
    AF30: 01 00 01 01 01 00 00 01 05 85 29 00 00 3D 00 01  // ..........)..=..
    AF40: 05 00 00 31 A8 01 00 01 05 01 00 00 00 3D 00 14  // ...1.........=..
    AF50: 05 00 06 0E 0D 00 3F 00 01 01 86 29 00 01 05 00  // ......?....)....
    AF60: 00 32 A8 01 00 01 01 01 00 00 01 05 ED 2A 80 3F  // .2...........*.?
    AF70: 3F 3F 01 05 EE 2A 00 10 20 10 01 05 EF 2A 40 00  // ??...*.. ....*@.
    AF80: 00 00 01 05 F0 2A 40 10 04 0D 01 05 F1 2A 00 00  // .....*@......*..
    AF90: 00 80 01 05 08 2A FF FF DB 06 01 05 09 2A FF FF  // .....*.......*..
    AFA0: DB 06 01 05 E9 2A FF 07 00 00 01 05 F5 2A F0 BF  // .....*.......*..
    AFB0: E0 0D 01 0D E7 2A 7F 40 01 05 50 28 EB 0F E4 60  // .....*.@..P(...`
    AFC0: 01 05 00 00 90 A6 01 00 01 05 01 00 EB 0F E4 60  // ...............`
    AFD0: 66 FF 2D 0D 42 C3 02 03 04 40 00 00 3E 05 40 00  // f.-.B....@..>.@.
    AFE0: 00 00 00 44 2A 01 01 04 00 00 00 00 01 04 01 00  // ...D*...........
    AFF0: 04 00 2D 0D 42 08 00 43 07 01 03 00 46 10 74 01  // ..-.B..C....F.t.
    B000: 05 10 74 01 00 10 00 66 FF 2D 0D 42 0F 02 03 04  // ..t....f.-.B....
    B010: 40 00 00 3E 05 40 00 00 00 00 44 91 01 01 04 00  // @..>.@....D.....
    B020: 00 00 00 03 00 41 01 00 03 04 40 04 00 01 02 00  // .....A....@.....
    B030: 00 40 01 02 01 00 41 2D 05 40 00 77 01 00 01 02  // .@....A-.@.w....
    B040: 00 00 40 01 02 01 00 41 2D 05 40 40 01 00 00 01  // ..@....A-.@@....
    B050: 02 00 00 40 01 02 01 00 41 2D 0D 42 08 00 43 3E  // ...@....A-.B..C>
    B060: 01 01 02 10 74 46 01 05 00 00 4F 5C 01 00 4A 65  // ....tF....O\..Je
    B070: 01 00 10 44 CB 01 0D 25 43 2A 01 01 05 00 00 43  // ...D...%C*.....C
    B080: A1 01 00 5C 0D 01 00 FF 0F 01 00 01 05 00 00 83  // ...\............
    B090: A2 01 00 5C 0D 01 00 FF 0F 01 00 03 05 40 08 00  // ...\.........@..
    B0A0: 00 00 01 05 00 00 4F 5C 01 00 4A 65 01 00 08 44  // ......O\..Je...D
    B0B0: E6 01 0F 65 40 01 5C 4A 42 2A E3 FE 40 01 05 00  // ...e@.\JB*..@...
    B0C0: 00 42 A1 01 00 5C 4A 01 00 E3 FE 40 01 05 00 00  // .B...\J....@....
    B0D0: 82 A2 01 00 5C 4A 01 00 E3 FE 40 5B 7A 70 02 44  // ....\J....@[zp.D
    B0E0: 70 00 00 32 2A 00 00 45 70 00 00 33 2A 00 00 00  // p..2*..Ep..3*...
    B0F0: 40 01 00 58 2A 00 00 01 40 01 00 59 2A 00 00 04  // @..X*...@..Y*...
    B100: 40 01 00 5C 2A 00 00 05 40 01 00 5D 2A 00 00 08  // @..\*...@..]*...
    B110: 40 01 00 60 2A 00 00 0A 40 01 00 62 2A 00 00 0C  // @..`*...@..b*...
    B120: 40 01 00 64 2A 00 00 10 40 01 00 66 2A 00 00 14  // @..d*...@..f*...
    B130: 40 01 00 68 2A 00 00 15 40 01 00 6A 2A 00 00 1C  // @..h*...@..j*...
    B140: 40 01 00 6C 2A 00 00 1E 40 01 00 6E 2A 00 00 32  // @..l*...@..n*..2
    B150: 40 01 00 44 2A 00 00 33 40 01 00 45 2A 00 00 34  // @..D*..3@..E*..4
    B160: 40 01 00 46 2A 00 00 35 40 01 00 47 2A 00 00 36  // @..F*..5@..G*..6
    B170: 40 01 00 48 2A 00 00 38 40 01 00 49 2A 00 00 39  // @..H*..8@..I*..9
    B180: 40 01 00 4A 2A 00 00 3A 40 01 00 4B 2A 00 00 00  // @..J*..:@..K*...
    B190: 00 00 00 00 A0 01 00 F9 E0 5F FE 01 A0 01 00 F8  // ........._......
    B1A0: E0 5F FE 02 A0 01 00 F8 E0 5F FE 03 A0 01 00 FA  // ._......._......
    B1B0: E0 5F FE 0E A0 01 00 F9 E0 5F FE 0F A0 01 00 F9  // ._......._......
    B1C0: E0 5F FE 2C A0 01 00 F9 E0 5F FE 2D A0 01 00 F8  // ._.,....._.-....
    B1D0: E0 5F FE 2E A0 01 00 F8 E0 5F FE 2F A0 01 00 F9  // ._......._./....
    B1E0: E0 5F FE 30 A0 01 00 FA E0 5F FE 31 A0 01 00 F9  // ._.0....._.1....
    B1F0: E0 5F FE 3B A0 01 00 F9 E0 5F FE 9D A0 01 00 81  // ._.;....._......
    B200: F0 2F FF A0 A0 01 00 81 F0 2F FF 80 A0 01 00 F8  // ./......./......
    B210: E0 5F FE 81 A0 01 00 F8 E0 5F FE 82 A0 01 00 F8  // ._......._......
    B220: E0 5F FE 83 A0 01 00 F9 E0 5F FE 84 A0 01 00 F9  // ._......._......
    B230: E0 5F FE 8D A0 01 00 F0 E0 5F FE 8E A0 01 00 F9  // ._......._......
    B240: E0 5F FE AC A0 01 00 F8 E0 5F FE AD A0 01 00 F8  // ._......._......
    B250: E0 5F FE AE A0 01 00 F8 E0 5F FE AF A0 01 00 F9  // ._......._......
    B260: E0 5F FE B0 A0 01 00 F8 E0 5F FE B1 A0 01 00 F9  // ._......._......
    B270: E0 5F FE B2 A0 01 00 F9 E0 5F FE BA A0 01 00 F9  // ._......._......
    B280: E0 5F FE 24 A0 01 00 08 04 E1 03 57 A0 01 00 70  // ._.$.......W...p
    B290: 60 58 50 D7 A0 01 00 70 60 58 50 ED A1 01 00 BF  // `XP....p`XP.....
    B2A0: 3F 3F 00 2D A3 01 00 BF 3F 3F 00 EE A1 01 00 01  // ??.-....??......
    B2B0: 00 00 00 F0 A1 01 00 01 00 00 00 F2 A1 01 00 01  // ................
    B2C0: 00 00 00 2E A3 01 00 01 00 00 00 30 A3 01 00 01  // ...........0....
    B2D0: 00 00 00 32 A3 01 00 01 00 00 00 F1 A1 01 00 01  // ...2............
    B2E0: 00 00 80 F3 A1 01 00 01 00 00 80 31 A3 01 00 01  // ...........1....
    B2F0: 00 00 80 33 A3 01 00 01 00 00 80 00 A1 01 00 81  // ...3............
    B300: 55 55 55 02 A1 01 00 41 56 55 55 40 A2 01 00 40  // UUU....AVUU@...@
    B310: 55 55 51 42 A2 01 00 40 54 55 55 EA A1 01 00 00  // UUQB...@TUU.....
    B320: 00 00 00 2A A3 01 00 00 00 00 00 E7 A1 01 00 7F  // ...*............
    B330: 40 1C 00 27 A3 01 00 7F 40 1C 00 91 A3 01 00 00  // @..'....@.......
    B340: 08 01 00 9A A3 01 00 00 08 01 00 00 00 00 00 00  // ................
    B350: 17 00 02 01 00 00 01 05 60 0F 00 00 00 F4 01 05  // ........`.......
    B360: 62 0F 00 00 00 00 5B 00 12 00 02 01 00 00 37 00  // b.....[.......7.
    B370: 00 01 05 10 0D 10 48 D1 0F 5B 8E 00 01 01 04 00  // ......H..[......
    B380: 37 00 00 01 05 0C 00 40 10 41 01 01 05 0D 00 81  // 7......@.A......
    B390: 00 00 00 01 05 0C 00 10 03 41 01 01 05 0D 00 81  // .........A......
    B3A0: 00 00 00 01 05 0C 00 60 04 18 11 5C 05 0D 00 B9  // .......`...\....
    B3B0: FF FF FF 46 3E 80 00 01 05 0C 00 5C A0 13 10 5C  // ...F>......\...\
    B3C0: 05 0D 00 FE FF FF FF 81 00 00 00 01 05 0C 00 00  // ................
    B3D0: 00 41 01 01 05 0D 00 00 00 00 80 01 05 0C 00 60  // .A.............`
    B3E0: A0 13 10 01 05 0D 00 00 00 00 01 52 0E 32 05 00  // ...........R.2..
    B3F0: 10 00 00 00 01 01 E3 0D 00 1A 05 00 0B 01 01 06  // ................
    B400: 00 00 0D 25 1F 0E 03 5B A5 02 01 01 08 00 37 00  // ...%...[......7.
    B410: 00 66 FF 2D 0D 42 21 02 03 04 40 00 00 3E 05 40  // .f.-.B!...@..>.@
    B420: 00 00 00 00 44 33 00 01 04 00 00 00 00 01 04 01  // ....D3..........
    B430: 00 04 00 2D 0D 42 08 00 43 10 00 02 05 00 C7 1E  // ...-.B..C.......
    B440: 00 01 52 45 4B 25 00 01 44 3A 01 02 05 00 E6 1E  // ..REK%..D:......
    B450: 00 0B 52 45 14 05 00 15 01 05 00 00 5C 66 01 00  // ..RE........\f..
    B460: 5C 99 01 00 1F 00 00 02 05 00 C8 1E 00 0C 52 45  // \.............RE
    B470: 03 01 00 00 02 05 00 D5 1E 00 06 52 45 14 05 00  // ...........RE...
    B480: 0C 0F 01 00 00 02 05 00 DB 1E 00 0B 52 45 14 05  // ............RE..
    B490: 00 12 0F 01 00 00 02 05 00 D4 1E 00 01 52 45 14  // .............RE.
    B4A0: 05 00 1D 0F 01 00 00 01 05 00 00 5D 66 01 00 01  // ...........]f...
    B4B0: 02 01 00 00 02 05 00 B7 1E 00 08 52 45 14 05 00  // ...........RE...
    B4C0: 01 01 05 00 00 2E 66 01 00 5C 09 01 00 01 FE 00  // ......f..\......
    B4D0: 02 05 00 BF 1E 00 08 52 45 14 05 00 01 01 05 00  // .......RE.......
    B4E0: 00 52 66 01 00 5C 09 01 00 01 FE 00 02 05 00 F1  // .Rf..\..........
    B4F0: 1E 00 0B 52 45 03 01 00 00 02 05 00 07 1F 00 07  // ...RE...........
    B500: 52 45 14 05 00 0B 0F 01 00 00 01 05 00 00 5E 66  // RE............^f
    B510: 01 00 01 02 01 00 00 02 05 00 FC 1E 00 0B 52 45  // ..............RE
    B520: 03 01 00 00 02 05 00 0E 1F 00 07 52 45 14 05 00  // ...........RE...
    B530: 0B 0F 01 00 00 01 05 00 00 5F 66 01 00 01 02 01  // ........._f.....
    B540: 00 00 01 05 00 00 00 66 01 00 03 00 00 01 00 5C  // .......f.......\
    B550: A5 01 00 FC 02 01 05 00 00 02 66 01 00 5C 0D 01  // ..........f..\..
    B560: 00 3F C0 80 23 1B 05 00 10 09 25 00 03 01 05 00  // .?..#.....%.....
    B570: 00 00 66 01 00 5C A2 01 00 FC 00 01 05 00 00 F8  // ..f..\..........
    B580: 74 01 00 03 00 00 01 00 15 05 00 02 09 8D 00 7F  // t...............
    B590: 00 15 1D 00 03 1B 0D 00 09 15 0D 00 03 01 05 00  // ................
    B5A0: 00 5E 66 01 00 5C 4A 01 00 07 FC 00 01 05 00 00  // .^f..\J.........
    B5B0: 5F 66 01 00 5C 5A 01 00 07 FC 00 01 05 00 00 2F  // _f..\Z........./
    B5C0: 66 01 00 3C 05 01 00 00 00 00 00 44 E8 01 01 05  // f..<.......D....
    B5D0: 00 00 6F 66 01 00 0D 25 01 00 01 4A 25 01 00 10  // ..of...%...J%...
    B5E0: 44 D3 01 07 25 01 00 FE 4A 25 01 00 10 49 E0 01  // D...%...J%...I..
    B5F0: 01 05 00 00 53 66 01 00 3C 05 01 00 00 00 00 00  // ....Sf..<.......
    B600: 44 1D 02 01 05 00 00 6F 66 01 00 0D 25 01 00 02  // D......of...%...
    B610: 4A 25 01 00 20 44 08 02 07 25 01 00 FD 4A 25 01  // J%.. D...%...J%.
    B620: 00 20 49 15 02 5B 7A 84 00 62 66 01 00 96 43 81  // . I..[z..bf...C.
    B630: 01 63 66 01 00 87 25 09 00 64 66 01 00 35 14 BF  // .cf...%..df..5..
    B640: 02 59 66 01 00 01 00 00 00 6B 66 01 00 01 80 00  // .Yf......kf.....
    B650: 00 65 66 01 00 01 80 00 00 9F 66 01 00 5C 4F 8A  // .ef.......f..\O.
    B660: 02 A0 66 01 00 27 69 03 08 A1 66 01 00 48 E5 21  // ..f..'i...f..H.!
    B670: 00 0B 66 01 00 78 00 FF EF 5C 66 01 00 45 00 40  // ..f..x...\f..E.@
    B680: B5 5D 66 01 00 02 68 BC 31 2E 66 01 00 00 21 00  // .]f...h.1.f...!.
    B690: 00 52 66 01 00 00 21 00 00 5E 66 01 00 00 00 00  // .Rf...!..^f.....
    B6A0: 00 5F 66 01 00 00 00 00 00 00 00 00 00 00 CA 00  // ._f.............
    B6B0: 02 01 04 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A  // ....7..f...A..-.
    B6C0: 41 42 2D 0D 42 04 00 3D 24 00 06 00 44 31 00 2D  // AB-.B..=$...D1.-
    B6D0: 0D 42 08 00 3E 0A 42 41 45 19 00 55 20 00 5B 56  // .B..>.BAE..U .[V
    B6E0: 00 43 03 24 43 05 00 03 04 46 00 00 33 05 46 01  // .C.$C....F..3.F.
    B6F0: 00 00 00 01 02 00 00 46 03 00 00 01 00 0D 02 01  // .......F........
    B700: 00 44 2D 05 46 02 00 00 00 01 02 00 00 46 03 24  // .D-.F........F.$
    B710: 43 04 00 4B E5 00 01 49 AA 00 07 02 01 00 45 2D  // C..K...I......E-
    B720: 05 46 01 00 00 00 01 02 00 00 46 4A 02 01 00 44  // .F........FJ...D
    B730: 44 90 00 03 29 43 00 0E A2 00 44 43 98 00 03 29  // D...)C....DC...)
    B740: 43 00 08 A2 00 45 33 05 46 03 00 00 00 01 02 00  // C....E3.F.......
    B750: 00 46 01 02 01 00 00 5B 0D 02 01 00 44 01 04 00  // .F.....[....D...
    B760: 00 00 00 3D A5 00 01 44 C4 00 07 02 01 00 45 43  // ...=...D......EC
    B770: C9 00 0D 02 01 00 44 5B 32 00 02 01 04 04 37 00  // ......D[2.....7.
    B780: 00 02 01 01 00 02 E5 01 01 52 3C 01 05 00 00 15  // .........R<.....
    B790: 7E 01 00 01 01 01 00 02 51 C8 01 05 00 00 41 7E  // ~.......Q.....A~
    B7A0: 01 00 01 39 01 00 01 51 0A 5B 29 00 01 01 00 04  // ...9...Q.[).....
    B7B0: 37 00 00 02 25 01 01 52 40 02 01 01 00 52 10 02  // 7...%..R@....R..
    B7C0: 01 01 00 02 E5 01 03 55 00 02 52 3F 02 25 01 02  // .......U..R?.%..
    B7D0: 52 40 5B 00 4F 05 01 07 0C 08 37 00 00 3D 25 01  // R@[.O.....7..=%.
    B7E0: FF 44 25 05 3D 25 01 19 46 21 05 3D 25 01 02 47  // .D%.=%..F!.=%..G
    B7F0: 21 05 3D 25 01 14 45 25 05 3D 05 00 00 00 00 00  // !.=%..E%.=......
    B800: 44 D0 02 66 1B 56 00 02 3D A5 01 02 49 41 00 56  // D..f.V..=...IA.V
    B810: 08 40 43 53 00 3D A5 01 03 49 4E 00 56 08 40 43  // .@CS.=...IN.V.@C
    B820: 53 00 03 0C 40 18 00 3E 0D 40 00 00 44 62 00 03  // S...@..>.@..Db..
    B830: 0A 02 40 43 66 00 0E E5 01 80 4B E5 01 02 49 94  // ..@Cf.....K...I.
    B840: 00 02 A9 02 02 55 28 02 3D 05 00 40 4B 4C 00 45  // .....U(.=..@KL.E
    B850: 94 00 0D A5 58 62 40 03 21 41 01 33 25 41 14 03  // ....Xb@.!A.3%A..
    B860: 22 43 41 0D E2 FF 55 44 66 FF 2D 0D 42 3B 05 03  // "CA...UDf.-.B;..
    B870: 39 40 01 09 0D 40 30 00 1B 0D 40 04 21 0D 40 05  // 9@...@0...@.!.@.
    B880: 00 2D 0A 42 40 03 04 40 00 00 27 05 40 10 27 00  // .-.B@..@..'.@.'.
    B890: 00 02 A2 03 40 02 E4 03 04 00 56 00 00 56 00 01  // ....@.....V..V..
    B8A0: 02 0D 03 40 01 02 65 01 01 20 05 00 0A 00 00 00  // ...@..e.. ......
    B8B0: 03 02 46 40 3D 05 00 80 8D 5B 00 47 FC 00 3D A5  // ..F@=....[.G..=.
    B8C0: 03 64 45 F5 00 02 65 03 03 0E E5 01 08 55 28 01  // .dE...e......U(.
    B8D0: 4B E5 01 08 44 07 01 1B 05 46 01 3E 05 46 A0 2F  // K...D....F.>.F./
    B8E0: C5 01 48 1C 01 2C 65 01 01 15 05 46 01 43 07 01  // ..H..,e....F.C..
    B8F0: 14 2D 01 05 3D A5 01 00 44 3D 01 4B E5 01 80 49  // .-..=...D=.K...I
    B900: 3D 01 3D A5 03 64 45 3D 01 0E 25 03 01 15 05 46  // =.=..dE=..%....F
    B910: 01 03 05 01 00 00 01 00 4B E5 01 80 44 9F 01 27  // ........K...D..'
    B920: 04 46 00 00 3E 05 41 00 00 00 00 44 B1 01 03 04  // .F..>.A....D....
    B930: 40 00 00 03 02 00 41 27 02 40 41 03 02 40 00 3E  // @.....A'.@A..@.>
    B940: 05 41 00 00 00 00 49 5F 01 7C 05 00 00 00 01 00  // .A....I_.|......
    B950: 7E 04 40 00 00 7C 04 40 00 00 7E 02 40 00 03 02  // ~.@..|.@..~.@...
    B960: 01 40 3E 05 01 33 F3 00 00 48 9F 01 03 05 01 00  // .@>..3...H......
    B970: 00 01 00 27 04 46 00 00 7C 02 01 41 7E 04 40 00  // ...'.F..|..A~.@.
    B980: 00 03 0A 00 40 27 04 46 00 00 03 8A 00 40 56 18  // ....@'.F.....@V.
    B990: 01 4B E5 01 80 49 3C 02 7C 02 02 00 7E 05 40 A0  // .K...I<.|...~.@.
    B9A0: 86 01 00 03 01 41 03 09 05 41 03 00 00 00 6F 02  // .....A...A....o.
    B9B0: 40 41 7C 05 40 4E 0C 00 00 7E 04 40 00 00 27 05  // @A|.@N...~.@..'.
    B9C0: 40 05 00 00 00 3E 05 40 00 00 00 00 49 FF 01 03  // @....>.@....I...
    B9D0: 25 40 01 03 8A 01 40 21 05 40 05 00 00 00 7C 04  // %@....@!.@....|.
    B9E0: 40 00 00 7E 05 40 4E 0C 00 00 03 01 41 03 09 05  // @..~.@N.....A...
    B9F0: 41 03 00 00 00 75 02 40 41 3D A5 01 00 44 34 02  // A....u.@A=...D4.
    BA00: 1B 05 40 01 2D 02 00 40 03 02 02 00 33 02 02 40  // ..@.-..@....3..@
    BA10: 66 FF 2D 0D 42 2F 05 56 00 40 03 21 40 01 33 25  // f.-.B/.V.@.!@.3%
    BA20: 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 4A  // @..%@.-.B@..H..J
    BA30: 65 20 56 10 44 8B 03 03 39 41 01 09 0D 41 30 00  // e V.D...9A...A0.
    BA40: 1B 0D 41 04 3C 22 9C 56 41 49 AF 02 3C 21 61 56  // ..A.<".VAI..<!aV
    BA50: 03 49 AF 02 3C 29 63 56 03 49 AF 02 03 20 41 9D  // .I..<)cV.I... A.
    BA60: 56 09 25 41 E0 3E 29 41 01 49 AF 02 4B E5 01 40  // V.%A.>)A.I..K..@
    BA70: 49 83 03 3C 02 5E 56 00 49 AF 02 3C 0A 60 56 01  // I..<.^V.I..<.`V.
    BA80: 44 B3 02 0E E5 01 01 3A 00 00 4B E5 01 01 44 F9  // D......:..K...D.
    BA90: 04 4B E5 01 02 49 D0 02 3D 25 02 05 46 D0 02 55  // .K...I..=%..F..U
    BAA0: 28 02 52 23 56 00 40 03 21 40 01 33 25 40 14 03  // (.R#V.@.!@.3%@..
    BAB0: 0A 48 40 07 25 60 01 FE 66 FF 2D 0D 42 2F 05 56  // .H@.%`..f.-.B/.V
    BAC0: 00 40 03 21 40 01 33 25 40 14 15 25 40 01 2D 0A  // .@.!@.3%@..%@.-.
    BAD0: 42 40 03 0C 48 00 00 07 65 61 56 FE 54 00 5F 56  // B@..H...eaV.T._V
    BAE0: 54 00 60 56 07 65 20 56 EF 4A 65 20 56 20 49 15  // T.`V.e V.Je V I.
    BAF0: 03 07 65 30 56 EF 4A 65 30 56 20 49 22 03 3D 05  // ..e0V.Je0V I".=.
    BB00: 00 00 00 00 00 49 8B 03 4A A5 FF 55 80 44 5F 03  // .....I..J..U.D_.
    BB10: 56 00 41 5C 25 1E 56 F8 06 51 02 4A 65 1E 56 01  // V.A\%.V..Q.Je.V.
    BB20: 44 47 03 2D A5 41 01 2D 0D 48 10 00 3E A5 41 04  // DG.-.A.-.H..>.A.
    BB30: 45 3F 03 56 08 48 03 21 41 01 33 25 41 14 03 22  // E?.V.H.!A.3%A.."
    BB40: 43 41 07 E2 FF 55 45 4A E5 FF 55 3F 49 21 05 07  // CA...UEJ..U?I!..
    BB50: A5 58 62 BF 43 21 05 01 02 5E 56 00 43 B5 04 01  // .Xb.C!...^V.C...
    BB60: 05 19 56 80 88 01 00 3D A5 01 00 49 AC 03 3D 05  // ..V....=...I..=.
    BB70: 00 E0 3B 66 00 45 AC 03 07 25 1A 56 FE 43 CC 03  // ..;f.E...%.V.C..
    BB80: 0D 25 1A 56 01 3D A5 01 02 49 CC 03 4B E5 01 08  // .%.V.=...I..K...
    BB90: 44 CC 03 01 05 E1 56 80 88 01 00 0D 25 E2 56 01  // D.....V.....%.V.
    BBA0: 0D 25 9D 56 01 03 39 40 01 09 0D 40 30 00 1B 0D  // .%.V..9@...@0...
    BBB0: 40 04 01 22 9C 56 40 0D 65 9D 56 80 5C 79 9D 56  // @..".V@.e.V.\y.V
    BBC0: FB 03 56 00 40 03 31 40 03 03 01 41 03 09 05 41  // ..V.@.1@...A...A
    BBD0: 03 00 00 00 75 02 40 41 03 05 41 A1 83 00 00 3E  // ....u.@A..A....>
    BBE0: 25 40 64 48 27 04 03 05 41 24 83 00 00 3E 25 40  // %@dH'...A$...>%@
    BBF0: 30 48 27 04 03 05 41 A3 76 00 00 01 0A 62 56 41  // 0H'...A.v....bVA
    BC00: 01 E2 64 56 40 0D 25 64 56 02 01 21 61 56 03 01  // ..dV@.%dV..!aV..
    BC10: A5 61 56 E8 01 02 5E 56 00 54 00 5F 56 01 02 60  // .aV...^V.T._V..`
    BC20: 56 01 4B E5 01 08 44 5D 04 07 65 9D 56 FE 43 62  // V.K...D]..e.V.Cb
    BC30: 04 0D 65 9D 56 01 5C 29 9D 56 1F 01 01 8D 69 56  // ..e.V.\).V....iV
    BC40: 20 03 01 29 63 56 03 07 65 9D 56 7F 5C 65 20 56  //  ..)cV..e.V.\e V
    BC50: E3 04 4A 65 20 56 20 49 7E 04 0D 65 20 56 10 4A  // ..Je V I~..e V.J
    BC60: 65 20 56 20 44 8B 04 4B E5 01 02 49 B5 04 5C 65  // e V D..K...I..\e
    BC70: 30 56 E3 04 4A 65 30 56 20 49 A0 04 0D 65 30 56  // 0V..Je0V I...e0V
    BC80: 10 4A 65 30 56 20 44 AD 04 4B E5 01 80 49 C8 04  // .Je0V D..K...I..
    BC90: 01 02 5F 56 02 0D 65 61 56 01 51 0A 0D 65 9D 56  // .._V..eaV.Q..e.V
    BCA0: 40 51 0A 4A 65 9D 56 20 44 CF 04 07 65 9D 56 BF  // @Q.Je.V D...e.V.
    BCB0: 56 00 40 03 21 40 01 33 25 40 14 03 0A 48 40 0D  // V.@.!@.3%@...H@.
    BCC0: 25 60 01 01 51 0A 4B E5 01 02 49 21 05 3A 00 00  // %`..Q.K...I!.:..
    BCD0: 3D 25 02 05 46 21 05 02 25 03 02 02 E1 03 02 02  // =%..F!..%.......
    BCE0: 61 03 01 02 B9 03 01 08 A5 03 04 0E B1 03 02 02  // a...............
    BCF0: 01 02 00 52 2E 3A 00 00 5B 02 25 01 0B 43 F9 04  // ...R.:..[.%..C..
    BD00: 7A 20 00 00 00 C8 00 90 01 58 02 20 03 E8 03 B0  // z .......X. ....
    BD10: 1E 04 00 04 40 42 0F 00 04 B0 1E 04 00 00 40 42  // ....@B........@B
    BD20: 0F 00 04 00 AC 00 02 01 00 00 37 00 00 3D 65 00  // ..........7..=e.
    BD30: 01 44 AB 00 56 08 48 03 21 48 00 01 0D 88 35 02  // .D..V.H.!H....5.
    BD40: 00 52 14 01 05 93 3A 00 00 40 00 01 25 CF 3B 02  // .R....:..@..%.;.
    BD50: 01 A5 E6 3A C0 01 0D 96 3A 45 01 5C 05 F4 3A F0  // ...:....:E.\..:.
    BD60: FF FF FF 02 00 00 00 07 25 1D 3B FB 0D 25 83 3A  // ........%.;..%.:
    BD70: 01 5C 05 3C 3B 88 08 F8 FF 00 00 08 00 01 05 41  // .\.<;..........A
    BD80: 3B 03 80 FF FF 01 25 42 3B 11 01 0D 3D 3B FF 7F  // ;.....%B;...=;..
    BD90: 01 05 3E 3B FF 7F 00 00 01 05 C6 3B 07 40 00 00  // ..>;.......;.@..
    BDA0: 0D A5 C9 3B 01 01 05 3B 3B 00 08 00 04 01 0D 99  // ...;...;;.......
    BDB0: 3B 04 00 5C 05 1A 3B FF FF FD FF 00 00 02 00 5C  // ;..\..;........\
    BDC0: 05 DB 3A 00 E0 FF FF 04 14 00 00 3A 00 00 5B 5B  // ..:........:..[[
    BDD0: 31 01 02 01 00 04 37 00 00 3D 65 00 02 44 EE 00  // 1.....7..=e..D..
    BDE0: 3D 65 00 07 44 1E 00 02 01 01 00 52 17 5B 5C 05  // =e..D......R.[\.
    BDF0: 84 35 FF 00 FE 9F 04 2C 01 20 01 05 A2 35 00 0F  // .5.....,. ...5..
    BE00: 00 20 01 05 3B 01 1B 02 12 00 01 05 30 01 78 69  // . ..;.......0.xi
    BE10: 10 00 01 05 87 35 AD 90 02 00 01 8D 7D 39 1B 00  // .....5......}9..
    BE20: 01 25 7C 39 01 01 05 31 01 3C 00 01 08 5C 65 D4  // .%|9...1.<...\e.
    BE30: 00 FC 02 01 05 6D 55 00 00 00 00 01 05 42 55 00  // .....mU......BU.
    BE40: 00 00 00 01 05 78 55 0F 00 00 00 01 05 68 4A 00  // .....xU......hJ.
    BE50: 00 00 30 01 25 32 01 00 5C 05 3E 35 0F FF FF FF  // ..0.%2..\.>5....
    BE60: 70 00 00 00 01 05 29 35 08 00 00 00 5C 05 44 35  // p.....)5....\.D5
    BE70: 00 C0 CE 60 08 60 30 14 55 00 01 52 17 52 23 2C  // ...`.`0.U..R.R#,
    BE80: 25 01 01 3D 25 01 06 45 AB 00 55 00 01 52 4E 02  // %..=%..E..U..RN.
    BE90: 25 01 07 52 33 02 05 01 00 07 00 00 52 4D 2C 25  // %..R3.......RM,%
    BEA0: 01 01 3D 25 01 06 45 CC 00 66 16 03 0C 41 04 00  // ..=%..E..f...A..
    BEB0: 4C 0D 41 02 00 44 ED 00 0D A5 4C 00 02 5B 02 05  // L.A..D....L..[..
    BEC0: 01 01 00 00 00 52 06 03 01 40 01 33 05 40 01 00  // .....R...@.3.@..
    BED0: 00 00 01 05 EB 35 00 00 00 00 01 02 ED 35 40 1A  // .....5.......5@.
    BEE0: 0D 01 04 14 05 01 10 2C 05 01 00 F4 FF F3 01 01  // .......,........
    BEF0: E6 35 01 01 25 C9 00 F4 01 05 C4 00 00 00 00 00  // .5..%...........
    BF00: 5B 00 0E 00 02 01 00 00 52 3E 02 04 00 00 00 5B  // [.......R>.....[
    BF10: 5C 01 01 01 00 00 37 00 00 02 05 00 00 00 02 00  // \.....7.........
    BF20: 52 29 03 05 40 40 7E 05 00 27 01 40 00 01 05 00  // R)..@@~..'.@....
    BF30: 00 15 6C 01 00 01 02 01 00 40 50 02 02 05 00 50  // ..l......@P....P
    BF40: C3 00 00 52 3C 01 05 00 00 41 6C 01 00 01 39 01  // ...R<....Al...9.
    BF50: 00 00 02 05 00 DC 4A 01 00 52 3C 01 05 00 00 4B  // ......J..R<....K
    BF60: 6C 01 00 01 39 01 00 00 02 05 00 50 C3 00 00 52  // l...9......P...R
    BF70: 3C 01 05 00 00 55 6C 01 00 01 39 01 00 00 02 05  // <....Ul...9.....
    BF80: 00 50 C3 00 00 52 3C 01 05 00 00 5F 6C 01 00 01  // .P...R<...._l...
    BF90: 39 01 00 00 02 05 00 60 EA 00 00 52 3C 01 05 00  // 9......`...R<...
    BFA0: 00 69 6C 01 00 01 39 01 00 00 02 05 00 40 9C 00  // .il...9......@..
    BFB0: 00 52 3C 01 05 00 00 91 6C 01 00 01 39 01 00 00  // .R<.....l...9...
    BFC0: 01 05 00 00 83 68 01 00 01 25 01 00 00 01 05 00  // .....h...%......
    BFD0: 00 3D 7E 01 00 5C A5 01 00 FE 00 01 05 00 00 84  // .=~..\..........
    BFE0: 68 01 00 01 05 01 00 10 00 00 00 01 05 00 00 06  // h...............
    BFF0: 7F 01 00 01 05 01 00 00 00 25 15 01 05 00 00 07  // .........%......
    C000: 7F 01 00 01 05 01 00 00 00 FF 00 01 05 00 00 08  // ................
    C010: 7F 01 00 01 05 01 00 17 03 10 00 01 05 00 00 09  // ................
    C020: 7F 01 00 01 05 01 00 07 00 00 00 01 05 00 00 0C  // ................
    C030: 7F 01 00 01 05 01 00 10 00 00 00 01 05 00 00 0D  // ................
    C040: 7F 01 00 01 05 01 00 00 00 00 20 01 05 00 00 0E  // .......... .....
    C050: 7F 01 00 01 05 01 00 50 92 82 01 01 05 00 00 30  // .......P.......0
    C060: 6B 01 00 01 05 01 00 1B 04 00 00 5B 07 00 01 01  // k..........[....
    C070: 00 00 5B 00 EE 00 01 01 00 04 37 00 00 03 F9 46  // ..[.......7....F
    C080: 00 08 E5 00 7F 03 0A 41 42 2D 0D 41 04 00 03 0C  // .......AB-.A....
    C090: 46 00 00 3E 0D 46 00 00 44 ED 00 15 0D 46 02 03  // F..>.F..D....F..
    C0A0: 0A 42 41 2D 0A 42 46 56 30 46 03 04 40 00 00 3E  // .BA-.BFV0F..@..>
    C0B0: 05 40 00 00 00 00 44 53 00 3D FA 00 40 44 5F 00  // .@....DS.=..@D_.
    C0C0: 3E A5 46 01 49 6A 00 33 0A 42 46 33 0D 42 04 00  // >.F.Ij.3.BF3.B..
    C0D0: 43 76 00 03 A5 46 01 3D 02 00 40 47 76 00 2D 0A  // Cv...F.=..@Gv.-.
    C0E0: 42 46 2D 0D 42 04 00 43 36 00 4C E5 46 80 44 7E  // BF-.B..C6.L.F.D~
    C0F0: 00 5B 2D 0D 42 04 00 03 8A 46 42 03 0A 42 41 03  // .[-.B....FB..BA.
    C100: 04 40 00 00 03 1A 42 46 4C E5 40 01 49 B8 00 3E  // .@....BFL.@.I..>
    C110: 05 40 00 5C 01 00 48 AA 00 0F 0D 40 00 04 01 02  // .@.\..H....@....
    C120: 00 00 40 01 04 01 00 00 00 43 D6 00 56 38 40 01  // ..@......C..V8@.
    C130: 05 00 00 88 5C 01 00 01 02 01 00 40 01 05 00 00  // ....\......@....
    C140: 89 5C 01 00 01 04 01 00 00 00 33 0D 46 04 00 2D  // .\........3.F..-
    C150: 8D 46 04 00 2D 0D 41 04 00 3E 0D 46 00 00 49 87  // .F..-.A..>.F..I.
    C160: 00 5B 8E 00 01 02 00 04 66 FF 56 08 47 2D 0D 42  // .[......f.V.G-.B
    C170: 5C 00 03 21 47 00 09 25 47 F0 42 22 47 63 00 43  // \..!G..%G.B"Gc.C
    C180: 00 63 80 36 00 63 60 3E 00 63 20 2E 00 5A 5A 5B  // .c.6.c`>.c ..ZZ[
    C190: 2D 0D 42 26 00 43 43 00 2D 0D 42 0C 00 43 43 00  // -.B&.CC.-.B..CC.
    C1A0: 2D 0D 42 18 00 03 21 47 00 09 25 47 07 2D 0A 42  // -.B...!G..%G.-.B
    C1B0: 47 2D 0A 42 47 03 0C 48 00 00 5B 7A 32 00 00 00  // G-.BG..H..[z2...
    C1C0: 00 02 00 04 00 06 00 08 00 0A 00 00 02 00 2C 00  // ..............,.
    C1D0: 2D 00 2E 00 2F 00 00 00 00 01 00 02 00 03 00 04  // -.../...........
    C1E0: 00 05 00 06 00 00 C8 00 90 01 58 02 20 03 E8 03  // ..........X. ...
    C1F0: 78 00 01 01 00 00 37 00 00 52 14 0D A5 6A 3B 01  // x.....7..R...j;.
    C200: 54 20 6C 3B 07 25 5E 3B FE 54 20 5F 3B 42 29 00  // T l;.%^;.T _;B).
    C210: 63 00 31 00 63 01 39 00 63 02 4D 00 5A 5A 43 70  // c.1.c.9.c.M.ZZCp
    C220: 00 01 25 5F 3B 02 43 3E 00 01 25 5F 3B 01 54 20  // ..%_;.C>..%_;.T 
    C230: 5C 3B 54 00 5D 3B 54 00 61 3B 43 70 00 01 0D 5D  // \;T.];T.a;Cp...]
    C240: 3B 01 01 01 05 61 3B 01 00 01 00 0D 65 62 3B 01  // ;....a;.....eb;.
    C250: 0D 65 65 3B 01 01 0D 6B 3B 10 10 01 25 5C 3B 01  // .ee;...k;...%\;.
    C260: 54 30 6A 3B 3A 00 00 5B 74 00 01 01 00 00 37 00  // T0j;:..[t.....7.
    C270: 00 4A A5 4E 00 01 44 15 00 02 65 00 01 0E 25 00  // .J.N..D...e...%.
    C280: 80 52 14 03 00 46 CC 00 08 25 00 0F 52 14 54 30  // .R...F...%..R.T0
    C290: B0 3B 3C 69 B0 3B 00 44 65 00 01 69 B0 3B 00 3D  // .;<i.;.De..i.;.=
    C2A0: 65 00 00 44 65 00 4A A5 AF 3B 01 44 65 00 4C 25  // e..De.J..;.De.L%
    C2B0: 46 01 44 69 00 4A 25 B6 3B 01 49 4D 00 4A 25 B6  // F.Di.J%.;.IM.J%.
    C2C0: 3B 01 44 55 00 4A 25 B6 3B 01 49 5D 00 3A 00 00  // ;.DU.J%.;.I].:..
    C2D0: 5B 4A 25 B0 3B 01 44 69 00 43 65 00 3E 00 01 01  // [J%.;.Di.Ce.>...
    C2E0: 00 00 37 00 00 52 14 3D 65 00 01 44 30 00 0D 65  // ..7..R.=e..D0..e
    C2F0: AF 3B 03 07 25 AF 3B FE 4A A5 AF 3B 01 49 1C 00  // .;..%.;.J..;.I..
    C300: 07 E5 1A 3B 7F 54 20 BC 3B 43 3A 00 0D E5 1A 3B  // ...;.T .;C:....;
    C310: 80 0D 25 AF 3B 01 3A 00 00 5B 2C 00 02 01 00 00  // ..%.;.:..[,.....
    C320: 37 00 00 3C 21 FC 00 00 49 19 00 0D A5 C0 00 01  // 7..<!...I.......
    C330: 43 26 00 3C 61 FC 00 00 49 26 00 0D A5 C0 00 02  // C&.<a...I&......
    C340: 0D A5 C1 00 01 5B CF 01 03 01 00 00 37 00 00 01  // .....[......7...
    C350: 05 00 00 11 6C 01 00 03 05 40 8C 0A 00 00 3C 05  // ....l....@....<.
    C360: 01 00 00 00 00 00 44 2A 00 03 05 40 10 27 00 00  // ......D*...@.'..
    C370: 03 02 46 40 3D A5 00 02 49 3A 00 02 02 00 46 5B  // ..F@=...I:....F[
    C380: 03 05 40 15 6C 01 00 03 05 41 00 6C 01 00 3D 25  // ..@.l....A.l..=%
    C390: 00 00 44 72 00 03 05 40 15 6E 01 00 03 05 41 00  // ..Dr...@.n....A.
    C3A0: 6E 01 00 3D 25 00 01 44 72 00 03 05 40 15 7E 01  // n..=%..Dr...@.~.
    C3B0: 00 03 05 41 00 7E 01 00 01 02 00 00 40 03 88 40  // ...A.~......@..@
    C3C0: 01 00 03 18 40 01 00 09 8D 40 FF 01 3E 8D 40 00  // ....@....@..>.@.
    C3D0: 00 49 C8 00 01 02 00 00 41 03 00 40 01 00 09 05  // .I......A..@....
    C3E0: 40 FF 01 00 00 3E 0D 40 00 00 49 B1 00 03 05 46  // @....>.@..I....F
    C3F0: 44 6E 02 00 43 EB 00 21 02 40 46 03 00 41 01 00  // Dn..C..!.@F..A..
    C400: 09 05 41 00 1E 00 00 1B 05 41 09 43 E3 00 7C 02  // ..A......A.C..|.
    C410: 40 46 7E 05 40 00 00 01 00 03 00 41 01 00 09 05  // @F~.@......A....
    C420: 41 00 F0 00 00 1B 05 41 0C 75 02 40 41 03 02 46  // A......A.u.@A..F
    C430: 40 3D A5 00 01 49 F7 00 02 02 00 46 5B 3D E5 00  // @=...I.....F[=..
    C440: 00 49 59 01 56 00 40 03 29 40 00 21 0D 40 0A 00  // .IY.V.@.)@.!.@..
    C450: 03 05 41 4A 6C 01 00 3D 25 00 00 44 2D 01 03 05  // ..AJl..=%..D-...
    C460: 41 4A 6E 01 00 3D 25 00 01 44 2D 01 03 05 41 4A  // AJn..=%..D-...AJ
    C470: 7E 01 00 2D 02 40 41 01 02 00 00 40 03 00 41 01  // ~..-.@A....@..A.
    C480: 00 09 05 41 00 00 F0 07 1B 05 41 14 02 E2 00 41  // ...A......A....A
    C490: 3D E5 00 00 49 59 01 02 05 00 10 27 00 00 5B 56  // =...IY.....'..[V
    C4A0: 00 40 03 39 40 00 55 38 00 66 FF 2D 0D 42 A7 01  // .@.9@.U8.f.-.B..
    C4B0: 3E 0C 40 02 00 47 7A 01 2D 0D 42 08 00 43 6A 01  // >.@..Gz.-.B..Cj.
    C4C0: 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 03  // 3.@..!.@..-.@...
    C4D0: 09 42 00 55 00 00 02 0A 00 40 7C 05 46 40 42 0F  // .B.U.....@|.F@B.
    C4E0: 00 7E 01 40 00 02 02 00 40 5B 7A 28 00 FF FF 07  // .~.@....@[z(....
    C4F0: 00 00 00 00 00 C8 00 3F 00 08 00 19 00 40 06 5F  // .......?.....@._
    C500: 00 40 00 32 00 80 0C 7E 00 60 00 64 00 00 32 7F  // .@.2...~.`.d..2.
    C510: 00 7F 00 64 00 00 C6 00 01 03 04 00 37 00 00 56  // ...d........7..V
    C520: 00 46 56 00 00 03 21 00 00 55 20 00 3D 65 00 03  // .FV...!..U .=e..
    C530: 44 2C 00 3D 65 00 0D 46 BB 00 02 29 00 00 32 25  // D,.=e..F...)..2%
    C540: 00 08 0E 25 00 60 52 14 5C 22 3E 4D F8 00 02 22  // ...%.`R.\">M..."
    C550: 00 00 52 14 03 08 41 DA 3A 09 0D 41 03 00 66 FF  // ..R...A.:..A..f.
    C560: 2D 0D 42 C2 00 2D 0A 42 41 03 24 00 00 00 3D E2  // -.B..-.BA.$...=.
    C570: 00 00 48 A7 00 3E 25 00 04 44 76 00 03 22 46 00  // ..H..>%..Dv.."F.
    C580: 33 25 46 01 15 25 46 04 0F 25 46 01 33 39 00 00  // 3%F..%F..%F.39..
    C590: 3E 25 00 01 44 93 00 3E 25 00 02 44 8C 00 03 25  // >%..D..>%..D...%
    C5A0: 46 21 03 65 00 2F 43 97 00 03 65 00 13 03 79 46  // F!.e./C...e...yF
    C5B0: 00 33 65 46 01 15 2D 46 03 0F 65 46 01 52 14 01  // .3eF..-F..eF.R..
    C5C0: 02 07 3C 46 01 52 06 3C 00 54 00 0E 3C 54 00 05  // ..<F.R.<.T..<T..
    C5D0: 3C 3A 00 00 5B 7A 04 00 03 02 01 04 A8 01 01 04  // <:..[z..........
    C5E0: 00 08 37 00 00 3D 65 02 01 49 3D 01 4B A5 02 03  // ..7..=e..I=.K...
    C5F0: 49 5D 00 02 05 00 00 03 00 05 02 05 01 00 05 02  // I]..............
    C600: 00 3C 21 FC 00 02 49 57 00 01 8D C0 00 00 02 51  // .<!...IW.......Q
    C610: 02 01 05 C6 00 00 00 10 00 01 05 C8 00 00 00 50  // ...............P
    C620: 00 01 0D C3 00 02 00 54 20 CA 00 01 05 C2 00 00  // .......T .......
    C630: 01 00 00 56 20 40 43 83 00 0E 25 02 80 52 14 54  // ...V @C...%..R.T
    C640: 00 CC 00 56 08 48 08 25 02 07 0D 25 CA 00 01 01  // ...V.H.%...%....
    C650: 25 C2 00 01 54 00 C6 00 54 00 C8 00 56 20 40 07  // %...T...T...V @.
    C660: 65 53 00 FF 3D A5 01 01 47 94 00 0D 65 53 00 00  // eS..=...G...eS..
    C670: 03 A0 40 C9 00 03 00 46 C4 00 03 02 41 46 2D 00  // ..@....F....AF-.
    C680: 46 C6 00 2D 00 41 C8 00 52 14 01 32 21 3A 40 01  // F..-.A..R..2!:@.
    C690: 32 22 3A 40 01 02 1E 3A 46 01 02 1F 3A 41 54 30  // 2":@...:F...:AT0
    C6A0: DB 3A 54 00 6F 3B 01 01 70 3B 00 54 08 23 3A 54  // .:T.o;..p;.T.#:T
    C6B0: 08 24 3A 54 08 25 3A 54 08 26 3A 01 09 28 3A 00  // .$:T.%:T.&:..(:.
    C6C0: 01 19 27 3A 00 5C 19 1B 3A FC F8 01 07 A5 1B 46  // ..':.\..:......F
    C6D0: 0F 07 8D 1B 3A 0F FE 01 09 20 3A 01 01 25 1A 3A  // ....:.... :..%.:
    C6E0: 01 0D 25 C6 3B 04 5C 62 C6 3B FE 40 54 20 3A 3A  // ..%.;.\b.;.@T ::
    C6F0: 54 20 41 3A 54 00 D9 3B 54 00 D7 3B 54 00 DB 3B  // T A:T..;T..;T..;
    C700: 4B A5 02 03 49 39 01 0E 25 02 80 52 14 01 05 CC  // K...I9..%..R....
    C710: 00 01 00 00 00 3A 00 00 5B 52 14 3D 65 02 00 49  // .....:..[R.=e..I
    C720: 5A 01 54 20 1A 3A 3A 00 00 3C 21 FC 00 02 49 59  // Z.T .::..<!...IY
    C730: 01 54 08 C1 00 5B 3D 65 02 10 44 67 01 01 09 20  // .T...[=e..Dg... 
    C740: 3A 01 5B 03 00 40 1E 3A 09 05 40 00 00 00 FF 2D  // :.[..@.:..@....-
    C750: 01 40 00 09 0D 40 00 F0 01 02 1E 3A 40 08 0D 00  // .@...@.....:@...
    C760: FF 0F 56 00 41 03 31 41 01 74 0A 00 41 2C 09 01  // ..V.A.1A.t..A,..
    C770: 00 08 25 00 FC 14 05 00 10 01 01 6F 3B 00 01 09  // ..%........o;...
    C780: 27 3A 01 5B 49 00 01 01 00 00 37 00 00 52 14 07  // ':.[I.....7..R..
    C790: 65 C9 3B FE 3D 65 00 01 44 37 00 54 30 71 3A 54  // e.;.=e..D7.T0q:T
    C7A0: 30 2A 3A 54 20 C8 3B 54 20 CE 3B 54 30 CE 3B 4A  // 0*:T .;T .;T0.;J
    C7B0: 25 C9 3B 01 49 2B 00 3A 00 00 5B 0D 25 CE 3B 01  // %.;.I+.:..[.%.;.
    C7C0: 54 00 B1 3B 07 25 DA 3A F4 3A 00 00 5B 00 95 00  // T..;.%.:.:..[...
    C7D0: 01 03 00 00 37 00 00 52 14 0D 25 1D 3B 04 54 20  // ....7..R..%.;.T 
    C7E0: 7E 3A 54 00 86 3A 3D 65 00 01 49 56 00 0D 25 84  // ~:T..:=e..IV..%.
    C7F0: 3A 07 01 25 85 3A 01 51 01 4A 25 85 3A 02 44 29  // :..%.:.Q.J%.:.D)
    C800: 00 54 20 85 3A 54 08 87 3A 54 08 88 3A 54 08 89  // .T .:T..:T..:T..
    C810: 3A 01 0D 8A 3A FF FF 01 0D 8B 3A FF FF 01 0D 8C  // :...:.....:.....
    C820: 3A FF FF 5B 01 31 7F 3A 00 56 00 41 03 19 41 01  // :..[.1.:.V.A..A.
    C830: 3B 02 41 3D 65 00 02 49 78 00 03 00 40 82 3A 04  // ;.A=e..Ix...@.:.
    C840: 02 00 40 43 81 00 03 03 40 00 01 02 82 3A 40 2D  // ..@C....@....:@-
    C850: 05 46 04 00 00 00 2D 8D 41 01 00 3E 89 41 01 45  // .F....-.A..>.A.E
    C860: 65 00 5B 00 1B 00 01 01 00 00 02 05 00 01 00 00  // e.[.............
    C870: 00 52 29 26 05 00 10 27 00 00 02 02 00 40 5B 00  // .R)&...'.....@[.
    C880: 1E 00 01 01 00 00 37 00 00 02 05 00 02 00 00 00  // ......7.........
    C890: 52 29 26 05 00 10 27 00 00 02 02 00 40 5B 53 01  // R)&...'.....@[S.
    C8A0: 02 03 00 18 37 00 00 66 FF 2D 0D 42 47 01 55 28  // ....7..f.-.BG.U(
    C8B0: 05 2D 09 42 05 2D 09 42 05 03 0C 48 00 00 03 09  // .-.B.-.B...H....
    C8C0: 41 03 2D 19 41 03 3E 0D 41 03 00 46 3F 00 5C 05  // A.-.A.>.A..F?.\.
    C8D0: C6 3B FB 0F F0 FF 00 30 00 00 43 4B 00 5C 05 C6  // .;.....0..CK.\..
    C8E0: 3B FF 0F F0 FF 04 40 00 00 03 09 41 00 2D 19 41  // ;.....@....A.-.A
    C8F0: 00 33 0D 41 01 00 01 0A 93 3B 41 54 08 95 3B 01  // .3.A.....;AT..;.
    C900: 99 95 3B 02 03 19 41 00 33 09 41 02 56 18 41 03  // ..;...A.3.A.V.A.
    C910: B1 41 04 33 1A 41 41 01 8A 94 3B 41 03 19 41 00  // .A.3.AA...;A..A.
    C920: 33 09 41 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10  // 3.A.-.AA-.A.K%..
    C930: 44 99 00 2D 09 41 00 01 0A 94 3B 41 03 21 41 04  // D..-.A....;A.!A.
    C940: 09 25 41 02 1B 25 41 01 01 22 96 3B 41 54 00 71  // .%A..%A..".;AT.q
    C950: 3B 01 31 71 3B 04 01 B1 71 3B 04 03 09 41 01 2D  // ;.1q;...q;...A.-
    C960: 19 41 01 33 0D 41 01 00 01 0A 9A 3B 41 54 08 A1  // .A.3.A.....;AT..
    C970: 3B 01 99 A1 3B 03 03 19 41 01 33 09 41 03 56 18  // ;...;...A.3.A.V.
    C980: 41 03 B9 41 04 33 1A 41 41 01 8A A0 3B 41 03 19  // A..A.3.AA...;A..
    C990: 41 01 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25  // A.3.A.-.AA-.A.K%
    C9A0: 04 20 44 0B 01 2D 09 41 01 01 0A A0 3B 41 03 21  // . D..-.A....;A.!
    C9B0: 41 04 09 25 41 04 1B 25 41 02 01 22 A2 3B 41 54  // A..%A..%A..".;AT
    C9C0: 00 72 3B 01 39 72 3B 04 01 B9 72 3B 04 03 21 41  // .r;.9r;...r;..!A
    C9D0: 04 09 25 41 80 1B 25 41 07 01 22 B1 3B 41 3A 00  // ..%A..%A..".;A:.
    C9E0: 00 5B 7A 0C 00 00 00 00 02 00 04 00 06 00 08 00  // .[z.............
    C9F0: 0A 00 54 00 01 01 00 04 37 00 00 66 1C 56 00 40  // ..T.....7..f.V.@
    CA00: 03 64 40 14 00 2D 0D 42 18 00 54 30 50 00 3D A4  // .d@..-.B..T0P.=.
    CA10: 00 16 00 49 3B 00 3D 25 00 00 44 4E 00 3D 24 00  // ...I;.=%..DN.=$.
    CA20: 1C 00 49 3B 00 3D 64 00 1A 00 44 4E 00 2D 0C 42  // ..I;.=d...DN.-.B
    CA30: 14 00 2D 25 40 01 3E 62 40 40 49 1C 00 56 20 40  // ..-%@.>b@@I..V @
    CA40: 01 A2 50 00 40 5B 4D 00 01 01 00 00 37 00 00 55  // ..P.@[M.....7..U
    CA50: 00 00 01 05 00 00 4F 5C 01 00 03 00 41 01 00 09  // ......O\....A...
    CA60: E5 41 0F 3E E5 41 01 44 36 00 3E E5 41 02 44 32  // .A.>.A.D6.>.A.D2
    CA70: 00 03 E5 41 06 43 36 00 03 E5 41 0F 09 A5 41 C0  // ...A.C6...A...A.
    CA80: 1B 35 41 02 2D A5 41 15 02 3A 00 41 02 72 00 41  // .5A.-.A..:.A.r.A
    CA90: 52 34 5B 00 31 01 01 01 00 00 37 00 00 52 3E 01  // R4[.1.....7..R>.
    CAA0: 05 00 00 00 44 01 00 01 05 01 00 01 00 00 00 01  // ....D...........
    CAB0: 05 00 00 08 44 01 00 01 05 01 00 FE FF FF FF 01  // ....D...........
    CAC0: 05 00 00 1C 44 01 00 5C 65 01 00 0F 10 01 05 00  // ....D..\e.......
    CAD0: 00 32 44 01 00 01 05 01 00 01 00 00 00 01 05 00  // .2D.............
    CAE0: 00 33 44 01 00 01 05 01 00 01 00 00 00 01 05 00  // .3D.............
    CAF0: 00 34 44 01 00 01 05 01 00 01 00 00 00 01 05 00  // .4D.............
    CB00: 00 35 44 01 00 01 05 01 00 01 00 00 00 01 05 00  // .5D.............
    CB10: 00 38 44 01 00 01 05 01 00 09 00 00 00 03 24 40  // .8D...........$@
    CB20: 1A 00 3E 25 40 45 49 E3 00 01 05 00 00 47 44 01  // ..>%@EI......GD.
    CB30: 00 0D 25 01 00 10 01 05 00 00 0C 44 01 00 01 05  // ..%........D....
    CB40: 01 00 0C 50 20 00 01 05 00 00 10 44 01 00 01 05  // ...P ......D....
    CB50: 01 00 63 54 0A 13 01 05 00 00 14 44 01 00 01 05  // ..cT.......D....
    CB60: 01 00 53 BA 4C FF 01 05 00 00 36 44 01 00 01 05  // ..S.L.....6D....
    CB70: 01 00 01 40 00 10 5B 01 05 00 00 47 44 01 00 07  // ...@..[....GD...
    CB80: 25 01 00 EF 01 05 00 00 0C 44 01 00 01 05 01 00  // %........D......
    CB90: 08 40 10 00 01 05 00 00 10 44 01 00 01 05 01 00  // .@.......D......
    CBA0: 63 54 0D 13 01 05 00 00 14 44 01 00 01 05 01 00  // cT.......D......
    CBB0: 53 BA 4C FF 01 05 00 00 36 44 01 00 01 05 01 00  // S.L.....6D......
    CBC0: 01 00 00 00 5B 00 31 02 01 01 00 00 37 00 00 0D  // ....[.1.....7...
    CBD0: 25 64 4A 08 07 25 8A 4A FE 56 00 41 03 39 41 01  // %dJ..%.J.V.A.9A.
    CBE0: 09 25 41 0F 03 0A 40 42 66 FF 2D 0D 42 11 02 15  // .%A...@Bf.-.B...
    CBF0: 25 41 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00  // %A.-.BA..A......
    CC00: 41 07 A5 01 00 FE 54 08 01 00 01 0C 6B 4A 02 00  // A.....T.....kJ..
    CC10: 03 0A 42 40 03 05 40 BC 34 00 00 56 00 41 03 21  // ..B@..@.4..V.A.!
    CC20: 41 00 27 02 40 41 01 8A 67 4A 40 01 25 67 4A 02  // A.'.@A..gJ@.%gJ.
    CC30: 0D 25 65 4A 02 01 A9 69 4A 01 4B 25 01 01 49 7F  // .%eJ...iJ.K%..I.
    CC40: 00 54 30 69 4A 01 0D 69 4A 00 31 2B A5 69 4A 01  // .T0iJ..iJ.1+.iJ.
    CC50: 4B 25 01 02 44 96 00 2B A5 69 4A 01 56 00 41 03  // K%..D..+.iJ.V.A.
    CC60: 71 41 01 0F E5 41 80 01 02 6A 4A 41 03 69 41 00  // qA...A...jJA.iA.
    CC70: 2D A5 41 01 01 02 6A 4A 41 4B 25 01 02 44 C6 00  // -.A...jJAK%..D..
    CC80: 56 28 41 2D A5 41 01 01 02 6A 4A 41 4B 25 01 01  // V(A-.A...jJAK%..
    CC90: 44 E7 00 03 71 41 00 2D A5 41 01 01 02 6A 4A 41  // D...qA.-.A...jJA
    CCA0: 03 79 41 00 2D A5 41 01 01 02 6A 4A 41 0D 25 64  // .yA.-.A...jJA.%d
    CCB0: 4A 01 03 A5 41 01 43 BA 01 03 29 40 01 03 65 40  // J...A.C...)@..e@
    CCC0: 01 03 99 40 00 56 00 41 03 71 41 01 0F 65 41 01  // ...@.V.A.qA..eA.
    CCD0: 0F E5 41 80 01 02 6A 4A 41 01 A5 69 4A 04 3D 65  // ..A...jJA..iJ.=e
    CCE0: 01 04 47 28 01 01 0D 69 4A 01 13 43 57 01 01 A2  // ..G(...iJ..CW...
    CCF0: 69 4A 40 01 0D 69 4A 01 31 43 57 01 07 65 69 4A  // iJ@..iJ.1CW..eiJ
    CD00: EF 01 A5 69 4A 03 3E 25 40 04 46 57 01 01 A2 69  // ...iJ.>%@.FW...i
    CD10: 4A 40 31 A5 69 4A 01 5C 65 69 4A FD 20 0D 25 64  // J@1.iJ.\eiJ. .%d
    CD20: 4A 01 03 A5 41 00 43 BA 01 03 05 41 01 00 00 80  // J...A.C....A....
    CD30: 03 AA 41 40 01 02 6A 4A 41 3D 65 01 01 49 82 01  // ..A@..jJA=e..I..
    CD40: 02 A8 00 6A 4A 43 F9 01 56 00 41 03 1A 41 40 3B  // ...jJC..V.A..A@;
    CD50: 02 41 03 28 41 6A 4A 03 68 41 6A 4A 03 A8 41 6A  // .A.(AjJ.hAjJ..Aj
    CD60: 4A 03 E8 41 6A 4A 04 02 00 41 56 28 40 2D 8D 40  // J..AjJ...AV(@-.@
    CD70: 04 00 3E 25 40 04 47 F9 01 33 25 40 04 43 36 01  // ..>%@.G..3%@.C6.
    CD80: 02 65 00 02 03 0D 41 64 00 33 0D 41 01 00 3E 0D  // .e....Ad.3.A..>.
    CD90: 41 00 00 44 F9 01 51 64 4A 25 66 4A 10 44 C3 01  // A..D..QdJ%fJ.D..
    CDA0: 4A 65 66 4A 06 49 F9 01 02 65 00 01 0D 25 65 4A  // JefJ.I...e...%eJ
    CDB0: 02 3E A5 41 00 44 63 01 4B 25 01 01 44 F3 00 0D  // .>.A.Dc.K%..D...
    CDC0: 25 65 4A 02 01 25 64 4A 02 51 01 54 00 64 4A 54  // %eJ..%dJ.Q.T.dJT
    CDD0: 00 6B 4A 5B 7A 20 00 A6 55 01 00 AA 55 03 02 AE  // .kJ[z ..U...U...
    CDE0: 55 05 04 B2 55 42 41 B6 55 49 48 BA 55 4B 4A D6  // U...UBA.UIH.UKJ.
    CDF0: 55 29 28 BF 55 4D 4C 00 46 00 02 02 00 04 37 00  // U)(.UML.F.....7.
    CE00: 00 55 30 00 32 25 00 01 20 25 00 08 56 08 48 03  // .U0.2%.. %..V.H.
    CE10: 22 48 40 0D A5 C1 4A 01 02 A0 00 C0 4A 08 A5 00  // "H@...J.....J...
    CE20: 03 4A 25 C0 4A 02 44 3C 00 5C 0D C1 4A FF FE 01  // .J%.J.D<.\..J...
    CE30: 00 43 42 00 0D 0D C1 4A 01 01 3A 00 00 5B 0A 00  // .CB....J..:..[..
    CE40: 01 02 00 00 5B 7A 00 00 0A 00 01 01 00 04 55 00  // ....[z........U.
    CE50: 00 5B 37 09 01 01 00 00 37 00 00 01 05 00 00 D2  // .[7.....7.......
    CE60: 32 01 00 01 05 01 00 03 00 00 00 01 05 00 00 F2  // 2...............
    CE70: 32 01 00 01 05 01 00 04 00 00 00 01 05 00 00 12  // 2...............
    CE80: 33 01 00 01 05 01 00 05 00 00 00 01 05 00 00 32  // 3..............2
    CE90: 33 01 00 01 05 01 00 06 00 00 00 01 05 00 00 4F  // 3..............O
    CEA0: 5C 01 00 03 00 41 01 00 09 E5 41 0F 3E E5 41 01  // \....A....A.>.A.
    CEB0: 49 3B 02 01 05 00 00 88 5C 01 00 01 05 01 00 07  // I;......\.......
    CEC0: 00 00 00 01 05 00 00 89 5C 01 00 03 00 41 01 00  // ........\....A..
    CED0: 4C A5 41 10 44 3B 02 52 3E 03 24 40 1A 00 3E 25  // L.A.D;.R>.$@..>%
    CEE0: 40 45 49 9D 00 66 FF 2D 0D 42 3F 02 43 A4 00 66  // @EI..f.-.B?.C..f
    CEF0: FF 2D 0D 42 BB 05 03 04 41 00 00 3E 05 41 00 00  // .-.B....A..>.A..
    CF00: 00 00 44 D0 01 26 05 00 30 11 00 00 33 25 40 01  // ..D..&..0...3%@.
    CF10: 15 05 40 07 0F 05 40 02 00 00 00 01 05 00 00 0D  // ..@...@.........
    CF20: 5C 01 00 01 02 01 00 40 01 05 00 00 0B 5C 01 00  // \......@.....\..
    CF30: 01 04 01 00 00 00 01 05 00 00 0B 5C 01 00 03 00  // ...........\....
    CF40: 46 01 00 03 00 46 01 00 03 00 46 01 00 03 00 46  // F....F....F....F
    CF50: 01 00 4A 05 01 00 00 00 00 10 44 00 01 01 05 00  // ..J.......D.....
    CF60: 00 0D 5C 01 00 0F 05 40 00 80 00 00 01 02 01 00  // ..\....@........
    CF70: 40 01 05 00 00 0C 5C 01 00 01 04 01 00 04 00 01  // @.....\.........
    CF80: 05 00 00 0D 5C 01 00 5E 25 40 9F 20 01 02 01 00  // ....\..^%@. ....
    CF90: 40 01 05 00 00 0C 5C 01 00 01 04 01 00 08 00 01  // @.....\.........
    CFA0: 05 00 00 0D 5C 01 00 5E 25 40 9F 40 01 02 01 00  // ....\..^%@.@....
    CFB0: 40 01 05 00 00 0C 5C 01 00 01 04 01 00 0C 00 01  // @.....\.........
    CFC0: 05 00 00 0D 5C 01 00 5E 25 40 9F 60 01 02 01 00  // ....\..^%@.`....
    CFD0: 40 01 05 00 00 0C 5C 01 00 01 04 01 00 10 00 01  // @.....\.........
    CFE0: 05 00 00 0B 5C 01 00 01 04 01 00 14 00 01 05 00  // ....\...........
    CFF0: 00 0B 5C 01 00 03 00 46 01 00 03 00 46 01 00 03  // ..\....F....F...
    D000: 00 46 01 00 03 00 46 01 00 4A 05 01 00 00 00 00  // .F....F..J......
    D010: 10 44 B7 01 51 C8 51 C8 51 64 2D 0D 42 18 00 43  // .D..Q.Q.Qd-.B..C
    D020: A4 00 01 05 00 00 0D 5C 01 00 09 0D 40 9F 7F 01  // .......\....@...
    D030: 02 01 00 40 01 05 00 00 0B 5C 01 00 01 05 01 00  // ...@.....\......
    D040: 01 03 00 00 01 05 00 00 0B 5C 01 00 03 00 46 01  // .........\....F.
    D050: 00 03 00 46 01 00 03 00 46 01 00 03 00 46 01 00  // ...F....F....F..
    D060: 4A 05 01 00 00 00 00 10 44 0E 02 01 05 00 00 0D  // J.......D.......
    D070: 5C 01 00 0F 25 40 03 01 02 01 00 40 01 05 00 00  // \...%@.....@....
    D080: 0D 5C 01 00 09 25 40 FD 01 02 01 00 40 5B 7A F8  // .\...%@.....@[z.
    D090: 06 01 03 B0 0F 08 00 50 00 0E 00 00 00 00 00 00  // .......P........
    D0A0: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 40 00 04  // .....B.......@..
    D0B0: 04 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D0C0: 0F 01 03 B0 0F 40 00 04 02 0C 00 00 00 00 00 00  // .....@..........
    D0D0: 00 00 00 00 00 42 09 B0 0F 01 03 B0 02 02 08 00  // .....B..........
    D0E0: 20 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  //  ............B..
    D0F0: 02 01 03 B0 03 02 08 00 20 0C 00 00 00 00 00 00  // ........ .......
    D100: 00 00 00 00 00 42 09 B0 03 01 03 B0 06 02 08 00  // .....B..........
    D110: 20 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  //  ............B..
    D120: 06 01 03 B0 07 02 08 00 20 0C 00 00 00 00 00 00  // ........ .......
    D130: 00 00 00 00 00 42 09 B0 07 01 03 B0 0F 00 0C 00  // .....B..........
    D140: 04 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D150: 0F 01 03 B0 0F 80 00 02 08 0C 00 00 00 00 00 00  // ................
    D160: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00 82 00  // .....B..........
    D170: 80 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D180: 0F 01 03 B0 0F 00 02 10 80 0C 00 00 00 00 00 00  // ................
    D190: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00 82 40  // .....B.........@
    D1A0: 00 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D1B0: 0F 01 03 B0 0F 00 82 00 08 0C 00 00 00 00 00 00  // ................
    D1C0: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00  // .....B........B.
    D1D0: 80 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D1E0: 0F 01 03 B0 0F 00 42 00 10 0C 00 00 00 00 00 00  // ......B.........
    D1F0: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00  // .....B........B.
    D200: 08 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D210: 0F 01 03 B0 0F 00 02 10 04 0C 00 00 00 00 00 00  // ................
    D220: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00 02 10  // .....B..........
    D230: 02 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D240: 0F 01 03 B0 0F 00 02 10 40 0C 00 00 00 00 00 00  // ........@.......
    D250: 00 00 00 00 00 42 09 B0 0F 01 03 B0 02 08 80 00  // .....B..........
    D260: 02 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D270: 02 01 03 B0 03 08 80 00 02 0C 00 00 00 00 00 00  // ................
    D280: 00 00 00 00 00 42 09 B0 03 01 03 B0 06 08 80 00  // .....B..........
    D290: 02 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D2A0: 06 01 03 B0 07 08 80 00 02 0C 00 00 00 00 00 00  // ................
    D2B0: 00 00 00 00 00 42 09 B0 07 01 03 B0 02 08 80 00  // .....B..........
    D2C0: 20 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  //  ............B..
    D2D0: 02 01 03 B0 03 08 80 00 20 0C 00 00 00 00 00 00  // ........ .......
    D2E0: 00 00 00 00 00 42 09 B0 03 01 03 B0 06 08 80 00  // .....B..........
    D2F0: 20 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  //  ............B..
    D300: 06 01 03 B0 07 08 80 00 20 0C 00 00 00 00 00 00  // ........ .......
    D310: 00 00 00 00 00 42 09 B0 07 01 03 B0 0F 08 00 02  // .....B..........
    D320: 80 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D330: 0F 01 03 B0 0F 08 00 02 04 0C 00 00 00 00 00 00  // ................
    D340: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 08 00 02  // .....B..........
    D350: 02 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D360: 0F 01 03 B0 0F 00 82 00 04 0C 00 00 00 00 00 00  // ................
    D370: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00  // .....B........B.
    D380: 02 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D390: 0F 01 03 B0 0F 80 00 42 00 0C 00 00 00 00 00 00  // .......B........
    D3A0: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 80 00 82  // .....B..........
    D3B0: 00 0C 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  // .............B..
    D3C0: 0F 01 03 B0 0F 01 00 02 08 10 00 00 00 00 00 00  // ................
    D3D0: 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 10 80 00  // .....B..........
    D3E0: 20 10 00 00 00 00 00 00 00 00 00 00 00 42 09 B0  //  ............B..
    D3F0: 0F 01 03 00 0F 00 00 00 00 00 00 00 00 00 00 00  // ................
    D400: 00 00 00 00 00 42 00 00 0F 00 00 00 00 01 03 B0  // .....B..........
    D410: 0F 08 00 50 00 06 00 00 00 00 00 00 00 00 00 00  // ...P............
    D420: 00 42 09 B0 0F 01 03 B0 0F 40 00 04 04 04 00 00  // .B.......@......
    D430: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D440: 0F 40 00 04 02 04 00 00 00 00 00 00 00 00 00 00  // .@..............
    D450: 00 42 09 B0 0F 01 03 B0 02 02 08 00 20 04 00 00  // .B.......... ...
    D460: 00 00 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0  // .........B......
    D470: 03 02 08 00 20 04 00 00 00 00 00 00 00 00 00 00  // .... ...........
    D480: 00 42 09 B0 03 01 03 B0 06 02 08 00 20 04 00 00  // .B.......... ...
    D490: 00 00 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0  // .........B......
    D4A0: 07 02 08 00 20 04 00 00 00 00 00 00 00 00 00 00  // .... ...........
    D4B0: 00 42 09 B0 07 01 03 B0 0F 00 0C 00 04 04 00 00  // .B..............
    D4C0: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D4D0: 0F 80 00 02 08 04 00 00 00 00 00 00 00 00 00 00  // ................
    D4E0: 00 42 09 B0 0F 01 03 B0 0F 00 82 00 80 04 00 00  // .B..............
    D4F0: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D500: 0F 00 02 10 80 04 00 00 00 00 00 00 00 00 00 00  // ................
    D510: 00 42 09 B0 0F 01 03 B0 0F 00 82 40 00 04 00 00  // .B.........@....
    D520: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D530: 0F 00 82 00 08 04 00 00 00 00 00 00 00 00 00 00  // ................
    D540: 00 42 09 B0 0F 01 03 B0 0F 00 42 00 80 04 00 00  // .B........B.....
    D550: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D560: 0F 00 42 00 10 04 00 00 00 00 00 00 00 00 00 00  // ..B.............
    D570: 00 42 09 B0 0F 01 03 B0 0F 00 42 00 08 04 00 00  // .B........B.....
    D580: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D590: 0F 00 02 10 04 04 00 00 00 00 00 00 00 00 00 00  // ................
    D5A0: 00 42 09 B0 0F 01 03 B0 0F 00 02 10 02 04 00 00  // .B..............
    D5B0: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D5C0: 0F 00 02 10 40 04 00 00 00 00 00 00 00 00 00 00  // ....@...........
    D5D0: 00 42 09 B0 0F 01 03 B0 02 08 80 00 02 04 00 00  // .B..............
    D5E0: 00 00 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0  // .........B......
    D5F0: 03 08 80 00 02 04 00 00 00 00 00 00 00 00 00 00  // ................
    D600: 00 42 09 B0 03 01 03 B0 06 08 80 00 02 04 00 00  // .B..............
    D610: 00 00 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0  // .........B......
    D620: 07 08 80 00 02 04 00 00 00 00 00 00 00 00 00 00  // ................
    D630: 00 42 09 B0 07 01 03 B0 02 08 80 00 20 04 00 00  // .B.......... ...
    D640: 00 00 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0  // .........B......
    D650: 03 08 80 00 20 04 00 00 00 00 00 00 00 00 00 00  // .... ...........
    D660: 00 42 09 B0 03 01 03 B0 06 08 80 00 20 04 00 00  // .B.......... ...
    D670: 00 00 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0  // .........B......
    D680: 07 08 80 00 20 04 00 00 00 00 00 00 00 00 00 00  // .... ...........
    D690: 00 42 09 B0 07 01 03 B0 0F 08 00 02 80 04 00 00  // .B..............
    D6A0: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D6B0: 0F 08 00 02 04 04 00 00 00 00 00 00 00 00 00 00  // ................
    D6C0: 00 42 09 B0 0F 01 03 B0 0F 08 00 02 02 04 00 00  // .B..............
    D6D0: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D6E0: 0F 00 82 00 04 04 00 00 00 00 00 00 00 00 00 00  // ................
    D6F0: 00 42 09 B0 0F 01 03 B0 0F 00 42 00 02 04 00 00  // .B........B.....
    D700: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D710: 0F 80 00 42 00 04 00 00 00 00 00 00 00 00 00 00  // ...B............
    D720: 00 42 09 B0 0F 01 03 B0 0F 80 00 82 00 04 00 00  // .B..............
    D730: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0  // .........B......
    D740: 0F 01 00 02 08 10 00 00 00 00 00 00 00 00 00 00  // ................
    D750: 00 42 09 B0 0F 01 03 B0 0F 10 80 00 20 10 00 00  // .B.......... ...
    D760: 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01 03 00  // .........B......
    D770: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D780: 00 42 00 00 0F 00 00 00 00 00 A0 01 01 08 08 00  // .B..............
    D790: 03 01 00 00 3D E5 00 01 44 33 00 3D E5 00 02 44  // ....=...D3.=...D
    D7A0: 33 00 02 05 00 00 00 01 00 52 29 20 05 00 64 00  // 3........R) ..d.
    D7B0: 00 00 03 02 46 40 02 02 00 00 43 E4 00 02 05 00  // ....F@....C.....
    D7C0: 01 00 02 00 52 29 03 01 01 00 02 02 00 00 03 01  // ....R)..........
    D7D0: 46 00 56 38 46 03 05 40 80 C3 C9 01 27 02 40 46  // F.V8F..@....'.@F
    D7E0: 2D 05 40 31 00 00 00 27 05 40 32 00 00 00 21 05  // -.@1...'.@2...!.
    D7F0: 40 32 00 00 00 21 02 46 40 03 02 46 40 55 00 03  // @2...!.F@..F@U..
    D800: 27 05 46 19 00 00 00 7C 05 40 00 40 00 00 7E 02  // '.F....|.@.@..~.
    D810: 40 01 02 8A 01 40 02 1A 01 40 3D E5 00 01 49 E1  // @....@...@=...I.
    D820: 00 02 A5 03 01 03 02 00 40 21 05 01 F4 01 00 00  // ........@!......
    D830: 03 02 01 40 7C 05 00 32 00 00 00 7E 05 40 10 27  // ...@|..2...~.@.'
    D840: 00 00 7C 05 40 4E 0C 00 00 7E 02 40 01 02 0A 03  // ..|.@N...~.@....
    D850: 40 21 02 40 01 27 05 40 4E 0C 00 00 33 02 00 40  // @!.@.'.@N...3..@
    D860: 02 8A 02 00 02 1A 02 00 43 E4 00 55 00 02 03 01  // ........C..U....
    D870: 00 00 55 38 00 03 05 40 00 32 00 00 3D 05 00 00  // ..U8...@.2..=...
    D880: 00 00 00 44 26 01 03 02 40 46 27 01 40 00 3E 05  // ...D&...@F'.@.>.
    D890: 40 9C 18 00 00 47 15 01 03 05 40 00 32 00 00 3E  // @....G....@.2..>
    D8A0: 05 40 C8 00 00 00 46 26 01 03 05 40 C8 00 00 00  // .@....F&...@....
    D8B0: 66 FF 2D 0D 42 80 01 3E 0C 40 02 00 47 3D 01 2D  // f.-.B..>.@..G=.-
    D8C0: 0D 42 08 00 43 2D 01 33 0C 40 00 00 3E E5 00 03  // .B..C-.3.@..>...
    D8D0: 49 53 01 2D 0C 40 06 00 33 0D 40 01 00 27 0C 40  // IS.-.@..3.@..'.@
    D8E0: 06 00 2D 0C 40 04 00 02 E2 00 40 33 0C 40 04 00  // ..-.@.....@3.@..
    D8F0: 21 0C 40 06 00 2D 0C 40 00 00 27 02 46 40 02 0A  // !.@..-.@..'.F@..
    D900: 00 40 02 B2 00 40 5B 7A 20 00 C8 00 40 06 08 00  // .@...@[z ...@...
    D910: 19 00 40 06 80 0C 40 00 32 00 80 0C 38 18 60 00  // ..@...@.2...8.`.
    D920: 64 00 00 32 00 32 7F 00 64 00 5A 00 02 01 00 00  // d..2.2..d.Z.....
    D930: 01 05 00 00 74 21 01 00 01 05 01 00 0A 00 F0 FF  // ....t!..........
    D940: 01 05 00 00 75 21 01 00 01 05 01 00 25 00 00 00  // ....u!......%...
    D950: 01 05 00 00 74 21 01 00 01 05 01 00 09 00 F0 FF  // ....t!..........
    D960: 01 05 00 00 75 21 01 00 01 05 01 00 01 00 00 00  // ....u!..........
    D970: 0D 25 B6 F0 01 07 25 B6 F0 FE 02 05 00 00 00 0E  // .%....%.........
    D980: 10 52 20 5B EA 00 02 01 08 08 37 00 00 66 1C 2D  // .R [......7..f.-
    D990: 0C 42 06 00 02 01 02 00 02 F0 02 50 00 3D E5 00  // .B.........P.=..
    D9A0: 03 44 21 00 5B 56 00 40 20 0D 01 20 00 03 05 00  // .D!.[V.@ .. ....
    D9B0: 00 01 00 00 33 02 00 40 0E E5 02 80 52 12 55 38  // ....3..@....R.U8
    D9C0: 00 20 05 00 03 00 00 00 27 05 40 10 27 00 00 01  // . ......'.@.'...
    D9D0: 05 00 00 88 5C 01 00 01 02 01 00 00 01 05 00 00  // ....\...........
    D9E0: 89 5C 01 00 01 02 01 00 40 2D 05 00 01 00 00 00  // .\......@-......
    D9F0: 56 00 41 01 05 00 00 88 5C 01 00 01 05 01 00 01  // V.A.....\.......
    DA00: 00 00 00 01 05 00 00 89 5C 01 00 03 00 01 01 00  // ........\.......
    DA10: 01 05 00 00 88 5C 01 00 01 02 01 00 00 3E 25 41  // .....\.......>%A
    DA20: 12 49 C4 00 3E E5 01 00 44 C4 00 2D E5 01 07 03  // .I..>...D..-....
    DA30: 04 40 04 00 03 BA 40 01 01 05 00 00 89 5C 01 00  // .@....@......\..
    DA40: 01 02 01 00 40 43 D2 00 01 05 00 00 89 5C 01 00  // ....@C.......\..
    DA50: 01 04 01 00 04 00 2D 05 00 01 00 00 00 2D 25 41  // ......-......-%A
    DA60: 01 2D 0D 42 04 00 3E 25 41 16 45 8C 00 5B 17 01  // .-.B..>%A.E..[..
    DA70: 01 02 10 04 37 00 00 3D 25 00 FF 49 CE 00 01 05  // ....7..=%..I....
    DA80: 00 00 28 68 01 00 01 05 01 00 00 70 03 00 01 05  // ..(h.......p....
    DA90: 00 00 29 68 01 00 03 00 40 01 00 66 18 03 00 40  // ..)h....@..f...@
    DAA0: 01 00 03 00 00 01 00 03 00 41 01 00 3E 05 40 00  // .........A..>.@.
    DAB0: 00 00 00 44 CD 00 03 05 01 10 70 03 00 01 05 00  // ...D......p.....
    DAC0: 00 28 68 01 00 01 02 01 00 01 01 05 00 00 29 68  // .(h...........)h
    DAD0: 01 00 03 00 02 01 00 03 00 03 01 00 01 05 00 00  // ................
    DAE0: 88 5C 01 00 01 02 01 00 02 01 05 00 00 89 5C 01  // .\............\.
    DAF0: 00 01 02 01 00 03 2D 05 01 08 00 00 00 33 0D 40  // ......-......3.@
    DB00: 01 00 3E 0D 40 00 00 49 4F 00 01 05 00 00 28 68  // ..>.@..IO.....(h
    DB10: 01 00 01 02 01 00 01 01 05 00 00 3E 5C 01 00 01  // ...........>\...
    DB20: 05 01 00 08 00 00 00 01 05 01 00 04 00 00 00 01  // ................
    DB30: 05 01 00 01 00 00 00 51 32 50 02 5B 01 05 00 00  // .......Q2P.[....
    DB40: 58 5C 01 00 01 65 01 00 FF 01 21 01 00 00 01 05  // X\...e....!.....
    DB50: 00 00 3E 5C 01 00 01 05 01 00 05 00 00 00 51 0A  // ..>\..........Q.
    DB60: 01 05 00 00 3E 5C 01 00 01 05 01 00 01 00 00 00  // ....>\..........
    DB70: 51 0A 01 05 00 00 58 5C 01 00 3C 61 01 00 00 49  // Q.....X\..<a...I
    DB80: 04 01 51 64 5B 00 30 00 01 03 00 04 02 01 01 00  // ..Qd[.0.........
    DB90: 02 E5 01 02 52 3C 01 05 00 00 15 6E 01 00 01 01  // ....R<.....n....
    DBA0: 01 00 02 50 02 01 05 00 00 41 6E 01 00 01 39 01  // ...P.....An...9.
    DBB0: 00 01 51 C8 5B 5B 62 01 01 04 00 04 37 00 00 3D  // ..Q.[[b.....7..=
    DBC0: 65 00 03 44 0F 01 02 01 01 00 02 65 01 07 52 50  // e..D.......e..RP
    DBD0: 3D 05 02 00 00 00 00 44 0B 01 01 05 00 00 00 68  // =......D.......h
    DBE0: 01 00 4A E5 01 00 80 49 24 00 3D 25 00 01 49 46  // ..J....I$.=%..IF
    DBF0: 00 01 05 00 00 01 68 01 00 43 4E 00 01 05 00 00  // ......h..CN.....
    DC00: 00 68 01 00 03 24 40 04 00 09 25 40 DF 01 22 01  // .h...$@...%@..".
    DC10: 00 40 01 05 00 00 00 68 01 00 4A E5 01 00 80 49  // .@.....h..J....I
    DC20: 5C 00 56 00 40 3D 25 00 01 49 95 00 03 0C 40 05  // \.V.@=%..I....@.
    DC30: 00 15 0D 40 07 09 65 40 7F 01 05 00 00 09 68 01  // ...@..e@......h.
    DC40: 00 5C 8A 01 00 7F 00 40 43 B3 00 03 24 40 05 00  // .\.....@C...$@..
    DC50: 15 0D 40 01 1B 25 40 01 0F 65 40 40 01 05 00 00  // ..@..%@..e@@....
    DC60: 0A 68 01 00 01 0A 01 00 40 01 05 00 00 0B 68 01  // .h......@.....h.
    DC70: 00 03 00 46 01 00 09 25 46 FC 3D 25 00 01 44 CF  // ...F...%F.=%..D.
    DC80: 00 0F 25 46 01 56 00 40 03 19 40 00 21 05 40 64  // ..%F.V.@..@.!.@d
    DC90: 00 00 00 03 05 41 78 5D 02 00 33 02 41 40 27 05  // .....Ax]..3.A@'.
    DCA0: 41 71 02 00 00 03 A2 46 40 01 02 01 00 46 01 05  // Aq.....F@....F..
    DCB0: 00 00 00 68 01 00 4A E5 01 00 80 49 F8 00 51 32  // ...h..J....I..Q2
    DCC0: 5B 55 00 00 5B 02 01 01 00 52 50 3D 05 02 00 00  // [U..[....RP=....
    DCD0: 00 00 44 0B 01 02 E4 00 05 00 02 A4 00 06 00 02  // ..D.............
    DCE0: 0D 02 01 01 03 24 41 08 00 4C 25 41 01 44 3E 01  // .....$A..L%A.D>.
    DCF0: 02 65 02 02 02 64 01 0C 00 02 8C 01 0E 00 3D 65  // .e...d........=e
    DD00: 01 FF 44 61 01 02 99 02 00 02 25 01 32 52 36 2D  // ..Da......%.2R6-
    DD10: 0D 42 04 00 43 3E 01 5B 79 00 01 03 04 00 37 00  // .B..C>.[y.....7.
    DD20: 00 03 0A 00 42 66 20 03 0C 41 00 00 2D 0A 41 42  // ....Bf ..A..-.AB
    DD30: 2D 0D 42 04 00 3E 0A 42 41 44 75 00 3D 0C 00 00  // -.B..>.BADu.=...
    DD40: 00 44 34 00 2D 0C 42 02 00 43 1D 00 02 0A 01 42  // .D4.-.B..C.....B
    DD50: 3D 65 00 00 44 46 00 3D 65 00 04 49 74 00 03 E4  // =e..DF.=e..It...
    DD60: 41 05 00 02 04 01 08 00 3E E5 41 00 44 75 00 3D  // A.......>.A.Du.=
    DD70: 8C 00 10 00 47 6B 00 2D 0D 42 06 00 33 E5 41 01  // ....Gk.-.B..3.A.
    DD80: 43 50 00 02 04 00 0C 00 03 0A 42 00 5B 55 00 01  // CP........B.[U..
    DD90: 5B 00 07 00 02 02 04 04 5B 00 67 02 01 05 00 00  // [.......[.g.....
    DDA0: 37 00 00 03 20 46 52 00 0E 25 00 60 52 14 08 25  // 7... FR..%.`R..%
    DDB0: 00 0F 42 29 00 63 0F 58 00 63 11 54 01 63 12 CC  // ..B).c.X.c.T.c..
    DDC0: 01 63 01 24 02 63 00 4D 02 63 08 1E 01 63 09 FF  // .c.$.c.M.c...c..
    DDD0: 00 63 0A 06 01 63 13 0E 01 63 14 16 01 63 0B 26  // .c...c...c...c.&
    DDE0: 01 63 0C 14 02 63 0D 2E 01 63 10 47 01 5A 5A 43  // .c...c...c.G.ZZC
    DDF0: FB 00 54 00 B0 4D 01 0D 41 4D 1F 00 3D A5 00 00  // ..T..M..AM..=...
    DE00: 44 77 00 3D A5 00 02 44 E9 00 3D A5 00 05 49 F1  // Dw.=...D..=...I.
    DE10: 00 54 08 DF 4D 3D 25 02 00 49 86 00 02 25 02 02  // .T..M=%..I...%..
    DE20: 32 25 02 01 01 E1 DF 4D 02 4A 25 E2 4D 01 49 CC  // 2%.....M.J%.M.I.
    DE30: 00 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56  // .{......~.@....V
    DE40: 00 46 03 29 46 02 27 02 40 46 07 65 E6 4D FE 01  // .F.)F.'.@F.e.M..
    DE50: 05 E7 4D 00 80 00 00 01 02 E8 4D 40 0D E5 E9 4D  // ..M.......M@...M
    DE60: 10 0D 65 3E 4D 04 02 20 00 3E 4D 08 25 00 07 0E  // ..e>M.. .>M.%...
    DE70: 25 00 00 52 14 14 3D 00 04 5C B9 AF 3B 8F 00 3A  // %..R..=..\..;..:
    DE80: 00 00 5B 01 05 B0 4D 01 00 00 00 07 E5 3E 4D 2F  // ..[...M......>M/
    DE90: 0D 65 3E 4D 04 3A 00 00 5B 54 20 EE 4D 43 FB 00  // .e>M.:..[T .MC..
    DEA0: 01 25 EE 4D 01 43 FB 00 01 25 EE 4D 02 43 FB 00  // .%.M.C...%.M.C..
    DEB0: 01 25 EE 4D 03 43 FB 00 07 25 DE 4D EF 43 FB 00  // .%.M.C...%.M.C..
    DEC0: 0D 25 DE 4D 10 43 FB 00 0D 65 E6 4D 01 51 0A 07  // .%.M.C...e.M.Q..
    DED0: 25 E3 4D FE 51 0A 01 0D E2 4D 01 02 51 C8 43 FB  // %.M.Q....M..Q.C.
    DEE0: 00 0D 25 F4 4D 10 01 31 E5 4D 00 43 FB 00 01 69  // ..%.M..1.M.C...i
    DEF0: 85 4D 02 4C 25 46 10 49 77 01 3D A5 00 03 49 77  // .M.L%F.Iw.=...Iw
    DF00: 01 4A 25 4B 4D 10 49 77 01 01 A5 85 4D 02 43 7C  // .J%KM.Iw....M.C|
    DF10: 01 01 B1 85 4D 00 3D 25 02 00 44 91 01 32 25 02  // ....M.=%..D..2%.
    DF20: 01 14 25 02 04 5C E1 85 4D 8F 02 3D E5 00 04 47  // ..%..\..M..=...G
    DF30: A0 01 0D 25 85 4D 01 43 A5 01 07 25 85 4D FE 3D  // ...%.M.C...%.M.=
    DF40: A5 00 05 44 B3 01 3D A5 00 00 49 C4 01 02 A5 00  // ...D..=...I.....
    DF50: 00 03 39 40 00 33 25 40 01 01 22 E1 4D 40 02 E0  // ..9@.3%@..".M@..
    DF60: 02 86 4D 43 FB 00 02 E0 02 86 4D 4B E5 02 01 44  // ..MC......MK...D
    DF70: FB 00 02 B0 00 85 4D 02 E5 00 04 4A 25 85 4D 01  // ......M....J%.M.
    DF80: 44 ED 01 02 E5 00 08 3D A5 00 02 44 FB 01 3D A5  // D......=...D..=.
    DF90: 00 03 49 04 02 54 00 86 4D 50 02 43 FB 00 02 A5  // ..I..T..MP.C....
    DFA0: 00 00 03 31 43 00 4A 62 85 4D 44 44 FB 00 54 08  // ...1C.Jb.MDD..T.
    DFB0: E2 4D 51 C8 0D 25 E3 4D 01 51 32 43 FB 00 0D 25  // .MQ..%.M.Q2C...%
    DFC0: 86 4D 01 3D A5 00 00 44 39 02 01 0D B7 4D 0F 01  // .M.=...D9....M..
    DFD0: 43 FB 00 03 39 43 00 03 02 40 44 33 25 40 01 01  // C...9C...@D3%@..
    DFE0: 0A B7 4D 40 43 FB 00 54 00 B7 4D 07 25 86 4D FE  // ..M@C..T..M.%.M.
    DFF0: 07 0D 85 4D FE 80 54 20 DE 4D 54 20 EE 4D 43 FB  // ...M..T .MT .MC.
    E000: 00 00 29 00 01 01 00 00 37 00 00 66 1C 2D 0D 42  // ..).....7..f.-.B
    E010: 18 00 03 30 40 50 00 3E 25 40 00 44 28 00 33 25  // ...0@P.>%@.D(.3%
    E020: 40 01 2D 0C 42 14 00 43 15 00 5B 00 46 01 01 06  // @.-.B..C..[.F...
    E030: 00 00 37 00 00 42 29 00 63 07 24 01 63 01 25 00  // ..7..B).c.$.c.%.
    E040: 63 00 C0 00 63 0B 27 01 63 04 2C 01 5A 5A 43 3F  // c...c.'.c.,.ZZC?
    E050: 01 02 65 00 11 52 04 4B E5 02 01 49 20 01 02 65  // ..e..R.K...I ..e
    E060: 00 0A 55 08 02 52 4D 3D E5 00 04 47 50 00 68 25  // ..U..RM=...GP.h%
    E070: 00 01 02 25 02 01 52 4D 68 25 00 01 3D A5 00 00  // ...%..RMh%..=...
    E080: 49 82 00 20 05 01 64 00 00 00 02 05 01 14 1E 00  // I.. ..d.........
    E090: 02 2C 21 01 00 02 01 02 00 02 02 00 40 52 0C 26  // .,!.........@R.&
    E0A0: 05 00 64 00 00 00 02 02 01 40 02 01 00 02 02 65  // ..d......@.....e
    E0B0: 00 01 55 08 02 52 4D 3D E5 00 04 47 A0 00 68 25  // ..U..RM=...G..h%
    E0C0: 00 01 02 25 02 01 52 4D 68 25 00 01 51 05 02 65  // ...%..RMh%..Q..e
    E0D0: 00 01 52 04 51 0A 02 65 00 09 52 4D 3D E5 00 04  // ..R.Q..e..RM=...
    E0E0: 47 20 01 68 25 00 01 52 4D 43 20 01 02 65 00 12  // G .h%..RMC ..e..
    E0F0: 52 04 4B E5 02 01 44 20 01 02 65 00 08 52 4D 3D  // R.K...D ..e..RM=
    E100: E5 00 04 47 E4 00 68 25 00 01 52 4D 68 25 00 01  // ...G..h%..RMh%..
    E110: 02 65 00 00 52 04 02 65 00 00 52 4D 3D E5 00 04  // .e..R..e..RM=...
    E120: 47 01 01 68 25 00 01 52 4D 68 25 00 01 3D A5 00  // G..h%..RMh%..=..
    E130: 00 49 20 01 02 01 02 00 02 05 01 14 00 00 00 2C  // .I ............,
    E140: 21 01 00 55 00 00 52 0C 02 01 00 02 3A 00 00 5B  // !..U..R.....:..[
    E150: 43 20 01 52 4D 43 20 01 66 06 02 29 00 00 02 68  // C .RMC .f..)...h
    E160: 00 4E 00 02 8C 00 20 00 52 33 5B 02 29 00 00 52  // .N.... .R3[.)..R
    E170: 33 5B 38 03 02 01 00 00 37 00 00 0E 25 00 20 52  // 3[8.....7...%. R
    E180: 14 08 25 00 0F 42 29 00 63 07 35 00 63 0A 3D 00  // ..%..B).c.5.c.=.
    E190: 63 01 21 01 63 00 7B 01 63 09 BB 01 63 08 E9 01  // c.!.c.{.c...c...
    E1A0: 63 0B 01 02 5A 5A 5B 0D 65 02 56 08 43 AD 02 03  // c...ZZ[.e.V.C...
    E1B0: 0A 46 48 66 FF 2D 0D 42 1A 03 56 00 40 20 25 00  // .FHf.-.B..V.@ %.
    E1C0: 05 2D 0A 42 40 20 25 00 02 03 0A 48 40 01 04 44  // .-.B@ %....H@..D
    E1D0: 55 00 00 01 64 43 55 04 00 07 E5 43 55 FC 07 A5  // U...dCU....CU...
    E1E0: 43 55 8F 03 0A 48 46 56 00 41 3D E5 00 04 47 96  // CU...HFV.A=...G.
    E1F0: 00 03 05 41 00 80 01 01 4B 25 02 01 44 96 00 09  // ...A....K%..D...
    E200: 4D 41 7F FF 03 E5 41 02 5C FA 11 56 FC 41 5C 52  // MA....A.\..V.A\R
    E210: 03 56 7F FE 41 3D A5 00 00 49 CC 00 07 A5 FF 55  // .V..A=...I.....U
    E220: 7F 66 FF 2D 0D 42 DE 02 2D 0D 42 06 00 56 00 41  // .f.-.B..-.B..V.A
    E230: 3D A5 02 14 49 49 02 03 25 41 20 43 49 02 0D A5  // =...II..%A CI...
    E240: FF 55 80 66 FF 2D 0D 42 B6 02 03 04 40 00 00 3E  // .U.f.-.B....@..>
    E250: 05 40 00 00 00 00 44 AD 02 03 21 43 00 03 E2 41  // .@....D...!C...A
    E260: 44 4C E4 41 05 00 44 07 01 3D A4 00 04 00 49 07  // DL.A..D..=....I.
    E270: 01 3D 04 01 00 00 47 0F 01 2D 0D 42 0C 00 43 D8  // .=....G..-.B..C.
    E280: 00 03 04 40 06 00 03 24 41 0A 00 03 64 41 0B 00  // ...@...$A...dA..
    E290: 43 52 02 07 65 02 56 F7 03 0A 46 48 56 00 41 3D  // CR..e.V...FHV.A=
    E2A0: E5 00 04 47 3C 01 07 25 20 56 F9 43 42 01 5C 25  // ...G<..% V.CB.\%
    E2B0: 20 56 F9 02 4A 65 1E 56 01 44 42 01 07 25 1E 56  //  V..Je.V.DB..%.V
    E2C0: F8 4A 65 1E 56 01 44 4F 01 2D E5 41 01 2D 0D 48  // .Je.V.DO.-.A.-.H
    E2D0: 10 00 3E E5 41 04 45 2D 01 03 0A 48 46 0D 25 0F  // ..>.A.E-...HF.%.
    E2E0: 56 02 4A 25 0F 56 04 44 70 01 43 AD 02 07 25 0F  // V.J%.V.Dp.C...%.
    E2F0: 56 FD 4A 25 0F 56 04 49 80 01 0D 65 02 56 08 56  // V.J%.V.I...e.V.V
    E300: 00 41 4A 65 1E 56 01 44 90 01 5C 25 1E 56 F8 04  // .AJe.V.D..\%.V..
    E310: 51 02 4A 65 1E 56 01 44 A0 01 2D A5 41 01 2D 0D  // Q.Je.V.D..-.A.-.
    E320: 48 10 00 3E A5 41 04 45 90 01 43 AD 02 03 0A 46  // H..>.A.E..C....F
    E330: 48 56 08 48 20 25 00 02 03 22 48 40 0D 25 43 55  // HV.H %..."H@.%CU
    E340: 01 0D E5 44 55 10 03 0A 48 46 0D A5 11 56 01 51  // ...DU...HF...V.Q
    E350: 14 0D 25 11 56 01 51 14 43 AD 02 07 A5 11 56 FE  // ..%.V.Q.C.....V.
    E360: 56 00 40 20 25 00 02 03 0A 48 40 07 E5 44 55 EF  // V.@ %....H@..DU.
    E370: 43 AD 02 08 A5 00 1B 66 FF 2D 0D 42 DE 02 03 21  // C......f.-.B...!
    E380: 43 00 03 A2 40 44 03 0C 40 02 00 4C A4 40 00 00  // C...@D..@..L.@..
    E390: 49 29 02 2D 0C 42 04 00 43 14 02 2D 0D 42 06 00  // I).-.B..C..-.B..
    E3A0: 3D A4 00 00 00 44 49 02 03 24 41 00 00 3E 25 41  // =....DI..$A..>%A
    E3B0: FF 44 49 02 2D 0A 42 40 43 2E 02 03 04 40 01 00  // .DI.-.B@C....@..
    E3C0: 03 65 41 08 01 0A 01 56 40 01 05 19 56 88 88 01  // .eA....V@...V...
    E3D0: 00 01 F2 1A 56 40 01 BA 20 56 40 01 BA 30 56 40  // ....V@.. V@..0V@
    E3E0: 01 BA 40 56 40 01 BA 50 56 40 01 25 1F 56 20 01  // ..@V@..PV@.%.V .
    E3F0: 25 2F 56 20 01 25 3F 56 20 01 25 4F 56 20 01 2A  // %/V .%?V .%OV .*
    E400: 1F 56 41 01 2A 2F 56 41 01 2A 3F 56 41 01 2A 4F  // .VA.*/VA.*?VA.*O
    E410: 56 41 3D 65 00 0B 44 AD 02 5C A2 06 56 DF 41 3A  // VA=e..D..\..V.A:
    E420: 00 00 5B 7A 84 00 0C 00 FF FF FF 00 02 3F 00 00  // ..[z.........?..
    E430: 00 5F 00 08 40 9C 00 00 03 3F 00 00 00 5F 00 08  // ._..@....?..._..
    E440: FF FF FF 00 03 3F 00 00 2A 57 20 10 00 00 00 00  // .....?..*W .....
    E450: 3F 00 05 00 39 00 00 4B 00 00 80 01 3A 00 00 80  // ?...9..K....:...
    E460: 02 1B 00 00 80 03 00 00 00 80 08 34 25 00 80 09  // ...........4%...
    E470: 1C 25 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01  // .%.........?....
    E480: 38 00 9F 18 00 4A 00 9F FF 00 00 FF 03 02 01 00  // 8....J..........
    E490: 01 03 02 01 00 01 03 02 01 00 01 03 02 01 00 01  // ................
    E4A0: 03 02 01 00 01 03 02 01 00 01 4C 02 01 02 00 00  // ..........L.....
    E4B0: 37 00 00 3D 0D 00 00 00 44 CE 01 56 00 41 03 21  // 7..=....D..V.A.!
    E4C0: 41 01 09 25 41 0F 15 0D 41 02 03 0A 40 42 66 FF  // A..%A...A...@Bf.
    E4D0: 2D 0D 42 34 02 2D 0A 42 41 03 0C 48 02 00 0D A5  // -.B4.-.BA..H....
    E4E0: A6 55 01 54 08 A6 55 03 0C 48 00 00 03 F9 41 01  // .U.T..U..H....A.
    E4F0: 15 3D 41 04 5C BA 26 4C 8F 41 03 0A 42 40 4A 25  // .=A.\.&L.A..B@J%
    E500: 26 4C 01 49 81 00 0D 0D 26 4C 01 01 0D 25 26 4C  // &L.I....&L...%&L
    E510: 10 4A 25 26 4C 20 44 67 00 07 25 26 4C EF 4A 25  // .J%&L Dg..%&L.J%
    E520: 26 4C 20 49 74 00 0D 25 29 4C 40 56 00 41 03 09  // &L It..%)L@V.A..
    E530: 41 00 3B 02 41 03 3B 41 00 1B 25 41 04 01 A2 27  // A.;.A.;A..%A...'
    E540: 4C 41 03 69 41 01 15 2D 41 04 01 2A 27 4C 41 56  // LA.iA..-A..*'LAV
    E550: 00 40 0F E5 40 80 03 73 40 00 01 02 2C 4C 40 56  // .@..@..s@...,L@V
    E560: 00 40 03 6B 40 00 01 02 2C 4C 40 03 63 40 00 01  // .@.k@...,L@.c@..
    E570: 02 2C 4C 40 03 7B 40 00 09 65 40 0F 01 02 2C 4C  // .,L@.{@..e@...,L
    E580: 40 3E 25 41 04 47 10 01 33 25 41 04 2D 05 46 04  // @>%A.G..3%A.-.F.
    E590: 00 00 00 03 63 40 00 01 02 2C 4C 40 03 6B 40 00  // ....c@...,L@.k@.
    E5A0: 01 02 2C 4C 40 03 73 40 00 01 02 2C 4C 40 03 7B  // ..,L@.s@...,L@.{
    E5B0: 40 00 01 02 2C 4C 40 43 D7 00 0D 25 29 4C 02 0D  // @...,L@C...%)L..
    E5C0: 25 27 4C 01 03 29 40 01 21 25 40 0A 2D 25 40 32  // %'L..)@.!%@.-%@2
    E5D0: 4A 25 2A 4C 01 49 42 01 51 0A 33 25 40 01 3E 25  // J%*L.IB.Q.3%@.>%
    E5E0: 40 00 49 26 01 02 65 01 01 43 CA 01 4A 05 2A 4C  // @.I&..e..C..J.*L
    E5F0: F0 8F FF 00 44 54 01 02 65 01 02 43 CA 01 01 05  // ....DT..e..C....
    E600: 2C 4C 01 00 00 80 03 00 40 2C 4C 02 6A 01 40 02  // ,L......@,L.j.@.
    E610: B8 01 2A 4C 08 A5 01 1F 3D A5 01 00 46 7C 01 02  // ..*L....=...F|..
    E620: 65 01 03 43 CA 01 32 A5 01 01 3D 8D 00 00 00 44  // e..C..2...=....D
    E630: CA 01 3D A5 01 00 44 CA 01 03 31 41 01 03 19 40  // ..=...D...1A...@
    E640: 00 56 18 40 3B 02 40 03 28 40 2C 4C 03 68 40 2C  // .V.@;.@.(@,L.h@,
    E650: 4C 03 A8 40 2C 4C 03 E8 40 2C 4C 04 02 00 40 3E  // L..@,L..@,L...@>
    E660: 25 41 04 47 CA 01 33 25 41 04 2D 05 46 04 00 00  // %A.G..3%A.-.F...
    E670: 00 43 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34 02 03  // .C..:..[f.-.B4..
    E680: 0C 48 00 00 01 8D 2E 4C 0D 00 01 05 2F 4C 00 1C  // .H.....L..../L..
    E690: 02 00 01 05 30 4C 10 11 3D 12 2D 0D 42 04 00 2C  // ....0L..=.-.B..,
    E6A0: 25 00 01 3D 25 00 06 49 D5 01 56 08 48 03 25 41  // %..=%..I..V.H.%A
    E6B0: 10 0D 65 D5 55 40 07 65 D5 55 BF 33 25 41 01 3E  // ..e.U@.e.U.3%A.>
    E6C0: 25 41 00 49 07 02 0D 25 79 55 01 54 30 79 55 0D  // %A.I...%yU.T0yU.
    E6D0: 25 7A 55 01 54 30 7A 55 51 32 5B 7A 18 00 00 00  // %zU.T0zUQ2[z....
    E6E0: 00 00 1C 00 04 00 38 00 08 00 54 00 0C 00 70 00  // ......8...T...p.
    E6F0: 10 00 8C 00 14 00 5C 00 01 02 00 04 02 25 01 04  // ......\......%..
    E700: 03 31 41 00 09 0D 41 0F 00 15 0D 41 01 66 FF 2D  // .1A...A....A.f.-
    E710: 0D 42 50 00 2D 0A 42 41 03 0C 48 00 00 07 A5 A6  // .BP.-.BA..H.....
    E720: 55 FE 01 0D A6 55 11 11 50 02 4A 0D A9 55 01 00  // U....U..P.J..U..
    E730: 49 41 00 02 25 01 13 54 08 A6 55 54 00 A8 55 3A  // IA..%..T..UT..U:
    E740: 00 00 5B 7A 0C 00 00 00 04 00 08 00 0C 00 10 00  // ..[z............
    E750: 14 00 78 00 01 01 00 04 37 00 00 55 00 01 52 3E  // ..x.....7..U..R>
    E760: 02 E4 01 1B 00 66 1C 2D 0C 42 04 00 52 12 4B E5  // .....f.-.B..R.K.
    E770: 00 02 44 34 00 01 05 00 00 4F 5C 01 00 0D 0D 01  // ..D4.....O\.....
    E780: 00 02 04 43 42 00 01 05 00 00 4F 5C 01 00 07 0D  // ...CB.....O\....
    E790: 01 00 FD FB 52 07 02 05 01 80 38 01 03 55 00 02  // ....R.....8..U..
    E7A0: 52 3F 02 05 01 70 11 01 03 02 25 02 01 52 3F 02  // R?...p....%..R?.
    E7B0: 05 01 50 C3 00 03 02 25 02 02 52 3F 02 05 01 3C  // ..P....%..R?...<
    E7C0: 41 00 03 02 25 02 03 52 3F 5B D6 01 01 01 0C 04  // A...%..R?[......
    E7D0: 37 00 00 01 05 00 00 91 2D 01 00 03 00 02 01 00  // 7.......-.......
    E7E0: 56 20 00 03 22 43 00 03 02 40 44 03 A2 40 00 01  // V .."C...@D..@..
    E7F0: 05 00 00 91 2D 01 00 0F E5 40 80 01 02 01 00 40  // ....-....@.....@
    E800: 01 05 00 00 91 2D 01 00 03 00 41 01 00 42 21 00  // .....-....A..B!.
    E810: 63 08 53 00 63 0A 68 00 5A 5A 43 14 01 15 35 40  // c.S.c.h.ZZC...5@
    E820: 06 01 05 00 00 52 5C 01 00 5C F2 01 00 3F 40 43  // .....R\..\...?@C
    E830: 09 01 66 FF 2D 0D 42 32 01 03 05 01 40 01 00 00  // ..f.-.B2....@...
    E840: 03 04 41 00 00 3E 05 41 00 00 00 00 44 09 01 02  // ..A..>.A....D...
    E850: 04 01 04 00 55 30 01 56 00 40 03 22 40 00 21 05  // ....U0.V.@."@.!.
    E860: 40 40 01 00 00 2C 0A 01 40 52 45 03 24 43 07 00  // @@...,..@RE.$C..
    E870: 03 02 41 44 33 05 41 01 00 00 00 68 02 01 41 01  // ..AD3.A....h..A.
    E880: 05 00 00 88 5C 01 00 01 02 01 00 01 01 05 00 00  // ....\...........
    E890: 89 5C 01 00 01 01 01 00 01 2D 05 01 01 00 00 00  // .\.......-......
    E8A0: 0E E5 01 80 01 04 00 00 00 00 03 04 40 04 00 4C  // ............@..L
    E8B0: A5 40 01 44 FC 00 03 21 40 01 1A 25 01 04 15 25  // .@.D...!@..%...%
    E8C0: 40 04 0E 22 01 40 01 01 01 00 01 2D 0D 42 08 00  // @..".@.....-.B..
    E8D0: 43 76 00 2D 25 00 01 3E 25 00 04 45 19 00 01 05  // Cv.-%..>%..E....
    E8E0: 00 00 91 2D 01 00 01 02 01 00 02 01 05 00 00 91  // ...-............
    E8F0: 2D 01 00 03 00 41 01 00 5B 7A A4 00 00 43 01 00  // -....A..[z...C..
    E900: 60 1F 00 10 01 43 01 00 71 1F 00 10 02 43 01 00  // `....C..q....C..
    E910: 82 1F 00 10 03 43 01 00 93 1F 00 10 04 43 01 00  // .....C.......C..
    E920: A4 1F 01 08 00 4B 01 00 AD 1F 00 10 01 4B 01 00  // .....K.......K..
    E930: BE 1F 00 10 02 4B 01 00 CF 1F 00 10 03 4B 01 00  // .....K.......K..
    E940: E0 1F 00 10 04 4B 01 00 F1 1F 01 08 00 53 01 00  // .....K.......S..
    E950: FA 1F 00 10 01 53 01 00 0B 20 00 10 02 53 01 00  // .....S... ...S..
    E960: 1C 20 00 10 03 53 01 00 2D 20 00 10 04 53 01 00  // . ...S..- ...S..
    E970: 3E 20 01 08 00 5B 01 00 47 20 00 10 01 5B 01 00  // > ...[..G ...[..
    E980: 58 20 00 10 02 5B 01 00 69 20 00 10 03 5B 01 00  // X ...[..i ...[..
    E990: 7A 20 00 10 04 5B 01 00 8B 20 01 08 00 00 00 00  // z ...[... ......
    E9A0: DB 00 01 01 08 00 37 00 00 66 FF 2D 0D 42 C7 00  // ......7..f.-.B..
    E9B0: 56 00 41 03 21 41 00 15 0D 41 02 2D 0A 42 41 03  // V.A.!A...A.-.BA.
    E9C0: 04 01 00 00 66 FF 2D 0D 42 D3 00 03 05 00 00 00  // ....f.-.B.......
    E9D0: 00 40 56 00 40 03 4C 00 00 00 01 02 00 C2 00 56  // .@V.@.L........V
    E9E0: 00 46 03 0A 46 01 01 02 00 00 46 03 98 41 01 00  // .F..F.....F..A..
    E9F0: 56 08 41 03 22 43 41 4C 8A 41 44 49 62 00 2D 65  // V.A."CAL.ADIb.-e
    EA00: 41 01 2D 25 41 01 3E 39 41 00 45 53 00 3E 71 41  // A.-%A.>9A.ES.>qA
    EA10: 00 47 AB 00 33 71 41 00 03 39 41 00 33 25 41 01  // .G..3qA..9A.3%A.
    EA20: 03 22 43 41 4C 8A 41 44 49 7C 00 0F 8A 41 44 33  // ."CAL.ADI|...AD3
    EA30: 65 41 01 3E 65 41 00 49 7C 00 56 00 46 03 1A 46  // eA.>eA.I|.V.F..F
    EA40: 01 01 02 00 00 46 01 9A 01 00 41 2D 0D 42 02 00  // .....F....A-.B..
    EA50: 2D 25 40 01 3E 25 40 04 49 35 00 01 05 00 C2 00  // -%@.>%@.I5......
    EA60: 00 00 E0 5B 7A 14 00 6F 22 70 22 3D 26 DF 26 40  // ...[z..o"p"=&.&@
    EA70: 22 41 22 00 00 00 01 00 02 00 03 00 C9 01 02 01  // "A".............
    EA80: 04 04 37 00 00 42 21 00 63 07 29 00 63 03 66 00  // ..7..B!.c.).c.f.
    EA90: 63 02 CD 00 63 04 F2 00 63 0C 7D 01 63 0D A0 01  // c...c...c.}.c...
    EAA0: 5A 5A 43 C8 01 01 0D 5B 55 9F 0F 01 05 5C 55 00  // ZZC....[U....\U.
    EAB0: 00 00 00 01 05 5D 55 7D 00 00 00 66 06 01 4C 5D  // .....]U}...f..L]
    EAC0: 55 31 00 03 24 46 3B 00 3E 25 46 00 44 58 00 01  // U1..$F;.>%F.DX..
    EAD0: 25 5D 55 00 4A 25 59 55 10 49 C8 01 0D E5 59 55  // %]U.J%YU.I....YU
    EAE0: 02 5B 4A 25 59 55 01 44 C8 01 4A 25 5A 55 10 44  // .[J%YU.D..J%ZU.D
    EAF0: 6E 00 4A E5 59 55 02 49 89 00 4A 25 5A 55 08 49  // n.J.YU.I..J%ZU.I
    EB00: C8 01 43 BD 00 4A E5 59 55 01 49 C8 01 4A 25 59  // ..C..J.YU.I..J%Y
    EB10: 55 10 44 BD 00 0D A5 59 55 03 0D 65 59 55 03 01  // U.D....YU..eYU..
    EB20: 0D 5B 55 00 00 5C 25 59 55 EF 01 4A 25 5A 55 10  // .[U..\%YU..J%ZU.
    EB30: 44 AF 00 01 0D 5B 55 9F 0F 07 E5 59 55 FC 0D E5  // D....[U....YU...
    EB40: 5D 55 01 0D 25 59 55 11 5B 66 06 03 24 46 3B 00  // ]U..%YU.[f..$F;.
    EB50: 3E 25 46 00 49 C8 01 4A 25 59 55 01 44 C8 01 4A  // >%F.I..J%YU.D..J
    EB60: 25 5A 55 10 44 E3 00 5C E5 59 55 FE 02 5B 4A 65  // %ZU.D..\.YU..[Je
    EB70: 53 00 02 44 FF 00 0D 25 61 55 01 3D 8D 00 00 00  // S..D...%aU.=....
    EB80: 44 7C 01 03 05 46 60 FE CD 00 56 00 41 03 19 41  // D|...F`...V.A..A
    EB90: 00 21 05 41 FF 0F 00 00 27 02 46 40 3E 05 41 00  // .!.A....'.F@>.A.
    EBA0: 00 00 00 44 2F 01 2D 0D 40 01 00 01 8A 5B 55 40  // ...D/.-.@....[U@
    EBB0: 56 00 41 03 19 41 00 21 02 40 41 27 02 46 40 01  // V.A..A.!.@A'.F@.
    EBC0: A5 60 55 0C 01 0A 60 55 40 15 05 40 04 56 00 41  // .`U...`U@..@.V.A
    EBD0: 03 29 41 00 2D 0D 41 01 00 21 02 40 41 1B 05 40  // .)A.-.A..!.@A..@
    EBE0: 08 01 0A 5E 55 40 0D E5 5E 55 C0 07 25 61 55 FE  // ...^U@..^U..%aU.
    EBF0: 4A 65 61 55 01 49 74 01 5B 4A 25 59 55 01 44 95  // JeaU.It.[J%YU.D.
    EC00: 01 4A 25 59 55 10 49 C8 01 4A 25 5A 55 10 44 8D  // .J%YU.I..J%ZU.D.
    EC10: 01 07 E5 5D 55 FE 0D 25 59 55 11 5B 4A 25 59 55  // ...]U..%YU.[J%YU
    EC20: 01 44 C8 01 4A 25 59 55 10 44 C8 01 4A 25 5A 55  // .D..J%YU.D..J%ZU
    EC30: 10 44 B0 01 07 A5 59 55 FC 07 65 59 55 FC 5C 25  // .D....YU..eYU.\%
    EC40: 59 55 EF 01 5B 00 83 00 03 01 08 00 37 00 00 56  // YU..[.......7..V
    EC50: 00 01 3D E5 00 20 48 1B 00 03 39 43 00 03 02 01  // ..=.. H...9C....
    EC60: 44 56 00 00 03 09 00 00 1B 05 00 05 2D 05 00 00  // DV..........-...
    EC70: 74 01 00 01 02 00 00 00 03 00 40 01 00 56 00 41  // t.........@..V.A
    EC80: 03 21 41 00 09 25 41 1F 75 02 40 41 03 65 41 20  // .!A..%A.u.@A.eA 
    EC90: 33 62 41 41 3D EA 00 41 47 73 00 2D 0D 00 01 00  // 3bAA=..AGs.-....
    ECA0: 01 02 00 00 00 02 00 00 01 00 03 2A 41 41 56 28  // ...........*AAV(
    ECB0: 41 6E 02 00 41 0F 01 40 00 02 02 00 40 33 05 01  // An..A..@....@3..
    ECC0: 01 00 00 00 08 02 00 01 5B 00 AE 00 03 01 00 10  // ........[.......
    ECD0: 37 00 00 56 00 40 4A 25 00 EC 01 44 30 00 4A 25  // 7..V.@J%...D0.J%
    ECE0: 05 EC 1E 49 30 00 03 25 40 01 01 05 05 EC 03 00  // ...I0..%@.......
    ECF0: 00 00 4A 65 05 EC 0F 49 28 00 3D 65 02 00 49 3B  // ..Je...I(.=e..I;
    ED00: 00 2C 25 02 F4 3D E5 02 00 49 46 00 2C A5 02 F4  // .,%..=...IF.,...
    ED10: 3D 65 02 02 49 61 00 01 05 00 00 28 68 01 00 01  // =e..Ia.....(h...
    ED20: 01 01 00 00 02 05 00 A4 A0 05 00 54 00 63 C0 01  // ...........T.c..
    ED30: 01 64 C0 00 01 21 65 C0 02 01 01 66 C0 01 01 31  // .d...!e....f...1
    ED40: 67 C0 02 01 01 E8 C0 03 3D 65 02 01 44 8E 00 3D  // g.......=e..D..=
    ED50: E5 02 01 44 8E 00 51 02 4A E5 A0 21 80 49 8E 00  // ...D..Q.J..!.I..
    ED60: 3E 25 40 01 49 AD 00 01 05 05 EC 01 00 00 00 4A  // >%@.I..........J
    ED70: 65 05 EC 0F 49 A5 00 5B FD 02 02 01 00 00 37 00  // e...I..[......7.
    ED80: 00 3D 25 01 01 44 7F 00 3D 25 01 02 44 6C 01 3D  // .=%..D..=%..Dl.=
    ED90: 25 01 00 49 CE 02 3D 05 00 00 00 00 00 49 39 00  // %..I..=......I9.
    EDA0: 3A 00 00 0D 25 90 4A 01 4A 65 90 4A 01 44 30 00  // :...%.J.Je.J.D0.
    EDB0: 5B 54 20 90 4A 02 E5 00 03 52 3C 03 00 40 24 01  // [T .J....R<..@$.
    EDC0: 3E 39 40 00 44 7B 00 4A A5 24 01 08 44 4F 00 03  // >9@.D{.J.$..DO..
    EDD0: 39 40 00 3E E5 40 00 49 66 00 03 E5 40 20 01 02  // 9@.>.@.If...@ ..
    EDE0: 24 01 40 4A A5 24 01 08 44 6B 00 4A A5 24 01 10  // $.@J.$..Dk.J.$..
    EDF0: 44 73 00 55 38 00 5B 3D 65 01 02 44 DB 00 02 05  // Ds.U8.[=e..D....
    EE00: 00 08 E8 00 00 52 3C 3C F9 24 01 00 44 C5 00 07  // .....R<<.$..D...
    EE10: 25 15 01 FE 4A A5 24 01 10 44 9C 00 03 00 40 24  // %...J.$..D....@$
    EE20: 01 03 F9 40 00 3E 25 40 00 49 B8 00 03 25 40 68  // ...@.>%@.I...%@h
    EE30: 01 02 24 01 40 4A A5 24 01 10 44 BD 00 5D 05 00  // ..$.@J.$..D..]..
    EE40: 00 00 00 FF 00 00 00 00 52 29 07 0D 18 01 F8 FE  // ........R)......
    EE50: 43 3E 01 02 05 00 40 7F 95 23 07 25 15 01 FE 4A  // C>....@..#.%...J
    EE60: A5 F9 34 03 44 3E 01 56 08 40 03 31 40 01 15 0D  // ..4.D>.V.@.1@...
    EE70: 40 0E 0F 0D 40 0F 04 01 0A 10 35 40 5C B1 11 35  // @...@.....5@\..5
    EE80: FC 01 51 05 07 A5 F9 34 FC 01 25 FD 34 40 01 05  // ..Q....4..%.4@..
    EE90: FA 34 00 00 DD 00 01 65 14 35 01 54 08 FC 34 01  // .4.....e.5.T..4.
    EEA0: A5 FD 34 E8 0D A5 11 35 10 4A 65 1C 35 02 44 31  // ..4....5.Je.5.D1
    EEB0: 01 0D 65 11 35 03 01 01 42 01 00 01 01 46 01 00  // ..e.5...B....F..
    EEC0: 01 01 4A 01 00 01 01 4E 01 00 01 01 52 01 00 01  // ..J....N....R...
    EED0: 01 56 01 00 3D 65 01 02 49 6B 01 5C 0D 18 01 F8  // .V..=e..Ik.\....
    EEE0: FF 01 01 5B 56 00 41 03 31 41 01 09 25 41 03 15  // ...[V.A.1A..%A..
    EEF0: 25 41 02 66 FF 2D 0D 42 D5 02 2D 0A 42 41 26 05  // %A.f.-.B..-.BA&.
    EF00: 00 0A 00 00 00 03 04 41 00 00 27 02 41 40 3E 05  // .......A..'.A@>.
    EF10: 40 00 00 01 00 45 A5 01 03 0D 40 FF FF 66 FF 2D  // @....E....@..f.-
    EF20: 0D 42 E5 02 56 00 41 03 39 41 01 15 25 41 02 2D  // .B..V.A.9A..%A.-
    EF30: 0A 42 41 03 0C 48 00 00 01 0A 3A 3B 40 3A 00 00  // .BA..H....:;@:..
    EF40: 3D 65 01 0B 49 30 02 20 05 00 64 00 00 00 03 0C  // =e..I0. ..d.....
    EF50: 48 02 00 03 00 41 40 01 0F 25 41 10 09 0D 41 DF  // H....A@..%A...A.
    EF60: F7 4B A5 01 04 44 F4 01 0F 65 41 08 03 0C 48 00  // .K...D...eA...H.
    EF70: 00 4A 05 AF 3B 01 00 00 00 44 19 02 03 0C 48 02  // .J..;....D....H.
    EF80: 00 3C 02 41 01 40 49 19 02 3C 02 40 01 41 44 CE  // .<.A.@I..<.@.AD.
    EF90: 02 03 0C 48 02 00 07 25 40 01 EF 01 02 41 01 40  // ...H...%@....A.@
    EFA0: 01 0A 40 01 41 43 CE 02 56 00 40 03 8D 40 0C 00  // ..@.AC..V.@..@..
    EFB0: 3D 65 01 18 44 53 02 03 8D 40 3E 00 3D 65 01 19  // =e..DS...@>.=e..
    EFC0: 44 53 02 03 A9 40 01 33 A5 40 14 03 31 40 01 09  // DS...@.3.@..1@..
    EFD0: 25 40 03 15 25 40 04 0F 0D 40 01 01 4B A5 01 04  // %@..%@...@..K...
    EFE0: 44 70 02 0F 0D 40 00 02 56 00 41 03 29 41 01 33  // Dp...@..V.A.)A.3
    EFF0: 25 41 14 03 0C 48 00 00 4A 05 AF 3B 01 00 00 00  // %A...H..J..;....
    F000: 44 AC 02 03 0C 48 02 00 4A 25 40 01 10 49 AC 02  // D....H..J%@..I..
    F010: 3C 22 43 01 41 49 AC 02 03 1A 48 40 3C 0A 00 01  // <"C.AI....H@<...
    F020: 40 44 CE 02 03 1A 48 40 07 25 00 01 FE 03 0C 48  // @D....H@.%.....H
    F030: 02 00 01 22 43 01 41 07 0D 40 01 EF F7 03 1A 48  // ..."C.A..@.....H
    F040: 40 01 0A 00 01 40 3A 00 00 5B 7A 28 00 00 CA 9A  // @....@:..[z(....
    F050: 3B 80 7C 81 4A 00 2F 68 59 00 94 35 77 00 00 00  // ;.|.J./hY..5w...
    F060: 00 00 02 04 00 00 04 08 00 00 06 0C 00 00 08 10  // ................
    F070: 00 00 0A 14 00 FF FF FF FF FF FF FF FF FF FF FF  // ................
    F080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F090: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F0A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F0B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F0C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F0D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F0E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F0F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F160: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F170: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F180: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F190: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F1A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F1B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F1C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F1D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F1E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F1F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F230: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F240: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F250: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F260: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    F270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F280: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


