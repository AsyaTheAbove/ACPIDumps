
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00003002  0x02  "INTEL "  "PtidDevc"  0x00001000  "INTL"   0x20160422
 02)  APIC  0x0000071E  0x03  "ALASKA"  "A M I   "  0x00000000  "INTL"   0x20091013
 03)  PCCT  0x0000006E  0x01  "ALASKA"  "A M I   "  0x00000002  "INTL"   0x20091013
 04)  SSDT  0x00000919  0x02  "ALASKA"  "A M I   "  0x00000000  "INTL"   0x20091013
 05)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00000097
 06)  SLIT  0x0000006C  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 07)  OEM1  0x0000ABCB  0x02  "INTEL "  "CPU EIST"  0x00003000  "INTL"   0x20160422
 08)  RASF  0x00000030  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 09)  NITR  0x00000071  0x02  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 10)  SVOS  0x00000032  0x01  "ALASKA"  "A M I   "  0x00000000  "INTL"   0x20091013
 11)  MSCT  0x0000004E  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 12)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x00000002  "    "   0x01000013
 13)  DSDT  0x0001BE41  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20160422
 14)  SRAT  0x00000A30  0x03  "ALASKA"  "A M I   "  0x00000002  "INTL"   0x20091013
 15)  WDDT  0x00000040  0x01  "ALASKA"  "A M I   "  0x00000000  "INTL"   0x20091013
 16)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  LPIT  0x00000094  0x01  "INTEL "  "SKL     "  0x00000000  "MSFT"   0x0000005F
 18)  MIGT  0x00000040  0x01  "ALASKA"  "A M I   "  0x00000000  "INTL"   0x20091013
 19)  DBG2  0x00000054  0x00  "INTEL "  "        "  0x00000002  "MSFT"   0x0000005F
 20)  WDAT  0x00000134  0x01  "INTEL "  "SKL     "  0x00000000  "MSFT"   0x0000005F
 21)  SSDT  0x0000029F  0x02  "INTEL "  "sensrhub"  0x00000000  "INTL"   0x20160422
 22)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 23)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 24)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 25)  SSDT  0x0000D427  0x02  "INTEL "  "SSDT  PM"  0x00004000  "INTL"   0x20160422
 26)  DBGP  0x00000034  0x01  "INTEL "  "        "  0x00000002  "MSFT"   0x0000005F
 27)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 28)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 29)  FACS  0x00000040  0x02
 30)  BGRT  0x00000038  0x00  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 31)  WSMT  0x00000028  0x01  "INTEL "  "SKL     "  0x00000000  "MSFT"   0x0000005F

Found 31 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000071E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 10
[057h 0087   1]                Local Apic ID : 10
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 12
[05Fh 0095   1]                Local Apic ID : 12
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 14
[067h 0103   1]                Local Apic ID : 14
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 16
[06Fh 0111   1]                Local Apic ID : 16
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 18
[077h 0119   1]                Local Apic ID : 18
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 01
[07Fh 0127   1]                Local Apic ID : 01
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 03
[087h 0135   1]                Local Apic ID : 03
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 05
[08Fh 0143   1]                Local Apic ID : 05
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 07
[097h 0151   1]                Local Apic ID : 07
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 09
[09Fh 0159   1]                Local Apic ID : 09
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 11
[0A7h 0167   1]                Local Apic ID : 11
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 13
[0AFh 0175   1]                Local Apic ID : 13
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 15
[0B7h 0183   1]                Local Apic ID : 15
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 17
[0BFh 0191   1]                Local Apic ID : 17
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 19
[0C7h 0199   1]                Local Apic ID : 19
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : FF
[0CFh 0207   1]                Local Apic ID : FF
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : FF
[0D7h 0215   1]                Local Apic ID : FF
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : FF
[0DFh 0223   1]                Local Apic ID : FF
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : FF
[0E7h 0231   1]                Local Apic ID : FF
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : FF
[0EFh 0239   1]                Local Apic ID : FF
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : FF
[0F7h 0247   1]                Local Apic ID : FF
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : FF
[0FFh 0255   1]                Local Apic ID : FF
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : FF
[107h 0263   1]                Local Apic ID : FF
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : FF
[10Fh 0271   1]                Local Apic ID : FF
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : FF
[117h 0279   1]                Local Apic ID : FF
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : FF
[11Fh 0287   1]                Local Apic ID : FF
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : FF
[127h 0295   1]                Local Apic ID : FF
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 00 [Processor Local APIC]
[12Dh 0301   1]                       Length : 08
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   1]                Local Apic ID : FF
[130h 0304   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[134h 0308   1]                Subtable Type : 00 [Processor Local APIC]
[135h 0309   1]                       Length : 08
[136h 0310   1]                 Processor ID : FF
[137h 0311   1]                Local Apic ID : FF
[138h 0312   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[13Ch 0316   1]                Subtable Type : 00 [Processor Local APIC]
[13Dh 0317   1]                       Length : 08
[13Eh 0318   1]                 Processor ID : FF
[13Fh 0319   1]                Local Apic ID : FF
[140h 0320   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[144h 0324   1]                Subtable Type : 00 [Processor Local APIC]
[145h 0325   1]                       Length : 08
[146h 0326   1]                 Processor ID : FF
[147h 0327   1]                Local Apic ID : FF
[148h 0328   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[14Ch 0332   1]                Subtable Type : 00 [Processor Local APIC]
[14Dh 0333   1]                       Length : 08
[14Eh 0334   1]                 Processor ID : FF
[14Fh 0335   1]                Local Apic ID : FF
[150h 0336   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[154h 0340   1]                Subtable Type : 00 [Processor Local APIC]
[155h 0341   1]                       Length : 08
[156h 0342   1]                 Processor ID : FF
[157h 0343   1]                Local Apic ID : FF
[158h 0344   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[15Ch 0348   1]                Subtable Type : 00 [Processor Local APIC]
[15Dh 0349   1]                       Length : 08
[15Eh 0350   1]                 Processor ID : FF
[15Fh 0351   1]                Local Apic ID : FF
[160h 0352   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[164h 0356   1]                Subtable Type : 00 [Processor Local APIC]
[165h 0357   1]                       Length : 08
[166h 0358   1]                 Processor ID : FF
[167h 0359   1]                Local Apic ID : FF
[168h 0360   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[16Ch 0364   1]                Subtable Type : 00 [Processor Local APIC]
[16Dh 0365   1]                       Length : 08
[16Eh 0366   1]                 Processor ID : FF
[16Fh 0367   1]                Local Apic ID : FF
[170h 0368   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[174h 0372   1]                Subtable Type : 00 [Processor Local APIC]
[175h 0373   1]                       Length : 08
[176h 0374   1]                 Processor ID : FF
[177h 0375   1]                Local Apic ID : FF
[178h 0376   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[17Ch 0380   1]                Subtable Type : 00 [Processor Local APIC]
[17Dh 0381   1]                       Length : 08
[17Eh 0382   1]                 Processor ID : FF
[17Fh 0383   1]                Local Apic ID : FF
[180h 0384   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[184h 0388   1]                Subtable Type : 00 [Processor Local APIC]
[185h 0389   1]                       Length : 08
[186h 0390   1]                 Processor ID : FF
[187h 0391   1]                Local Apic ID : FF
[188h 0392   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[18Ch 0396   1]                Subtable Type : 00 [Processor Local APIC]
[18Dh 0397   1]                       Length : 08
[18Eh 0398   1]                 Processor ID : FF
[18Fh 0399   1]                Local Apic ID : FF
[190h 0400   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[194h 0404   1]                Subtable Type : 00 [Processor Local APIC]
[195h 0405   1]                       Length : 08
[196h 0406   1]                 Processor ID : FF
[197h 0407   1]                Local Apic ID : FF
[198h 0408   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[19Ch 0412   1]                Subtable Type : 00 [Processor Local APIC]
[19Dh 0413   1]                       Length : 08
[19Eh 0414   1]                 Processor ID : FF
[19Fh 0415   1]                Local Apic ID : FF
[1A0h 0416   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1A4h 0420   1]                Subtable Type : 00 [Processor Local APIC]
[1A5h 0421   1]                       Length : 08
[1A6h 0422   1]                 Processor ID : FF
[1A7h 0423   1]                Local Apic ID : FF
[1A8h 0424   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1ACh 0428   1]                Subtable Type : 00 [Processor Local APIC]
[1ADh 0429   1]                       Length : 08
[1AEh 0430   1]                 Processor ID : FF
[1AFh 0431   1]                Local Apic ID : FF
[1B0h 0432   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1B4h 0436   1]                Subtable Type : 00 [Processor Local APIC]
[1B5h 0437   1]                       Length : 08
[1B6h 0438   1]                 Processor ID : FF
[1B7h 0439   1]                Local Apic ID : FF
[1B8h 0440   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1BCh 0444   1]                Subtable Type : 00 [Processor Local APIC]
[1BDh 0445   1]                       Length : 08
[1BEh 0446   1]                 Processor ID : FF
[1BFh 0447   1]                Local Apic ID : FF
[1C0h 0448   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1C4h 0452   1]                Subtable Type : 00 [Processor Local APIC]
[1C5h 0453   1]                       Length : 08
[1C6h 0454   1]                 Processor ID : FF
[1C7h 0455   1]                Local Apic ID : FF
[1C8h 0456   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1CCh 0460   1]                Subtable Type : 00 [Processor Local APIC]
[1CDh 0461   1]                       Length : 08
[1CEh 0462   1]                 Processor ID : FF
[1CFh 0463   1]                Local Apic ID : FF
[1D0h 0464   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1D4h 0468   1]                Subtable Type : 00 [Processor Local APIC]
[1D5h 0469   1]                       Length : 08
[1D6h 0470   1]                 Processor ID : FF
[1D7h 0471   1]                Local Apic ID : FF
[1D8h 0472   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1DCh 0476   1]                Subtable Type : 00 [Processor Local APIC]
[1DDh 0477   1]                       Length : 08
[1DEh 0478   1]                 Processor ID : FF
[1DFh 0479   1]                Local Apic ID : FF
[1E0h 0480   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1E4h 0484   1]                Subtable Type : 00 [Processor Local APIC]
[1E5h 0485   1]                       Length : 08
[1E6h 0486   1]                 Processor ID : FF
[1E7h 0487   1]                Local Apic ID : FF
[1E8h 0488   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1ECh 0492   1]                Subtable Type : 01 [I/O APIC]
[1EDh 0493   1]                       Length : 0C
[1EEh 0494   1]                  I/O Apic ID : 08
[1EFh 0495   1]                     Reserved : 00
[1F0h 0496   4]                      Address : FEC00000
[1F4h 0500   4]                    Interrupt : 00000000

[1F8h 0504   1]                Subtable Type : 01 [I/O APIC]
[1F9h 0505   1]                       Length : 0C
[1FAh 0506   1]                  I/O Apic ID : 09
[1FBh 0507   1]                     Reserved : 00
[1FCh 0508   4]                      Address : FEC01000
[200h 0512   4]                    Interrupt : 00000018

[204h 0516   1]                Subtable Type : 01 [I/O APIC]
[205h 0517   1]                       Length : 0C
[206h 0518   1]                  I/O Apic ID : 0A
[207h 0519   1]                     Reserved : 00
[208h 0520   4]                      Address : FEC08000
[20Ch 0524   4]                    Interrupt : 00000020

[210h 0528   1]                Subtable Type : 01 [I/O APIC]
[211h 0529   1]                       Length : 0C
[212h 0530   1]                  I/O Apic ID : 0B
[213h 0531   1]                     Reserved : 00
[214h 0532   4]                      Address : FEC10000
[218h 0536   4]                    Interrupt : 00000028

[21Ch 0540   1]                Subtable Type : 01 [I/O APIC]
[21Dh 0541   1]                       Length : 0C
[21Eh 0542   1]                  I/O Apic ID : 0C
[21Fh 0543   1]                     Reserved : 00
[220h 0544   4]                      Address : FEC18000
[224h 0548   4]                    Interrupt : 00000030

[228h 0552   1]                Subtable Type : 7F [Unknown Subtable Type]
[229h 0553   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[234h 0564   1]                Subtable Type : 7F [Unknown Subtable Type]
[235h 0565   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[240h 0576   1]                Subtable Type : 7F [Unknown Subtable Type]
[241h 0577   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[24Ch 0588   1]                Subtable Type : 7F [Unknown Subtable Type]
[24Dh 0589   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[258h 0600   1]                Subtable Type : 7F [Unknown Subtable Type]
[259h 0601   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[264h 0612   1]                Subtable Type : 7F [Unknown Subtable Type]
[265h 0613   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[270h 0624   1]                Subtable Type : 7F [Unknown Subtable Type]
[271h 0625   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[27Ch 0636   1]                Subtable Type : 7F [Unknown Subtable Type]
[27Dh 0637   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[288h 0648   1]                Subtable Type : 7F [Unknown Subtable Type]
[289h 0649   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[294h 0660   1]                Subtable Type : 7F [Unknown Subtable Type]
[295h 0661   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2A0h 0672   1]                Subtable Type : 7F [Unknown Subtable Type]
[2A1h 0673   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2ACh 0684   1]                Subtable Type : 7F [Unknown Subtable Type]
[2ADh 0685   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2B8h 0696   1]                Subtable Type : 7F [Unknown Subtable Type]
[2B9h 0697   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2C4h 0708   1]                Subtable Type : 7F [Unknown Subtable Type]
[2C5h 0709   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2D0h 0720   1]                Subtable Type : 7F [Unknown Subtable Type]
[2D1h 0721   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2DCh 0732   1]                Subtable Type : 7F [Unknown Subtable Type]
[2DDh 0733   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2E8h 0744   1]                Subtable Type : 7F [Unknown Subtable Type]
[2E9h 0745   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[2F4h 0756   1]                Subtable Type : 7F [Unknown Subtable Type]
[2F5h 0757   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[300h 0768   1]                Subtable Type : 7F [Unknown Subtable Type]
[301h 0769   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[30Ch 0780   1]                Subtable Type : 7F [Unknown Subtable Type]
[30Dh 0781   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[318h 0792   1]                Subtable Type : 7F [Unknown Subtable Type]
[319h 0793   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[324h 0804   1]                Subtable Type : 7F [Unknown Subtable Type]
[325h 0805   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[330h 0816   1]                Subtable Type : 7F [Unknown Subtable Type]
[331h 0817   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[33Ch 0828   1]                Subtable Type : 7F [Unknown Subtable Type]
[33Dh 0829   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[348h 0840   1]                Subtable Type : 7F [Unknown Subtable Type]
[349h 0841   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[354h 0852   1]                Subtable Type : 7F [Unknown Subtable Type]
[355h 0853   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[360h 0864   1]                Subtable Type : 7F [Unknown Subtable Type]
[361h 0865   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[36Ch 0876   1]                Subtable Type : 7F [Unknown Subtable Type]
[36Dh 0877   1]                       Length : 0C

**** Unknown MADT subtable type 0x7F


[378h 0888   1]                Subtable Type : 02 [Interrupt Source Override]
[379h 0889   1]                       Length : 0A
[37Ah 0890   1]                          Bus : 00
[37Bh 0891   1]                       Source : 00
[37Ch 0892   4]                    Interrupt : 00000002
[380h 0896   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[382h 0898   1]                Subtable Type : 02 [Interrupt Source Override]
[383h 0899   1]                       Length : 0A
[384h 0900   1]                          Bus : 00
[385h 0901   1]                       Source : 09
[386h 0902   4]                    Interrupt : 00000009
[38Ah 0906   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[38Ch 0908   1]                Subtable Type : 04 [Local APIC NMI]
[38Dh 0909   1]                       Length : 06
[38Eh 0910   1]                 Processor ID : FF
[38Fh 0911   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[391h 0913   1]         Interrupt Input LINT : 01

[392h 0914   1]                Subtable Type : 09 [Processor Local x2APIC]
[393h 0915   1]                       Length : 10
[394h 0916   2]                     Reserved : 0000
[396h 0918   4]          Processor x2Apic ID : FFFFFFFF
[39Ah 0922   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[39Eh 0926   4]                Processor UID : 00000000

[3A2h 0930   1]                Subtable Type : 09 [Processor Local x2APIC]
[3A3h 0931   1]                       Length : 10
[3A4h 0932   2]                     Reserved : 0000
[3A6h 0934   4]          Processor x2Apic ID : FFFFFFFF
[3AAh 0938   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[3AEh 0942   4]                Processor UID : 00000001

[3B2h 0946   1]                Subtable Type : 09 [Processor Local x2APIC]
[3B3h 0947   1]                       Length : 10
[3B4h 0948   2]                     Reserved : 0000
[3B6h 0950   4]          Processor x2Apic ID : FFFFFFFF
[3BAh 0954   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[3BEh 0958   4]                Processor UID : 00000002

[3C2h 0962   1]                Subtable Type : 09 [Processor Local x2APIC]
[3C3h 0963   1]                       Length : 10
[3C4h 0964   2]                     Reserved : 0000
[3C6h 0966   4]          Processor x2Apic ID : FFFFFFFF
[3CAh 0970   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[3CEh 0974   4]                Processor UID : 00000003

[3D2h 0978   1]                Subtable Type : 09 [Processor Local x2APIC]
[3D3h 0979   1]                       Length : 10
[3D4h 0980   2]                     Reserved : 0000
[3D6h 0982   4]          Processor x2Apic ID : FFFFFFFF
[3DAh 0986   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[3DEh 0990   4]                Processor UID : 00000004

[3E2h 0994   1]                Subtable Type : 09 [Processor Local x2APIC]
[3E3h 0995   1]                       Length : 10
[3E4h 0996   2]                     Reserved : 0000
[3E6h 0998   4]          Processor x2Apic ID : FFFFFFFF
[3EAh 1002   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[3EEh 1006   4]                Processor UID : 00000005

[3F2h 1010   1]                Subtable Type : 09 [Processor Local x2APIC]
[3F3h 1011   1]                       Length : 10
[3F4h 1012   2]                     Reserved : 0000
[3F6h 1014   4]          Processor x2Apic ID : FFFFFFFF
[3FAh 1018   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[3FEh 1022   4]                Processor UID : 00000006

[402h 1026   1]                Subtable Type : 09 [Processor Local x2APIC]
[403h 1027   1]                       Length : 10
[404h 1028   2]                     Reserved : 0000
[406h 1030   4]          Processor x2Apic ID : FFFFFFFF
[40Ah 1034   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[40Eh 1038   4]                Processor UID : 00000007

[412h 1042   1]                Subtable Type : 09 [Processor Local x2APIC]
[413h 1043   1]                       Length : 10
[414h 1044   2]                     Reserved : 0000
[416h 1046   4]          Processor x2Apic ID : FFFFFFFF
[41Ah 1050   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[41Eh 1054   4]                Processor UID : 00000008

[422h 1058   1]                Subtable Type : 09 [Processor Local x2APIC]
[423h 1059   1]                       Length : 10
[424h 1060   2]                     Reserved : 0000
[426h 1062   4]          Processor x2Apic ID : FFFFFFFF
[42Ah 1066   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[42Eh 1070   4]                Processor UID : 00000009

[432h 1074   1]                Subtable Type : 09 [Processor Local x2APIC]
[433h 1075   1]                       Length : 10
[434h 1076   2]                     Reserved : 0000
[436h 1078   4]          Processor x2Apic ID : FFFFFFFF
[43Ah 1082   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[43Eh 1086   4]                Processor UID : 0000000A

[442h 1090   1]                Subtable Type : 09 [Processor Local x2APIC]
[443h 1091   1]                       Length : 10
[444h 1092   2]                     Reserved : 0000
[446h 1094   4]          Processor x2Apic ID : FFFFFFFF
[44Ah 1098   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[44Eh 1102   4]                Processor UID : 0000000B

[452h 1106   1]                Subtable Type : 09 [Processor Local x2APIC]
[453h 1107   1]                       Length : 10
[454h 1108   2]                     Reserved : 0000
[456h 1110   4]          Processor x2Apic ID : FFFFFFFF
[45Ah 1114   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[45Eh 1118   4]                Processor UID : 0000000C

[462h 1122   1]                Subtable Type : 09 [Processor Local x2APIC]
[463h 1123   1]                       Length : 10
[464h 1124   2]                     Reserved : 0000
[466h 1126   4]          Processor x2Apic ID : FFFFFFFF
[46Ah 1130   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[46Eh 1134   4]                Processor UID : 0000000D

[472h 1138   1]                Subtable Type : 09 [Processor Local x2APIC]
[473h 1139   1]                       Length : 10
[474h 1140   2]                     Reserved : 0000
[476h 1142   4]          Processor x2Apic ID : FFFFFFFF
[47Ah 1146   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[47Eh 1150   4]                Processor UID : 0000000E

[482h 1154   1]                Subtable Type : 09 [Processor Local x2APIC]
[483h 1155   1]                       Length : 10
[484h 1156   2]                     Reserved : 0000
[486h 1158   4]          Processor x2Apic ID : FFFFFFFF
[48Ah 1162   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[48Eh 1166   4]                Processor UID : 0000000F

[492h 1170   1]                Subtable Type : 09 [Processor Local x2APIC]
[493h 1171   1]                       Length : 10
[494h 1172   2]                     Reserved : 0000
[496h 1174   4]          Processor x2Apic ID : FFFFFFFF
[49Ah 1178   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[49Eh 1182   4]                Processor UID : 00000010

[4A2h 1186   1]                Subtable Type : 09 [Processor Local x2APIC]
[4A3h 1187   1]                       Length : 10
[4A4h 1188   2]                     Reserved : 0000
[4A6h 1190   4]          Processor x2Apic ID : FFFFFFFF
[4AAh 1194   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[4AEh 1198   4]                Processor UID : 00000011

[4B2h 1202   1]                Subtable Type : 09 [Processor Local x2APIC]
[4B3h 1203   1]                       Length : 10
[4B4h 1204   2]                     Reserved : 0000
[4B6h 1206   4]          Processor x2Apic ID : FFFFFFFF
[4BAh 1210   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[4BEh 1214   4]                Processor UID : 00000012

[4C2h 1218   1]                Subtable Type : 09 [Processor Local x2APIC]
[4C3h 1219   1]                       Length : 10
[4C4h 1220   2]                     Reserved : 0000
[4C6h 1222   4]          Processor x2Apic ID : FFFFFFFF
[4CAh 1226   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[4CEh 1230   4]                Processor UID : 00000013

[4D2h 1234   1]                Subtable Type : 09 [Processor Local x2APIC]
[4D3h 1235   1]                       Length : 10
[4D4h 1236   2]                     Reserved : 0000
[4D6h 1238   4]          Processor x2Apic ID : FFFFFFFF
[4DAh 1242   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[4DEh 1246   4]                Processor UID : 00000014

[4E2h 1250   1]                Subtable Type : 09 [Processor Local x2APIC]
[4E3h 1251   1]                       Length : 10
[4E4h 1252   2]                     Reserved : 0000
[4E6h 1254   4]          Processor x2Apic ID : FFFFFFFF
[4EAh 1258   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[4EEh 1262   4]                Processor UID : 00000015

[4F2h 1266   1]                Subtable Type : 09 [Processor Local x2APIC]
[4F3h 1267   1]                       Length : 10
[4F4h 1268   2]                     Reserved : 0000
[4F6h 1270   4]          Processor x2Apic ID : FFFFFFFF
[4FAh 1274   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[4FEh 1278   4]                Processor UID : 00000016

[502h 1282   1]                Subtable Type : 09 [Processor Local x2APIC]
[503h 1283   1]                       Length : 10
[504h 1284   2]                     Reserved : 0000
[506h 1286   4]          Processor x2Apic ID : FFFFFFFF
[50Ah 1290   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[50Eh 1294   4]                Processor UID : 00000017

[512h 1298   1]                Subtable Type : 09 [Processor Local x2APIC]
[513h 1299   1]                       Length : 10
[514h 1300   2]                     Reserved : 0000
[516h 1302   4]          Processor x2Apic ID : FFFFFFFF
[51Ah 1306   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[51Eh 1310   4]                Processor UID : 00000018

[522h 1314   1]                Subtable Type : 09 [Processor Local x2APIC]
[523h 1315   1]                       Length : 10
[524h 1316   2]                     Reserved : 0000
[526h 1318   4]          Processor x2Apic ID : FFFFFFFF
[52Ah 1322   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[52Eh 1326   4]                Processor UID : 00000019

[532h 1330   1]                Subtable Type : 09 [Processor Local x2APIC]
[533h 1331   1]                       Length : 10
[534h 1332   2]                     Reserved : 0000
[536h 1334   4]          Processor x2Apic ID : FFFFFFFF
[53Ah 1338   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[53Eh 1342   4]                Processor UID : 0000001A

[542h 1346   1]                Subtable Type : 09 [Processor Local x2APIC]
[543h 1347   1]                       Length : 10
[544h 1348   2]                     Reserved : 0000
[546h 1350   4]          Processor x2Apic ID : FFFFFFFF
[54Ah 1354   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[54Eh 1358   4]                Processor UID : 0000001B

[552h 1362   1]                Subtable Type : 09 [Processor Local x2APIC]
[553h 1363   1]                       Length : 10
[554h 1364   2]                     Reserved : 0000
[556h 1366   4]          Processor x2Apic ID : FFFFFFFF
[55Ah 1370   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[55Eh 1374   4]                Processor UID : 0000001C

[562h 1378   1]                Subtable Type : 09 [Processor Local x2APIC]
[563h 1379   1]                       Length : 10
[564h 1380   2]                     Reserved : 0000
[566h 1382   4]          Processor x2Apic ID : FFFFFFFF
[56Ah 1386   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[56Eh 1390   4]                Processor UID : 0000001D

[572h 1394   1]                Subtable Type : 09 [Processor Local x2APIC]
[573h 1395   1]                       Length : 10
[574h 1396   2]                     Reserved : 0000
[576h 1398   4]          Processor x2Apic ID : FFFFFFFF
[57Ah 1402   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[57Eh 1406   4]                Processor UID : 0000001E

[582h 1410   1]                Subtable Type : 09 [Processor Local x2APIC]
[583h 1411   1]                       Length : 10
[584h 1412   2]                     Reserved : 0000
[586h 1414   4]          Processor x2Apic ID : FFFFFFFF
[58Ah 1418   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[58Eh 1422   4]                Processor UID : 0000001F

[592h 1426   1]                Subtable Type : 09 [Processor Local x2APIC]
[593h 1427   1]                       Length : 10
[594h 1428   2]                     Reserved : 0000
[596h 1430   4]          Processor x2Apic ID : FFFFFFFF
[59Ah 1434   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[59Eh 1438   4]                Processor UID : 00000020

[5A2h 1442   1]                Subtable Type : 09 [Processor Local x2APIC]
[5A3h 1443   1]                       Length : 10
[5A4h 1444   2]                     Reserved : 0000
[5A6h 1446   4]          Processor x2Apic ID : FFFFFFFF
[5AAh 1450   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[5AEh 1454   4]                Processor UID : 00000021

[5B2h 1458   1]                Subtable Type : 09 [Processor Local x2APIC]
[5B3h 1459   1]                       Length : 10
[5B4h 1460   2]                     Reserved : 0000
[5B6h 1462   4]          Processor x2Apic ID : FFFFFFFF
[5BAh 1466   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[5BEh 1470   4]                Processor UID : 00000022

[5C2h 1474   1]                Subtable Type : 09 [Processor Local x2APIC]
[5C3h 1475   1]                       Length : 10
[5C4h 1476   2]                     Reserved : 0000
[5C6h 1478   4]          Processor x2Apic ID : FFFFFFFF
[5CAh 1482   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[5CEh 1486   4]                Processor UID : 00000023

[5D2h 1490   1]                Subtable Type : 09 [Processor Local x2APIC]
[5D3h 1491   1]                       Length : 10
[5D4h 1492   2]                     Reserved : 0000
[5D6h 1494   4]          Processor x2Apic ID : FFFFFFFF
[5DAh 1498   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[5DEh 1502   4]                Processor UID : 00000024

[5E2h 1506   1]                Subtable Type : 09 [Processor Local x2APIC]
[5E3h 1507   1]                       Length : 10
[5E4h 1508   2]                     Reserved : 0000
[5E6h 1510   4]          Processor x2Apic ID : FFFFFFFF
[5EAh 1514   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[5EEh 1518   4]                Processor UID : 00000025

[5F2h 1522   1]                Subtable Type : 09 [Processor Local x2APIC]
[5F3h 1523   1]                       Length : 10
[5F4h 1524   2]                     Reserved : 0000
[5F6h 1526   4]          Processor x2Apic ID : FFFFFFFF
[5FAh 1530   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[5FEh 1534   4]                Processor UID : 00000026

[602h 1538   1]                Subtable Type : 09 [Processor Local x2APIC]
[603h 1539   1]                       Length : 10
[604h 1540   2]                     Reserved : 0000
[606h 1542   4]          Processor x2Apic ID : FFFFFFFF
[60Ah 1546   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[60Eh 1550   4]                Processor UID : 00000027

[612h 1554   1]                Subtable Type : 09 [Processor Local x2APIC]
[613h 1555   1]                       Length : 10
[614h 1556   2]                     Reserved : 0000
[616h 1558   4]          Processor x2Apic ID : FFFFFFFF
[61Ah 1562   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[61Eh 1566   4]                Processor UID : 00000028

[622h 1570   1]                Subtable Type : 09 [Processor Local x2APIC]
[623h 1571   1]                       Length : 10
[624h 1572   2]                     Reserved : 0000
[626h 1574   4]          Processor x2Apic ID : FFFFFFFF
[62Ah 1578   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[62Eh 1582   4]                Processor UID : 00000029

[632h 1586   1]                Subtable Type : 09 [Processor Local x2APIC]
[633h 1587   1]                       Length : 10
[634h 1588   2]                     Reserved : 0000
[636h 1590   4]          Processor x2Apic ID : FFFFFFFF
[63Ah 1594   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[63Eh 1598   4]                Processor UID : 0000002A

[642h 1602   1]                Subtable Type : 09 [Processor Local x2APIC]
[643h 1603   1]                       Length : 10
[644h 1604   2]                     Reserved : 0000
[646h 1606   4]          Processor x2Apic ID : FFFFFFFF
[64Ah 1610   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[64Eh 1614   4]                Processor UID : 0000002B

[652h 1618   1]                Subtable Type : 09 [Processor Local x2APIC]
[653h 1619   1]                       Length : 10
[654h 1620   2]                     Reserved : 0000
[656h 1622   4]          Processor x2Apic ID : FFFFFFFF
[65Ah 1626   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[65Eh 1630   4]                Processor UID : 0000002C

[662h 1634   1]                Subtable Type : 09 [Processor Local x2APIC]
[663h 1635   1]                       Length : 10
[664h 1636   2]                     Reserved : 0000
[666h 1638   4]          Processor x2Apic ID : FFFFFFFF
[66Ah 1642   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[66Eh 1646   4]                Processor UID : 0000002D

[672h 1650   1]                Subtable Type : 09 [Processor Local x2APIC]
[673h 1651   1]                       Length : 10
[674h 1652   2]                     Reserved : 0000
[676h 1654   4]          Processor x2Apic ID : FFFFFFFF
[67Ah 1658   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[67Eh 1662   4]                Processor UID : 0000002E

[682h 1666   1]                Subtable Type : 09 [Processor Local x2APIC]
[683h 1667   1]                       Length : 10
[684h 1668   2]                     Reserved : 0000
[686h 1670   4]          Processor x2Apic ID : FFFFFFFF
[68Ah 1674   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[68Eh 1678   4]                Processor UID : 0000002F

[692h 1682   1]                Subtable Type : 09 [Processor Local x2APIC]
[693h 1683   1]                       Length : 10
[694h 1684   2]                     Reserved : 0000
[696h 1686   4]          Processor x2Apic ID : FFFFFFFF
[69Ah 1690   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[69Eh 1694   4]                Processor UID : 00000030

[6A2h 1698   1]                Subtable Type : 09 [Processor Local x2APIC]
[6A3h 1699   1]                       Length : 10
[6A4h 1700   2]                     Reserved : 0000
[6A6h 1702   4]          Processor x2Apic ID : FFFFFFFF
[6AAh 1706   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[6AEh 1710   4]                Processor UID : 00000031

[6B2h 1714   1]                Subtable Type : 09 [Processor Local x2APIC]
[6B3h 1715   1]                       Length : 10
[6B4h 1716   2]                     Reserved : 0000
[6B6h 1718   4]          Processor x2Apic ID : FFFFFFFF
[6BAh 1722   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[6BEh 1726   4]                Processor UID : 00000032

[6C2h 1730   1]                Subtable Type : 09 [Processor Local x2APIC]
[6C3h 1731   1]                       Length : 10
[6C4h 1732   2]                     Reserved : 0000
[6C6h 1734   4]          Processor x2Apic ID : FFFFFFFF
[6CAh 1738   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[6CEh 1742   4]                Processor UID : 00000033

[6D2h 1746   1]                Subtable Type : 09 [Processor Local x2APIC]
[6D3h 1747   1]                       Length : 10
[6D4h 1748   2]                     Reserved : 0000
[6D6h 1750   4]          Processor x2Apic ID : FFFFFFFF
[6DAh 1754   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[6DEh 1758   4]                Processor UID : 00000034

[6E2h 1762   1]                Subtable Type : 09 [Processor Local x2APIC]
[6E3h 1763   1]                       Length : 10
[6E4h 1764   2]                     Reserved : 0000
[6E6h 1766   4]          Processor x2Apic ID : FFFFFFFF
[6EAh 1770   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[6EEh 1774   4]                Processor UID : 00000035

[6F2h 1778   1]                Subtable Type : 09 [Processor Local x2APIC]
[6F3h 1779   1]                       Length : 10
[6F4h 1780   2]                     Reserved : 0000
[6F6h 1782   4]          Processor x2Apic ID : FFFFFFFF
[6FAh 1786   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[6FEh 1790   4]                Processor UID : 00000036

[702h 1794   1]                Subtable Type : 09 [Processor Local x2APIC]
[703h 1795   1]                       Length : 10
[704h 1796   2]                     Reserved : 0000
[706h 1798   4]          Processor x2Apic ID : FFFFFFFF
[70Ah 1802   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
[70Eh 1806   4]                Processor UID : 00000037

[712h 1810   1]                Subtable Type : 0A [Local x2APIC NMI]
[713h 1811   1]                       Length : 0C
[714h 1812   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[716h 1814   4]                Processor UID : FFFFFFFF
[71Ah 1818   1]         Interrupt Input LINT : 01
[71Bh 1819   3]                     Reserved : 000000

Raw Table Data: Length 1822 (0x71E)

    0000: 41 50 49 43 1E 07 00 00 03 4E 41 4C 41 53 4B 41  // APIC.....NALASKA
    0010: 41 20 4D 20 49 20 00 00 00 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 00 00 E0 FE 01 00 00 00 00 08 00 00  // ... ............
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 10 10 01 00 00 00 00 08 12 12  // ................
    0060: 01 00 00 00 00 08 14 14 01 00 00 00 00 08 16 16  // ................
    0070: 01 00 00 00 00 08 18 18 01 00 00 00 00 08 01 01  // ................
    0080: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0090: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00A0: 01 00 00 00 00 08 11 11 01 00 00 00 00 08 13 13  // ................
    00B0: 01 00 00 00 00 08 15 15 01 00 00 00 00 08 17 17  // ................
    00C0: 01 00 00 00 00 08 19 19 01 00 00 00 00 08 FF FF  // ................
    00D0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    00E0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    00F0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0100: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0110: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0120: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0130: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0140: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0150: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0160: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0170: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0180: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    0190: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    01A0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    01B0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    01C0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    01D0: 00 00 00 00 00 08 FF FF 00 00 00 00 00 08 FF FF  // ................
    01E0: 00 00 00 00 00 08 FF FF 00 00 00 00 01 0C 08 00  // ................
    01F0: 00 00 C0 FE 00 00 00 00 01 0C 09 00 00 10 C0 FE  // ................
    0200: 18 00 00 00 01 0C 0A 00 00 80 C0 FE 20 00 00 00  // ............ ...
    0210: 01 0C 0B 00 00 00 C1 FE 28 00 00 00 01 0C 0C 00  // ........(.......
    0220: 00 80 C1 FE 30 00 00 00 7F 0C 0D 00 00 00 C2 FE  // ....0...........
    0230: 00 00 00 00 7F 0C 0E 00 00 80 C2 FE 00 00 00 00  // ................
    0240: 7F 0C 0F 00 00 00 C3 FE 00 00 00 00 7F 0C 10 00  // ................
    0250: 00 80 C3 FE 00 00 00 00 7F 0C 11 00 00 00 C4 FE  // ................
    0260: 00 00 00 00 7F 0C 12 00 00 80 C4 FE 00 00 00 00  // ................
    0270: 7F 0C 13 00 00 00 C5 FE 00 00 00 00 7F 0C 14 00  // ................
    0280: 00 80 C5 FE 00 00 00 00 7F 0C 15 00 00 00 C6 FE  // ................
    0290: 00 00 00 00 7F 0C 16 00 00 80 C6 FE 00 00 00 00  // ................
    02A0: 7F 0C 17 00 00 00 C7 FE 00 00 00 00 7F 0C 18 00  // ................
    02B0: 00 80 C7 FE 00 00 00 00 7F 0C 19 00 00 00 C8 FE  // ................
    02C0: 00 00 00 00 7F 0C 1A 00 00 80 C8 FE 00 00 00 00  // ................
    02D0: 7F 0C 1B 00 00 00 C9 FE 00 00 00 00 7F 0C 1C 00  // ................
    02E0: 00 80 C9 FE 00 00 00 00 7F 0C 1D 00 00 00 CA FE  // ................
    02F0: 00 00 00 00 7F 0C 1E 00 00 80 CA FE 00 00 00 00  // ................
    0300: 7F 0C 1F 00 00 00 CB FE 00 00 00 00 7F 0C 20 00  // .............. .
    0310: 00 80 CB FE 00 00 00 00 7F 0C 21 00 00 00 CC FE  // ..........!.....
    0320: 00 00 00 00 7F 0C 22 00 00 80 CC FE 00 00 00 00  // ......".........
    0330: 7F 0C 23 00 00 00 CD FE 00 00 00 00 7F 0C 24 00  // ..#...........$.
    0340: 00 80 CD FE 00 00 00 00 7F 0C 25 00 00 00 CE FE  // ..........%.....
    0350: 00 00 00 00 7F 0C 26 00 00 80 CE FE 00 00 00 00  // ......&.........
    0360: 7F 0C 27 00 00 00 CF FE 00 00 00 00 7F 0C 28 00  // ..'...........(.
    0370: 00 80 CF FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0380: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 FF 0D  // ................
    0390: 00 01 09 10 00 00 FF FF FF FF 00 00 00 00 00 00  // ................
    03A0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 01 00  // ................
    03B0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 02 00  // ................
    03C0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 03 00  // ................
    03D0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 04 00  // ................
    03E0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 05 00  // ................
    03F0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 06 00  // ................
    0400: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 07 00  // ................
    0410: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 08 00  // ................
    0420: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 09 00  // ................
    0430: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 0A 00  // ................
    0440: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 0B 00  // ................
    0450: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 0C 00  // ................
    0460: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 0D 00  // ................
    0470: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 0E 00  // ................
    0480: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 0F 00  // ................
    0490: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 10 00  // ................
    04A0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 11 00  // ................
    04B0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 12 00  // ................
    04C0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 13 00  // ................
    04D0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 14 00  // ................
    04E0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 15 00  // ................
    04F0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 16 00  // ................
    0500: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 17 00  // ................
    0510: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 18 00  // ................
    0520: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 19 00  // ................
    0530: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 1A 00  // ................
    0540: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 1B 00  // ................
    0550: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 1C 00  // ................
    0560: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 1D 00  // ................
    0570: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 1E 00  // ................
    0580: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 1F 00  // ................
    0590: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 20 00  // .............. .
    05A0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 21 00  // ..............!.
    05B0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 22 00  // ..............".
    05C0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 23 00  // ..............#.
    05D0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 24 00  // ..............$.
    05E0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 25 00  // ..............%.
    05F0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 26 00  // ..............&.
    0600: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 27 00  // ..............'.
    0610: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 28 00  // ..............(.
    0620: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 29 00  // ..............).
    0630: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 2A 00  // ..............*.
    0640: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 2B 00  // ..............+.
    0650: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 2C 00  // ..............,.
    0660: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 2D 00  // ..............-.
    0670: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 2E 00  // ................
    0680: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 2F 00  // ............../.
    0690: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 30 00  // ..............0.
    06A0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 31 00  // ..............1.
    06B0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 32 00  // ..............2.
    06C0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 33 00  // ..............3.
    06D0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 34 00  // ..............4.
    06E0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 35 00  // ..............5.
    06F0: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 36 00  // ..............6.
    0700: 00 00 09 10 00 00 FF FF FF FF 00 00 00 00 37 00  // ..............7.
    0710: 00 00 0A 0C 0D 00 FF FF FF FF 01 00 00 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 06
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000004792A018
[030h 0048   4]                Image OffsetX : 00000000
[034h 0052   4]                Image OffsetY : 00000000

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 00 06 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 A0 92 47 00 00 00 00  // ...........G....
    0030: 00 00 00 00 00 00 00 00                          // ........


DBG2
----
[000h 0000   4]                    Signature : "DBG2"    [Debug Port table type 2]
[004h 0004   4]                 Table Length : 00000054
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 02
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                  Info Offset : 0000002C
[028h 0040   4]                   Info Count : 00000001

[02Ch 0044   1]                     Revision : 00
[02Dh 0045   2]                       Length : 0028
[02Fh 0047   1]               Register Count : 01
[030h 0048   2]              Namepath Length : 0002
[032h 0050   2]              Namepath Offset : 0026
[034h 0052   2]              OEM Data Length : 0000 [Optional field not present]
[036h 0054   2]              OEM Data Offset : 0000 [Optional field not present]
[038h 0056   2]                    Port Type : 8000
[03Ah 0058   2]                 Port Subtype : 0000
[03Ch 0060   2]                     Reserved : 0000
[03Eh 0062   2]          Base Address Offset : 0016
[040h 0064   2]          Address Size Offset : 0022

[042h 0066  12]        Base Address Register : [Generic Address Structure]
[042h 0066   1]                     Space ID : 01 [SystemIO]
[043h 0067   1]                    Bit Width : 08
[044h 0068   1]                   Bit Offset : 00
[045h 0069   1]         Encoded Access Width : 00 [Undefined/Legacy]
[046h 0070   8]                      Address : 00000000000003F8

[04Eh 0078   4]                 Address Size : 0000000C

[052h 0082   2]                     Namepath : "."

Raw Table Data: Length 84 (0x54)

    0000: 44 42 47 32 54 00 00 00 00 02 49 4E 54 45 4C 20  // DBG2T.....INTEL 
    0010: 00 00 00 00 00 00 00 00 02 00 00 00 4D 53 46 54  // ............MSFT
    0020: 5F 00 00 00 2C 00 00 00 01 00 00 00 00 28 00 01  // _...,........(..
    0030: 02 00 26 00 00 00 00 00 00 80 00 00 00 00 16 00  // ..&.............
    0040: 22 00 01 08 00 00 F8 03 00 00 00 00 00 00 0C 00  // "...............
    0050: 00 00 2E 00                                      // ....


DBGP
----
[000h 0000   4]                    Signature : "DBGP"    [Debug Port table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 73
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]          Debug Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 01 [SystemIO]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 73 49 4E 54 45 4C 20  // DBGP4....sINTEL 
    0010: 00 00 00 00 00 00 00 00 02 00 00 00 4D 53 46 54  // ............MSFT
    0020: 5F 00 00 00 00 00 00 00 01 08 00 00 F8 03 00 00  // _...............
    0030: 00 00 00 00                                      // ....


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    External (_SB_.PC00.HEC2.HPTS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HEC2.HWAK, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.SDSM, MethodObj)    // 4 Arguments
    External (_SB_.PC00.XHCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.XHCS, MethodObj)    // 0 Arguments
    External (CRBI, UnknownObj)
    External (NITR, FieldUnitObj)
    External (WSIB, UnknownObj)    // Conflicts with a later declaration
    External (WSIC, UnknownObj)    // Conflicts with a later declaration
    External (WSID, UnknownObj)    // Conflicts with a later declaration
    External (WSIF, UnknownObj)    // Conflicts with a later declaration
    External (WSIS, UnknownObj)    // Conflicts with a later declaration
    External (WSTS, UnknownObj)    // Conflicts with a later declaration

    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (CPVD, 0x00)
    Name (SMIP, 0xB2)
    Name (PMBA, 0x1800)
    Name (SMCR, 0x1830)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SMBL, 0x20)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (FMBL, 0x01)
    Name (FDTP, 0x02)
    Name (FUPS, 0x04)
    Name (FUWS, 0x03)
    Name (FEMD, 0x04)
    Name (PFTU, 0xB2)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (SHPC, 0x01)
    Name (PEPM, 0x01)
    Name (PEER, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0x60000000)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (DSSP, 0x00)
    Name (FHPP, 0x01)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, 0x00)
    Name (TMF1, 0x00)
    Name (TMF2, 0x00)
    Name (TMF3, 0x00)
    Name (TTPF, 0x01)
    Name (DTPT, 0x00)
    Name (TTDP, 0x00)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, 0x00)
    Name (TPMF, 0x00)
    Name (PPIV, 0x00)
    Name (SP1O, 0x4E)
    Name (IOCE, 0x87)
    Name (IOCL, 0xAA)
    Name (IO1B, 0x0295)
    Name (IO1L, 0x02)
    Name (IO2B, 0x0A00)
    Name (IO2L, 0x10)
    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == 0x00))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = 0x00
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = 0x01
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [0x00] = Arg0
        Local0 = (SS1 << 0x01)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((0x01 << Arg1) & Local0))
        {
            PRWP [0x01] = Arg1
        }
        Else
        {
            Local0 >>= 0x01
            If (((OSFL () == 0x01) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [0x01])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [0x01])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [0x00]))
        {
            WAKP [0x01] = 0x00
        }
        Else
        {
            WAKP [0x01] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x00)
    Name (SS2, 0x00)
    Name (SS3, 0x01)
    Name (SS4, 0x01)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (OSHF, 0x00)
    Scope (_SB)
    {
        Name (XCNT, 0x00)
        Name (OSYS, 0x00)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("663e35af-cc10-41a4-88ea-5470af055295") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (0x00)
                            {
                                If ((EMCA == 0x01))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Return (LDIR) /* \LDIR */
                    }
                    Default
                    {
                    }

                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001.1 SP1"))
                {
                    OSYS = 0x05
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x06
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x08
                }

                If (_OSI ("Windows 2006.1"))
                {
                    OSYS = 0x09
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSYS = 0x0A
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x0B
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x0C
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x0D
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x0E
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x0F
                }

                If (_OSI ("FreeBSD"))
                {
                    OSYS = 0x02
                }

                If (_OSI ("HP-UX"))
                {
                    OSYS = 0x03
                }

                If (_OSI ("OpenVMS"))
                {
                    OSYS = 0x04
                }

                If ((OSYS >= 0x0D))
                {
                    If ((XCNT == 0x00))
                    {
                        IO80 = 0x84
                        XCNT++
                    }
                }
                Else
                {
                    IO80 = OSYS /* \_SB_.OSYS */
                }
            }
        }
    }

    OperationRegion (DBG0, SystemIO, 0x80, 0x02)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8, 
        IO81,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (GPCT, SystemIO, 0x1842, 0x01)
    Field (GPCT, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPC,   1
    }

    OperationRegion (PSYS, SystemMemory, 0x4CE7D000, 0x0400)
    Field (PSYS, ByteAcc, NoLock, Preserve)
    {
        PLAT,   32, 
        APC0,   1, 
        AP00,   1, 
        AP01,   1, 
        AP02,   1, 
        AP03,   1, 
        AP04,   1, 
        AP05,   1, 
        AP06,   1, 
        AP07,   1, 
        AP08,   1, 
        AP09,   1, 
        AP10,   1, 
        AP11,   1, 
        AP12,   1, 
        AP13,   1, 
        AP14,   1, 
        AP15,   1, 
        AP16,   1, 
        AP17,   1, 
        AP18,   1, 
        AP19,   1, 
        AP20,   1, 
        AP21,   1, 
        AP22,   1, 
        AP23,   1, 
        RESA,   7, 
        SKOV,   1, 
        RES0,   7, 
        TPME,   1, 
        CSEN,   1, 
        C3EN,   1, 
        C6EN,   1, 
        C7EN,   1, 
        MWOS,   1, 
        PSEN,   1, 
        EMCA,   1, 
        HWAL,   2, 
        KPRS,   1, 
        MPRS,   1, 
        TSEN,   1, 
        FGTS,   1, 
        OSCX,   1, 
        RESX,   1, 
        CPHP,   8, 
        IIOP,   8, 
        IIOH,   64, 
        PRBM,   32, 
        P0ID,   32, 
        P1ID,   32, 
        P2ID,   32, 
        P3ID,   32, 
        P4ID,   32, 
        P5ID,   32, 
        P6ID,   32, 
        P7ID,   32, 
        P0BM,   64, 
        P1BM,   64, 
        P2BM,   64, 
        P3BM,   64, 
        P4BM,   64, 
        P5BM,   64, 
        P6BM,   64, 
        P7BM,   64, 
        MEBM,   16, 
        MEBC,   16, 
        CFMM,   32, 
        TSSZ,   32, 
        M0BS,   64, 
        M1BS,   64, 
        M2BS,   64, 
        M3BS,   64, 
        M4BS,   64, 
        M5BS,   64, 
        M6BS,   64, 
        M7BS,   64, 
        M0RN,   64, 
        M1RN,   64, 
        M2RN,   64, 
        M3RN,   64, 
        M4RN,   64, 
        M5RN,   64, 
        M6RN,   64, 
        M7RN,   64, 
        SMI0,   32, 
        SMI1,   32, 
        SMI2,   32, 
        SMI3,   32, 
        SCI0,   32, 
        SCI1,   32, 
        SCI2,   32, 
        SCI3,   32, 
        MADD,   64, 
        CUU0,   128, 
        CUU1,   128, 
        CUU2,   128, 
        CUU3,   128, 
        CUU4,   128, 
        CUU5,   128, 
        CUU6,   128, 
        CUU7,   128, 
        CPSP,   8, 
        ME00,   128, 
        ME01,   128, 
        ME10,   128, 
        ME11,   128, 
        ME20,   128, 
        ME21,   128, 
        ME30,   128, 
        ME31,   128, 
        ME40,   128, 
        ME41,   128, 
        ME50,   128, 
        ME51,   128, 
        ME60,   128, 
        ME61,   128, 
        ME70,   128, 
        ME71,   128, 
        MESP,   16, 
        LDIR,   64, 
        PRID,   32, 
        AHPE,   8, 
        DHRD,   192, 
        ATSR,   192, 
        RHSA,   192, 
        WSIC,   8, 
        WSIS,   16, 
        WSIB,   8, 
        WSID,   8, 
        WSIF,   8, 
        WSTS,   8, 
        WHEA,   8, 
        BGMA,   64, 
        BGMS,   8, 
        BGIO,   16, 
        BGIL,   8, 
        CNBS,   8, 
        XHMD,   8, 
        SBV1,   8, 
        SBV2,   8, 
        HWEN,   2, 
        ACEN,   1, 
        HWPI,   1, 
        RES1,   4, 
        BB00,   8, 
        BB01,   8, 
        BB02,   8, 
        BB03,   8, 
        BB04,   8, 
        BB05,   8, 
        BB06,   8, 
        BB07,   8, 
        BB08,   8, 
        BB09,   8, 
        BB10,   8, 
        BB11,   8, 
        BB12,   8, 
        BB13,   8, 
        BB14,   8, 
        BB15,   8, 
        BB16,   8, 
        BB17,   8, 
        BB18,   8, 
        BB19,   8, 
        BB20,   8, 
        BB21,   8, 
        BB22,   8, 
        BB23,   8, 
        BB24,   8, 
        BB25,   8, 
        BB26,   8, 
        BB27,   8, 
        BB28,   8, 
        BB29,   8, 
        BB30,   8, 
        BB31,   8, 
        BB32,   8, 
        BB33,   8, 
        BB34,   8, 
        BB35,   8, 
        BB36,   8, 
        BB37,   8, 
        BB38,   8, 
        BB39,   8, 
        BB40,   8, 
        BB41,   8, 
        BB42,   8, 
        BB43,   8, 
        BB44,   8, 
        BB45,   8, 
        BB46,   8, 
        BB47,   8, 
        SGEN,   8, 
        SG00,   8, 
        SG01,   8, 
        SG02,   8, 
        SG03,   8, 
        SG04,   8, 
        SG05,   8, 
        SG06,   8, 
        SG07,   8, 
        CLOD,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMBA,   32, 
        DDRF,   8, 
        RT3S,   8, 
        RTP0,   8, 
        RTP3,   8, 
        FBB0,   8, 
        FBB1,   8, 
        FBB2,   8, 
        FBB3,   8, 
        FBB4,   8, 
        FBB5,   8, 
        FBB6,   8, 
        FBB7,   8, 
        FBL0,   8, 
        FBL1,   8, 
        FBL2,   8, 
        FBL3,   8, 
        FBL4,   8, 
        FBL5,   8, 
        FBL6,   8, 
        FBL7,   8, 
        P0FB,   8, 
        P1FB,   8, 
        P2FB,   8, 
        P3FB,   8, 
        P4FB,   8, 
        P5FB,   8, 
        P6FB,   8, 
        P7FB,   8, 
        FMB0,   32, 
        FMB1,   32, 
        FMB2,   32, 
        FMB3,   32, 
        FMB4,   32, 
        FMB5,   32, 
        FMB6,   32, 
        FMB7,   32, 
        FML0,   32, 
        FML1,   32, 
        FML2,   32, 
        FML3,   32, 
        FML4,   32, 
        FML5,   32, 
        FML6,   32, 
        FML7,   32, 
        FKPB,   32, 
        FKB0,   8, 
        FKB1,   8, 
        FKB2,   8, 
        FKB3,   8, 
        FKB4,   8, 
        FKB5,   8, 
        FKB6,   8, 
        FKB7,   8, 
        NITR,   8
    }

    OperationRegion (GPE0, SystemIO, 0x189C, 0x04)
    Field (GPE0, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPEH,   1, 
            ,   7, 
        PCIE,   1, 
            ,   1, 
        PMEE,   1, 
            ,   1, 
        PMB0,   1, 
        Offset (0x04)
    }

    OperationRegion (GPES, SystemIO, 0x188C, 0x04)
    Field (GPES, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPSH,   1, 
        SGPS,   1, 
            ,   4, 
        SMWS,   1, 
            ,   1, 
        PEES,   1, 
            ,   1, 
        PMES,   1, 
            ,   1, 
        PMBS,   1, 
        Offset (0x04)
    }

    Method (IPTS, 1, NotSerialized)
    {
        IO80 = 0x72
        SMWS = 0x01
        PMES = 0x01
        PMBS = 0x01
        GPEH = 0x01
        PCIE = 0x01
        PMEE = 0x01
        PMB0 = 0x01
        If (CondRefOf (\_SB.PC00.HEC2.HPTS))
        {
            \_SB.PC00.HEC2.HPTS ()
        }

        \_SB.PC00.XHCI.XHCS ()
    }

    Method (IWAK, 1, Serialized)
    {
        IO80 = 0x73
        If (CondRefOf (\_SB.PC00.HEC2.HWAK))
        {
            \_SB.PC00.HEC2.HWAK ()
        }

        If ((Arg0 == 0x03)) {}
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Notify (\_SB.SLPB, 0x02) // Device Wake
            PBSS = 0x01
            GPEC = 0x01
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Method (PSTA, 1, NotSerialized)
            {
                Local6 = (PRBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (TMID, 2, NotSerialized)
            {
                Local0 = (Arg0 * 0x02)
                Local1 = (Local0 + Arg1)
                Return (Local1)
            }

            Name (APTB, Buffer (0x38)
            {
                /* 0000 */  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,  // ........
                /* 0008 */  0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,  // ........
                /* 0010 */  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,  // ........
                /* 0018 */  0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Method (TPID, 2, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = P0ID /* \P0ID */
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = P1ID /* \P1ID */
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = P2ID /* \P2ID */
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = P3ID /* \P3ID */
                }

                Local0 += DerefOf (APTB [Arg1])
                Return (Local0)
            }

            Method (MSTA, 1, NotSerialized)
            {
                Local6 = (MEBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (CSTA, 2, NotSerialized)
            {
                Local0 = 0x00
                Local2 = 0x00
                Local2 += DerefOf (APTB [Arg1])
                If ((Local2 == 0xFF))
                {
                    Return (0x00)
                }

                If ((Arg0 == 0x00))
                {
                    Local0 = (P0BM >> Local2)
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = (P1BM >> Local2)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = (P2BM >> Local2)
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = (P3BM >> Local2)
                }

                Local0 &= 0x01
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (LAPC, 2, Serialized)
            {
                Name (APIC, Buffer (0x08) {})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateByteField (APIC, 0x02, PRID)
                CreateByteField (APIC, 0x03, APID)
                CreateDWordField (APIC, 0x04, FLAG)
                TYPE = 0x00
                LLEN = 0x08
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    PRID = 0xFF
                    APID = 0xFF
                }
                Else
                {
                    Local1 = 0x38
                    Local1 *= Arg0
                    Local1 += Arg1
                    PRID = Local1
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.LAPC.APIC */
            }

            Method (X2AP, 2, Serialized)
            {
                Name (APIC, Buffer (0x10) {})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateWordField (APIC, 0x02, RSVD)
                CreateDWordField (APIC, 0x04, APID)
                CreateDWordField (APIC, 0x08, FLAG)
                TYPE = 0x09
                LLEN = 0x10
                RSVD = 0x00
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    APID = 0xFFFFFFFF
                }
                Else
                {
                    Local1 = 0x38
                    Local1 *= Arg0
                    Local1 += Arg1
                    PRID = Local1
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.X2AP.APIC */
            }

            Method (MFIL, 4, NotSerialized)
            {
                Local0 = (Arg1 * 0x2E)
                Arg0 [(Local0 + 0x0E)] = 0x00
                Arg0 [(Local0 + 0x0F)] = 0x00
                Arg0 [(Local0 + 0x10)] = (Arg2 << 0x04)
                Arg0 [(Local0 + 0x11)] = (Arg2 >> 0x04)
                Arg0 [(Local0 + 0x12)] = (Arg2 >> 0x0C)
                Arg0 [(Local0 + 0x13)] = (Arg2 >> 0x14)
                Arg0 [(Local0 + 0x14)] = (Arg2 >> 0x1C)
                Arg0 [(Local0 + 0x15)] = 0x00
                Arg0 [(Local0 + 0x26)] = 0x00
                Arg0 [(Local0 + 0x27)] = 0x00
                Arg0 [(Local0 + 0x28)] = (Arg3 << 0x04)
                Arg0 [(Local0 + 0x29)] = (Arg3 >> 0x04)
                Arg0 [(Local0 + 0x2A)] = (Arg3 >> 0x0C)
                Arg0 [(Local0 + 0x2B)] = (Arg3 >> 0x14)
                Arg0 [(Local0 + 0x2C)] = (Arg3 >> 0x1C)
                Arg0 [(Local0 + 0x2D)] = 0x00
                Local1 = (Arg2 + Arg3)
                If ((Arg3 != Zero))
                {
                    Local1--
                }

                Arg0 [(Local0 + 0x16)] = 0xFF
                Arg0 [(Local0 + 0x17)] = 0xFF
                Arg0 [(Local0 + 0x18)] = ((Local1 << 0x04
                    ) + 0x0F)
                Arg0 [(Local0 + 0x19)] = (Local1 >> 0x04)
                Arg0 [(Local0 + 0x1A)] = (Local1 >> 0x0C)
                Arg0 [(Local0 + 0x1B)] = (Local1 >> 0x14)
                Arg0 [(Local0 + 0x1C)] = (Local1 >> 0x1C)
                Arg0 [(Local0 + 0x1D)] = 0x00
            }

            Method (MCRS, 1, Serialized)
            {
                Name (MRNR, ResourceTemplate ()
                {
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, Cacheable, ReadWrite,
                        0x00000000000FFFFF, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, , AddressRangeMemory, TypeStatic)
                })
                Local0 = MBAS (Arg0)
                Local0 <<= 0x08
                Local1 = MSIZ (Arg0)
                Local1 <<= 0x08
                Local2 = (Local0 + Local1)
                Local4 = (CFMM >> 0x14)
                If ((Local0 == Zero))
                {
                    Local1 -= 0x10
                    Local0 += 0x10
                }

                If (((Local0 < Local4) && (Local2 > Local4)))
                {
                    Local3 = (Local4 - Local0)
                    Local1 -= Local3
                    Local3 -= TSSZ /* \TSSZ */
                    MFIL (MRNR, 0x00, Local0, Local3)
                    Local0 = 0x1000
                    Local3 = 0x01
                }
                Else
                {
                    Local3 = 0x00
                }

                While ((Local3 < 0x80))
                {
                    If ((Local0 > 0x1000))
                    {
                        If ((Local1 >= 0x1000))
                        {
                            If ((Local1 > 0x00020000))
                            {
                                Local2 = 0x00020000
                            }
                            Else
                            {
                                Local2 = 0x1000
                            }
                        }
                        Else
                        {
                            Local2 = Local1
                        }
                    }
                    ElseIf ((Local1 > 0x0800))
                    {
                        Local2 = 0x0800
                    }
                    Else
                    {
                        Local2 = Local1
                    }

                    If ((Local2 == 0x00))
                    {
                        Local0 = 0x00
                    }

                    MFIL (MRNR, Local3, Local0, Local2)
                    Local3++
                    Local1 -= Local2
                    Local0 += Local2
                }

                Return (MRNR) /* \_SB_.MCRS.MRNR */
            }

            Method (TINT, 1, NotSerialized)
            {
                If ((ObjectType (Arg0) == 0x03))
                {
                    Local1 = 0x00
                    Local0 = DerefOf (Arg0 [0x07])
                    Local0 <<= 0x38
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x06])
                    Local0 <<= 0x30
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x05])
                    Local0 <<= 0x28
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x04])
                    Local0 <<= 0x20
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x03])
                    Local0 <<= 0x18
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x02])
                    Local0 <<= 0x10
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x01])
                    Local0 <<= 0x08
                    Local1 += Local0
                    Local0 = DerefOf (Arg0 [0x00])
                    Local1 += Local0
                    Return (Local1)
                }
                Else
                {
                    Return (Arg0)
                }
            }

            Method (MBAS, 1, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = M0BS /* \M0BS */
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = M1BS /* \M1BS */
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = M2BS /* \M2BS */
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = M3BS /* \M3BS */
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = M4BS /* \M4BS */
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = M5BS /* \M5BS */
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = M6BS /* \M6BS */
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = M7BS /* \M7BS */
                }

                Return (TINT (Local0))
            }

            Method (MLIM, 1, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = M0RN /* \M0RN */
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = M1RN /* \M1RN */
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = M2RN /* \M2RN */
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = M3RN /* \M3RN */
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = M4RN /* \M4RN */
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = M5RN /* \M5RN */
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = M6RN /* \M6RN */
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = M7RN /* \M7RN */
                }

                Return (TINT (Local0))
            }

            Method (MSIZ, 1, NotSerialized)
            {
                Local0 = MLIM (Arg0)
                Return (Local0)
            }

            Device (SCK0)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK0")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU0 = "CPUSCK0"
                    Local0 = PSTA (0x00)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)) {}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P0BM /* \P0BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x00 | Local0))
                }

                Processor (CP00, 0x00, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x00))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x00))
                        }
                    }
                }

                Processor (CP01, 0x01, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x01))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x01))
                        }
                    }
                }

                Processor (CP02, 0x02, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x02))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x02))
                        }
                    }
                }

                Processor (CP03, 0x03, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x03))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x03))
                        }
                    }
                }

                Processor (CP04, 0x04, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x04))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x04))
                        }
                    }
                }

                Processor (CP05, 0x05, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x05))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x05))
                        }
                    }
                }

                Processor (CP06, 0x06, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x06))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x06))
                        }
                    }
                }

                Processor (CP07, 0x07, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x07))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x07))
                        }
                    }
                }

                Processor (CP08, 0x08, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x08))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x08))
                        }
                    }
                }

                Processor (CP09, 0x09, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x09))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x09))
                        }
                    }
                }

                Processor (CP0A, 0x0A, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0A))
                        }
                    }
                }

                Processor (CP0B, 0x0B, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0B))
                        }
                    }
                }

                Processor (CP0C, 0x0C, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0C))
                        }
                    }
                }

                Processor (CP0D, 0x0D, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0D))
                        }
                    }
                }

                Processor (CP0E, 0x0E, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0E))
                        }
                    }
                }

                Processor (CP0F, 0x0F, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0F))
                        }
                    }
                }

                Processor (CP10, 0x10, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x10))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x10))
                        }
                    }
                }

                Processor (CP11, 0x11, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x11))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x11))
                        }
                    }
                }

                Processor (CP12, 0x12, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x12))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x12))
                        }
                    }
                }

                Processor (CP13, 0x13, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x13))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x13))
                        }
                    }
                }

                Processor (CP14, 0x14, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x14))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x14))
                        }
                    }
                }

                Processor (CP15, 0x15, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x15))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x15))
                        }
                    }
                }

                Processor (CP16, 0x16, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x16))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x16))
                        }
                    }
                }

                Processor (CP17, 0x17, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x17))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x17))
                        }
                    }
                }

                Processor (CP18, 0x18, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x18))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x18))
                        }
                    }
                }

                Processor (CP19, 0x19, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x19))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x19))
                        }
                    }
                }

                Processor (CP1A, 0x1A, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1A))
                        }
                    }
                }

                Processor (CP1B, 0x1B, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1B))
                        }
                    }
                }

                Processor (CP1C, 0x1C, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1C))
                        }
                    }
                }

                Processor (CP1D, 0x1D, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1D))
                        }
                    }
                }

                Processor (CP1E, 0x1E, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1E))
                        }
                    }
                }

                Processor (CP1F, 0x1F, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1F))
                        }
                    }
                }

                Processor (CP20, 0x20, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x20))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x20))
                        }
                    }
                }

                Processor (CP21, 0x21, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x21))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x21))
                        }
                    }
                }

                Processor (CP22, 0x22, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x22))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x22))
                        }
                    }
                }

                Processor (CP23, 0x23, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x23))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x23))
                        }
                    }
                }

                Processor (CP24, 0x24, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x24))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x24))
                        }
                    }
                }

                Processor (CP25, 0x25, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x25))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x25))
                        }
                    }
                }

                Processor (CP26, 0x26, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x26))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x26))
                        }
                    }
                }

                Processor (CP27, 0x27, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x27))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x27))
                        }
                    }
                }

                Processor (CP28, 0x28, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x28))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x28))
                        }
                    }
                }

                Processor (CP29, 0x29, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x29))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x29))
                        }
                    }
                }

                Processor (CP2A, 0x2A, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2A))
                        }
                    }
                }

                Processor (CP2B, 0x2B, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2B))
                        }
                    }
                }

                Processor (CP2C, 0x2C, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2C))
                        }
                    }
                }

                Processor (CP2D, 0x2D, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2D))
                        }
                    }
                }

                Processor (CP2E, 0x2E, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2E))
                        }
                    }
                }

                Processor (CP2F, 0x2F, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2F))
                        }
                    }
                }

                Processor (CP30, 0x30, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP30")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x30])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x30) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x30))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x30))
                        }
                    }
                }

                Processor (CP31, 0x31, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP31")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x31])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x31) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x31))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x31))
                        }
                    }
                }

                Processor (CP32, 0x32, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP32")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x32])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x32) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x32))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x32))
                        }
                    }
                }

                Processor (CP33, 0x33, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP33")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x33])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x33) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x33))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x33))
                        }
                    }
                }

                Processor (CP34, 0x34, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP34")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x34])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x34) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x34))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x34))
                        }
                    }
                }

                Processor (CP35, 0x35, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP35")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x35])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x35) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x35))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x35))
                        }
                    }
                }

                Processor (CP36, 0x36, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP36")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x36])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x36) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x36))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x36))
                        }
                    }
                }

                Processor (CP37, 0x37, 0x00001810, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP37")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTB [0x37])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x37) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x37))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x37))
                        }
                    }
                }
            }
        }

        OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }

        Name (\PCAP, 0x00010000)
        Name (\PSSW, 0x9B)
        Name (\HWPS, 0x00)
        Name (\POSC, 0x00)
        Name (NITL, 0x00)
        OperationRegion (CMOS, SystemIO, 0x70, 0x04)
        Field (CMOS, ByteAcc, NoLock, Preserve)
        {
            IDX0,   7, 
            Offset (0x01), 
            DAT0,   8, 
            IDX1,   7, 
            Offset (0x03), 
            DAT1,   8
        }

        IndexField (IDX1, DAT1, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B), 
            WIWH,   8
        }

        Method (SWWE, 1, NotSerialized)
        {
            SMIS = 0x00
            SMIC = Arg0
        }

        Device (WERR)
        {
            Name (_HID, EisaId ("PNP0C33") /* Error Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS >= 0x0C))
                {
                    If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }
        }

        Scope (\_GPE)
        {
            OperationRegion (GPIS, SystemMemory, 0xFDAE0154, 0x04)
            Field (GPIS, AnyAcc, NoLock, Preserve)
            {
                STSX,   32
            }

            Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                IO80 = 0x4A
                Local0 = STSX /* \_GPE.STSX */
                If (((0x2000 & Local0) == 0x2000))
                {
                    IO80 = 0x4C
                    Notify (\_SB.WERR, 0x80) // Status Change
                    STSX = 0x2000
                }
            }
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = Arg3
            CreateDWordField (Local0, 0x00, CPB1)
            CreateDWordField (Local0, 0x04, CPB2)
            If ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c") /* Unknown UUID */))
            {
                If ((OSYS >= 0x0C))
                {
                    If ((CPB2 & 0x01))
                    {
                        If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                        {
                            If (~(CPB1 & 0x01))
                            {
                                SWWE (0x9E)
                            }
                        }
                        Else
                        {
                            CPB2 &= 0xFFFFFFFE
                            CPB1 |= 0x10
                            If (~(CPB1 & 0x01)) {}
                        }
                    }
                }

                Return (Local0)
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If (((CPB2 & 0x40) == 0x40))
                {
                    HWPS = 0x01
                }

                If ((NITR == 0x00))
                {
                    If (((CPB2 & 0x1000) == 0x1000))
                    {
                        POSC = 0x01
                    }
                    ElseIf ((NITL == 0x00))
                    {
                        NITL = 0x01
                        LoadTable ("NITR", "ALASKA", "A M I ", "", "", Zero)
                    }
                }

                If ((NITR == 0x01))
                {
                    If ((NITL == 0x00))
                    {
                        NITL = 0x01
                        LoadTable ("NITR", "ALASKA", "A M I ", "", "", Zero)
                    }
                }

                If ((CPB2 & 0x10))
                {
                    If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                    {
                        WIWH = 0x1B
                        If (~(CPB1 & 0x01))
                        {
                            SWWE (0x9E)
                        }
                    }
                    Else
                    {
                        CPB2 &= 0xFFFFFFEF
                        CPB1 |= 0x10
                        If (~(CPB1 & 0x01)) {}
                    }
                }

                Return (Local0)
            }
            Else
            {
                Return (^PC00._OSC (Arg0, Arg1, Arg2, Arg3))
            }
        }

        Device (SRIO)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0xF2, 0xF9, 0x7A, 0x0E, 0xA1, 0x44, 0x6F, 0x4C,  // ..z..DoL
                /* 0008 */  0xA4, 0xB0, 0xA7, 0x67, 0x84, 0x80, 0xDA, 0x61,  // ...g...a
                /* 0010 */  0x41, 0x41, 0x01, 0x02                           // AA..
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD00, Package (0x32)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR00, Package (0x32)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x18
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }
        })
        Name (PD10, Package (0x40)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR10, Package (0x40)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x25
            }
        })
        Name (PG11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x24
            }
        })
        Name (PG12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x25
            }
        })
        Name (PD20, Package (0x24)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR20, Package (0x24)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2D
            }
        })
        Name (PG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2C
            }
        })
        Name (PG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2D
            }
        })
        Name (PD28, Package (0x20)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR28, Package (0x20)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x36
            }
        })
        Name (PG30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x36
            }
        })
        Name (PG31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x35
            }
        })
        Name (PG32, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG32, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x34
            }
        })
        Name (PG33, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG33, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x35
            }
        })
        Name (PD30, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR30, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x3F
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x38
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x3C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x3D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x3E
            }
        })
        Name (PD38, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR38, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x47
            }
        })
        Name (PG3E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG3E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x40
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x44
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x45
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x46
            }
        })
        Name (PG59, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG59, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG5A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG5A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG5B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG5B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG5C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG5C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG5D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG5D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG5E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG5E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG5F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG5F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG60, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG60, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG61, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG61, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG62, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG62, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG63, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG63, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG64, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG64, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG65, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG65, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG66, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG66, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG67, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG67, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG68, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG68, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG69, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG69, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG6A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG6A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG6B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG6B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG6C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG6C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG6D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG6D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG6E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG6E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG6F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG6F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG70, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG70, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
    }

    Scope (_SB)
    {
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC00.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
            }

            Name (P0RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0015,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0016,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x1000,             // Range Minimum
                    0x3FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x3000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFE010000,         // Range Minimum
                    0xFE010FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x70000000,         // Range Minimum
                    0x92FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x23000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000380000000000, // Range Minimum
                    0x0000383FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            OperationRegion (TMEM, PCI_Config, 0x00, 0x0100)
            Field (TMEM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                    ,   4, 
                BSEG,   4, 
                PAMS,   48, 
                Offset (0x52), 
                DIM0,   4, 
                DIM1,   4, 
                Offset (0x54), 
                DIM2,   4
            }

            Name (MTBL, Package (0x10)
            {
                0x00, 
                0x20, 
                0x20, 
                0x30, 
                0x40, 
                0x40, 
                0x60, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0xC0, 
                0x0100, 
                0x0100, 
                0x0100, 
                0x0200
            })
            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07) {})
            Method (EROM, 0, NotSerialized)
            {
                CreateDWordField (P0RS, \_SB.PC00._Y00._MIN, RMIN)  // _MIN: Minimum Base Address
                CreateDWordField (P0RS, \_SB.PC00._Y00._MAX, RMAX)  // _MAX: Maximum Base Address
                CreateDWordField (P0RS, \_SB.PC00._Y00._LEN, RLEN)  // _LEN: Length
                CreateByteField (PAMB, 0x06, BREG)
                PAMB = PAMS /* \_SB_.PC00.PAMS */
                BREG = BSEG /* \_SB_.PC00.BSEG */
                RMIN = 0x00
                RMAX = 0x00
                RLEN = 0x00
                Local0 = 0x00
                While ((Local0 < 0x0D))
                {
                    Local1 = (Local0 >> 0x01)
                    Local2 = DerefOf (PAMB [Local1])
                    If ((Local0 & 0x01))
                    {
                        Local2 >>= 0x04
                    }

                    Local2 &= 0x03
                    If (RMIN)
                    {
                        If (Local2)
                        {
                            RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                            If ((RMAX == 0x000F3FFF))
                            {
                                RMAX = 0x000FFFFF
                            }

                            RLEN = (RMAX - RMIN) /* \_SB_.PC00.EROM.RMIN */
                            RLEN++
                        }
                        Else
                        {
                            Local0 = 0x0C
                        }
                    }
                    ElseIf (Local2)
                    {
                        RMIN = DerefOf (ERNG [Local0])
                        RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                        If ((RMAX == 0x000F3FFF))
                        {
                            RMAX = 0x000FFFFF
                        }

                        RLEN = (RMAX - RMIN) /* \_SB_.PC00.EROM.RMIN */
                        RLEN++
                    }
                    Else
                    {
                    }

                    Local0++
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                EROM ()
                Return (P0RS) /* \_SB_.PC00.P0RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x00, 0x0100)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0E), 
                    STM0,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x00, 0x0100)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x1E), 
                    STM1,   7
                }
            }

            OperationRegion (HBUS, PCI_Config, 0x00, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, 0x00)
            Name (MH_B, 0x00)
            Name (PC_B, 0x00)
            Name (PC_L, 0x00)
            Name (DM_B, 0x00)
            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == 0x00))
                {
                    PC_B = MCFG /* \MCFG */
                }

                Return (PC_B) /* \_SB_.PC00.PC_B */
            }

            Device (DMI0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (CB0A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB0B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB0C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB0D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB0E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB0F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB0G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB0H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }

            Device (IIM0)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
            }

            Device (UBX0)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (ALZA)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
            }

            Device (DISP)
            {
                Name (_ADR, 0x000F0000)  // _ADR: Address
            }

            Device (IHC1)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
            }

            Device (IHC2)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
            }

            Device (IIDR)
            {
                Name (_ADR, 0x00100002)  // _ADR: Address
            }

            Device (IMKT)
            {
                Name (_ADR, 0x00100003)  // _ADR: Address
            }

            Device (IHC3)
            {
                Name (_ADR, 0x00100004)  // _ADR: Address
            }

            Device (MRO0)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (MRO1)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
            }

            Device (SAT2)
            {
                Name (_ADR, 0x00110005)  // _ADR: Address
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (OTG0)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
            }

            Device (TERM)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
            }

            Device (CAMR)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
            }

            Device (NTHP)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
            }

            Device (HEC1)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
            }

            Device (IDER)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
            }

            Device (MEKT)
            {
                Name (_ADR, 0x00160003)  // _ADR: Address
            }

            Device (HEC3)
            {
                Name (_ADR, 0x00160004)  // _ADR: Address
            }

            Device (SAT1)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
            }

            Device (NAN1)
            {
                Name (_ADR, 0x00180000)  // _ADR: Address
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG59) /* \_SB_.AG59 */
                    }

                    Return (PG59) /* \_SB_.PG59 */
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG5A) /* \_SB_.AG5A */
                    }

                    Return (PG5A) /* \_SB_.PG5A */
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG5B) /* \_SB_.AG5B */
                    }

                    Return (PG5B) /* \_SB_.PG5B */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG5C) /* \_SB_.AG5C */
                    }

                    Return (PG5C) /* \_SB_.PG5C */
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG5D) /* \_SB_.AG5D */
                    }

                    Return (PG5D) /* \_SB_.PG5D */
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG5E) /* \_SB_.AG5E */
                    }

                    Return (PG5E) /* \_SB_.PG5E */
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG5F) /* \_SB_.AG5F */
                    }

                    Return (PG5F) /* \_SB_.PG5F */
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG60) /* \_SB_.AG60 */
                    }

                    Return (PG60) /* \_SB_.PG60 */
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG61) /* \_SB_.AG61 */
                    }

                    Return (PG61) /* \_SB_.PG61 */
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG62) /* \_SB_.AG62 */
                    }

                    Return (PG62) /* \_SB_.PG62 */
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG63) /* \_SB_.AG63 */
                    }

                    Return (PG63) /* \_SB_.PG63 */
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG64) /* \_SB_.AG64 */
                    }

                    Return (PG64) /* \_SB_.PG64 */
                }
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG65) /* \_SB_.AG65 */
                    }

                    Return (PG65) /* \_SB_.PG65 */
                }
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG66) /* \_SB_.AG66 */
                    }

                    Return (PG66) /* \_SB_.PG66 */
                }
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG67) /* \_SB_.AG67 */
                    }

                    Return (PG67) /* \_SB_.PG67 */
                }
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG68) /* \_SB_.AG68 */
                    }

                    Return (PG68) /* \_SB_.PG68 */
                }
            }

            Device (RP17)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG69) /* \_SB_.AG69 */
                    }

                    Return (PG69) /* \_SB_.PG69 */
                }
            }

            Device (RP18)
            {
                Name (_ADR, 0x001B0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6A) /* \_SB_.AG6A */
                    }

                    Return (PG6A) /* \_SB_.PG6A */
                }
            }

            Device (RP19)
            {
                Name (_ADR, 0x001B0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6B) /* \_SB_.AG6B */
                    }

                    Return (PG6B) /* \_SB_.PG6B */
                }
            }

            Device (RP20)
            {
                Name (_ADR, 0x001B0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6C) /* \_SB_.AG6C */
                    }

                    Return (PG6C) /* \_SB_.PG6C */
                }
            }

            Device (RP21)
            {
                Name (_ADR, 0x001B0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6D) /* \_SB_.AG6D */
                    }

                    Return (PG6D) /* \_SB_.PG6D */
                }
            }

            Device (RP22)
            {
                Name (_ADR, 0x001B0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6E) /* \_SB_.AG6E */
                    }

                    Return (PG6E) /* \_SB_.PG6E */
                }
            }

            Device (RP23)
            {
                Name (_ADR, 0x001B0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6F) /* \_SB_.AG6F */
                    }

                    Return (PG6F) /* \_SB_.PG6F */
                }
            }

            Device (RP24)
            {
                Name (_ADR, 0x001B0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG70) /* \_SB_.AG70 */
                    }

                    Return (PG70) /* \_SB_.PG70 */
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPCB, PCI_Config, 0x00, 0x0100)
                Field (LPCB, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xAC), 
                    Offset (0xAE), 
                    XSMB,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0540,             // Range Minimum
                            0x0540,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            )
                        IO (Decode16,
                            0x0600,             // Range Minimum
                            0x0600,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0CA0,             // Range Minimum
                            0x0CA0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1C000,         // Address Base
                            0x00024000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED45000,         // Address Base
                            0x00047000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEE00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12000,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12010,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1B000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED01000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED02000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS3, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED03000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Switch (ToInteger (HPTB))
                        {
                            Case (0xFED00000)
                            {
                                Return (CRS0) /* \_SB_.PC00.LPC0.HPET.CRS0 */
                            }
                            Case (0xFED01000)
                            {
                                Return (CRS1) /* \_SB_.PC00.LPC0.HPET.CRS1 */
                            }
                            Case (0xFED02000)
                            {
                                Return (CRS2) /* \_SB_.PC00.LPC0.HPET.CRS2 */
                            }
                            Case (0xFED03000)
                            {
                                Return (CRS3) /* \_SB_.PC00.LPC0.HPET.CRS3 */
                            }

                        }

                        Return (CRS0) /* \_SB_.PC00.LPC0.HPET.CRS0 */
                    }
                }

                OperationRegion (PKBS, SystemIO, 0x60, 0x05)
                Field (PKBS, ByteAcc, Lock, Preserve)
                {
                    PKBD,   8, 
                    Offset (0x02), 
                    Offset (0x03), 
                    Offset (0x04), 
                    PKBC,   8
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    OperationRegion (SIO1, SystemIO, 0x4E, 0x02)
                    Field (SIO1, ByteAcc, NoLock, Preserve)
                    {
                        SIDX,   8, 
                        SDAT,   8
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        SIDX = 0x87
                        SIDX = 0x87
                        SIDX = 0x2D
                        Local0 = (SDAT & 0x01)
                        If ((Local0 == 0x01))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    OperationRegion (SIO1, SystemIO, 0x4E, 0x02)
                    Field (SIO1, ByteAcc, NoLock, Preserve)
                    {
                        SIDX,   8, 
                        SDAT,   8
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        SIDX = 0x87
                        SIDX = 0x87
                        SIDX = 0x2D
                        Local0 = (SDAT & 0x01)
                        If ((Local0 == 0x01))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS2) /* \_SB_.PC00.LPC0.PS2M.CRS2 */
                    }
                }

                Method (SPTS, 1, NotSerialized)
                {
                    SLPX = One
                    SLPE = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPE = Zero
                    If (RTCS) {}
                    Else
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }

                OperationRegion (CPSB, SystemMemory, 0xC0000000, 0x10)
                Field (CPSB, AnyAcc, NoLock, Preserve)
                {
                    RTCX,   1, 
                    SBB0,   7, 
                    SBB1,   8, 
                    SBB2,   8, 
                    SBB3,   8, 
                    SBB4,   8, 
                    SBB5,   8, 
                    SBB6,   8, 
                    SBB7,   8, 
                    SBB8,   8, 
                    SBB9,   8, 
                    SBBA,   8, 
                    SBBB,   8, 
                    SBBC,   8, 
                    SBBD,   8, 
                    SBBE,   8, 
                    SBBF,   8
                }
            }

            Device (P2SB)
            {
                Name (_ADR, 0x001F0001)  // _ADR: Address
            }

            Device (PMC1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
            }

            Device (CAVS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0004)  // _ADR: Address
            }

            Device (SPIC)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
            }

            Device (GBE1)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (NTPK)
            {
                Name (_ADR, 0x001F0007)  // _ADR: Address
            }
        }

        Device (PC01)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN10, 0, NotSerialized)
            {
                Return (0x10)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN10 ())
            }

            Name (_UID, 0x10)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR10) /* \_SB_.AR10 */
                }

                Return (PD10) /* \_SB_.PD10 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC01._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC01._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            IO80 = 0xE3
                            ^BR1A.OSHP ()
                            ^BR1B.OSHP ()
                            ^BR1C.OSHP ()
                            ^BR1D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC01.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (PRBM >> 0x00)
                Local1 &= 0x01
                If ((Local1 == 0x01))
                {
                    Local1 = (IIOH >> 0x01)
                    Local1 &= 0x01
                    If ((Local1 == 0x01))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (PR01, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0016,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x004E,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4000,             // Range Minimum
                    0x7FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x4000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x93000000,         // Range Minimum
                    0xB5FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x23000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000384000000000, // Range Minimum
                    0x0000387FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (PR01) /* \_SB_.PC01.PR01 */
            }

            Device (BR1A)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x60000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC01.BR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1A.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0F) /* \_SB_.AG0F */
                    }

                    Return (PG0F) /* \_SB_.PG0F */
                }

                Device (SL01)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x61600188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC01.BR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1B.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG10) /* \_SB_.AG10 */
                    }

                    Return (PG10) /* \_SB_.PG10 */
                }

                Device (SL02)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1C)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x61608188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC01.BR1C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1C.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG11) /* \_SB_.AG11 */
                    }

                    Return (PG11) /* \_SB_.PG11 */
                }

                Device (SL03)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1D)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x61610188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC01.BR1D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1D.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG12) /* \_SB_.AG12 */
                    }

                    Return (PG12) /* \_SB_.PG12 */
                }

                Device (SL04)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (CHA0)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (CHA1)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
            }

            Device (CHA2)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
            }

            Device (CHA3)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (CHA4)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
            }

            Device (CHA5)
            {
                Name (_ADR, 0x000F0000)  // _ADR: Address
            }

            Device (CHA6)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
            }

            Device (CHA7)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (CMS0)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (CMS1)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
            }

            Device (CMS2)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (CMS3)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
            }

            Device (CDL0)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
            }

            Device (PCU0)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
            }

            Device (VCU0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
            }
        }

        Device (PC02)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN20, 0, NotSerialized)
            {
                Return (0x20)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN20 ())
            }

            Name (_UID, 0x20)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR20) /* \_SB_.AR20 */
                }

                Return (PD20) /* \_SB_.PD20 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC02._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC02._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^BR2A.OSHP ()
                            ^BR2B.OSHP ()
                            ^BR2C.OSHP ()
                            ^BR2D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC02.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (PRBM >> 0x00)
                Local1 &= 0x01
                If ((Local1 == 0x01))
                {
                    Local1 = (IIOH >> 0x02)
                    Local1 &= 0x01
                    If ((Local1 == 0x01))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (PR02, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0064,             // Range Minimum
                    0x00B1,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x004E,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x8000,             // Range Minimum
                    0xBFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x4000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03B0,             // Range Minimum
                    0x03BB,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x000C,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03C0,             // Range Minimum
                    0x03DF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0020,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xB6000000,         // Range Minimum
                    0xD8FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x23000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000388000000000, // Range Minimum
                    0x000038BFFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (PR02) /* \_SB_.PC02.PR02 */
            }

            Device (BR2A)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x61618188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC02.BR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2A.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG23) /* \_SB_.AG23 */
                    }

                    Return (PG23) /* \_SB_.PG23 */
                }

                Device (SL05)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2B)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x66400188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC02.BR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2B.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (SL06)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2C)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x66408188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC02.BR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2C.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG25) /* \_SB_.AG25 */
                    }

                    Return (PG25) /* \_SB_.PG25 */
                }

                Device (SL07)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2D)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x66410188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC02.BR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2D.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG26) /* \_SB_.AG26 */
                    }

                    Return (PG26) /* \_SB_.PG26 */
                }

                Device (SL08)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (M2M0)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (M2M1)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
            }

            Device (MCM0)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
            }

            Device (MCD0)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (MCM1)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
            }

            Device (MCD1)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
            }

            Device (UMC0)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (UMC1)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
            }
        }

        Device (PC03)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN28, 0, NotSerialized)
            {
                Return (0x28)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN28 ())
            }

            Name (_UID, 0x28)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR28) /* \_SB_.AR28 */
                }

                Return (PD28) /* \_SB_.PD28 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC03._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC03._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^BR3A.OSHP ()
                            ^BR3B.OSHP ()
                            ^BR3C.OSHP ()
                            ^BR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC03.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (PRBM >> 0x00)
                Local1 &= 0x01
                If ((Local1 == 0x01))
                {
                    Local1 = (IIOH >> 0x03)
                    Local1 &= 0x01
                    If ((Local1 == 0x01))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (PR03, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00B2,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x004E,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xC000,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x4000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xD9000000,         // Range Minimum
                    0xFBFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x23000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x000038C000000000, // Range Minimum
                    0x000038FFFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (PR03) /* \_SB_.PC03.PR03 */
            }

            Device (BR3A)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x66418188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC03.BR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3A.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG30) /* \_SB_.AG30 */
                    }

                    Return (PG30) /* \_SB_.PG30 */
                }

                Device (SL09)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3B)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x6B200188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC03.BR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3B.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG31) /* \_SB_.AG31 */
                    }

                    Return (PG31) /* \_SB_.PG31 */
                }

                Device (SL0A)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3C)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x6B208188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC03.BR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3C.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG32) /* \_SB_.AG32 */
                    }

                    Return (PG32) /* \_SB_.PG32 */
                }

                Device (SL0B)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3D)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x6B210188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC03.BR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3D.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG33) /* \_SB_.AG33 */
                    }

                    Return (PG33) /* \_SB_.PG33 */
                }

                Device (SL0C)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (KTI0)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
            }

            Device (KTI1)
            {
                Name (_ADR, 0x000F0000)  // _ADR: Address
            }

            Device (KTI2)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
            }

            Device (M3K0)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
            }

            Device (M2U0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
            }

            Device (M2D0)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (D03A)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
            }
        }

        Device (PC04)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN30, 0, NotSerialized)
            {
                Return (0x30)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN30 ())
            }

            Name (_UID, 0x30)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR30) /* \_SB_.AR30 */
                }

                Return (PD30) /* \_SB_.PD30 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC04._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC04._OSC.CDW3 */
                    CTRL &= 0x17
                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC04.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (PRBM >> 0x00)
                Local1 &= 0x01
                If ((Local1 == 0x01))
                {
                    Local1 = (IIOH >> 0x04)
                    Local1 &= 0x01
                    If ((Local1 == 0x01))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (PR04, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (PR04) /* \_SB_.PC04.PR04 */
            }

            Device (MCP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x6B218188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC04.MCP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PC04.MCP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC04.MCP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC04.MCP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC04.MCP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PC04.MCP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC04.MCP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC04.MCP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC04.MCP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC04.MCP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC04.MCP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC04.MCP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PC04.MCP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PC04.MCP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PC04.MCP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.MCP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PC04.MCP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC04.MCP0.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    EJ0L ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (SL0D)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }
        }

        Device (PC05)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN38, 0, NotSerialized)
            {
                Return (0x38)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN38 ())
            }

            Name (_UID, 0x38)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR38) /* \_SB_.AR38 */
                }

                Return (PD38) /* \_SB_.PD38 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC05._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC05._OSC.CDW3 */
                    CTRL &= 0x17
                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC05.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (PRBM >> 0x00)
                Local1 &= 0x01
                If ((Local1 == 0x01))
                {
                    Local1 = (IIOH >> 0x05)
                    Local1 &= 0x01
                    If ((Local1 == 0x01))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (PR05, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (PR05) /* \_SB_.PC05.PR05 */
            }

            Device (MCP1)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x60000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PC05.MCP1.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    Local0 &= ALMK /* \_SB_.PC05.MCP1.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC05.MCP1.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC05.MCP1.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC05.MCP1.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    Local0 &= PLMK /* \_SB_.PC05.MCP1.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC05.MCP1.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC05.MCP1.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC05.MCP1.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC05.MCP1.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC05.MCP1.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC05.MCP1.ALMK */
                        Local0 |= ALBL /* \_SB_.PC05.MCP1.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    Local0 |= SPOF /* \_SB_.PC05.MCP1.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    Local0 |= PLOF /* \_SB_.PC05.MCP1.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.MCP1.SCTL */
                    Local0 |= ALOF /* \_SB_.PC05.MCP1.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            IO80 = Arg0
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        IO80 = Arg0
                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC05.MCP1.PSNM */
                    Return (Local0)
                }

                Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                {
                    Return (SNUM ())
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    EJ0L ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x69, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3E) /* \_SB_.AG3E */
                    }

                    Return (PG3E) /* \_SB_.PG3E */
                }

                Device (SL0E)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            \_SB.PC00.LPC0.SPTS (Arg0)
            IPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        IWAK (Arg0)
        \_SB.PC00.LPC0.SWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    OperationRegion (_SB.PC00.LPC0.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PC00.LPC0.LPCR, ByteAcc, NoLock, Preserve)
    {
        CARN,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, Serialized)
    {
        Local0 = 0xFF
        Switch ((Arg0 + 0x00))
        {
            Case (0x03F8)
            {
                Local0 = 0x00
            }
            Case (0x02F8)
            {
                Local0 = 0x01
            }
            Case (0x0220)
            {
                Local0 = 0x02
            }
            Case (0x0228)
            {
                Local0 = 0x03
            }
            Case (0x0238)
            {
                Local0 = 0x04
            }
            Case (0x02E8)
            {
                Local0 = 0x05
            }
            Case (0x0338)
            {
                Local0 = 0x06
            }
            Case (0x03E8)
            {
                Local0 = 0x07
            }

        }

        Return (Local0)
    }

    Method (RRIO, 4, Serialized)
    {
        Switch ((Arg0 + 0x00))
        {
            Case (0x00)
            {
                CALE = 0x00
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CARN = Local0
                }

                If (Arg1)
                {
                    CALE = 0x01
                }
            }
            Case (0x01)
            {
                CBLE = 0x00
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CBDR = Local0
                }

                If (Arg1)
                {
                    CBLE = 0x01
                }
            }
            Case (0x02)
            {
                LTLE = 0x00
                If ((Arg2 == 0x0378))
                {
                    LTDR = 0x00
                }

                If ((Arg2 == 0x0278))
                {
                    LTDR = 0x01
                }

                If ((Arg2 == 0x03BC))
                {
                    LTDR = 0x02
                }

                If (Arg1)
                {
                    LTLE = 0x01
                }
            }
            Case (0x03)
            {
                FDLE = 0x00
                If ((Arg2 == 0x03F0))
                {
                    FDDR = 0x00
                }

                If ((Arg2 == 0x0370))
                {
                    FDDR = 0x01
                }

                If (Arg1)
                {
                    FDLE = 0x01
                }
            }
            Case (0x08)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = 0x01
                    }
                    Else
                    {
                        GLLE = 0x00
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = 0x01
                    }
                    Else
                    {
                        GHLE = 0x00
                    }
                }
            }
            Case (0x09)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = 0x01
                    }
                    Else
                    {
                        GLLE = 0x00
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = 0x01
                    }
                    Else
                    {
                        GHLE = 0x00
                    }
                }
            }
            Case (0x0A)
            {
                If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                {
                    If (Arg1)
                    {
                        KCLE = 0x01
                    }
                    Else
                    {
                        KCLE = 0x00
                    }
                }
            }
            Case (0x0B)
            {
                If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                {
                    If (Arg1)
                    {
                        MCLE = 0x01
                    }
                    Else
                    {
                        MCLE = 0x00
                    }
                }
            }
            Case (0x0C)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = 0x01
                    }
                    Else
                    {
                        C1LE = 0x00
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = 0x01
                    }
                    Else
                    {
                        C2LE = 0x00
                    }
                }
            }
            Case (0x0D)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = 0x01
                    }
                    Else
                    {
                        C1LE = 0x00
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = 0x01
                    }
                    Else
                    {
                        C2LE = 0x00
                    }
                }
            }

        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (PBST, 0x01)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC01)
    {
        Method (BN10, 0, NotSerialized)
        {
            Return (BB01) /* \BB01 */
        }
    }

    Scope (_SB.PC02)
    {
        Method (BN20, 0, NotSerialized)
        {
            Return (BB02) /* \BB02 */
        }
    }

    Scope (_SB.PC03)
    {
        Method (BN28, 0, NotSerialized)
        {
            Return (BB03) /* \BB03 */
        }
    }

    Scope (_SB.PC04)
    {
        Method (BN30, 0, NotSerialized)
        {
            Return (BB04) /* \BB04 */
        }
    }

    Scope (_SB.PC05)
    {
        Method (BN38, 0, NotSerialized)
        {
            Return (BB05) /* \BB05 */
        }
    }

    Scope (_SB.PC00)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "192291091581Genuine NVIDIA Certified SLI Ready Motherboard for EVGA X299 MICRO     193c-Copyright 2016 NVIDIA Corporation All Rights Reserved-299564538770(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, 0x00, FUNC)
                If ((FUNC == 0x41494C53))
                {
                    Return (SLIC) /* \_SB_.PC00.SLIC */
                }

                Return (0x00)
            }
        }

        Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
        Method (PCID, 4, Serialized)
        {
            If ((Arg0 == PCIG))
            {
                If ((Arg1 >= 0x03))
                {
                    If ((Arg2 == 0x00))
                    {
                        Return (Buffer (0x02)
                        {
                             0x01, 0x03                                       // ..
                        })
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (0x01)
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (Package (0x05)
                        {
                            0xC350, 
                            Ones, 
                            Ones, 
                            0xC350, 
                            Ones
                        })
                    }
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PC00)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == 0x01))
            {
                If ((Arg0 == PCIG))
                {
                    Return (0x01)
                }
            }

            Return (0x00)
        }
    }

    Name (PNVB, 0x4CEB6B98)
    Name (PNVL, 0x029B)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SBRG,   32, 
        GPEM,   32, 
        G2L0,   32, 
        G2L1,   32, 
        G2L2,   32, 
        G2L3,   32, 
        G2L4,   32, 
        G2L5,   32, 
        G2L6,   32, 
        G2L7,   32, 
        G2L8,   32, 
        G2L9,   32, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        U0C0,   32, 
        U1C0,   32, 
        ADPM,   32, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SB00,   32, 
        SB01,   32, 
        SB02,   32, 
        SB03,   32, 
        SB04,   32, 
        SB05,   32, 
        SB06,   32, 
        SB07,   32, 
        SB08,   32, 
        SB09,   32, 
        SB0A,   32, 
        SB10,   32, 
        SB11,   32, 
        SB12,   32, 
        SB13,   32, 
        SB14,   32, 
        SB15,   32, 
        SB16,   32, 
        SB17,   32, 
        SB18,   32, 
        SB19,   32, 
        SB1A,   32, 
        GPEN,   8, 
        SGIR,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        Offset (0x20E), 
        SXRB,   32, 
        SXRS,   32, 
        CIOE,   8, 
        CIOI,   8, 
        TAEN,   8, 
        TIRQ,   8, 
        XWMB,   32, 
        EMH4,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        KMBS,   16, 
        KWRM,   32, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        OBF9,   8, 
        OBFA,   8, 
        OBFB,   8, 
        OBFC,   8, 
        OBFD,   8, 
        OBFE,   8, 
        OBFF,   8, 
        OBFG,   8, 
        OBFH,   8, 
        OBFI,   8, 
        OBFJ,   8, 
        OBFK,   8, 
        OBFL,   8, 
        OBFM,   8, 
        OBFN,   8, 
        OBFO,   8, 
        ECR1,   8, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        MCFG,   32, 
        RCG0,   16, 
        RCG1,   16
    }

    Scope (\)
    {
        Method (THEN, 0, Serialized)
        {
            OperationRegion (THBA, SystemMemory, 0xFE200000, 0x10)
            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32
            }

            Return ((DO00 != 0xFFFFFFFF))
        }

        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (0x80 * (Arg0 - 0x20)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (0x00)
            }

            ToBuffer (Arg0, Local3)
            Local0 = 0x00
            Local1 = 0x00
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (!THEN ())
            {
                Return (Zero)
            }

            Local0 = SizeOf (Arg0)
            Local1 = THDA (0x20, 0x16)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = 0x00
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Arg0, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Arg0, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Arg0, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= 0x01))
            {
                BO00 = STRD (Arg0, Local6, 0x01)
                Local6 += 0x01
                Local7 -= 0x01
            }

            DO30 = 0x00
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (SPTH, 0x01)
    Name (SPTL, 0x02)
    Method (PCHV, 0, NotSerialized)
    {
        If ((PCHS == 0x01))
        {
            Return (SPTH) /* \SPTH */
        }

        If ((PCHS == 0x02))
        {
            Return (SPTL) /* \SPTL */
        }

        Return (0x00)
    }

    Scope (_GPE)
    {
        Method (_L6D, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PC00.XHCI.GPEH ()
            \_SB.PC00.CAVS.GPEH ()
            \_SB.PC00.GBE1.GPEH ()
        }

        Method (_L35, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP03.HPME ()
                Notify (\_SB.PC00.RP03, 0x02) // Device Wake
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x03)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x00AC0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDAD0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDB00000,         // Address Base
                        0x00500000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE011000,         // Address Base
                        0x0000F000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE036000,         // Address Base
                        0x00006000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE03D000,         // Address Base
                        0x003C3000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE410000,         // Address Base
                        0x003F0000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PC00.PRRE._CRS.BUF0 */
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y01)
            })
            Name (BUF1, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y02)
            })
            Name (BUF2, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y03)
            })
            Name (BUF3, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y04)
            })
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y01._MIN, AMI0)  // _MIN: Minimum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y01._MAX, AMA0)  // _MAX: Maximum Base Address
            CreateWordField (BUF1, \_SB.PC00.IOTR._Y02._MIN, AMI1)  // _MIN: Minimum Base Address
            CreateWordField (BUF1, \_SB.PC00.IOTR._Y02._MAX, AMA1)  // _MAX: Maximum Base Address
            CreateWordField (BUF2, \_SB.PC00.IOTR._Y03._MIN, AMI2)  // _MIN: Minimum Base Address
            CreateWordField (BUF2, \_SB.PC00.IOTR._Y03._MAX, AMA2)  // _MAX: Maximum Base Address
            CreateWordField (BUF3, \_SB.PC00.IOTR._Y04._MIN, AMI3)  // _MIN: Minimum Base Address
            CreateWordField (BUF3, \_SB.PC00.IOTR._Y04._MAX, AMA3)  // _MAX: Maximum Base Address
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 == 0x01))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local0)
                }

                If ((ITS1 == 0x01))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local0)
                }

                If ((ITS2 == 0x01))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local0)
                }

                If ((ITS3 == 0x01))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local0)
                }

                Return (Local0)
            }
        }

        Scope (LPC0)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            OperationRegion (LPC, PCI_Config, 0x00, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xAC), 
                Offset (0xAD), 
                Offset (0xAE), 
                XUSB,   1, 
                Offset (0xB8), 
                    ,   22, 
                GR0B,   2, 
                Offset (0xBC), 
                    ,   2, 
                GR19,   2, 
                Offset (0xC0), 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Scope (PMC1)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            OperationRegion (PMCB, PCI_Config, 0x00, 0x0100)
            Field (PMCB, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x40), 
                Offset (0x41), 
                ACBA,   8, 
                Offset (0x48), 
                    ,   12, 
                PWBA,   20
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
            OperationRegion (PCR1, SystemMemory, (SBRG + 0x00C73418), 0x04)
            Field (PCR1, DWordAcc, Lock, Preserve)
            {
                DAT1,   32
            }
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (PMBV, 0x00)
        Method (PMB1, 0, NotSerialized)
        {
            If ((PMBV == 0x00))
            {
                PMBV = (\_SB.PC00.PMC1.ACBA << 0x08)
            }

            Return (PMBV) /* \PMBV */
        }

        Name (PWRV, 0x00)
        Method (PWRM, 0, NotSerialized)
        {
            If ((PWRV == 0x00))
            {
                PWRV = (\_SB.PC00.PMC1.PWBA << 0x0C)
            }

            Return (PWRV) /* \PWRV */
        }

        OperationRegion (PMIO, SystemIO, PMB1 (), 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1
        }

        OperationRegion (PMLP, SystemIO, (PMB1 () + 0x80), 0x20)
        Field (PMLP, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            Offset (0x11), 
            GE08,   1, 
                ,   8, 
            GE17,   1, 
                ,   17, 
            GE35,   1, 
                ,   9, 
            GE45,   1, 
            Offset (0x16), 
            GE48,   1, 
                ,   2, 
            GE51,   1, 
            Offset (0x20)
        }

        Field (PMLP, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
            GS08,   1, 
                ,   8, 
            GS17,   1, 
                ,   17, 
            GS35,   1, 
                ,   9, 
            GS45,   1, 
            Offset (0x06), 
            GS48,   1, 
                ,   2, 
            GS51,   1, 
                ,   2, 
            GS54,   1, 
            GS55,   1, 
            Offset (0x10)
        }

        OperationRegion (PWMR, SystemMemory, PWRM (), 0x0800)
        Field (PWMR, AnyAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            Offset (0xE2), 
            DWLE,   1, 
            HWLE,   1
        }

        OperationRegion (PMST, SystemMemory, PWRV, 0x80)
        Field (PMST, DWordAcc, NoLock, Preserve)
        {
            Offset (0x18), 
                ,   25, 
            USBP,   1, 
            Offset (0x1C), 
            Offset (0x1F), 
            PMFS,   1, 
            Offset (0x20), 
            MPMC,   32, 
                ,   20, 
            UWAB,   1
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTRZ, 0x00)
        Name (OBFZ, 0x00)
        Name (LMSL, 0x00)
        Name (LNSL, 0x00)
        Scope (GBE1)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            OperationRegion (GLBA, PCI_Config, 0x00, 0x0100)
            Field (GLBA, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    PMES = 0x01
                    Notify (GBE1, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (_SB.PC00.XHCI)
    {
        OperationRegion (XPRT, PCI_Config, 0x00, 0x0100)
        Field (XPRT, AnyAcc, NoLock, Preserve)
        {
            DVID,   16, 
            Offset (0x50), 
                ,   2, 
            STGE,   1, 
            Offset (0x74), 
            D0D3,   2, 
            Offset (0x75), 
            PMEE,   1, 
                ,   6, 
            PMES,   1, 
            Offset (0xA2), 
                ,   2, 
            D3HE,   1, 
            Offset (0xA8), 
                ,   13, 
            MW13,   1, 
            MW14,   1, 
            Offset (0xAC), 
            Offset (0xB0), 
                ,   13, 
            MB13,   1, 
            MB14,   1, 
            Offset (0xB4), 
            Offset (0xD0), 
            PR2,    32, 
            PR2M,   32, 
            PR3,    32, 
            PR3M,   32
        }

        Name (XFLT, 0x00)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("ac340cb7-e901-45bf-b7e6-2b34ec931e23") /* Unknown UUID */))
            {
                If ((Arg1 == 0x03))
                {
                    XFLT = Arg1
                }
            }

            Return (0x00)
        }

        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }

        Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
        {
            Return (0x03)
        }

        Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
        {
            Return (0x03)
        }

        Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
        {
            Return (0x03)
        }

        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((XFLT == Zero))
            {
                Return (0x00)
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x6D, 0x04))
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            PMEE = Arg0
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (\_SB.PC00.XHCI.RHUB.INIR))
            {
                ^RHUB.INIR ()
            }
        }

        Method (GPEH, 0, NotSerialized)
        {
            If ((DVID == 0xFFFF))
            {
                Return (Zero)
            }

            Local0 = PMES /* \_SB_.PC00.XHCI.PMES */
            PMES = 0x01
            If ((PMEE && Local0))
            {
                Notify (XHCI, 0x02) // Device Wake
            }
        }

        OperationRegion (XHCP, SystemMemory, (GPCB () + 0x000A0000), 0x0100)
        Field (XHCP, AnyAcc, Lock, Preserve)
        {
            Offset (0x04), 
            PDBM,   16, 
            Offset (0x10), 
            MEMB,   64
        }

        Method (USRA, 0, Serialized)
        {
            If ((PCHV () == SPTH))
            {
                Return (0x0F)
            }
            Else
            {
                Return (0x0B)
            }
        }

        Method (SSPA, 0, Serialized)
        {
            If ((PCHV () == SPTH))
            {
                Return (0x11)
            }
            Else
            {
                Return (0x0D)
            }
        }

        Name (XRST, Zero)
        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((DVID == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = MEMB /* \_SB_.PC00.XHCI.MEMB */
            Local1 = PDBM /* \_SB_.PC00.XHCI.PDBM */
            PDBM &= 0xFFFFFFFFFFFFFFF9
            D3HE = 0x00
            STGE = 0x00
            D0D3 = 0x00
            MEMB = XWMB /* \XWMB */
            PDBM = (Local1 | 0x02)
            PDBM &= 0xFFFFFFFFFFFFFFFD
            MEMB = Local2
            PDBM = Local1
            If (CondRefOf (\_SB.PC00.XHCI.PS0X))
            {
                PS0X ()
            }

            If ((UWAB && (D0D3 == 0x00)))
            {
                MPMC = 0x01
                While (PMFS)
                {
                    Sleep (0x0A)
                }
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((DVID == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = MEMB /* \_SB_.PC00.XHCI.MEMB */
            Local1 = PDBM /* \_SB_.PC00.XHCI.PDBM */
            PDBM &= 0xFFFFFFFFFFFFFFF9
            D0D3 = 0x00
            MEMB = XWMB /* \XWMB */
            PDBM = (Local1 | 0x02)
            PDBM &= 0xFFFFFFFFFFFFFFFD
            D3HE = 0x01
            STGE = 0x01
            D0D3 = 0x03
            MEMB = Local2
            PDBM = Local1
            If (CondRefOf (\_SB.PC00.XHCI.PS3X))
            {
                PS3X ()
            }

            If ((UWAB && (D0D3 == 0x03)))
            {
                MPMC = 0x03
                While (PMFS)
                {
                    Sleep (0x0A)
                }
            }
        }

        Method (XHCS, 0, Serialized)
        {
        }

        Method (CUID, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
            {
                Return (0x01)
            }

            Return (0x00)
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS2, 0, Serialized)  // _PS2: Power State 2
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS2X))
                {
                    PS2X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS3X))
                {
                    PS3X ()
                }
            }

            Device (HS01)
            {
                Name (_ADR, 0x01)  // _ADR: Address
            }

            Device (HS02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
            }

            Device (HS03)
            {
                Name (_ADR, 0x03)  // _ADR: Address
            }

            Device (HS04)
            {
                Name (_ADR, 0x04)  // _ADR: Address
            }

            Device (HS05)
            {
                Name (_ADR, 0x05)  // _ADR: Address
            }

            Device (HS06)
            {
                Name (_ADR, 0x06)  // _ADR: Address
            }

            Device (HS07)
            {
                Name (_ADR, 0x07)  // _ADR: Address
            }

            Device (HS08)
            {
                Name (_ADR, 0x08)  // _ADR: Address
            }

            Device (HS09)
            {
                Name (_ADR, 0x09)  // _ADR: Address
            }

            Device (HS10)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
            }

            Device (USR1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + 0x00))
                }
            }

            Device (USR2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + 0x01))
                }
            }

            Device (SS01)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x00))
                }
            }

            Device (SS02)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x01))
                }
            }

            Device (SS03)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x02))
                }
            }

            Device (SS04)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x03))
                }
            }

            Device (SS05)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x04))
                }
            }

            Device (SS06)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x05))
                }
            }
        }
    }

    Scope (_SB.PC00.XHCI.RHUB)
    {
        Device (HS11)
        {
            Name (_ADR, 0x0B)  // _ADR: Address
        }

        Device (HS12)
        {
            Name (_ADR, 0x0C)  // _ADR: Address
        }

        Device (HS13)
        {
            Name (_ADR, 0x0D)  // _ADR: Address
        }

        Device (HS14)
        {
            Name (_ADR, 0x0E)  // _ADR: Address
        }

        Device (SS07)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x06))
            }
        }

        Device (SS08)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x07))
            }
        }

        Device (SS09)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x08))
            }
        }

        Device (SS10)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x09))
            }
        }
    }

    Scope (_SB.PC00)
    {
        Scope (CAVS)
        {
            OperationRegion (HDAR, PCI_Config, 0x00, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x48), 
                    ,   6, 
                MBCG,   1, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    ADBG ("HDAS GPEH")
                    PMES = 0x01
                    Notify (CAVS, 0x02) // Device Wake
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y05, AddressRangeACPI, TypeStatic)
            })
            Method (AUWA, 0, Serialized)
            {
                If ((PCHS == 0x01))
                {
                    If ((^^LPC0.CRID == 0x00))
                    {
                        Return (0x01)
                    }
                }
                Else
                {
                    If ((^^LPC0.CRID == 0x00))
                    {
                        Return (0x01)
                    }

                    If ((^^LPC0.CRID == 0x01))
                    {
                        Return (0x01)
                    }

                    If ((^^LPC0.CRID == 0x09))
                    {
                        Return (0x01)
                    }
                }

                Return (0x00)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PC00.CAVS._Y05._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PC00.CAVS._Y05._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PC00.CAVS._Y05._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - 0x01))
                NLEN = NHLL /* \NHLL */
                If ((AUWA () == 0x01))
                {
                    MBCG = 0x00
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (0x01)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF) /* \_SB_.PC00.CAVS.NBUF */
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            Return (0x00)
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (0x00)
            }
        }

        Scope (RP01)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                OBFZ = OBF1 /* \OBF1 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP01._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP01.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP02)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                OBFZ = OBF2 /* \OBF2 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP02._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP02.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP03)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                OBFZ = OBF3 /* \OBF3 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP03._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP03.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x35, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x35, 0x04))
            }
        }

        Scope (RP04)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                OBFZ = OBF4 /* \OBF4 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP04._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP04.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP05)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                OBFZ = OBF5 /* \OBF5 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP05._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP05.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP06)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                OBFZ = OBF6 /* \OBF6 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP06._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP06.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP07)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                OBFZ = OBF7 /* \OBF7 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP07._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP07.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP08)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                OBFZ = OBF8 /* \OBF8 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP08._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP08.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP09)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                OBFZ = OBF9 /* \OBF9 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP09._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP09.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP10)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                OBFZ = OBFA /* \OBFA */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP10._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP10.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP11)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                OBFZ = OBFB /* \OBFB */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP11._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP11.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP12)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                OBFZ = OBFC /* \OBFC */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP12._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP12.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP13)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRD /* \LTRD */
                LMSL = PMLD /* \PMLD */
                LNSL = PNLD /* \PNLD */
                OBFZ = OBFD /* \OBFD */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP13._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP13.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP14)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRE /* \LTRE */
                LMSL = PMLE /* \PMLE */
                LNSL = PNLE /* \PNLE */
                OBFZ = OBFE /* \OBFE */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP14._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP14.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP15)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRF /* \LTRF */
                LMSL = PMLF /* \PMLF */
                LNSL = PNLF /* \PNLF */
                OBFZ = OBFF /* \OBFF */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP15._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP15.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP16)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRG /* \LTRG */
                LMSL = PMLG /* \PMLG */
                LNSL = PNLG /* \PNLG */
                OBFZ = OBFG /* \OBFG */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP16._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP16.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP17)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRH /* \LTRH */
                LMSL = PMLH /* \PMLH */
                LNSL = PNLH /* \PNLH */
                OBFZ = OBFH /* \OBFH */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP17._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP17.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP18)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRI /* \LTRI */
                LMSL = PMLI /* \PMLI */
                LNSL = PNLI /* \PNLI */
                OBFZ = OBFI /* \OBFI */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP18._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP18.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP19)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRJ /* \LTRJ */
                LMSL = PMLJ /* \PMLJ */
                LNSL = PNLJ /* \PNLJ */
                OBFZ = OBFJ /* \OBFJ */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP19._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP19.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP20)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRK /* \LTRK */
                LMSL = PMLK /* \PMLK */
                LNSL = PNLK /* \PNLK */
                OBFZ = OBFK /* \OBFK */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP20._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP20.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP21)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRL /* \LTRL */
                LMSL = PMLL /* \PMLL */
                LNSL = PNLL /* \PNLL */
                OBFZ = OBFL /* \OBFL */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP21._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP21.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP22)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRM /* \LTRM */
                LMSL = PMLM /* \PMLM */
                LNSL = PNLM /* \PNLM */
                OBFZ = OBFM /* \OBFM */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP22._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP22.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP23)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRN /* \LTRN */
                LMSL = PMLN /* \PMLN */
                LNSL = PNLN /* \PNLN */
                OBFZ = OBFN /* \OBFN */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP23._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP23.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (RP24)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRO /* \LTRO */
                LMSL = PMLO /* \PMLO */
                LNSL = PNLO /* \PNLO */
                OBFZ = OBFO /* \OBFO */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                PMEP,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, 0x00, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = 0x01
                                If (LTRE)
                                {
                                    FUN6 = 0x01
                                }

                                If (OBFF)
                                {
                                    FUN4 = 0x01
                                }

                                If ((ECR1 == 0x01))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = 0x01
                                        FUN9 = 0x01
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP24._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == 0x00) || (LNSL == 0x00)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [0x00] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [0x01] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP24.LTRV */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (0x01)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == 0x01))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }

        Scope (SAT1)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PC00.SAT0.SDSM))
                {
                    Return (^^SAT0.SDSM (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (0x00)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (0x00)
                    {
                        Return (RPCD) /* \_SB_.PC00.SAT1.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PC00.SAT1.RDCA.CADR */
                    }
                    Case (0x01)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PC00.SAT1.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PC00.SAT1.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (0x00)
                    }

                }

                Return (0x00)
            }

            Method (RPD0, 1, Serialized)
            {
                RDCA (Arg0, 0xA4, 0xFFFFFFFC, 0x00, 0x01)
            }

            Method (RPD3, 1, Serialized)
            {
                RDCA (Arg0, 0xA4, 0xFFFFFFFC, 0x03, 0x01)
            }

            Device (PRT6)
            {
                Name (_ADR, 0x0006FFFF)  // _ADR: Address
            }

            Device (PRT7)
            {
                Name (_ADR, 0x0007FFFF)  // _ADR: Address
            }
        }

        Scope (SAT2)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PC00.SAT0.SDSM))
                {
                    Return (^^SAT0.SDSM (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (0x00)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (0x00)
                    {
                        Return (RPCD) /* \_SB_.PC00.SAT2.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PC00.SAT2.RDCA.CADR */
                    }
                    Case (0x01)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PC00.SAT2.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PC00.SAT2.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (0x00)
                    }

                }

                Return (0x00)
            }

            Method (RPD0, 1, Serialized)
            {
                RDCA (Arg0, 0xA4, 0xFFFFFFFC, 0x00, 0x01)
            }

            Method (RPD3, 1, Serialized)
            {
                RDCA (Arg0, 0xA4, 0xFFFFFFFC, 0x03, 0x01)
            }
        }

        Scope (TERM)
        {
            Name (_HID, "INT343D")  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFE03C000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y06)
                {
                    0x00000012,
                }
            })
            CreateDWordField (RBUF, \_SB.PC00.TERM._Y06._INT, IRQN)  // _INT: Interrupts
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                IRQN = TIRQ /* \TIRQ */
                Return (RBUF) /* \_SB_.PC00.TERM.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TAEN == 0x00))
                {
                    Return (0x00)
                }

                If ((TIRQ == 0x00))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (LPD3, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC = 0x03
            Local0 = PMEC /* \_SB_.PC00.LPD3.PMEC */
        }

        Method (LPD0, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC &= 0xFFFF7FFC
            Local0 = PMEC /* \_SB_.PC00.LPD0.PMEC */
        }

        Method (LHRV, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x08), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                HRV,    8
            }

            Return (HRV) /* \_SB_.PC00.LHRV.HRV_ */
        }

        Method (GETD, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            Return ((PMEC & 0x03))
        }

        Method (LCRS, 3, Serialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y07)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y08)
                {
                    0x00000014,
                }
            })
            CreateDWordField (RBUF, \_SB.PC00.LCRS._Y07._BAS, BVAL)  // _BAS: Base Address
            CreateDWordField (RBUF, \_SB.PC00.LCRS._Y07._LEN, BLEN)  // _LEN: Length
            CreateDWordField (RBUF, \_SB.PC00.LCRS._Y08._INT, IRQN)  // _INT: Interrupts
            BVAL = Arg1
            IRQN = Arg2
            If ((Arg0 == 0x04))
            {
                BLEN = 0x08
            }

            Return (RBUF) /* \_SB_.PC00.LCRS.RBUF */
        }

        Method (LSTA, 1, Serialized)
        {
            If ((((Arg0 == 0x00) || (Arg0 == 0x03)) || (Arg0 == 0x02)))
            {
                Return (0x00)
            }

            If ((OSYS < 0x07DC))
            {
                Return (0x00)
            }

            Return (0x0F)
        }

        Method (GIRQ, 1, Serialized)
        {
            Return ((0x18 + (Arg0 % 0x60)))
        }
    }

    Scope (_SB.PC00)
    {
        Device (SIRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (ADDB, 3, Serialized)
            {
                Name (BUFF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y09)
                })
                CreateDWordField (BUFF, \_SB.PC00.SIRC.ADDB._Y09._BAS, ADDR)  // _BAS: Base Address
                CreateDWordField (BUFF, \_SB.PC00.SIRC.ADDB._Y09._LEN, LENG)  // _LEN: Length
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((((Arg0 == 0x01) || (Arg0 == 0x03)) || (Arg0 == 0x04)))
                {
                    ADDR = Arg2
                    ConcatenateResTemplate (Local0, BUFF, Local0)
                }

                If ((Arg0 == 0x03))
                {
                    ADDR = Arg1
                    ConcatenateResTemplate (Local0, BUFF, Local0)
                }

                If ((Arg0 == 0x04))
                {
                    ADDR = (0x08 + Arg1)
                    LENG = 0x0FF8
                    ConcatenateResTemplate (Local0, BUFF, Local0)
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, ADDB (SMD0, SB00, SB10), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD1, SB01, SB11), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD2, SB02, SB12), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD3, SB03, SB13), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD4, SB04, SB14), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD5, SB05, SB15), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD6, SB06, SB16), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD7, SB07, SB17), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD8, SB08, SB18), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD9, SB09, SB19), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMDA, SB0A, SB1A), Local0)
                If ((^^GPI0._STA () == 0x00))
                {
                    ConcatenateResTemplate (Local0, ^^GPI0._CRS (), Local0)
                }

                Return (Local0)
            }
        }

        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((PCHV () == SPTH))
                {
                    If ((PCHG == 0x02))
                    {
                        Return ("INT3451")
                    }

                    Return ("INT345D")
                }

                Return ("INT344B")
            }

            Name (LINK, "\\_SB.PC00.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y0A)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y0B)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y0D)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y0C)
                    {
                        0x0000000E,
                    }
                })
                CreateDWordField (RBUF, \_SB.PC00.GPI0._CRS._Y0A._BAS, COM0)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PC00.GPI0._CRS._Y0B._BAS, COM1)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PC00.GPI0._CRS._Y0C._INT, IRQN)  // _INT: Interrupts
                COM0 = (SBRG + 0x00AF0000)
                COM1 = (SBRG + 0x00AE0000)
                CreateDWordField (RBUF, \_SB.PC00.GPI0._CRS._Y0D._BAS, COM3)  // _BAS: Base Address
                COM3 = (SBRG + 0x00AC0000)
                IRQN = SGIR /* \SGIR */
                Return (RBUF) /* \_SB_.PC00.GPI0._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SBRG == 0x00))
                {
                    Return (0x00)
                }

                If ((GPEN == 0x00))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (I2C0)
        {
            Name (LINK, "\\_SB.PC00.I2C0")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB10))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB10)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB10)
            }

            Name (_HID, "INT3442")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB10))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD0, SB00, SIR0))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD0))
            }

            Name (_ADR, 0x00150000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (I2C1)
        {
            Name (LINK, "\\_SB.PC00.I2C1")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB11))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB11)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB11)
            }

            Name (_HID, "INT3443")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB11))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD1, SB01, SIR1))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD1))
            }

            Name (_ADR, 0x00150001)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (I2C2)
        {
            Name (LINK, "\\_SB.PC00.I2C2")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB12))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB12)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB12)
            }

            Name (_HID, "INT3444")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB12))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD2, SB02, SIR2))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD2))
            }

            Name (_ADR, 0x00150002)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (I2C3)
        {
            Name (LINK, "\\_SB.PC00.I2C3")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB13))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB13)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB13)
            }

            Name (_HID, "INT3445")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB13))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD3, SB03, SIR3))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD3))
            }

            Name (_ADR, 0x00150003)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (I2C4)
        {
            Name (LINK, "\\_SB.PC00.I2C4")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB14))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB14)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB14)
            }

            Name (_HID, "INT3446")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB14))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD4, SB04, SIR4))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD4))
            }

            Name (_ADR, 0x00190002)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (I2C5)
        {
            Name (LINK, "\\_SB.PC00.I2C5")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB15))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB15)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB15)
            }

            Name (_HID, "INT3447")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB15))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD5, SB05, SIR5))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD5))
            }

            Name (_ADR, 0x00190001)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (SPI0)
        {
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB16))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB16)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB16)
            }

            Name (_HID, "INT3440")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB16))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD6, SB06, SIR6))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD6))
            }

            Name (_ADR, 0x001E0002)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (SPI1)
        {
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB17))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB17)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB17)
            }

            Name (_HID, "INT3441")  // _HID: Hardware ID
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB17))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD7, SB07, SIR7))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD7))
            }

            Name (_ADR, 0x001E0003)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA00)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((SMD8 == 0x04))
                {
                    Return (0x020CD041)
                }
                Else
                {
                    Return ("INT3448")
                }
            }

            Name (_UID, "SerialIoUart0")  // _UID: Unique ID
            Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB18))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD8, SB08, SIR8))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD8))
            }

            Name (_ADR, 0x001E0000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB18))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB18)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB18)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA01)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((SMD9 == 0x04))
                {
                    Return (0x020CD041)
                }
                Else
                {
                    Return ("INT3449")
                }
            }

            Name (_UID, "SerialIoUart1")  // _UID: Unique ID
            Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB19))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMD9, SB09, SIR9))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMD9))
            }

            Name (_ADR, 0x001E0001)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB19))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB19)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB19)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA02)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((SMDA == 0x04))
                {
                    Return (0x020CD041)
                }
                Else
                {
                    Return ("INT344A")
                }
            }

            Name (_UID, "SerialIoUart2")  // _UID: Unique ID
            Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
            Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
            {
                Return (LHRV (SB1A))
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (SMDA, SB0A, SIRA))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (SMDA))
            }

            Name (_ADR, 0x00190000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (0x00)
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB1A))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB1A)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB1A)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x0208)
        Field (ITSS, ByteAcc, NoLock, Preserve)
        {
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
            Offset (0x200), 
                ,   1, 
                ,   1, 
            SCGE,   1
        }
    }

    Method (ADBG, 1, Serialized)
    {
        Return (0x00)
    }

    Scope (_SB.PC01.BR1A)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC01.BR1B)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC01.BR1C)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC01.BR1D)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC02.BR2A)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC02.BR2B)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC02.BR2C)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC02.BR2D)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC03.BR3A)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC03.BR3B)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC03.BR3C)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC03.BR3D)
    {
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = 0x01
        }

        Device (PEGP)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (PCIS, PCI_Config, 0x00, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_GPE)
    {
        OperationRegion (TCOS, SystemIO, 0x0404, 0x02)
        Field (TCOS, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
                ,   1, 
            DSCI,   1
        }

        Method (NTFC, 2, NotSerialized)
        {
            If ((Arg0 & 0x01))
            {
                Notify (\_SB.SCK0, Arg1)
            }
        }

        Method (NTFI, 2, NotSerialized)
        {
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((SCI0 == 0x03))
            {
                NTFC (SCI2, 0x03)
                SCI0 = 0x00
            }
            Else
            {
                NTFC (CPHP, 0x00)
                NTFI (IIOP, 0x00)
                MEBC = 0x00
                CPHP = 0x00
                IIOP = 0x00
            }

            GPEC = 0x00
            SGPS = 0x01
            Scope (\_GPE)
            {
                Method (HLVT, 0, NotSerialized)
                {
                    If ((HWPI & 0x01))
                    {
                        If ((PRBM & 0x01))
                        {
                            Notify (\_SB.SCK0.CP00, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP01, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP02, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP03, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP04, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP05, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP06, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP07, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP08, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP09, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP0A, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP0B, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP0C, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP0D, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP0E, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP0F, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP10, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP11, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP12, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP13, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP14, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP15, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP16, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP17, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP18, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP19, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP1A, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP1B, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP1C, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP1D, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP1E, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP1F, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP20, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP21, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP22, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP23, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP24, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP25, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP26, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP27, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP28, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP29, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP2A, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP2B, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP2C, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP2D, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP2E, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP2F, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP30, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP31, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP32, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP33, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP34, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP35, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP36, 0x83) // Guaranteed Change
                            Notify (\_SB.SCK0.CP37, 0x83) // Guaranteed Change
                        }
                    }
                }
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0xC8)
            IO80 = 0x01
            Sleep (0x0A)
            Local1 = 0x00
            If ((\_SB.PC01.BR1A.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x01
                Notify (\_SB.PC01.BR1A, Local0)
            }

            If ((\_SB.PC01.BR1B.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x02
                Notify (\_SB.PC01.BR1B, Local0)
            }

            If ((\_SB.PC01.BR1C.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x03
                Notify (\_SB.PC01.BR1C, Local0)
            }

            If ((\_SB.PC01.BR1D.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x04
                Notify (\_SB.PC01.BR1D, Local0)
            }

            If ((\_SB.PC02.BR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x05
                Notify (\_SB.PC02.BR2A, Local0)
            }

            If ((\_SB.PC02.BR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x06
                Notify (\_SB.PC02.BR2B, Local0)
            }

            If ((\_SB.PC02.BR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x07
                Notify (\_SB.PC02.BR2C, Local0)
            }

            If ((\_SB.PC02.BR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x08
                Notify (\_SB.PC02.BR2D, Local0)
            }

            If ((\_SB.PC03.BR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3A.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3A.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x09
                Notify (\_SB.PC03.BR3A, Local0)
            }

            If ((\_SB.PC03.BR3B.PMEP == 0x0A))
            {
                Local0 = \_SB.PC03.BR3B.PMEH (0x0A)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3B.HPEH (0x0A)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0A
                Notify (\_SB.PC03.BR3B, Local0)
            }

            If ((\_SB.PC03.BR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3C.PMEH (0x0B)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3C.HPEH (0x0B)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0B
                Notify (\_SB.PC03.BR3C, Local0)
            }

            If ((\_SB.PC03.BR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3D.PMEH (0x0C)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3D.HPEH (0x0C)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0C
                Notify (\_SB.PC03.BR3D, Local0)
            }

            If ((Local0 != 0x00))
            {
                If ((Local1 == 0x01))
                {
                    \_SB.PC01.BR1A.PMES = 0x01
                    \_SB.PC01.BR1A.PMEP = 0x01
                }

                If ((Local1 == 0x02))
                {
                    \_SB.PC01.BR1B.PMES = 0x01
                    \_SB.PC01.BR1B.PMEP = 0x01
                }

                If ((Local1 == 0x03))
                {
                    \_SB.PC01.BR1C.PMES = 0x01
                    \_SB.PC01.BR1C.PMEP = 0x01
                }

                If ((Local1 == 0x04))
                {
                    \_SB.PC01.BR1D.PMES = 0x01
                    \_SB.PC01.BR1D.PMEP = 0x01
                }

                If ((Local1 == 0x05))
                {
                    \_SB.PC02.BR2A.PMES = 0x01
                    \_SB.PC02.BR2A.PMEP = 0x01
                }

                If ((Local1 == 0x06))
                {
                    \_SB.PC02.BR2B.PMES = 0x01
                    \_SB.PC02.BR2B.PMEP = 0x01
                }

                If ((Local1 == 0x07))
                {
                    \_SB.PC02.BR2C.PMES = 0x01
                    \_SB.PC02.BR2C.PMEP = 0x01
                }

                If ((Local1 == 0x08))
                {
                    \_SB.PC02.BR2D.PMES = 0x01
                    \_SB.PC02.BR2D.PMEP = 0x01
                }

                If ((Local1 == 0x09))
                {
                    \_SB.PC03.BR3A.PMES = 0x01
                    \_SB.PC03.BR3A.PMEP = 0x01
                }

                If ((Local1 == 0x0A))
                {
                    \_SB.PC03.BR3B.PMES = 0x01
                    \_SB.PC03.BR3B.PMEP = 0x01
                }

                If ((Local1 == 0x0B))
                {
                    \_SB.PC03.BR3C.PMES = 0x01
                    \_SB.PC03.BR3C.PMEP = 0x01
                }

                If ((Local1 == 0x0C))
                {
                    \_SB.PC03.BR3D.PMES = 0x01
                    \_SB.PC03.BR3D.PMEP = 0x01
                }

                PEES = 0x01
                PMEE = 0x00
            }
        }

        Method (_L69, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PC01.BR1A.HPME ()
            Notify (\_SB.PC01.BR1A, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1A.PEGP, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1B, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1C, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1D, 0x02) // Device Wake
            \_SB.PC01.BR1A.HPME ()
            Notify (\_SB.PC02.BR2A, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2A.PEGP, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2B, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2C, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2D, 0x02) // Device Wake
            \_SB.PC01.BR1A.HPME ()
            Notify (\_SB.PC03.BR3A, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3A.PEGP, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3B, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3C, 0x02) // Device Wake
            \_SB.PC01.BR1A.HPME ()
            Notify (\_SB.PC03.BR3D, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3D.PEGP, 0x02) // Device Wake
            Notify (\_SB.PC04.MCP0, 0x02) // Device Wake
            Notify (\_SB.PC05.MCP1, 0x02) // Device Wake
            If ((\_SB.PC00.RP01.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP01.HPME ()
                Notify (\_SB.PC00.RP01, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP02.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP02.HPME ()
                Notify (\_SB.PC00.RP02, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP03.HPME ()
                Notify (\_SB.PC00.RP03, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP04.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP04.HPME ()
                Notify (\_SB.PC00.RP04, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP05.HPME ()
                Notify (\_SB.PC00.RP05, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP06.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP06.HPME ()
                Notify (\_SB.PC00.RP06, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP07.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP07.HPME ()
                Notify (\_SB.PC00.RP07, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP08.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP08.HPME ()
                Notify (\_SB.PC00.RP08, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP09.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP09.HPME ()
                Notify (\_SB.PC00.RP09, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP10.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP10.HPME ()
                Notify (\_SB.PC00.RP10, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP11.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP11.HPME ()
                Notify (\_SB.PC00.RP11, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP12.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP12.HPME ()
                Notify (\_SB.PC00.RP12, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP13.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP13.HPME ()
                Notify (\_SB.PC00.RP13, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP14.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP14.HPME ()
                Notify (\_SB.PC00.RP14, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP15.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP15.HPME ()
                Notify (\_SB.PC00.RP15, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP16.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP16.HPME ()
                Notify (\_SB.PC00.RP16, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP17.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP17.HPME ()
                Notify (\_SB.PC00.RP17, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP18.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP18.HPME ()
                Notify (\_SB.PC00.RP18, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP19.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP19.HPME ()
                Notify (\_SB.PC00.RP19, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP20.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP20.HPME ()
                Notify (\_SB.PC00.RP20, 0x02) // Device Wake
            }
        }

        Method (_L6B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }
    }

    Scope (\)
    {
        Method (SSEG, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                SG00 = Arg1
            }

            If ((Arg0 == 0x01))
            {
                SG01 = Arg1
            }

            If ((Arg0 == 0x02))
            {
                SG02 = Arg1
            }

            If ((Arg0 == 0x03))
            {
                SG03 = Arg1
            }
        }

        Scope (_SB.PC00)
        {
            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }
        }

        Scope (_SB.PC01)
        {
            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }
        }

        Scope (_SB.PC02)
        {
            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }
        }

        Scope (_SB.PC03)
        {
            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }
        }

        Scope (_SB.PC04)
        {
            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }
        }

        Scope (_SB.PC05)
        {
            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }
        }
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y0E)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y0E._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PARC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PARC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PARC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PARC = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PBRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PBRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PBRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PBRC = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PCRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PCRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PCRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PCRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PDRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PDRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PDRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PDRC = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PERC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PERC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PERC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PERC = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PFRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PFRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PFRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PFRC = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PGRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PGRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PGRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PGRC = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PHRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PHRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PHRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PHRC = Local0
            }
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == 0x00))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == 0x00))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, 0x01)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y0F)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y10)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y11)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y12)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == 0x01))
            {
                CreateDWordField (CRST, \_SB.TPM._Y0F._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y0F._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y10._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y10._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == 0x01))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y11._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y11._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == 0x01))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y12._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y12._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == 0x00))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y12._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = 0x00
                LTFE = 0x00
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }

            Return (CRSI) /* \_SB_.TPM_.CRSI */
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == 0x00))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
            ElseIf ((TTDP == 0x01))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Return (0x00)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, 0x00)
            If ((ToInteger (Arg0) != 0x00)) {}
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    TIMR = 0x00
                    If ((AMDT == 0x01))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (0x01)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & 0x01)
                        ) == 0x03))
                    {
                        HCMD = 0x01
                    }
                    Else
                    {
                        FERR = 0x01
                        BEGN = 0x00
                    }

                    Return (Zero)
                }

            }

            Return (0x01)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != 0x01)) {}
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    Name (TPMV, Package (0x02)
                    {
                        0x01, 
                        Package (0x02)
                        {
                            0x01, 
                            0x20
                        }
                    })
                    If ((_STA () == 0x00))
                    {
                        Return (Package (0x01)
                        {
                            0x00
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        If ((PPIV == 0x00))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        SRSP = 0x00
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            0x00, 
                            0x00
                        })
                        PPI1 [0x01] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            0x00
                        })
                        SRSP = 0x00
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [0x01] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        FLAG = 0x07
                        OPTN = 0x00
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [0x01]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = 0x00
                    FLAG = 0x09
                    SRSP = 0x00
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = 0x00
                    FLAG = 0x09
                    SRSP = 0x00
                    SMI = OFST /* \OFST */
                }

            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : E3
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 4CEB6080
[028h 0040   4]                 DSDT Address : 4C10C268
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 04 [Enterprise Server]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001880
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000004C10C268
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001880

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 E3 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 80 60 EB 4C 68 C2 10 4C 00 04 09 00  // .....`.Lh..L....
    0030: B2 00 00 00 A0 A1 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 80 18 00 00 00 00 00 00 04 02 01 04 20 00 00 00  // ............ ...
    0060: 65 00 E9 03 00 04 10 00 00 00 0D 00 32 00 00 00  // e...........2...
    0070: A5 84 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 68 C2 10 4C  // ............h..L
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 80 00 01  // . ..............
    00E0: 80 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 2168D14A
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 4A D1 68 21 00 00 00 00  // FACS@...J.h!....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 82
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 82 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 55 43 51  // ....$FID.x.1AUCQ
    0030: 31 32 37 00 AF 7D 59 E5 35 65 31 8F 43 20 FB 0F  // 127..}Y.5e1.C ..
    0040: F4 F9 67 5B 30 35 00 31 33 00 30 31 00 32 37 00  // ..g[05.13.01.27.
    0050: E5 07 01 15 09 09 09 FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 000000004D91F8B0

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 000000004D91F8D0

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 1E 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 B0 F8 91 4D  // ...............M
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 D0 F8 91 4D  // ...............M
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 32
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 32 41 4C 41 53 4B 41  // HPET8....2ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 A7 86 80 00 00 00 00 00 00 D0 FE  // ... ............
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 00000094
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 82
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "SKL"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000060

[040h 0064   4]                    Residency : 00007530
[044h 0068   4]                      Latency : 00000BB8
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 7F [FunctionalFixedHW]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076   8]                      Address : 0000000000000632

[054h 0084   8]            Counter Frequency : 0000000000000000

[05Ch 0092   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096   4]                       Length : 00000038
[064h 0100   2]                    Unique ID : 0001
[066h 0102   2]                     Reserved : 0000
[068h 0104   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108  12]                Entry Trigger : [Generic Address Structure]
[06Ch 0108   1]                     Space ID : 7F [FunctionalFixedHW]
[06Dh 0109   1]                    Bit Width : 01
[06Eh 0110   1]                   Bit Offset : 02
[06Fh 0111   1]         Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112   8]                      Address : 0000000000000060

[078h 0120   4]                    Residency : 00007530
[07Ch 0124   4]                      Latency : 00000BB8
[080h 0128  12]            Residency Counter : [Generic Address Structure]
[080h 0128   1]                     Space ID : 00 [SystemMemory]
[081h 0129   1]                    Bit Width : 20
[082h 0130   1]                   Bit Offset : 00
[083h 0131   1]         Encoded Access Width : 03 [DWord Access:32]
[084h 0132   8]                      Address : 00000000FE00013C

[08Ch 0140   8]            Counter Frequency : 0000000000002710


Raw Table Data: Length 148 (0x94)

    0000: 4C 50 49 54 94 00 00 00 01 82 49 4E 54 45 4C 20  // LPIT......INTEL 
    0010: 53 4B 4C 00 00 00 00 00 00 00 00 00 4D 53 46 54  // SKL.........MSFT
    0020: 5F 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00  // _.......8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 60 00 00 00 00 00 00 00 30 75 00 00 B8 0B 00 00  // `.......0u......
    0080: 00 20 00 03 3C 01 00 FE 00 00 00 00 10 27 00 00  // . ..<........'..
    0090: 00 00 00 00                                      // ....


MCFG1
-----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 81
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 0000000060000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 81 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60  // ...............`
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MCFG2
-----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 0000000060000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 DF 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 00 00 00 00 00 00 00 00 00 00 00 60  // ... ...........`
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MIGT
----
[000h 0000   4]                    Signature : "MIGT"    
[004h 0004   4]                 Table Length : 00000040
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013


**** Unknown ACPI table signature [MIGT]


Raw Table Data: Length 64 (0x40)

    0000: 4D 49 47 54 40 00 00 00 01 2F 41 4C 41 53 4B 41  // MIGT@..../ALASKA
    0010: 41 20 4D 20 49 20 00 00 00 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 08 00 00 B2 00 00 00 00 00 00 00  // ... ............
    0030: FD 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00  // .....@..........


MSCT
----
[000h 0000   4]                    Signature : "MSCT"    [Maximum System Characteristics Table]
[004h 0004   4]                 Table Length : 0000004E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 77
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   4]             Proximity Offset : 00000038
[028h 0040   4]        Max Proximity Domains : 00000000
[02Ch 0044   4]            Max Clock Domains : 00000000
[030h 0048   8]         Max Physical Address : 00000FFFFFFFFFFF

[038h 0056   1]                     Revision : 01
[039h 0057   1]                       Length : 16
[03Ah 0058   4]           Domain Range Start : 00000000
[03Eh 0062   4]             Domain Range End : 00000000
[042h 0066   4]           Processor Capacity : 00000038
[046h 0070   8]              Memory Capacity : 00000FFFFFFFFFFF

Raw Table Data: Length 78 (0x4E)

    0000: 4D 53 43 54 4E 00 00 00 01 77 41 4C 41 53 4B 41  // MSCTN....wALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 38 00 00 00 00 00 00 00 00 00 00 00  // ... 8...........
    0030: FF FF FF FF FF 0F 00 00 01 16 00 00 00 00 00 00  // ................
    0040: 00 00 38 00 00 00 FF FF FF FF FF 0F 00 00        // ..8...........


NITR
----
[000h 0000   4]                    Signature : "NITR"    
[004h 0004   4]                 Table Length : 00000071
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013


**** Unknown ACPI table signature [NITR]


Raw Table Data: Length 113 (0x71)

    0000: 4E 49 54 52 71 00 00 00 02 9F 41 4C 41 53 4B 41  // NITRq.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 10 4C 04 5C 5F 53 42 5F 5B 82 43 04  // ... .L.\_SB_[.C.
    0030: 49 4E 54 53 08 5F 48 49 44 0C 25 D4 35 10 08 5F  // INTS._HID.%.5.._
    0040: 53 54 52 11 2D 0A 2A 49 00 6E 00 74 00 65 00 6C  // STR.-.*I.n.t.e.l
    0050: 00 20 00 4E 00 69 00 74 00 72 00 6F 00 75 00 73  // . .N.i.t.r.o.u.s
    0060: 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00 00  // . .D.e.v.i.c.e..
    0070: 00                                               // .


OEM1
----
DefinitionBlock ("", "OEM1", 2, "INTEL", "CPU EIST", 0x00003000)
{
    External (_SB_.SCK0.CP00, DeviceObj)
    External (_SB_.SCK0.CP01, DeviceObj)
    External (_SB_.SCK0.CP02, DeviceObj)
    External (_SB_.SCK0.CP03, DeviceObj)
    External (_SB_.SCK0.CP04, DeviceObj)
    External (_SB_.SCK0.CP05, DeviceObj)
    External (_SB_.SCK0.CP06, DeviceObj)
    External (_SB_.SCK0.CP07, DeviceObj)
    External (_SB_.SCK0.CP08, DeviceObj)
    External (_SB_.SCK0.CP09, DeviceObj)
    External (_SB_.SCK0.CP0A, DeviceObj)
    External (_SB_.SCK0.CP0B, DeviceObj)
    External (_SB_.SCK0.CP0C, DeviceObj)
    External (_SB_.SCK0.CP0D, DeviceObj)
    External (_SB_.SCK0.CP0E, DeviceObj)
    External (_SB_.SCK0.CP0F, DeviceObj)
    External (_SB_.SCK0.CP10, DeviceObj)
    External (_SB_.SCK0.CP11, DeviceObj)
    External (_SB_.SCK0.CP12, DeviceObj)
    External (_SB_.SCK0.CP13, DeviceObj)
    External (_SB_.SCK0.CP14, DeviceObj)
    External (_SB_.SCK0.CP15, DeviceObj)
    External (_SB_.SCK0.CP16, DeviceObj)
    External (_SB_.SCK0.CP17, DeviceObj)
    External (_SB_.SCK0.CP18, DeviceObj)
    External (_SB_.SCK0.CP19, DeviceObj)
    External (_SB_.SCK0.CP1A, DeviceObj)
    External (_SB_.SCK0.CP1B, DeviceObj)
    External (_SB_.SCK0.CP1C, DeviceObj)
    External (_SB_.SCK0.CP1D, DeviceObj)
    External (_SB_.SCK0.CP1E, DeviceObj)
    External (_SB_.SCK0.CP1F, DeviceObj)
    External (_SB_.SCK0.CP20, DeviceObj)
    External (_SB_.SCK0.CP21, DeviceObj)
    External (_SB_.SCK0.CP22, DeviceObj)
    External (_SB_.SCK0.CP23, DeviceObj)
    External (_SB_.SCK0.CP24, DeviceObj)
    External (_SB_.SCK0.CP25, DeviceObj)
    External (_SB_.SCK0.CP26, DeviceObj)
    External (_SB_.SCK0.CP27, DeviceObj)
    External (_SB_.SCK0.CP28, DeviceObj)
    External (_SB_.SCK0.CP29, DeviceObj)
    External (_SB_.SCK0.CP2A, DeviceObj)
    External (_SB_.SCK0.CP2B, DeviceObj)
    External (_SB_.SCK0.CP2C, DeviceObj)
    External (_SB_.SCK0.CP2D, DeviceObj)
    External (_SB_.SCK0.CP2E, DeviceObj)
    External (_SB_.SCK0.CP2F, DeviceObj)
    External (_SB_.SCK0.CP30, DeviceObj)
    External (_SB_.SCK0.CP31, DeviceObj)
    External (_SB_.SCK0.CP32, DeviceObj)
    External (_SB_.SCK0.CP33, DeviceObj)
    External (_SB_.SCK0.CP34, DeviceObj)
    External (_SB_.SCK0.CP35, DeviceObj)
    External (_SB_.SCK0.CP36, DeviceObj)
    External (_SB_.SCK0.CP37, DeviceObj)
    External (ACEN, FieldUnitObj)
    External (FGTS, FieldUnitObj)
    External (HWAL, FieldUnitObj)
    External (HWEN, FieldUnitObj)
    External (NPSS, PkgObj)
    External (PETE, IntObj)
    External (PSDC, PkgObj)
    External (PSDD, PkgObj)
    External (PSDE, PkgObj)
    External (PSEN, FieldUnitObj)
    External (PSLM, PkgObj)
    External (SCKN, FieldUnitObj)
    External (TSEN, FieldUnitObj)
    External (TYPE, FieldUnitObj)

    Scope (\_SB.SCK0.CP00)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP00.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP00.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP00.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP01)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP01.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP01.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP01.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP02)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP02.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP02.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP02.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP03)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP03.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP03.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP03.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP04)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP04.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP04.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP04.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP05)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP05.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP05.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP05.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP06)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP06.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP06.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP06.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP07)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP07.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP07.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP07.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP08)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP08.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP08.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP08.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP09)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP09.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP09.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP09.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP0A)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP0A.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP0A.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP0A.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP0B)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP0B.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP0B.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP0B.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP0C)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP0C.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP0C.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP0C.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP0D)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP0D.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP0D.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP0D.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP0E)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP0E.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP0E.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP0E.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP0F)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP0F.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP0F.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP0F.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP10)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP10.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP10.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP10.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP11)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP11.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP11.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP11.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP12)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP12.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP12.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP12.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP13)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP13.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP13.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP13.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP14)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP14.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP14.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP14.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP15)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP15.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP15.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP15.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP16)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP16.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP16.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP16.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP17)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP17.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP17.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP17.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP18)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP18.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP18.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP18.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP19)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP19.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP19.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP19.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP1A)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP1A.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP1A.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP1A.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP1B)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP1B.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP1B.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP1B.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP1C)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP1C.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP1C.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP1C.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP1D)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP1D.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP1D.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP1D.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP1E)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP1E.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP1E.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP1E.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP1F)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP1F.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP1F.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP1F.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP20)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP20.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP20.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP20.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP21)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP21.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP21.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP21.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP22)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP22.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP22.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP22.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP23)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP23.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP23.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP23.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP24)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP24.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP24.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP24.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP25)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP25.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP25.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP25.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP26)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP26.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP26.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP26.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP27)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP27.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP27.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP27.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP28)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP28.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP28.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP28.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP29)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP29.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP29.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP29.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP2A)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP2A.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP2A.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP2A.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP2B)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP2B.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP2B.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP2B.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP2C)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP2C.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP2C.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP2C.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP2D)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP2D.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP2D.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP2D.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP2E)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP2E.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP2E.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP2E.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP2F)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP2F.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP2F.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP2F.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP30)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP30.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP30.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP30.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP31)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP31.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP31.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP31.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP32)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP32.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP32.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP32.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP33)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP33.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP33.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP33.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP34)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP34.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP34.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP34.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP35)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP35.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP35.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP35.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP36)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP36.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP36.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP36.ZPSS */
        }
    }

    Scope (\_SB.SCK0.CP37)
    {
        Name (NCPU, 0x80000000)
        Name (DOMN, 0x80000000)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Name (NPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (SPCT, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000880, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000882, // Address
                    ,)
            }
        })
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (NPCT) /* \_SB_.SCK0.CP37.NPCT */
        }

        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (NPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000CE5, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x000222E0, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001F116, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0001DB8B, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0001B1A3, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00019D44, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000175B5, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00016280, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00013D39, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00012B24, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00010817, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000F71D, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000D63B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000C653, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000A78E, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000098B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((PSEN && (HWEN < 0x02)))
            {
                Return (NPSS) /* \_SB_.SCK0.CP37.NPSS */
            }

            Return (ZPSS) /* \_SB_.SCK0.CP37.ZPSS */
        }
    }
}



PCCT
----
[000h 0000   4]                    Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C6
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   4]        Flags (decoded below) : 00000001
                                    Platform : 1
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Generic Communications Subspace]
[031h 0049   1]                       Length : 3E

[032h 0050   6]                     Reserved : 000000000000
[038h 0056   8]                 Base Address : 000000004CEB6118
[040h 0064   8]               Address Length : 0000000000000888

[048h 0072  12]            Doorbell Register : [Generic Address Structure]
[048h 0072   1]                     Space ID : 01 [SystemIO]
[049h 0073   1]                    Bit Width : 08
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 01 [Byte Access:8]
[04Ch 0076   8]                      Address : 00000000000000B2

[054h 0084   8]                Preserve Mask : 0000000000000000
[05Ch 0092   8]                   Write Mask : 00000000000000FD
[064h 0100   4]              Command Latency : 00000000
[068h 0104   4]          Maximum Access Rate : 00000000
[06Ch 0108   2]      Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 01 C6 41 4C 41 53 4B 41  // PCCTn.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    0030: 00 3E 00 00 00 00 00 00 18 61 EB 4C 00 00 00 00  // .>.......a.L....
    0040: 88 08 00 00 00 00 00 00 01 08 00 01 B2 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 FD 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00        // ..............


RASF
----
[000h 0000   4]                    Signature : "RASF"    [RAS Features Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3A
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036  12]                   Channel ID : 01 00 00 00 00 00 00 00 00 00 00 00

Raw Table Data: Length 48 (0x30)

    0000: 52 41 53 46 30 00 00 00 01 3A 41 4C 41 53 4B 41  // RASF0....:ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............


SLIT
----
[000h 0000   4]                    Signature : "SLIT"    [System Locality Information Table]
[004h 0004   4]                 Table Length : 0000006C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   8]                   Localities : 0000000000000001
[02Ch 0044   1]                 Locality   0 : 0A

Raw Table Data: Length 108 (0x6C)

    0000: 53 4C 49 54 6C 00 00 00 01 E4 41 4C 41 53 4B 41  // SLITl.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 00 00 00 00 00 00 00 0A 00 00 00  // ... ............
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


SRAT
----
[000h 0000   4]                    Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004   4]                 Table Length : 00000A30
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : F2
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   4]               Table Revision : 00000001
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[031h 0049   1]                       Length : 10

[032h 0050   1]      Proximity Domain Low(8) : 00
[033h 0051   1]                      Apic ID : 00
[034h 0052   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[038h 0056   1]              Local Sapic EID : 00
[039h 0057   3]    Proximity Domain High(24) : 000000
[03Ch 0060   4]                 Clock Domain : 00000000

[040h 0064   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[041h 0065   1]                       Length : 10

[042h 0066   1]      Proximity Domain Low(8) : 00
[043h 0067   1]                      Apic ID : 02
[044h 0068   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[048h 0072   1]              Local Sapic EID : 00
[049h 0073   3]    Proximity Domain High(24) : 000000
[04Ch 0076   4]                 Clock Domain : 00000000

[050h 0080   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[051h 0081   1]                       Length : 10

[052h 0082   1]      Proximity Domain Low(8) : 00
[053h 0083   1]                      Apic ID : 04
[054h 0084   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[058h 0088   1]              Local Sapic EID : 00
[059h 0089   3]    Proximity Domain High(24) : 000000
[05Ch 0092   4]                 Clock Domain : 00000000

[060h 0096   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[061h 0097   1]                       Length : 10

[062h 0098   1]      Proximity Domain Low(8) : 00
[063h 0099   1]                      Apic ID : 06
[064h 0100   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[068h 0104   1]              Local Sapic EID : 00
[069h 0105   3]    Proximity Domain High(24) : 000000
[06Ch 0108   4]                 Clock Domain : 00000000

[070h 0112   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[071h 0113   1]                       Length : 10

[072h 0114   1]      Proximity Domain Low(8) : 00
[073h 0115   1]                      Apic ID : 08
[074h 0116   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[078h 0120   1]              Local Sapic EID : 00
[079h 0121   3]    Proximity Domain High(24) : 000000
[07Ch 0124   4]                 Clock Domain : 00000000

[080h 0128   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[081h 0129   1]                       Length : 10

[082h 0130   1]      Proximity Domain Low(8) : 00
[083h 0131   1]                      Apic ID : 10
[084h 0132   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[088h 0136   1]              Local Sapic EID : 00
[089h 0137   3]    Proximity Domain High(24) : 000000
[08Ch 0140   4]                 Clock Domain : 00000000

[090h 0144   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[091h 0145   1]                       Length : 10

[092h 0146   1]      Proximity Domain Low(8) : 00
[093h 0147   1]                      Apic ID : 12
[094h 0148   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[098h 0152   1]              Local Sapic EID : 00
[099h 0153   3]    Proximity Domain High(24) : 000000
[09Ch 0156   4]                 Clock Domain : 00000000

[0A0h 0160   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0A1h 0161   1]                       Length : 10

[0A2h 0162   1]      Proximity Domain Low(8) : 00
[0A3h 0163   1]                      Apic ID : 14
[0A4h 0164   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0A8h 0168   1]              Local Sapic EID : 00
[0A9h 0169   3]    Proximity Domain High(24) : 000000
[0ACh 0172   4]                 Clock Domain : 00000000

[0B0h 0176   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0B1h 0177   1]                       Length : 10

[0B2h 0178   1]      Proximity Domain Low(8) : 00
[0B3h 0179   1]                      Apic ID : 16
[0B4h 0180   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0B8h 0184   1]              Local Sapic EID : 00
[0B9h 0185   3]    Proximity Domain High(24) : 000000
[0BCh 0188   4]                 Clock Domain : 00000000

[0C0h 0192   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0C1h 0193   1]                       Length : 10

[0C2h 0194   1]      Proximity Domain Low(8) : 00
[0C3h 0195   1]                      Apic ID : 18
[0C4h 0196   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0C8h 0200   1]              Local Sapic EID : 00
[0C9h 0201   3]    Proximity Domain High(24) : 000000
[0CCh 0204   4]                 Clock Domain : 00000000

[0D0h 0208   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0D1h 0209   1]                       Length : 10

[0D2h 0210   1]      Proximity Domain Low(8) : 00
[0D3h 0211   1]                      Apic ID : 01
[0D4h 0212   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0D8h 0216   1]              Local Sapic EID : 00
[0D9h 0217   3]    Proximity Domain High(24) : 000000
[0DCh 0220   4]                 Clock Domain : 00000000

[0E0h 0224   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0E1h 0225   1]                       Length : 10

[0E2h 0226   1]      Proximity Domain Low(8) : 00
[0E3h 0227   1]                      Apic ID : 03
[0E4h 0228   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0E8h 0232   1]              Local Sapic EID : 00
[0E9h 0233   3]    Proximity Domain High(24) : 000000
[0ECh 0236   4]                 Clock Domain : 00000000

[0F0h 0240   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0F1h 0241   1]                       Length : 10

[0F2h 0242   1]      Proximity Domain Low(8) : 00
[0F3h 0243   1]                      Apic ID : 05
[0F4h 0244   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0F8h 0248   1]              Local Sapic EID : 00
[0F9h 0249   3]    Proximity Domain High(24) : 000000
[0FCh 0252   4]                 Clock Domain : 00000000

[100h 0256   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[101h 0257   1]                       Length : 10

[102h 0258   1]      Proximity Domain Low(8) : 00
[103h 0259   1]                      Apic ID : 07
[104h 0260   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[108h 0264   1]              Local Sapic EID : 00
[109h 0265   3]    Proximity Domain High(24) : 000000
[10Ch 0268   4]                 Clock Domain : 00000000

[110h 0272   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[111h 0273   1]                       Length : 10

[112h 0274   1]      Proximity Domain Low(8) : 00
[113h 0275   1]                      Apic ID : 09
[114h 0276   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[118h 0280   1]              Local Sapic EID : 00
[119h 0281   3]    Proximity Domain High(24) : 000000
[11Ch 0284   4]                 Clock Domain : 00000000

[120h 0288   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[121h 0289   1]                       Length : 10

[122h 0290   1]      Proximity Domain Low(8) : 00
[123h 0291   1]                      Apic ID : 11
[124h 0292   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[128h 0296   1]              Local Sapic EID : 00
[129h 0297   3]    Proximity Domain High(24) : 000000
[12Ch 0300   4]                 Clock Domain : 00000000

[130h 0304   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[131h 0305   1]                       Length : 10

[132h 0306   1]      Proximity Domain Low(8) : 00
[133h 0307   1]                      Apic ID : 13
[134h 0308   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[138h 0312   1]              Local Sapic EID : 00
[139h 0313   3]    Proximity Domain High(24) : 000000
[13Ch 0316   4]                 Clock Domain : 00000000

[140h 0320   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[141h 0321   1]                       Length : 10

[142h 0322   1]      Proximity Domain Low(8) : 00
[143h 0323   1]                      Apic ID : 15
[144h 0324   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[148h 0328   1]              Local Sapic EID : 00
[149h 0329   3]    Proximity Domain High(24) : 000000
[14Ch 0332   4]                 Clock Domain : 00000000

[150h 0336   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[151h 0337   1]                       Length : 10

[152h 0338   1]      Proximity Domain Low(8) : 00
[153h 0339   1]                      Apic ID : 17
[154h 0340   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[158h 0344   1]              Local Sapic EID : 00
[159h 0345   3]    Proximity Domain High(24) : 000000
[15Ch 0348   4]                 Clock Domain : 00000000

[160h 0352   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[161h 0353   1]                       Length : 10

[162h 0354   1]      Proximity Domain Low(8) : 00
[163h 0355   1]                      Apic ID : 19
[164h 0356   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[168h 0360   1]              Local Sapic EID : 00
[169h 0361   3]    Proximity Domain High(24) : 000000
[16Ch 0364   4]                 Clock Domain : 00000000

[170h 0368   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[171h 0369   1]                       Length : 10

[172h 0370   1]      Proximity Domain Low(8) : 00
[173h 0371   1]                      Apic ID : FF
[174h 0372   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[178h 0376   1]              Local Sapic EID : 00
[179h 0377   3]    Proximity Domain High(24) : 000000
[17Ch 0380   4]                 Clock Domain : 00000000

[180h 0384   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[181h 0385   1]                       Length : 10

[182h 0386   1]      Proximity Domain Low(8) : 00
[183h 0387   1]                      Apic ID : FF
[184h 0388   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[188h 0392   1]              Local Sapic EID : 00
[189h 0393   3]    Proximity Domain High(24) : 000000
[18Ch 0396   4]                 Clock Domain : 00000000

[190h 0400   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[191h 0401   1]                       Length : 10

[192h 0402   1]      Proximity Domain Low(8) : 00
[193h 0403   1]                      Apic ID : FF
[194h 0404   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[198h 0408   1]              Local Sapic EID : 00
[199h 0409   3]    Proximity Domain High(24) : 000000
[19Ch 0412   4]                 Clock Domain : 00000000

[1A0h 0416   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1A1h 0417   1]                       Length : 10

[1A2h 0418   1]      Proximity Domain Low(8) : 00
[1A3h 0419   1]                      Apic ID : FF
[1A4h 0420   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[1A8h 0424   1]              Local Sapic EID : 00
[1A9h 0425   3]    Proximity Domain High(24) : 000000
[1ACh 0428   4]                 Clock Domain : 00000000

[1B0h 0432   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1B1h 0433   1]                       Length : 10

[1B2h 0434   1]      Proximity Domain Low(8) : 00
[1B3h 0435   1]                      Apic ID : FF
[1B4h 0436   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[1B8h 0440   1]              Local Sapic EID : 00
[1B9h 0441   3]    Proximity Domain High(24) : 000000
[1BCh 0444   4]                 Clock Domain : 00000000

[1C0h 0448   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1C1h 0449   1]                       Length : 10

[1C2h 0450   1]      Proximity Domain Low(8) : 00
[1C3h 0451   1]                      Apic ID : FF
[1C4h 0452   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[1C8h 0456   1]              Local Sapic EID : 00
[1C9h 0457   3]    Proximity Domain High(24) : 000000
[1CCh 0460   4]                 Clock Domain : 00000000

[1D0h 0464   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1D1h 0465   1]                       Length : 10

[1D2h 0466   1]      Proximity Domain Low(8) : 00
[1D3h 0467   1]                      Apic ID : FF
[1D4h 0468   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[1D8h 0472   1]              Local Sapic EID : 00
[1D9h 0473   3]    Proximity Domain High(24) : 000000
[1DCh 0476   4]                 Clock Domain : 00000000

[1E0h 0480   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1E1h 0481   1]                       Length : 10

[1E2h 0482   1]      Proximity Domain Low(8) : 00
[1E3h 0483   1]                      Apic ID : FF
[1E4h 0484   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[1E8h 0488   1]              Local Sapic EID : 00
[1E9h 0489   3]    Proximity Domain High(24) : 000000
[1ECh 0492   4]                 Clock Domain : 00000000

[1F0h 0496   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1F1h 0497   1]                       Length : 10

[1F2h 0498   1]      Proximity Domain Low(8) : 00
[1F3h 0499   1]                      Apic ID : FF
[1F4h 0500   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[1F8h 0504   1]              Local Sapic EID : 00
[1F9h 0505   3]    Proximity Domain High(24) : 000000
[1FCh 0508   4]                 Clock Domain : 00000000

[200h 0512   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[201h 0513   1]                       Length : 10

[202h 0514   1]      Proximity Domain Low(8) : 00
[203h 0515   1]                      Apic ID : FF
[204h 0516   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[208h 0520   1]              Local Sapic EID : 00
[209h 0521   3]    Proximity Domain High(24) : 000000
[20Ch 0524   4]                 Clock Domain : 00000000

[210h 0528   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[211h 0529   1]                       Length : 10

[212h 0530   1]      Proximity Domain Low(8) : 00
[213h 0531   1]                      Apic ID : FF
[214h 0532   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[218h 0536   1]              Local Sapic EID : 00
[219h 0537   3]    Proximity Domain High(24) : 000000
[21Ch 0540   4]                 Clock Domain : 00000000

[220h 0544   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[221h 0545   1]                       Length : 10

[222h 0546   1]      Proximity Domain Low(8) : 00
[223h 0547   1]                      Apic ID : FF
[224h 0548   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[228h 0552   1]              Local Sapic EID : 00
[229h 0553   3]    Proximity Domain High(24) : 000000
[22Ch 0556   4]                 Clock Domain : 00000000

[230h 0560   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[231h 0561   1]                       Length : 10

[232h 0562   1]      Proximity Domain Low(8) : 00
[233h 0563   1]                      Apic ID : FF
[234h 0564   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[238h 0568   1]              Local Sapic EID : 00
[239h 0569   3]    Proximity Domain High(24) : 000000
[23Ch 0572   4]                 Clock Domain : 00000000

[240h 0576   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[241h 0577   1]                       Length : 10

[242h 0578   1]      Proximity Domain Low(8) : 00
[243h 0579   1]                      Apic ID : FF
[244h 0580   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[248h 0584   1]              Local Sapic EID : 00
[249h 0585   3]    Proximity Domain High(24) : 000000
[24Ch 0588   4]                 Clock Domain : 00000000

[250h 0592   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[251h 0593   1]                       Length : 10

[252h 0594   1]      Proximity Domain Low(8) : 00
[253h 0595   1]                      Apic ID : FF
[254h 0596   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[258h 0600   1]              Local Sapic EID : 00
[259h 0601   3]    Proximity Domain High(24) : 000000
[25Ch 0604   4]                 Clock Domain : 00000000

[260h 0608   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[261h 0609   1]                       Length : 10

[262h 0610   1]      Proximity Domain Low(8) : 00
[263h 0611   1]                      Apic ID : FF
[264h 0612   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[268h 0616   1]              Local Sapic EID : 00
[269h 0617   3]    Proximity Domain High(24) : 000000
[26Ch 0620   4]                 Clock Domain : 00000000

[270h 0624   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[271h 0625   1]                       Length : 10

[272h 0626   1]      Proximity Domain Low(8) : 00
[273h 0627   1]                      Apic ID : FF
[274h 0628   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[278h 0632   1]              Local Sapic EID : 00
[279h 0633   3]    Proximity Domain High(24) : 000000
[27Ch 0636   4]                 Clock Domain : 00000000

[280h 0640   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[281h 0641   1]                       Length : 10

[282h 0642   1]      Proximity Domain Low(8) : 00
[283h 0643   1]                      Apic ID : FF
[284h 0644   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[288h 0648   1]              Local Sapic EID : 00
[289h 0649   3]    Proximity Domain High(24) : 000000
[28Ch 0652   4]                 Clock Domain : 00000000

[290h 0656   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[291h 0657   1]                       Length : 10

[292h 0658   1]      Proximity Domain Low(8) : 00
[293h 0659   1]                      Apic ID : FF
[294h 0660   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[298h 0664   1]              Local Sapic EID : 00
[299h 0665   3]    Proximity Domain High(24) : 000000
[29Ch 0668   4]                 Clock Domain : 00000000

[2A0h 0672   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2A1h 0673   1]                       Length : 10

[2A2h 0674   1]      Proximity Domain Low(8) : 00
[2A3h 0675   1]                      Apic ID : FF
[2A4h 0676   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[2A8h 0680   1]              Local Sapic EID : 00
[2A9h 0681   3]    Proximity Domain High(24) : 000000
[2ACh 0684   4]                 Clock Domain : 00000000

[2B0h 0688   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2B1h 0689   1]                       Length : 10

[2B2h 0690   1]      Proximity Domain Low(8) : 00
[2B3h 0691   1]                      Apic ID : FF
[2B4h 0692   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[2B8h 0696   1]              Local Sapic EID : 00
[2B9h 0697   3]    Proximity Domain High(24) : 000000
[2BCh 0700   4]                 Clock Domain : 00000000

[2C0h 0704   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2C1h 0705   1]                       Length : 10

[2C2h 0706   1]      Proximity Domain Low(8) : 00
[2C3h 0707   1]                      Apic ID : FF
[2C4h 0708   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[2C8h 0712   1]              Local Sapic EID : 00
[2C9h 0713   3]    Proximity Domain High(24) : 000000
[2CCh 0716   4]                 Clock Domain : 00000000

[2D0h 0720   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2D1h 0721   1]                       Length : 10

[2D2h 0722   1]      Proximity Domain Low(8) : 00
[2D3h 0723   1]                      Apic ID : FF
[2D4h 0724   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[2D8h 0728   1]              Local Sapic EID : 00
[2D9h 0729   3]    Proximity Domain High(24) : 000000
[2DCh 0732   4]                 Clock Domain : 00000000

[2E0h 0736   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2E1h 0737   1]                       Length : 10

[2E2h 0738   1]      Proximity Domain Low(8) : 00
[2E3h 0739   1]                      Apic ID : FF
[2E4h 0740   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[2E8h 0744   1]              Local Sapic EID : 00
[2E9h 0745   3]    Proximity Domain High(24) : 000000
[2ECh 0748   4]                 Clock Domain : 00000000

[2F0h 0752   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2F1h 0753   1]                       Length : 10

[2F2h 0754   1]      Proximity Domain Low(8) : 00
[2F3h 0755   1]                      Apic ID : FF
[2F4h 0756   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[2F8h 0760   1]              Local Sapic EID : 00
[2F9h 0761   3]    Proximity Domain High(24) : 000000
[2FCh 0764   4]                 Clock Domain : 00000000

[300h 0768   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[301h 0769   1]                       Length : 10

[302h 0770   1]      Proximity Domain Low(8) : 00
[303h 0771   1]                      Apic ID : FF
[304h 0772   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[308h 0776   1]              Local Sapic EID : 00
[309h 0777   3]    Proximity Domain High(24) : 000000
[30Ch 0780   4]                 Clock Domain : 00000000

[310h 0784   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[311h 0785   1]                       Length : 10

[312h 0786   1]      Proximity Domain Low(8) : 00
[313h 0787   1]                      Apic ID : FF
[314h 0788   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[318h 0792   1]              Local Sapic EID : 00
[319h 0793   3]    Proximity Domain High(24) : 000000
[31Ch 0796   4]                 Clock Domain : 00000000

[320h 0800   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[321h 0801   1]                       Length : 10

[322h 0802   1]      Proximity Domain Low(8) : 00
[323h 0803   1]                      Apic ID : FF
[324h 0804   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[328h 0808   1]              Local Sapic EID : 00
[329h 0809   3]    Proximity Domain High(24) : 000000
[32Ch 0812   4]                 Clock Domain : 00000000

[330h 0816   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[331h 0817   1]                       Length : 10

[332h 0818   1]      Proximity Domain Low(8) : 00
[333h 0819   1]                      Apic ID : FF
[334h 0820   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[338h 0824   1]              Local Sapic EID : 00
[339h 0825   3]    Proximity Domain High(24) : 000000
[33Ch 0828   4]                 Clock Domain : 00000000

[340h 0832   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[341h 0833   1]                       Length : 10

[342h 0834   1]      Proximity Domain Low(8) : 00
[343h 0835   1]                      Apic ID : FF
[344h 0836   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[348h 0840   1]              Local Sapic EID : 00
[349h 0841   3]    Proximity Domain High(24) : 000000
[34Ch 0844   4]                 Clock Domain : 00000000

[350h 0848   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[351h 0849   1]                       Length : 10

[352h 0850   1]      Proximity Domain Low(8) : 00
[353h 0851   1]                      Apic ID : FF
[354h 0852   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[358h 0856   1]              Local Sapic EID : 00
[359h 0857   3]    Proximity Domain High(24) : 000000
[35Ch 0860   4]                 Clock Domain : 00000000

[360h 0864   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[361h 0865   1]                       Length : 10

[362h 0866   1]      Proximity Domain Low(8) : 00
[363h 0867   1]                      Apic ID : FF
[364h 0868   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[368h 0872   1]              Local Sapic EID : 00
[369h 0873   3]    Proximity Domain High(24) : 000000
[36Ch 0876   4]                 Clock Domain : 00000000

[370h 0880   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[371h 0881   1]                       Length : 10

[372h 0882   1]      Proximity Domain Low(8) : 00
[373h 0883   1]                      Apic ID : FF
[374h 0884   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[378h 0888   1]              Local Sapic EID : 00
[379h 0889   3]    Proximity Domain High(24) : 000000
[37Ch 0892   4]                 Clock Domain : 00000000

[380h 0896   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[381h 0897   1]                       Length : 10

[382h 0898   1]      Proximity Domain Low(8) : 00
[383h 0899   1]                      Apic ID : FF
[384h 0900   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[388h 0904   1]              Local Sapic EID : 00
[389h 0905   3]    Proximity Domain High(24) : 000000
[38Ch 0908   4]                 Clock Domain : 00000000

[390h 0912   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[391h 0913   1]                       Length : 10

[392h 0914   1]      Proximity Domain Low(8) : 00
[393h 0915   1]                      Apic ID : FF
[394h 0916   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[398h 0920   1]              Local Sapic EID : 00
[399h 0921   3]    Proximity Domain High(24) : 000000
[39Ch 0924   4]                 Clock Domain : 00000000

[3A0h 0928   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3A1h 0929   1]                       Length : 10

[3A2h 0930   1]      Proximity Domain Low(8) : 00
[3A3h 0931   1]                      Apic ID : FF
[3A4h 0932   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[3A8h 0936   1]              Local Sapic EID : 00
[3A9h 0937   3]    Proximity Domain High(24) : 000000
[3ACh 0940   4]                 Clock Domain : 00000000

[3B0h 0944   1]                Subtable Type : 01 [Memory Affinity]
[3B1h 0945   1]                       Length : 28

[3B2h 0946   4]             Proximity Domain : 00000000
[3B6h 0950   2]                    Reserved1 : 0000
[3B8h 0952   8]                 Base Address : 0000000000000000
[3C0h 0960   8]               Address Length : 0000000100000000
[3C8h 0968   4]                    Reserved2 : 00000000
[3CCh 0972   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[3D0h 0976   8]                    Reserved3 : 0000000000000000

[3D8h 0984   1]                Subtable Type : 01 [Memory Affinity]
[3D9h 0985   1]                       Length : 28

[3DAh 0986   4]             Proximity Domain : 00000000
[3DEh 0990   2]                    Reserved1 : 0000
[3E0h 0992   8]                 Base Address : 0000000100000000
[3E8h 1000   8]               Address Length : 00000007A0000000
[3F0h 1008   4]                    Reserved2 : 00000000
[3F4h 1012   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[3F8h 1016   8]                    Reserved3 : 0000000000000000

[400h 1024   1]                Subtable Type : 01 [Memory Affinity]
[401h 1025   1]                       Length : 28

[402h 1026   4]             Proximity Domain : 00000000
[406h 1030   2]                    Reserved1 : 0000
[408h 1032   8]                 Base Address : 0000000000000000
[410h 1040   8]               Address Length : 0000000000000000
[418h 1048   4]                    Reserved2 : 00000000
[41Ch 1052   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[420h 1056   8]                    Reserved3 : 0000000000000000

[428h 1064   1]                Subtable Type : 01 [Memory Affinity]
[429h 1065   1]                       Length : 28

[42Ah 1066   4]             Proximity Domain : 00000000
[42Eh 1070   2]                    Reserved1 : 0000
[430h 1072   8]                 Base Address : 0000000000000000
[438h 1080   8]               Address Length : 0000000000000000
[440h 1088   4]                    Reserved2 : 00000000
[444h 1092   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[448h 1096   8]                    Reserved3 : 0000000000000000

[450h 1104   1]                Subtable Type : 01 [Memory Affinity]
[451h 1105   1]                       Length : 28

[452h 1106   4]             Proximity Domain : 00000000
[456h 1110   2]                    Reserved1 : 0000
[458h 1112   8]                 Base Address : 0000000000000000
[460h 1120   8]               Address Length : 0000000000000000
[468h 1128   4]                    Reserved2 : 00000000
[46Ch 1132   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[470h 1136   8]                    Reserved3 : 0000000000000000

[478h 1144   1]                Subtable Type : 01 [Memory Affinity]
[479h 1145   1]                       Length : 28

[47Ah 1146   4]             Proximity Domain : 00000000
[47Eh 1150   2]                    Reserved1 : 0000
[480h 1152   8]                 Base Address : 0000000000000000
[488h 1160   8]               Address Length : 0000000000000000
[490h 1168   4]                    Reserved2 : 00000000
[494h 1172   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[498h 1176   8]                    Reserved3 : 0000000000000000

[4A0h 1184   1]                Subtable Type : 01 [Memory Affinity]
[4A1h 1185   1]                       Length : 28

[4A2h 1186   4]             Proximity Domain : 00000000
[4A6h 1190   2]                    Reserved1 : 0000
[4A8h 1192   8]                 Base Address : 0000000000000000
[4B0h 1200   8]               Address Length : 0000000000000000
[4B8h 1208   4]                    Reserved2 : 00000000
[4BCh 1212   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[4C0h 1216   8]                    Reserved3 : 0000000000000000

[4C8h 1224   1]                Subtable Type : 01 [Memory Affinity]
[4C9h 1225   1]                       Length : 28

[4CAh 1226   4]             Proximity Domain : 00000000
[4CEh 1230   2]                    Reserved1 : 0000
[4D0h 1232   8]                 Base Address : 0000000000000000
[4D8h 1240   8]               Address Length : 0000000000000000
[4E0h 1248   4]                    Reserved2 : 00000000
[4E4h 1252   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[4E8h 1256   8]                    Reserved3 : 0000000000000000

[4F0h 1264   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[4F1h 1265   1]                       Length : 18

[4F2h 1266   2]                    Reserved1 : 0000
[4F4h 1268   4]             Proximity Domain : 00000000
[4F8h 1272   4]                      Apic ID : FFFFFFFF
[4FCh 1276   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[500h 1280   4]                 Clock Domain : 00000000
[504h 1284   4]                    Reserved2 : 00000000

[508h 1288   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[509h 1289   1]                       Length : 18

[50Ah 1290   2]                    Reserved1 : 0000
[50Ch 1292   4]             Proximity Domain : 00000000
[510h 1296   4]                      Apic ID : FFFFFFFF
[514h 1300   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[518h 1304   4]                 Clock Domain : 00000000
[51Ch 1308   4]                    Reserved2 : 00000000

[520h 1312   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[521h 1313   1]                       Length : 18

[522h 1314   2]                    Reserved1 : 0000
[524h 1316   4]             Proximity Domain : 00000000
[528h 1320   4]                      Apic ID : FFFFFFFF
[52Ch 1324   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[530h 1328   4]                 Clock Domain : 00000000
[534h 1332   4]                    Reserved2 : 00000000

[538h 1336   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[539h 1337   1]                       Length : 18

[53Ah 1338   2]                    Reserved1 : 0000
[53Ch 1340   4]             Proximity Domain : 00000000
[540h 1344   4]                      Apic ID : FFFFFFFF
[544h 1348   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[548h 1352   4]                 Clock Domain : 00000000
[54Ch 1356   4]                    Reserved2 : 00000000

[550h 1360   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[551h 1361   1]                       Length : 18

[552h 1362   2]                    Reserved1 : 0000
[554h 1364   4]             Proximity Domain : 00000000
[558h 1368   4]                      Apic ID : FFFFFFFF
[55Ch 1372   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[560h 1376   4]                 Clock Domain : 00000000
[564h 1380   4]                    Reserved2 : 00000000

[568h 1384   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[569h 1385   1]                       Length : 18

[56Ah 1386   2]                    Reserved1 : 0000
[56Ch 1388   4]             Proximity Domain : 00000000
[570h 1392   4]                      Apic ID : FFFFFFFF
[574h 1396   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[578h 1400   4]                 Clock Domain : 00000000
[57Ch 1404   4]                    Reserved2 : 00000000

[580h 1408   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[581h 1409   1]                       Length : 18

[582h 1410   2]                    Reserved1 : 0000
[584h 1412   4]             Proximity Domain : 00000000
[588h 1416   4]                      Apic ID : FFFFFFFF
[58Ch 1420   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[590h 1424   4]                 Clock Domain : 00000000
[594h 1428   4]                    Reserved2 : 00000000

[598h 1432   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[599h 1433   1]                       Length : 18

[59Ah 1434   2]                    Reserved1 : 0000
[59Ch 1436   4]             Proximity Domain : 00000000
[5A0h 1440   4]                      Apic ID : FFFFFFFF
[5A4h 1444   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5A8h 1448   4]                 Clock Domain : 00000000
[5ACh 1452   4]                    Reserved2 : 00000000

[5B0h 1456   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[5B1h 1457   1]                       Length : 18

[5B2h 1458   2]                    Reserved1 : 0000
[5B4h 1460   4]             Proximity Domain : 00000000
[5B8h 1464   4]                      Apic ID : FFFFFFFF
[5BCh 1468   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5C0h 1472   4]                 Clock Domain : 00000000
[5C4h 1476   4]                    Reserved2 : 00000000

[5C8h 1480   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[5C9h 1481   1]                       Length : 18

[5CAh 1482   2]                    Reserved1 : 0000
[5CCh 1484   4]             Proximity Domain : 00000000
[5D0h 1488   4]                      Apic ID : FFFFFFFF
[5D4h 1492   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5D8h 1496   4]                 Clock Domain : 00000000
[5DCh 1500   4]                    Reserved2 : 00000000

[5E0h 1504   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[5E1h 1505   1]                       Length : 18

[5E2h 1506   2]                    Reserved1 : 0000
[5E4h 1508   4]             Proximity Domain : 00000000
[5E8h 1512   4]                      Apic ID : FFFFFFFF
[5ECh 1516   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5F0h 1520   4]                 Clock Domain : 00000000
[5F4h 1524   4]                    Reserved2 : 00000000

[5F8h 1528   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[5F9h 1529   1]                       Length : 18

[5FAh 1530   2]                    Reserved1 : 0000
[5FCh 1532   4]             Proximity Domain : 00000000
[600h 1536   4]                      Apic ID : FFFFFFFF
[604h 1540   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[608h 1544   4]                 Clock Domain : 00000000
[60Ch 1548   4]                    Reserved2 : 00000000

[610h 1552   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[611h 1553   1]                       Length : 18

[612h 1554   2]                    Reserved1 : 0000
[614h 1556   4]             Proximity Domain : 00000000
[618h 1560   4]                      Apic ID : FFFFFFFF
[61Ch 1564   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[620h 1568   4]                 Clock Domain : 00000000
[624h 1572   4]                    Reserved2 : 00000000

[628h 1576   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[629h 1577   1]                       Length : 18

[62Ah 1578   2]                    Reserved1 : 0000
[62Ch 1580   4]             Proximity Domain : 00000000
[630h 1584   4]                      Apic ID : FFFFFFFF
[634h 1588   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[638h 1592   4]                 Clock Domain : 00000000
[63Ch 1596   4]                    Reserved2 : 00000000

[640h 1600   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[641h 1601   1]                       Length : 18

[642h 1602   2]                    Reserved1 : 0000
[644h 1604   4]             Proximity Domain : 00000000
[648h 1608   4]                      Apic ID : FFFFFFFF
[64Ch 1612   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[650h 1616   4]                 Clock Domain : 00000000
[654h 1620   4]                    Reserved2 : 00000000

[658h 1624   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[659h 1625   1]                       Length : 18

[65Ah 1626   2]                    Reserved1 : 0000
[65Ch 1628   4]             Proximity Domain : 00000000
[660h 1632   4]                      Apic ID : FFFFFFFF
[664h 1636   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[668h 1640   4]                 Clock Domain : 00000000
[66Ch 1644   4]                    Reserved2 : 00000000

[670h 1648   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[671h 1649   1]                       Length : 18

[672h 1650   2]                    Reserved1 : 0000
[674h 1652   4]             Proximity Domain : 00000000
[678h 1656   4]                      Apic ID : FFFFFFFF
[67Ch 1660   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[680h 1664   4]                 Clock Domain : 00000000
[684h 1668   4]                    Reserved2 : 00000000

[688h 1672   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[689h 1673   1]                       Length : 18

[68Ah 1674   2]                    Reserved1 : 0000
[68Ch 1676   4]             Proximity Domain : 00000000
[690h 1680   4]                      Apic ID : FFFFFFFF
[694h 1684   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[698h 1688   4]                 Clock Domain : 00000000
[69Ch 1692   4]                    Reserved2 : 00000000

[6A0h 1696   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[6A1h 1697   1]                       Length : 18

[6A2h 1698   2]                    Reserved1 : 0000
[6A4h 1700   4]             Proximity Domain : 00000000
[6A8h 1704   4]                      Apic ID : FFFFFFFF
[6ACh 1708   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[6B0h 1712   4]                 Clock Domain : 00000000
[6B4h 1716   4]                    Reserved2 : 00000000

[6B8h 1720   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[6B9h 1721   1]                       Length : 18

[6BAh 1722   2]                    Reserved1 : 0000
[6BCh 1724   4]             Proximity Domain : 00000000
[6C0h 1728   4]                      Apic ID : FFFFFFFF
[6C4h 1732   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[6C8h 1736   4]                 Clock Domain : 00000000
[6CCh 1740   4]                    Reserved2 : 00000000

[6D0h 1744   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[6D1h 1745   1]                       Length : 18

[6D2h 1746   2]                    Reserved1 : 0000
[6D4h 1748   4]             Proximity Domain : 00000000
[6D8h 1752   4]                      Apic ID : FFFFFFFF
[6DCh 1756   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[6E0h 1760   4]                 Clock Domain : 00000000
[6E4h 1764   4]                    Reserved2 : 00000000

[6E8h 1768   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[6E9h 1769   1]                       Length : 18

[6EAh 1770   2]                    Reserved1 : 0000
[6ECh 1772   4]             Proximity Domain : 00000000
[6F0h 1776   4]                      Apic ID : FFFFFFFF
[6F4h 1780   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[6F8h 1784   4]                 Clock Domain : 00000000
[6FCh 1788   4]                    Reserved2 : 00000000

[700h 1792   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[701h 1793   1]                       Length : 18

[702h 1794   2]                    Reserved1 : 0000
[704h 1796   4]             Proximity Domain : 00000000
[708h 1800   4]                      Apic ID : FFFFFFFF
[70Ch 1804   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[710h 1808   4]                 Clock Domain : 00000000
[714h 1812   4]                    Reserved2 : 00000000

[718h 1816   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[719h 1817   1]                       Length : 18

[71Ah 1818   2]                    Reserved1 : 0000
[71Ch 1820   4]             Proximity Domain : 00000000
[720h 1824   4]                      Apic ID : FFFFFFFF
[724h 1828   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[728h 1832   4]                 Clock Domain : 00000000
[72Ch 1836   4]                    Reserved2 : 00000000

[730h 1840   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[731h 1841   1]                       Length : 18

[732h 1842   2]                    Reserved1 : 0000
[734h 1844   4]             Proximity Domain : 00000000
[738h 1848   4]                      Apic ID : FFFFFFFF
[73Ch 1852   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[740h 1856   4]                 Clock Domain : 00000000
[744h 1860   4]                    Reserved2 : 00000000

[748h 1864   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[749h 1865   1]                       Length : 18

[74Ah 1866   2]                    Reserved1 : 0000
[74Ch 1868   4]             Proximity Domain : 00000000
[750h 1872   4]                      Apic ID : FFFFFFFF
[754h 1876   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[758h 1880   4]                 Clock Domain : 00000000
[75Ch 1884   4]                    Reserved2 : 00000000

[760h 1888   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[761h 1889   1]                       Length : 18

[762h 1890   2]                    Reserved1 : 0000
[764h 1892   4]             Proximity Domain : 00000000
[768h 1896   4]                      Apic ID : FFFFFFFF
[76Ch 1900   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[770h 1904   4]                 Clock Domain : 00000000
[774h 1908   4]                    Reserved2 : 00000000

[778h 1912   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[779h 1913   1]                       Length : 18

[77Ah 1914   2]                    Reserved1 : 0000
[77Ch 1916   4]             Proximity Domain : 00000000
[780h 1920   4]                      Apic ID : FFFFFFFF
[784h 1924   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[788h 1928   4]                 Clock Domain : 00000000
[78Ch 1932   4]                    Reserved2 : 00000000

[790h 1936   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[791h 1937   1]                       Length : 18

[792h 1938   2]                    Reserved1 : 0000
[794h 1940   4]             Proximity Domain : 00000000
[798h 1944   4]                      Apic ID : FFFFFFFF
[79Ch 1948   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[7A0h 1952   4]                 Clock Domain : 00000000
[7A4h 1956   4]                    Reserved2 : 00000000

[7A8h 1960   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[7A9h 1961   1]                       Length : 18

[7AAh 1962   2]                    Reserved1 : 0000
[7ACh 1964   4]             Proximity Domain : 00000000
[7B0h 1968   4]                      Apic ID : FFFFFFFF
[7B4h 1972   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[7B8h 1976   4]                 Clock Domain : 00000000
[7BCh 1980   4]                    Reserved2 : 00000000

[7C0h 1984   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[7C1h 1985   1]                       Length : 18

[7C2h 1986   2]                    Reserved1 : 0000
[7C4h 1988   4]             Proximity Domain : 00000000
[7C8h 1992   4]                      Apic ID : FFFFFFFF
[7CCh 1996   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[7D0h 2000   4]                 Clock Domain : 00000000
[7D4h 2004   4]                    Reserved2 : 00000000

[7D8h 2008   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[7D9h 2009   1]                       Length : 18

[7DAh 2010   2]                    Reserved1 : 0000
[7DCh 2012   4]             Proximity Domain : 00000000
[7E0h 2016   4]                      Apic ID : FFFFFFFF
[7E4h 2020   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[7E8h 2024   4]                 Clock Domain : 00000000
[7ECh 2028   4]                    Reserved2 : 00000000

[7F0h 2032   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[7F1h 2033   1]                       Length : 18

[7F2h 2034   2]                    Reserved1 : 0000
[7F4h 2036   4]             Proximity Domain : 00000000
[7F8h 2040   4]                      Apic ID : FFFFFFFF
[7FCh 2044   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[800h 2048   4]                 Clock Domain : 00000000
[804h 2052   4]                    Reserved2 : 00000000

[808h 2056   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[809h 2057   1]                       Length : 18

[80Ah 2058   2]                    Reserved1 : 0000
[80Ch 2060   4]             Proximity Domain : 00000000
[810h 2064   4]                      Apic ID : FFFFFFFF
[814h 2068   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[818h 2072   4]                 Clock Domain : 00000000
[81Ch 2076   4]                    Reserved2 : 00000000

[820h 2080   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[821h 2081   1]                       Length : 18

[822h 2082   2]                    Reserved1 : 0000
[824h 2084   4]             Proximity Domain : 00000000
[828h 2088   4]                      Apic ID : FFFFFFFF
[82Ch 2092   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[830h 2096   4]                 Clock Domain : 00000000
[834h 2100   4]                    Reserved2 : 00000000

[838h 2104   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[839h 2105   1]                       Length : 18

[83Ah 2106   2]                    Reserved1 : 0000
[83Ch 2108   4]             Proximity Domain : 00000000
[840h 2112   4]                      Apic ID : FFFFFFFF
[844h 2116   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[848h 2120   4]                 Clock Domain : 00000000
[84Ch 2124   4]                    Reserved2 : 00000000

[850h 2128   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[851h 2129   1]                       Length : 18

[852h 2130   2]                    Reserved1 : 0000
[854h 2132   4]             Proximity Domain : 00000000
[858h 2136   4]                      Apic ID : FFFFFFFF
[85Ch 2140   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[860h 2144   4]                 Clock Domain : 00000000
[864h 2148   4]                    Reserved2 : 00000000

[868h 2152   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[869h 2153   1]                       Length : 18

[86Ah 2154   2]                    Reserved1 : 0000
[86Ch 2156   4]             Proximity Domain : 00000000
[870h 2160   4]                      Apic ID : FFFFFFFF
[874h 2164   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[878h 2168   4]                 Clock Domain : 00000000
[87Ch 2172   4]                    Reserved2 : 00000000

[880h 2176   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[881h 2177   1]                       Length : 18

[882h 2178   2]                    Reserved1 : 0000
[884h 2180   4]             Proximity Domain : 00000000
[888h 2184   4]                      Apic ID : FFFFFFFF
[88Ch 2188   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[890h 2192   4]                 Clock Domain : 00000000
[894h 2196   4]                    Reserved2 : 00000000

[898h 2200   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[899h 2201   1]                       Length : 18

[89Ah 2202   2]                    Reserved1 : 0000
[89Ch 2204   4]             Proximity Domain : 00000000
[8A0h 2208   4]                      Apic ID : FFFFFFFF
[8A4h 2212   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[8A8h 2216   4]                 Clock Domain : 00000000
[8ACh 2220   4]                    Reserved2 : 00000000

[8B0h 2224   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[8B1h 2225   1]                       Length : 18

[8B2h 2226   2]                    Reserved1 : 0000
[8B4h 2228   4]             Proximity Domain : 00000000
[8B8h 2232   4]                      Apic ID : FFFFFFFF
[8BCh 2236   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[8C0h 2240   4]                 Clock Domain : 00000000
[8C4h 2244   4]                    Reserved2 : 00000000

[8C8h 2248   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[8C9h 2249   1]                       Length : 18

[8CAh 2250   2]                    Reserved1 : 0000
[8CCh 2252   4]             Proximity Domain : 00000000
[8D0h 2256   4]                      Apic ID : FFFFFFFF
[8D4h 2260   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[8D8h 2264   4]                 Clock Domain : 00000000
[8DCh 2268   4]                    Reserved2 : 00000000

[8E0h 2272   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[8E1h 2273   1]                       Length : 18

[8E2h 2274   2]                    Reserved1 : 0000
[8E4h 2276   4]             Proximity Domain : 00000000
[8E8h 2280   4]                      Apic ID : FFFFFFFF
[8ECh 2284   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[8F0h 2288   4]                 Clock Domain : 00000000
[8F4h 2292   4]                    Reserved2 : 00000000

[8F8h 2296   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[8F9h 2297   1]                       Length : 18

[8FAh 2298   2]                    Reserved1 : 0000
[8FCh 2300   4]             Proximity Domain : 00000000
[900h 2304   4]                      Apic ID : FFFFFFFF
[904h 2308   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[908h 2312   4]                 Clock Domain : 00000000
[90Ch 2316   4]                    Reserved2 : 00000000

[910h 2320   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[911h 2321   1]                       Length : 18

[912h 2322   2]                    Reserved1 : 0000
[914h 2324   4]             Proximity Domain : 00000000
[918h 2328   4]                      Apic ID : FFFFFFFF
[91Ch 2332   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[920h 2336   4]                 Clock Domain : 00000000
[924h 2340   4]                    Reserved2 : 00000000

[928h 2344   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[929h 2345   1]                       Length : 18

[92Ah 2346   2]                    Reserved1 : 0000
[92Ch 2348   4]             Proximity Domain : 00000000
[930h 2352   4]                      Apic ID : FFFFFFFF
[934h 2356   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[938h 2360   4]                 Clock Domain : 00000000
[93Ch 2364   4]                    Reserved2 : 00000000

[940h 2368   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[941h 2369   1]                       Length : 18

[942h 2370   2]                    Reserved1 : 0000
[944h 2372   4]             Proximity Domain : 00000000
[948h 2376   4]                      Apic ID : FFFFFFFF
[94Ch 2380   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[950h 2384   4]                 Clock Domain : 00000000
[954h 2388   4]                    Reserved2 : 00000000

[958h 2392   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[959h 2393   1]                       Length : 18

[95Ah 2394   2]                    Reserved1 : 0000
[95Ch 2396   4]             Proximity Domain : 00000000
[960h 2400   4]                      Apic ID : FFFFFFFF
[964h 2404   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[968h 2408   4]                 Clock Domain : 00000000
[96Ch 2412   4]                    Reserved2 : 00000000

[970h 2416   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[971h 2417   1]                       Length : 18

[972h 2418   2]                    Reserved1 : 0000
[974h 2420   4]             Proximity Domain : 00000000
[978h 2424   4]                      Apic ID : FFFFFFFF
[97Ch 2428   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[980h 2432   4]                 Clock Domain : 00000000
[984h 2436   4]                    Reserved2 : 00000000

[988h 2440   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[989h 2441   1]                       Length : 18

[98Ah 2442   2]                    Reserved1 : 0000
[98Ch 2444   4]             Proximity Domain : 00000000
[990h 2448   4]                      Apic ID : FFFFFFFF
[994h 2452   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[998h 2456   4]                 Clock Domain : 00000000
[99Ch 2460   4]                    Reserved2 : 00000000

[9A0h 2464   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[9A1h 2465   1]                       Length : 18

[9A2h 2466   2]                    Reserved1 : 0000
[9A4h 2468   4]             Proximity Domain : 00000000
[9A8h 2472   4]                      Apic ID : FFFFFFFF
[9ACh 2476   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[9B0h 2480   4]                 Clock Domain : 00000000
[9B4h 2484   4]                    Reserved2 : 00000000

[9B8h 2488   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[9B9h 2489   1]                       Length : 18

[9BAh 2490   2]                    Reserved1 : 0000
[9BCh 2492   4]             Proximity Domain : 00000000
[9C0h 2496   4]                      Apic ID : FFFFFFFF
[9C4h 2500   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[9C8h 2504   4]                 Clock Domain : 00000000
[9CCh 2508   4]                    Reserved2 : 00000000

[9D0h 2512   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[9D1h 2513   1]                       Length : 18

[9D2h 2514   2]                    Reserved1 : 0000
[9D4h 2516   4]             Proximity Domain : 00000000
[9D8h 2520   4]                      Apic ID : FFFFFFFF
[9DCh 2524   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[9E0h 2528   4]                 Clock Domain : 00000000
[9E4h 2532   4]                    Reserved2 : 00000000

[9E8h 2536   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[9E9h 2537   1]                       Length : 18

[9EAh 2538   2]                    Reserved1 : 0000
[9ECh 2540   4]             Proximity Domain : 00000000
[9F0h 2544   4]                      Apic ID : FFFFFFFF
[9F4h 2548   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[9F8h 2552   4]                 Clock Domain : 00000000
[9FCh 2556   4]                    Reserved2 : 00000000

[A00h 2560   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[A01h 2561   1]                       Length : 18

[A02h 2562   2]                    Reserved1 : 0000
[A04h 2564   4]             Proximity Domain : 00000000
[A08h 2568   4]                      Apic ID : FFFFFFFF
[A0Ch 2572   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[A10h 2576   4]                 Clock Domain : 00000000
[A14h 2580   4]                    Reserved2 : 00000000

[A18h 2584   1]                Subtable Type : 02 [Processor Local x2APIC Affinity]
[A19h 2585   1]                       Length : 18

[A1Ah 2586   2]                    Reserved1 : 0000
[A1Ch 2588   4]             Proximity Domain : 00000000
[A20h 2592   4]                      Apic ID : FFFFFFFF
[A24h 2596   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[A28h 2600   4]                 Clock Domain : 00000000
[A2Ch 2604   4]                    Reserved2 : 00000000

Raw Table Data: Length 2608 (0xA30)

    0000: 53 52 41 54 30 0A 00 00 03 F2 41 4C 41 53 4B 41  // SRAT0.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    0030: 00 10 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 10 00 02 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 10 00 04 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 10 00 06 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 10 00 08 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 10 00 10 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 10 00 12 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 10 00 14 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 10 00 16 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 10 00 18 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 10 00 01 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 10 00 03 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 10 00 05 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 10 00 07 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 10 00 09 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 10 00 11 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 10 00 13 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 10 00 15 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 10 00 17 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 10 00 19 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    03C0: 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    03D0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    03E0: 00 00 00 00 01 00 00 00 00 00 00 A0 07 00 00 00  // ................
    03F0: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0510: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0540: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0570: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0590: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    05A0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    05C0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    05D0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0600: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0620: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0630: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0650: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0660: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0690: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06A0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    06C0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    06F0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0710: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0720: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0750: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0780: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    07A0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    07B0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    07D0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    07E0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0810: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0840: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0870: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0890: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    08A0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    08D0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0900: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0930: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0950: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0960: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0990: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    09C0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    09F0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 02 18 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0A10: 00 00 00 00 00 00 00 00 02 18 00 00 00 00 00 00  // ................
    0A20: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "INTEL ", "PtidDevc", 0x00001000)
{
    External (_PR_.DTS1, UnknownObj)
    External (_PR_.DTS2, UnknownObj)
    External (_PR_.DTS3, UnknownObj)
    External (_PR_.DTS4, UnknownObj)
    External (_PR_.PDTS, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1CI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1DC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1DI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1RC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2CI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2DI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2FC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2FV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2MH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2ML, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2RC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.BMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFS2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CMDR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CPAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.ECAV, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.H_EC.GTVR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MDT0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MFSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MGPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MGTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MMPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MMTL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MPOL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NCPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NCTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NGPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NGTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NMTL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NPOL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PCAD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEHI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PENV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPM, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEWL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PLAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPWR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCS, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRFC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PWFC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PWRL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER5, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER6, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TMPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR5, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR6, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR7, UnknownObj)
    External (_TZ_.TZ00._TMP, UnknownObj)
    External (_TZ_.TZ01._TMP, UnknownObj)
    External (PAMT, UnknownObj)
    External (TSDB, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Name (_STA, 0x0F)  // _STA: Status
            Method (TSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (TSD2) /* \_SB_.PTID.TSD2 */
                }

                Return (TSD1) /* \_SB_.PTID.TSD1 */
            }

            Name (TSD1, Package (0x28)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "DIMM0_hotspot_U4C1", 
                0x03, 
                "DIMM1_hotspot_Q4D1", 
                0x03, 
                "IMVP_conn_Q7C1", 
                0x03, 
                "board_hotspot1_U3G3", 
                0x03, 
                "board_hotspot2_Q3G1", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x02, 
                "TZ01 _TMP", 
                0x03, 
                "SDRAM_hotspot_RT5B1", 
                0x03, 
                "NGFF_slot_RT6G1", 
                0x03, 
                "IMVP_conn_RT7D1", 
                0x03, 
                "board_hotspot3_RT8F1"
            })
            Name (TSD2, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "A-Skin Hotspot U21", 
                0x03, 
                "A-Skin Hotspot U21 IR", 
                0x03, 
                "B-Skin Hotspot U1", 
                0x03, 
                "B-Skin Hotspot U1 IR", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SoC VR Thermsitor RT11", 
                0x03, 
                "Memory Thermistor RT9", 
                0x03, 
                "GNSS Board Ambient Thermistor R4", 
                0x03, 
                "System VR Thermistor RT10", 
                0x03, 
                "A-Skin Skycam Thermistor RT8"
            })
            Name (PSDL, Package (0x22)
            {
                0x0B, 
                "Cpu Power (mW)", 
                0x0B, 
                "Platform Power (mW)", 
                0x0B, 
                "Cpu Average Power (mW)", 
                0x0B, 
                "Platform Average Power (mW)", 
                0x0C, 
                "Battery 1 Design Capacity (mWh)", 
                0x0C, 
                "Battery 1 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 1 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 1 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery 2 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 2 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 2 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery Pack 1 maximum power (mW)", 
                0x0C, 
                "Battery Pack 2 maximum power (mW)"
            })
            Method (OSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (OSD2) /* \_SB_.PTID.OSD2 */
                }

                Return (OSD1) /* \_SB_.PTID.OSD1 */
            }

            Name (OSD1, Package (0x15)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW"
            })
            Name (OSD2, Package (0x18)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW", 
                0x03, 
                "Thermistor 5 ", 
                "RAW"
            })
            Method (XLAT, 1, Serialized)
            {
                If ((Arg0 >= 0x03AC))
                {
                    Return (0x0A47)
                }

                If ((Arg0 >= 0x0394))
                {
                    Return (0x0A79)
                }

                If ((Arg0 >= 0x0374))
                {
                    Return (0x0AAB)
                }

                If ((Arg0 >= 0x0354))
                {
                    Return (0x0ADD)
                }

                If ((Arg0 >= 0x032C))
                {
                    Return (0x0B0F)
                }

                If ((Arg0 >= 0x0300))
                {
                    Return (0x0B41)
                }

                If ((Arg0 >= 0x02D0))
                {
                    Return (0x0B73)
                }

                If ((Arg0 >= 0x029C))
                {
                    Return (0x0BA5)
                }

                If ((Arg0 >= 0x0264))
                {
                    Return (0x0BD7)
                }

                If ((Arg0 >= 0x0230))
                {
                    Return (0x0C09)
                }

                If ((Arg0 >= 0x01FC))
                {
                    Return (0x0C3B)
                }

                If ((Arg0 >= 0x01C8))
                {
                    Return (0x0C6D)
                }

                If ((Arg0 >= 0x0194))
                {
                    Return (0x0C9F)
                }

                If ((Arg0 >= 0x0164))
                {
                    Return (0x0CD1)
                }

                If ((Arg0 >= 0x0138))
                {
                    Return (0x0D03)
                }

                If ((Arg0 >= 0x0114))
                {
                    Return (0x0D35)
                }

                If ((Arg0 >= 0xF0))
                {
                    Return (0x0D67)
                }

                If ((Arg0 >= 0xD4))
                {
                    Return (0x0D99)
                }

                If ((Arg0 >= 0xB8))
                {
                    Return (0x0DCB)
                }

                If ((Arg0 >= 0xA0))
                {
                    Return (0x0DFD)
                }

                If ((Arg0 >= 0x8C))
                {
                    Return (0x0E2F)
                }

                If ((Arg0 >= 0x7C))
                {
                    Return (0x0E61)
                }

                If ((Arg0 >= 0x68))
                {
                    Return (0x0E93)
                }

                If ((Arg0 >= 0x58))
                {
                    Return (0x0EC5)
                }

                Return (0x0EC5)
            }

            Method (XSDS, 1, Serialized)
            {
                If ((Arg0 >= 0x02F0))
                {
                    Return (0x0A47)
                }

                If ((Arg0 >= 0x02DC))
                {
                    Return (0x0A79)
                }

                If ((Arg0 >= 0x02C4))
                {
                    Return (0x0AAB)
                }

                If ((Arg0 >= 0x02A8))
                {
                    Return (0x0ADD)
                }

                If ((Arg0 >= 0x0288))
                {
                    Return (0x0B0F)
                }

                If ((Arg0 >= 0x0264))
                {
                    Return (0x0B41)
                }

                If ((Arg0 >= 0x0240))
                {
                    Return (0x0B73)
                }

                If ((Arg0 >= 0x0214))
                {
                    Return (0x0BA5)
                }

                If ((Arg0 >= 0x01EC))
                {
                    Return (0x0BD7)
                }

                If ((Arg0 >= 0x01C0))
                {
                    Return (0x0C09)
                }

                If ((Arg0 >= 0x0194))
                {
                    Return (0x0C3B)
                }

                If ((Arg0 >= 0x016C))
                {
                    Return (0x0C6D)
                }

                If ((Arg0 >= 0x0144))
                {
                    Return (0x0C9F)
                }

                If ((Arg0 >= 0x011C))
                {
                    Return (0x0CD1)
                }

                If ((Arg0 >= 0xFC))
                {
                    Return (0x0D03)
                }

                If ((Arg0 >= 0xDC))
                {
                    Return (0x0D35)
                }

                If ((Arg0 >= 0xC0))
                {
                    Return (0x0D67)
                }

                If ((Arg0 >= 0xA8))
                {
                    Return (0x0D99)
                }

                If ((Arg0 >= 0x94))
                {
                    Return (0x0DCB)
                }

                If ((Arg0 >= 0x80))
                {
                    Return (0x0DFD)
                }

                If ((Arg0 >= 0x70))
                {
                    Return (0x0E2F)
                }

                If ((Arg0 >= 0x60))
                {
                    Return (0x0E61)
                }

                If ((Arg0 >= 0x54))
                {
                    Return (0x0E93)
                }

                If ((Arg0 >= 0x48))
                {
                    Return (0x0EC5)
                }

                Return (0x0EC5)
            }

            Method (TSDD, 0, Serialized)
            {
                If ((TSDB == One))
                {
                    Name (TMPX, Package (0x13)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    })
                    TMPX [Zero] = ((\_PR.DTS1 * 0x0A) + 0x0AAC)
                    TMPX [One] = ((\_PR.DTS2 * 0x0A) + 0x0AAC)
                    TMPX [0x02] = ((\_PR.DTS3 * 0x0A) + 0x0AAC)
                    TMPX [0x03] = ((\_PR.DTS4 * 0x0A) + 0x0AAC)
                    TMPX [0x04] = ((\_PR.PDTS * 0x0A) + 0x0AAC)
                    If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                    {
                        TMPX [0x05] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR1)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x06] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR2)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x07] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x08] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR4)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x09] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PMAX)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x0A] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PPDT)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x0B] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECH)) * 0x0A) + 
                            0x0AAC)
                    }

                    TMPX [0x0D] = \_TZ.TZ00._TMP /* External reference */
                    If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                    {
                        TMPX [0x0E] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER1)) << 0x02))
                        TMPX [0x0F] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER2)) << 0x02))
                        TMPX [0x10] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER3)) << 0x02))
                        TMPX [0x11] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER4)) << 0x02))
                        TMPX [0x12] = XSDS ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER5)) << 0x02))
                    }

                    Return (TMPX) /* \_SB_.PTID.TSDD.TMPX */
                }

                Name (TMPV, Package (0x14)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                TMPV [Zero] = ((\_PR.DTS1 * 0x0A) + 0x0AAC)
                TMPV [One] = ((\_PR.DTS2 * 0x0A) + 0x0AAC)
                TMPV [0x02] = ((\_PR.DTS3 * 0x0A) + 0x0AAC)
                TMPV [0x03] = ((\_PR.DTS4 * 0x0A) + 0x0AAC)
                TMPV [0x04] = ((\_PR.PDTS * 0x0A) + 0x0AAC)
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    TMPV [0x05] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR1)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x06] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR2)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x07] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x08] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR4)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x09] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR5)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x0A] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PMAX)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x0B] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PPDT)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x0C] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECH)) * 0x0A) + 
                        0x0AAC)
                }

                TMPV [0x0E] = \_TZ.TZ00._TMP /* External reference */
                TMPV [0x0F] = \_TZ.TZ01._TMP /* External reference */
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    TMPV [0x10] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER1)) << 0x02))
                    TMPV [0x11] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER2)) << 0x02))
                    TMPV [0x12] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER3)) << 0x02))
                    TMPV [0x13] = XLAT ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER4)) << 0x02))
                }

                Return (TMPV) /* \_SB_.PTID.TSDD.TMPV */
            }

            Method (PSDD, 0, Serialized)
            {
                Name (PWRV, Package (0x11)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    PWRV [Zero] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CPUP))
                    PWRV [One] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PPWR)) * 0x0A)
                    PWRV [0x02] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CPAP))
                    PWRV [0x03] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PLAP)) * 0x0A)
                    PWRV [0x04] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1DC))
                    PWRV [0x05] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1RC))
                    PWRV [0x06] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1FC))
                    PWRV [0x07] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1FV))
                    PWRV [0x08] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1DI))
                    PWRV [0x09] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1CI))
                    PWRV [0x0A] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2RC))
                    PWRV [0x0B] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2FC))
                    PWRV [0x0C] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2FV))
                    PWRV [0x0D] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2DI))
                    PWRV [0x0E] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2CI))
                    Local0 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.BMAX))
                    If (Local0)
                    {
                        Local0 = ~Local0 |= 0xFFFF0000
                        Local0 = (Local0 += One * 0x0A)
                    }

                    PWRV [0x0F] = Local0
                    Local0 = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2MH)) << 0x08) + \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2ML)))
                    If (Local0)
                    {
                        Local0 = ~Local0 |= 0xFFFF0000
                        Local0 = (Local0 += One * 0x0A)
                    }

                    PWRV [0x10] = Local0
                }

                Return (PWRV) /* \_SB_.PTID.PSDD.PWRV */
            }

            Method (OSDD, 0, Serialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    If ((TSDB == One))
                    {
                        Name (OSD2, Package (0x08)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        })
                        OSD2 [Zero] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                        OSD2 [One] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CFSP))
                        OSD2 [0x02] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3))
                        OSD2 [0x03] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER1)) << 0x02)
                        OSD2 [0x04] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER2)) << 0x02)
                        OSD2 [0x05] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER3)) << 0x02)
                        OSD2 [0x06] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER4)) << 0x02)
                        OSD2 [0x07] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER5)) << 0x02)
                        Return (OSD2) /* \_SB_.PTID.OSDD.OSD2 */
                    }

                    Name (OSD1, Package (0x07)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    })
                    OSD1 [Zero] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                    OSD1 [One] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CFSP))
                    OSD1 [0x02] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3))
                    OSD1 [0x03] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER1)) << 0x02)
                    OSD1 [0x04] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER2)) << 0x02)
                    OSD1 [0x05] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER3)) << 0x02)
                    OSD1 [0x06] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TER4)) << 0x02)
                    Return (OSD1) /* \_SB_.PTID.OSDD.OSD1 */
                }

                Return (Package (0x00) {})
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x1A, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, Serialized)
            {
                Name (MTMP, Buffer (0x1A) {})
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    MTMP [0x06] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PCAD))
                    MTMP [0x07] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEWL))
                    MTMP [0x08] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PWRL))
                    MTMP [0x09] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECD))
                    MTMP [0x0A] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEHI))
                    MTMP [0x0B] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECI))
                    MTMP [0x0C] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEPL))
                    MTMP [0x0D] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEPM))
                    MTMP [0x0E] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PWFC))
                    MTMP [0x0F] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECC))
                    MTMP [0x10] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT0))
                    MTMP [0x11] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT1))
                    MTMP [0x12] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT2))
                    MTMP [0x13] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT3))
                    MTMP [0x14] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRFC))
                    MTMP [0x15] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS0))
                    MTMP [0x16] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS1))
                    MTMP [0x17] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS2))
                    MTMP [0x18] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS3))
                    MTMP [0x19] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS4))
                }

                Return (MTMP) /* \_SB_.PTID.RPMD.MTMP */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (0xFFFFFFFF)
                }

                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x06]), RefOf (\_SB.PCI0.LPCB.H_EC.PCAD))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x07]), RefOf (\_SB.PCI0.LPCB.H_EC.PEWL))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x08]), RefOf (\_SB.PCI0.LPCB.H_EC.PWRL))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x09]), RefOf (\_SB.PCI0.LPCB.H_EC.PECD))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0A]), RefOf (\_SB.PCI0.LPCB.H_EC.PEHI))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0B]), RefOf (\_SB.PCI0.LPCB.H_EC.PECI))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0C]), RefOf (\_SB.PCI0.LPCB.H_EC.PEPL))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0D]), RefOf (\_SB.PCI0.LPCB.H_EC.PEPM))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0E]), RefOf (\_SB.PCI0.LPCB.H_EC.PWFC))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0F]), RefOf (\_SB.PCI0.LPCB.H_EC.PECC))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x10]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT0))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x11]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT1))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x12]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT2))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x13]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT3))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x14]), RefOf (\_SB.PCI0.LPCB.H_EC.PRFC))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x15]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS0))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x16]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS1))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x17]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS2))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x18]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS3))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x19]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS4))
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x67)
                }

                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x65)
                }

                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x66)
                }

                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    Local0 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRCS))
                }

                Return (Local0)
            }

            Method (RPEC, 0, NotSerialized)
            {
                Local0 = Zero
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC0))
                    Local0 |= Local1
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC1))
                    Local0 |= (Local1 << 0x08)
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC2))
                    Local0 |= (Local1 << 0x10)
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC3))
                    Local0 |= (Local1 << 0x18)
                }

                Return (Local0)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I ", 0x00000000)
{
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS11, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS12, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS13, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS14, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.USR1, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.USR2, DeviceObj)

    Scope (\_SB.PC00.XHCI.RHUB)
    {
        Method (GPLD, 2, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x10) {}
            })
            CreateField (DerefOf (PCKG [0x00]), 0x00, 0x07, REV)
            REV = 0x01
            CreateField (DerefOf (PCKG [0x00]), 0x40, 0x01, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [0x00]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            Return (PCKG) /* \_SB_.PC00.XHCI.RHUB.GPLD.PCKG */
        }

        Method (GUPC, 1, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                0x00, 
                0xFF, 
                0x00, 
                0x00
            })
            PCKG [0x00] = Arg0
            Return (PCKG) /* \_SB_.PC00.XHCI.RHUB.GUPC.PCKG */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x0B))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x0C))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x00))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x00, 0x00))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x05))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x09))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x06))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS07)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x03))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS08)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x07))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS09)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x04))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS10)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x08))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS11)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x02))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS12)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x0A))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS13)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x01))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS14)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x00))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x00, 0x00))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.USR1)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x00))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x00, 0x00))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.USR2)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x00))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x00, 0x00))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x05))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x06))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x03))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x04))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x01))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x02))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS07)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x08))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS08)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x01))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x01, 0x07))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS09)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x00))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x00, 0x00))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS10)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (0x00))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (0x00, 0x00))
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "INTEL ", "sensrhub", 0x00000000)
{
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.I2C0.DFUD, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (GPBS, UnknownObj)
    External (SDS0, UnknownObj)
    External (SHAP, UnknownObj)
    External (USBH, UnknownObj)

    Scope (\)
    {
        Device (SHAD)
        {
            Name (_HID, EisaId ("INT33D0"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((SDS0 & One) || (USBH & One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (PGCE, Zero)
                Name (PGCD, Zero)
                Name (PGCG, 0x2E)
                Name (DFUE, Zero)
                Name (DFUD, Zero)
                Name (OLDV, Zero)
                Name (PGCV, Zero)
                Name (DFUV, Zero)
                If ((Arg0 == ToUUID ("03c868d5-563f-42a8-9f57-9a18d949b7cb") /* Unknown UUID */))
                {
                    If ((SHAP == One))
                    {
                        PGCG = 0x3A
                    }

                    If ((ToInteger (Arg1) >= One))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Case (One)
                            {
                                PGCE = DerefOf (Arg3 [Zero])
                                PGCD = DerefOf (Arg3 [One])
                                OLDV = \_SB.GGOV (0x02010016)
                                \_SB.SGOV (0x02010016, PGCE)
                                If ((PGCD > Zero))
                                {
                                    Sleep (PGCD)
                                    \_SB.GGOV (0x02010016)
                                    OLDV
                                }

                                If ((\_SB.GGOV (0x02010016) == One))
                                {
                                    Sleep (0x96)
                                    If ((\_SB.GGOV (0x02010014) == One)) {}
                                    Else
                                    {
                                        Notify (\_SB.PCI0.I2C0.DFUD, One) // Device Check
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x02)
                            {
                                DFUE = DerefOf (Arg3 [Zero])
                                DFUD = DerefOf (Arg3 [One])
                                OLDV = \_SB.GGOV (0x02010014)
                                \_SB.GGOV (0x02010014)
                                DFUE
                                If ((DFUD > Zero))
                                {
                                    Sleep (DFUD)
                                    \_SB.GGOV (0x02010014)
                                    OLDV
                                }

                                Return (Zero)
                            }
                            Case (0x03)
                            {
                                DFUV = \_SB.GGOV (0x02010014)
                                PGCV = \_SB.GGOV (0x02010016)
                                Return (Package (0x02)
                                {
                                    PGCV, 
                                    DFUV
                                })
                            }

                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "INTEL", "SSDT  PM", 0x00004000)
{
    External (_SB_.SCK0.CP00, DeviceObj)
    External (_SB_.SCK0.CP01, DeviceObj)
    External (_SB_.SCK0.CP02, DeviceObj)
    External (_SB_.SCK0.CP03, DeviceObj)
    External (_SB_.SCK0.CP04, DeviceObj)
    External (_SB_.SCK0.CP05, DeviceObj)
    External (_SB_.SCK0.CP06, DeviceObj)
    External (_SB_.SCK0.CP07, DeviceObj)
    External (_SB_.SCK0.CP08, DeviceObj)
    External (_SB_.SCK0.CP09, DeviceObj)
    External (_SB_.SCK0.CP0A, DeviceObj)
    External (_SB_.SCK0.CP0B, DeviceObj)
    External (_SB_.SCK0.CP0C, DeviceObj)
    External (_SB_.SCK0.CP0D, DeviceObj)
    External (_SB_.SCK0.CP0E, DeviceObj)
    External (_SB_.SCK0.CP0F, DeviceObj)
    External (_SB_.SCK0.CP10, DeviceObj)
    External (_SB_.SCK0.CP11, DeviceObj)
    External (_SB_.SCK0.CP12, DeviceObj)
    External (_SB_.SCK0.CP13, DeviceObj)
    External (_SB_.SCK0.CP14, DeviceObj)
    External (_SB_.SCK0.CP15, DeviceObj)
    External (_SB_.SCK0.CP16, DeviceObj)
    External (_SB_.SCK0.CP17, DeviceObj)
    External (_SB_.SCK0.CP18, DeviceObj)
    External (_SB_.SCK0.CP19, DeviceObj)
    External (_SB_.SCK0.CP1A, DeviceObj)
    External (_SB_.SCK0.CP1B, DeviceObj)
    External (_SB_.SCK0.CP1C, DeviceObj)
    External (_SB_.SCK0.CP1D, DeviceObj)
    External (_SB_.SCK0.CP1E, DeviceObj)
    External (_SB_.SCK0.CP1F, DeviceObj)
    External (_SB_.SCK0.CP20, DeviceObj)
    External (_SB_.SCK0.CP21, DeviceObj)
    External (_SB_.SCK0.CP22, DeviceObj)
    External (_SB_.SCK0.CP23, DeviceObj)
    External (_SB_.SCK0.CP24, DeviceObj)
    External (_SB_.SCK0.CP25, DeviceObj)
    External (_SB_.SCK0.CP26, DeviceObj)
    External (_SB_.SCK0.CP27, DeviceObj)
    External (_SB_.SCK0.CP28, DeviceObj)
    External (_SB_.SCK0.CP29, DeviceObj)
    External (_SB_.SCK0.CP2A, DeviceObj)
    External (_SB_.SCK0.CP2B, DeviceObj)
    External (_SB_.SCK0.CP2C, DeviceObj)
    External (_SB_.SCK0.CP2D, DeviceObj)
    External (_SB_.SCK0.CP2E, DeviceObj)
    External (_SB_.SCK0.CP2F, DeviceObj)
    External (_SB_.SCK0.CP30, DeviceObj)
    External (_SB_.SCK0.CP31, DeviceObj)
    External (_SB_.SCK0.CP32, DeviceObj)
    External (_SB_.SCK0.CP33, DeviceObj)
    External (_SB_.SCK0.CP34, DeviceObj)
    External (_SB_.SCK0.CP35, DeviceObj)
    External (_SB_.SCK0.CP36, DeviceObj)
    External (_SB_.SCK0.CP37, DeviceObj)
    External (CSEN, FieldUnitObj)
    External (FGTS, FieldUnitObj)
    External (HWAL, FieldUnitObj)
    External (HWEN, FieldUnitObj)
    External (HWPS, FieldUnitObj)
    External (PSEN, FieldUnitObj)
    External (TSEN, FieldUnitObj)

    Name (HI1, 0x00)
    Name (HW1, 0x00)
    Name (SDTL, 0x00)
    Scope (\_SB.SCK0.CP00)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP00._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP00._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP00.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP00.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP00.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP01)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP01._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP01._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x01, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x01, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x01, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP01.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP01.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP01.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP02)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP02._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP02._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x02, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x02, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x02, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP02.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP02.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP02.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP03)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP03._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP03._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x03, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x03, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x03, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP03.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP03.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP03.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP04)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP04._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP04._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x04, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x04, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x04, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP04.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP04.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP04.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP05)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP05._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP05._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x05, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x05, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x05, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP05.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP05.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP05.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP06)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP06._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP06._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x06, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x06, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x06, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP06.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP06.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP06.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP07)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP07._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP07._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x07, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x07, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x07, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP07.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP07.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP07.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP08)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP08._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP08._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x08, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x08, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x08, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP08.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP08.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP08.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP09)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP09._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP09._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x09, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x09, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x09, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP09.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP09.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP09.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP0A)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP0A._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP0A._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0A, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0A, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0A, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP0A.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP0A.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP0A.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP0B)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP0B._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP0B._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0B, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0B, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0B, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP0B.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP0B.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP0B.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP0C)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP0C._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP0C._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0C, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0C, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0C, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP0C.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP0C.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP0C.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP0D)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP0D._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP0D._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0D, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0D, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0D, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP0D.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP0D.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP0D.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP0E)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP0E._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP0E._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0E, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0E, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0E, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP0E.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP0E.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP0E.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP0F)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP0F._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP0F._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0F, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0F, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0F, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP0F.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP0F.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP0F.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP10)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP10._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP10._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x10, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x10, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x10, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP10.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP10.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP10.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP11)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP11._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP11._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x11, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x11, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x11, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP11.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP11.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP11.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP12)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP12._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP12._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x12, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x12, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x12, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP12.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP12.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP12.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP13)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP13._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP13._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x13, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x13, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x13, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP13.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP13.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP13.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP14)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP14._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP14._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x14, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x14, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x14, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP14.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP14.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP14.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP15)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP15._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP15._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x15, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x15, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x15, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP15.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP15.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP15.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP16)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP16._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP16._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x16, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x16, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x16, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP16.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP16.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP16.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP17)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP17._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP17._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x17, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x17, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x17, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP17.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP17.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP17.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP18)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP18._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP18._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x18, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x18, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x18, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP18.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP18.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP18.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP19)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP19._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP19._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x19, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x19, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x19, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP19.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP19.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP19.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP1A)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP1A._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP1A._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1A, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1A, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1A, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP1A.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP1A.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP1A.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP1B)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP1B._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP1B._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1B, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1B, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1B, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP1B.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP1B.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP1B.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP1C)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP1C._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP1C._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1C, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1C, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1C, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP1C.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP1C.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP1C.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP1D)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP1D._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP1D._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1D, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1D, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1D, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP1D.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP1D.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP1D.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP1E)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP1E._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP1E._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1E, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1E, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1E, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP1E.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP1E.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP1E.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP1F)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP1F._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP1F._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1F, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1F, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x1F, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP1F.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP1F.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP1F.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP20)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP20._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP20._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x20, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x20, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x20, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP20.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP20.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP20.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP21)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP21._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP21._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x21, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x21, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x21, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP21.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP21.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP21.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP22)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP22._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP22._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x22, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x22, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x22, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP22.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP22.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP22.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP23)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP23._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP23._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x23, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x23, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x23, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP23.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP23.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP23.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP24)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP24._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP24._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x24, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x24, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x24, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP24.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP24.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP24.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP25)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP25._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP25._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x25, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x25, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x25, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP25.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP25.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP25.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP26)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP26._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP26._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x26, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x26, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x26, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP26.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP26.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP26.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP27)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP27._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP27._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x27, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x27, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x27, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP27.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP27.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP27.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP28)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP28._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP28._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x28, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x28, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x28, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP28.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP28.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP28.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP29)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP29._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP29._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x29, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x29, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x29, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP29.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP29.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP29.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP2A)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP2A._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP2A._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2A, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2A, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2A, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP2A.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP2A.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP2A.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP2B)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP2B._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP2B._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2B, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2B, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2B, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP2B.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP2B.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP2B.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP2C)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP2C._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP2C._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2C, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2C, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2C, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP2C.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP2C.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP2C.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP2D)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP2D._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP2D._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2D, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2D, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2D, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP2D.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP2D.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP2D.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP2E)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP2E._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP2E._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2E, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2E, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2E, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP2E.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP2E.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP2E.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP2F)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP2F._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP2F._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2F, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2F, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x2F, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP2F.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP2F.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP2F.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP30)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP30._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP30._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x30, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x30, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x30, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP30.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP30.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP30.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP31)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP31._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP31._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x31, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x31, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x31, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP31.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP31.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP31.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP32)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP32._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP32._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x32, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x32, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x32, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP32.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP32.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP32.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP33)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP33._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP33._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x33, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x33, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x33, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP33.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP33.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP33.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP34)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP34._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP34._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x34, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x34, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x34, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP34.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP34.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP34.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP35)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP35._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP35._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x35, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x35, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x35, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP35.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP35.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP35.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP36)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP36._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP36._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x36, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x36, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x36, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP36.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP36.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP36.PSDC */
        }
    }

    Scope (\_SB.SCK0.CP37)
    {
        Name (SCKN, 0x00)
        OperationRegion (DBG0, SystemIO, 0x80, 0x02)
        Field (DBG0, ByteAcc, NoLock, Preserve)
        {
            IO80,   8, 
            IO81,   8
        }

        Name (TYPE, 0x80000000)
        Method (HWPT, 0, NotSerialized)
        {
            If ((((HWEN == 0x01) || (HWEN == 0x03)) && !(SDTL & 
                0x02)))
            {
                SDTL |= 0x02
                LoadTable ("OEM2", "INTEL", "CPU  HWP", "", "", Zero)
            }
        }

        Method (ISTT, 0, NotSerialized)
        {
            If ((((PSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x01)))
            {
                SDTL |= 0x01
                LoadTable ("OEM1", "INTEL", "CPU EIST", "", "", Zero)
            }
        }

        Method (TSTT, 0, NotSerialized)
        {
            If ((((TSEN == 0x01) && ((HWEN == 0x00) || (HWEN == 
                0x01))) && !(SDTL & 0x04)))
            {
                SDTL |= 0x04
                LoadTable ("OEM3", "INTEL", "CPU  TST", "", "", Zero)
            }
        }

        Method (CSTT, 0, NotSerialized)
        {
            If (((CSEN == 0x01) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                LoadTable ("OEM4", "INTEL", "CPU  CST", "", "", Zero)
            }
        }

        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.SCK0.CP37._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            If (((TYPE & 0x09) == 0x09))
            {
                ISTT ()
            }

            If ((HWPS == 0x01))
            {
                HWPT ()
            }

            If (((TYPE & 0x08) == 0x08))
            {
                TSTT ()
            }

            If (((TYPE & 0x18) == 0x18))
            {
                CSTT ()
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.SCK0.CP37._OSC.CAP0 */
            Return (Arg3)
        }

        Name (PSDC, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x37, 
                0xFC, 
                0x01
            }
        })
        Name (PSDD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x37, 
                0xFD, 
                0x01
            }
        })
        Name (PSDE, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x37, 
                0xFE, 
                0x01
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
            {
                Return (PSDE) /* \_SB_.SCK0.CP37.PSDE */
            }

            If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
            {
                Return (PSDD) /* \_SB_.SCK0.CP37.PSDD */
            }

            Return (PSDC) /* \_SB_.SCK0.CP37.PSDC */
        }
    }
}



SVOS
----
[000h 0000   4]                    Signature : "SVOS"    
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1D
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013


**** Unknown ACPI table signature [SVOS]


Raw Table Data: Length 50 (0x32)

    0000: 53 56 4F 53 32 00 00 00 01 1D 41 4C 41 53 4B 41  // SVOS2.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 00 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 FE 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    0030: 00 00                                            // ..


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4B
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 4B 41 4C 41 53 4B 41  // UEFIB....KALASKA
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 20 20 20 20  // A M I ......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 10 EB 4C 00 00  // ...26........L..
    0040: 00 00                                            // ..


WDAT
----
[000h 0000   4]                    Signature : "WDAT"    [Watchdog Action Table]
[004h 0004   4]                 Table Length : 00000134
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 53
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "SKL"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                Header Length : 00000020
[028h 0040   2]                  PCI Segment : 00FF
[02Ah 0042   1]                      PCI Bus : FF
[02Bh 0043   1]                   PCI Device : FF
[02Ch 0044   1]                 PCI Function : FF
[02Dh 0045   3]                     Reserved : 000000
[030h 0048   4]                 Timer Period : 00000258
[034h 0052   4]                    Max Count : 000003FF
[038h 0056   4]                    Min Count : 00000002
[03Ch 0060   1]        Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061   3]                     Reserved : 000000
[040h 0064   4]         Watchdog Entry Count : 0000000A

[044h 0068   1]              Watchdog Action : 01
[045h 0069   1]                  Instruction : 02
[046h 0070   2]                     Reserved : 0000

[048h 0072  12]              Register Region : [Generic Address Structure]
[048h 0072   1]                     Space ID : 01 [SystemIO]
[049h 0073   1]                    Bit Width : 0A
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 02 [Word Access:16]
[04Ch 0076   8]                      Address : 0000000000000400

[054h 0084   4]                        Value : 00000004
[058h 0088   4]                Register Mask : 000003FF

[05Ch 0092   1]              Watchdog Action : 06
[05Dh 0093   1]                  Instruction : 03
[05Eh 0094   2]                     Reserved : 0000

[060h 0096  12]              Register Region : [Generic Address Structure]
[060h 0096   1]                     Space ID : 01 [SystemIO]
[061h 0097   1]                    Bit Width : 0A
[062h 0098   1]                   Bit Offset : 00
[063h 0099   1]         Encoded Access Width : 02 [Word Access:16]
[064h 0100   8]                      Address : 0000000000000412

[06Ch 0108   4]                        Value : 000003FF
[070h 0112   4]                Register Mask : 000003FF

[074h 0116   1]              Watchdog Action : 08
[075h 0117   1]                  Instruction : 00
[076h 0118   2]                     Reserved : 0000

[078h 0120  12]              Register Region : [Generic Address Structure]
[078h 0120   1]                     Space ID : 01 [SystemIO]
[079h 0121   1]                    Bit Width : 01
[07Ah 0122   1]                   Bit Offset : 0B
[07Bh 0123   1]         Encoded Access Width : 02 [Word Access:16]
[07Ch 0124   8]                      Address : 0000000000000408

[084h 0132   4]                        Value : 00000000
[088h 0136   4]                Register Mask : 00000001

[08Ch 0140   1]              Watchdog Action : 09
[08Dh 0141   1]                  Instruction : 82
[08Eh 0142   2]                     Reserved : 0000

[090h 0144  12]              Register Region : [Generic Address Structure]
[090h 0144   1]                     Space ID : 01 [SystemIO]
[091h 0145   1]                    Bit Width : 01
[092h 0146   1]                   Bit Offset : 0B
[093h 0147   1]         Encoded Access Width : 02 [Word Access:16]
[094h 0148   8]                      Address : 0000000000000408

[09Ch 0156   4]                        Value : 00000000
[0A0h 0160   4]                Register Mask : 00000001

[0A4h 0164   1]              Watchdog Action : 0A
[0A5h 0165   1]                  Instruction : 00
[0A6h 0166   2]                     Reserved : 0000

[0A8h 0168  12]              Register Region : [Generic Address Structure]
[0A8h 0168   1]                     Space ID : 01 [SystemIO]
[0A9h 0169   1]                    Bit Width : 01
[0AAh 0170   1]                   Bit Offset : 0B
[0ABh 0171   1]         Encoded Access Width : 02 [Word Access:16]
[0ACh 0172   8]                      Address : 0000000000000408

[0B4h 0180   4]                        Value : 00000001
[0B8h 0184   4]                Register Mask : 00000001

[0BCh 0188   1]              Watchdog Action : 0B
[0BDh 0189   1]                  Instruction : 82
[0BEh 0190   2]                     Reserved : 0000

[0C0h 0192  12]              Register Region : [Generic Address Structure]
[0C0h 0192   1]                     Space ID : 01 [SystemIO]
[0C1h 0193   1]                    Bit Width : 01
[0C2h 0194   1]                   Bit Offset : 0B
[0C3h 0195   1]         Encoded Access Width : 02 [Word Access:16]
[0C4h 0196   8]                      Address : 0000000000000408

[0CCh 0204   4]                        Value : 00000001
[0D0h 0208   4]                Register Mask : 00000001

[0D4h 0212   1]              Watchdog Action : 20
[0D5h 0213   1]                  Instruction : 00
[0D6h 0214   2]                     Reserved : 0000

[0D8h 0216  12]              Register Region : [Generic Address Structure]
[0D8h 0216   1]                     Space ID : 00 [SystemMemory]
[0D9h 0217   1]                    Bit Width : 01
[0DAh 0218   1]                   Bit Offset : 00
[0DBh 0219   1]         Encoded Access Width : 01 [Byte Access:8]
[0DCh 0220   8]                      Address : 000000004D919F18

[0E4h 0228   4]                        Value : 00000001
[0E8h 0232   4]                Register Mask : 00000001

[0ECh 0236   1]              Watchdog Action : 21
[0EDh 0237   1]                  Instruction : 82
[0EEh 0238   2]                     Reserved : 0000

[0F0h 0240  12]              Register Region : [Generic Address Structure]
[0F0h 0240   1]                     Space ID : 00 [SystemMemory]
[0F1h 0241   1]                    Bit Width : 01
[0F2h 0242   1]                   Bit Offset : 00
[0F3h 0243   1]         Encoded Access Width : 01 [Byte Access:8]
[0F4h 0244   8]                      Address : 000000004D919F18

[0FCh 0252   4]                        Value : 00000000
[100h 0256   4]                Register Mask : 00000001

[104h 0260   1]              Watchdog Action : 10
[105h 0261   1]                  Instruction : 00
[106h 0262   2]                     Reserved : 0000

[108h 0264  12]              Register Region : [Generic Address Structure]
[108h 0264   1]                     Space ID : 00 [SystemMemory]
[109h 0265   1]                    Bit Width : 01
[10Ah 0266   1]                   Bit Offset : 01
[10Bh 0267   1]         Encoded Access Width : 01 [Byte Access:8]
[10Ch 0268   8]                      Address : 00000000FDC6000C

[114h 0276   4]                        Value : 00000000
[118h 0280   4]                Register Mask : 00000001

[11Ch 0284   1]              Watchdog Action : 11
[11Dh 0285   1]                  Instruction : 82
[11Eh 0286   2]                     Reserved : 0000

[120h 0288  12]              Register Region : [Generic Address Structure]
[120h 0288   1]                     Space ID : 00 [SystemMemory]
[121h 0289   1]                    Bit Width : 01
[122h 0290   1]                   Bit Offset : 01
[123h 0291   1]         Encoded Access Width : 01 [Byte Access:8]
[124h 0292   8]                      Address : 00000000FDC6000C

[12Ch 0300   4]                        Value : 00000000
[130h 0304   4]                Register Mask : 00000001

Raw Table Data: Length 308 (0x134)

    0000: 57 44 41 54 34 01 00 00 01 53 49 4E 54 45 4C 20  // WDAT4....SINTEL 
    0010: 53 4B 4C 00 00 00 00 00 00 00 00 00 4D 53 46 54  // SKL.........MSFT
    0020: 5F 00 00 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // _... ...........
    0030: 58 02 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // X...............
    0040: 0A 00 00 00 01 02 00 00 01 0A 00 02 00 04 00 00  // ................
    0050: 00 00 00 00 04 00 00 00 FF 03 00 00 06 03 00 00  // ................
    0060: 01 0A 00 02 12 04 00 00 00 00 00 00 FF 03 00 00  // ................
    0070: FF 03 00 00 08 00 00 00 01 01 0B 02 08 04 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 01 00 00 00 09 82 00 00  // ................
    0090: 01 01 0B 02 08 04 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 01 00 00 00 0A 00 00 00 01 01 0B 02 08 04 00 00  // ................
    00B0: 00 00 00 00 01 00 00 00 01 00 00 00 0B 82 00 00  // ................
    00C0: 01 01 0B 02 08 04 00 00 00 00 00 00 01 00 00 00  // ................
    00D0: 01 00 00 00 20 00 00 00 00 01 00 01 18 9F 91 4D  // .... ..........M
    00E0: 00 00 00 00 01 00 00 00 01 00 00 00 21 82 00 00  // ............!...
    00F0: 00 01 00 01 18 9F 91 4D 00 00 00 00 00 00 00 00  // .......M........
    0100: 01 00 00 00 10 00 00 00 00 01 01 01 0C 00 C6 FD  // ................
    0110: 00 00 00 00 00 00 00 00 01 00 00 00 11 82 00 00  // ................
    0120: 00 01 01 01 0C 00 C6 FD 00 00 00 00 00 00 00 00  // ................
    0130: 01 00 00 00                                      // ....


WDDT
----
[000h 0000   4]                    Signature : "WDDT"    [Watchdog Description Table]
[004h 0004   4]                 Table Length : 00000040
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 85
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 20091013

[024h 0036   2]        Specification Version : 0000
[026h 0038   2]                Table Version : 0100
[028h 0040   2]                PCI Vendor ID : 0100

[02Ah 0042  12]               Timer Register : [Generic Address Structure]
[02Ah 0042   1]                     Space ID : 01 [SystemIO]
[02Bh 0043   1]                    Bit Width : FF
[02Ch 0044   1]                   Bit Offset : 00
[02Dh 0045   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Eh 0046   8]                      Address : 0000000000000000

[036h 0054   2]                    Max Count : 003F
[038h 0056   2]                    Min Count : 0004
[03Ah 0058   2]                       Period : 0258
[03Ch 0060   2]       Status (decoded below) : 0001
                                   Available : 1
                                      Active : 0
                                     OS Owns : 0
                                  User Reset : 0
                               Timeout Reset : 0
                            Power Fail Reset : 0
                               Unknown Reset : 0
[03Eh 0062   2]   Capability (decoded below) : 0000
                                  Auto Reset : 0
                               Timeout Alert : 0

Raw Table Data: Length 64 (0x40)

    0000: 57 44 44 54 40 00 00 00 01 85 41 4C 41 53 4B 41  // WDDT@.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 00 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 00 00 00 01 00 01 01 FF 00 00 00 00  // ... ............
    0030: 00 00 00 00 00 00 3F 00 04 00 58 02 01 00 00 00  // ......?...X.....


WSMT1
-----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


WSMT2
-----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 66
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "SKL"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 66 49 4E 54 45 4C 20  // WSMT(....fINTEL 
    0010: 53 4B 4C 00 00 00 00 00 00 00 00 00 4D 53 46 54  // SKL.........MSFT
    0020: 5F 00 00 00 07 00 00 00                          // _.......


