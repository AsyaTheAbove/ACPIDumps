
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190509
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu6Tst "  0x00003000  "INTL"   0x20050228
 02)  SPCR  0x00000050  0x01  "PTLTD "  "$UCRTBL$"  0x06040000  "PTL "   0x00000001
 03)  MCFG  0x0000003C  0x01  "PTLTD "  "  MCFG  "  0x06040000  " LTP"   0x00000000
 04)  EINJ  0x00000170  0x01  "SMCI  "  "EINJTBL "  0x06040000  "SMCI"   0x00000001
 05)  APIC  0x000000C8  0x01  "PTLTD "  "  APIC  "  0x06040000  " LTP"   0x00000000
 06)  SLIC  0x00000176  0x01  "OEMID_"  "OEMTABLE"  0x06040000  " LTP"   0x00000000
 07)  SSDT  0x0000025F  0x01  "PmRef "  "Cpu0Tst "  0x00003000  "INTL"   0x20050228
 08)  BOOT  0x00000028  0x01  "PTLTD "  "$SBFTBL$"  0x06040000  " LTP"   0x00000001
 09)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu1Tst "  0x00003000  "INTL"   0x20050228
 10)  SPMI  0x00000041  0x05  "PTLTD "  "PTL-SPMI"  0x06040000  "PTL "   0x00000001
 11)  ERST  0x00000590  0x01  "SMCI  "  "ERSTTBL "  0x06040000  "SMCI"   0x00000001
 12)  DSDT  0x0000445A  0x01  "Intel "  "BLAKFORD"  0x06040000  "MSFT"   0x03000001
 13)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu3Tst "  0x00003000  "INTL"   0x20050228
 14)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu5Tst "  0x00003000  "INTL"   0x20050228
 15)  HEST  0x000000A8  0x01  "SMCI  "  "HESTTBL "  0x06040000  "SMCI"   0x00000001
 16)  SSDT  0x000013E9  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20050228
 17)  BERT  0x00000030  0x01  "SMCI  "  "BERTTBL "  0x06040000  "SMCI"   0x00000001
 18)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu7Tst "  0x00003000  "INTL"   0x20050228
 19)  FACP  0x00000074  0x01  "INTEL "  "TUMWATER"  0x06040000  "PTL "   0x00000003
 20)  SSDT  0x000000AF  0x05  "PTLTD "  "PTL-MI0 "  0x06040000  "PTEC"   0x00000001
 21)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu2Tst "  0x00003000  "INTL"   0x20050228
 22)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu4Tst "  0x00003000  "INTL"   0x20050228
 23)  FACS  0x00000040  0x00

Found 23 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000C8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D2
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  APIC  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 04
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 05
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 02
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 06
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 03
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 08
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 01 [I/O APIC]
[079h 0121   1]                       Length : 0C
[07Ah 0122   1]                  I/O Apic ID : 09
[07Bh 0123   1]                     Reserved : 00
[07Ch 0124   4]                      Address : FEC80000
[080h 0128   4]                    Interrupt : 00000018

[084h 0132   1]                Subtable Type : 04 [Local APIC NMI]
[085h 0133   1]                       Length : 06
[086h 0134   1]                 Processor ID : 00
[087h 0135   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[089h 0137   1]         Interrupt Input LINT : 01

[08Ah 0138   1]                Subtable Type : 04 [Local APIC NMI]
[08Bh 0139   1]                       Length : 06
[08Ch 0140   1]                 Processor ID : 01
[08Dh 0141   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[08Fh 0143   1]         Interrupt Input LINT : 01

[090h 0144   1]                Subtable Type : 04 [Local APIC NMI]
[091h 0145   1]                       Length : 06
[092h 0146   1]                 Processor ID : 02
[093h 0147   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[095h 0149   1]         Interrupt Input LINT : 01

[096h 0150   1]                Subtable Type : 04 [Local APIC NMI]
[097h 0151   1]                       Length : 06
[098h 0152   1]                 Processor ID : 03
[099h 0153   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[09Bh 0155   1]         Interrupt Input LINT : 01

[09Ch 0156   1]                Subtable Type : 04 [Local APIC NMI]
[09Dh 0157   1]                       Length : 06
[09Eh 0158   1]                 Processor ID : 04
[09Fh 0159   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A1h 0161   1]         Interrupt Input LINT : 01

[0A2h 0162   1]                Subtable Type : 04 [Local APIC NMI]
[0A3h 0163   1]                       Length : 06
[0A4h 0164   1]                 Processor ID : 05
[0A5h 0165   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A7h 0167   1]         Interrupt Input LINT : 01

[0A8h 0168   1]                Subtable Type : 04 [Local APIC NMI]
[0A9h 0169   1]                       Length : 06
[0AAh 0170   1]                 Processor ID : 06
[0ABh 0171   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0ADh 0173   1]         Interrupt Input LINT : 01

[0AEh 0174   1]                Subtable Type : 04 [Local APIC NMI]
[0AFh 0175   1]                       Length : 06
[0B0h 0176   1]                 Processor ID : 07
[0B1h 0177   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B3h 0179   1]         Interrupt Input LINT : 01

[0B4h 0180   1]                Subtable Type : 02 [Interrupt Source Override]
[0B5h 0181   1]                       Length : 0A
[0B6h 0182   1]                          Bus : 00
[0B7h 0183   1]                       Source : 00
[0B8h 0184   4]                    Interrupt : 00000002
[0BCh 0188   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[0BEh 0190   1]                Subtable Type : 02 [Interrupt Source Override]
[0BFh 0191   1]                       Length : 0A
[0C0h 0192   1]                          Bus : 00
[0C1h 0193   1]                       Source : 09
[0C2h 0194   4]                    Interrupt : 00000009
[0C6h 0198   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 200 (0xC8)

    0000: 41 50 49 43 C8 00 00 00 01 D2 50 54 4C 54 44 20  // APIC......PTLTD 
    0010: 09 20 41 50 49 43 20 20 00 00 04 06 20 4C 54 50  // . APIC  .... LTP
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 04 01 00 00 00 00 08 02 01  // ................
    0040: 01 00 00 00 00 08 03 05 01 00 00 00 00 08 04 02  // ................
    0050: 01 00 00 00 00 08 05 06 01 00 00 00 00 08 06 03  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 01 0C 08 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 01 0C 09 00 00 00 C8 FE  // ................
    0080: 18 00 00 00 04 06 00 05 00 01 04 06 01 05 00 01  // ................
    0090: 04 06 02 05 00 01 04 06 03 05 00 01 04 06 04 05  // ................
    00A0: 00 01 04 06 05 05 00 01 04 06 06 05 00 01 04 06  // ................
    00B0: 07 05 00 01 02 0A 00 00 02 00 00 00 05 00 02 0A  // ................
    00C0: 00 09 09 00 00 00 0D 00                          // ........


BERT
----
[000h 0000   4]                    Signature : "BERT"    [Boot Error Record Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 93
[00Ah 0010   6]                       Oem ID : "SMCI  "
[010h 0016   8]                 Oem Table ID : "BERTTBL "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "SMCI"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]     Boot Error Region Length : 00000400
[028h 0040   8]    Boot Error Region Address : 00000000BFF68400

Raw Table Data: Length 48 (0x30)

    0000: 42 45 52 54 30 00 00 00 01 93 53 4D 43 49 20 20  // BERT0.....SMCI  
    0010: 42 45 52 54 54 42 4C 20 00 00 04 06 53 4D 43 49  // BERTTBL ....SMCI
    0020: 01 00 00 00 00 04 00 00 00 84 F6 BF 00 00 00 00  // ................


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A3
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "$SBFTBL$"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]          Boot Register Index : 38
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 A3 50 54 4C 54 44 20  // BOOT(.....PTLTD 
    0010: 24 53 42 46 54 42 4C 24 00 00 04 06 20 4C 54 50  // $SBFTBL$.... LTP
    0020: 01 00 00 00 38 00 00 00                          // ....8...


DSDT
----
DefinitionBlock ("", "DSDT", 1, "Intel", "BLAKFORD", 0x06040000)
{
    OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
    Field (RCRB, DWordAcc, Lock, Preserve)
    {
        Offset (0x1000), 
        Offset (0x3000), 
        Offset (0x3404), 
        HPAS,   2, 
            ,   5, 
        HPAE,   1, 
        Offset (0x3418), 
            ,   1, 
        PATD,   1, 
        SATD,   1, 
        SMBD,   1, 
        AZAD,   1, 
        A97D,   1, 
        Offset (0x341A), 
        RE1D,   1, 
        RE2D,   1, 
        RE3D,   1, 
        RE4D,   1
    }

    Scope (_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x03
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x04
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x08
            Notify (\_SB.PCI0.LPC0.SIO.COM1, 0x02) // Device Wake
            Notify (\_SB.PCI0.LPC0.SIO.COM2, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x09
            Notify (\_SB.PCI0.P0P2.BMD0.BPD2, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P4, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P6, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x0B
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x0C
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x0D
            Notify (\_SB.PCI0.EUSB, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x18
            Notify (\_SB.PCI0.P0P2.BMF3, 0x02) // Device Wake
        }

        Method (_L1E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.PT80 = 0x1E
            Notify (\_SB.PCI0.LPC0.SIO.KBC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.LPC0.SIO.MSE0, 0x02) // Device Wake
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00001010, 0x06){}
        Processor (CPU1, 0x01, 0x00001010, 0x06){}
        Processor (CPU2, 0x02, 0x00001010, 0x06){}
        Processor (CPU3, 0x03, 0x00001010, 0x06){}
        Processor (CPU4, 0x04, 0x00001010, 0x06){}
        Processor (CPU5, 0x05, 0x00001010, 0x06){}
        Processor (CPU6, 0x06, 0x00001010, 0x06){}
        Processor (CPU7, 0x07, 0x00001010, 0x06){}
    }

    Scope (_SB)
    {
        OperationRegion (ACB, SystemMemory, 0xBFF65EBC, 0x00000090)
        Field (ACB, AnyAcc, NoLock, Preserve)
        {
            BCMD,   8, 
            DID,    32, 
            INFO,   1104
        }

        Field (ACB, AnyAcc, NoLock, Preserve)
        {
            DMY,    40, 
            INF,    8
        }

        OperationRegion (SMIB, SystemIO, 0x0000FE00, 0x02)
        Field (SMIB, AnyAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        Name (OSTB, 0xFFFFFFFF)
        Method (OSTP, 0, NotSerialized)
        {
            If ((^OSTB == 0xFFFFFFFF))
            {
                If (CondRefOf (\_OSI, Local0))
                {
                    If (\_OSI ("Windows 2001"))
                    {
                        ^OSTB = 0x08
                    }
                    Else
                    {
                        ^OSTB = 0x00
                    }
                }
                ElseIf (CondRefOf (\_OS, Local0))
                {
                    If (^SEQL (\_OS, "Microsoft Windows"))
                    {
                        ^OSTB = 0x01
                    }
                    ElseIf (^SEQL (\_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        ^OSTB = 0x02
                    }
                    ElseIf (^SEQL (\_OS, "Microsoft Windows NT"))
                    {
                        ^OSTB = 0x04
                    }
                    Else
                    {
                        ^OSTB = 0x00
                    }
                }
                Else
                {
                    ^OSTB = 0x00
                }
            }

            Return (^OSTB) /* \_SB_.OSTB */
        }

        Method (SEQL, 2, Serialized)
        {
            Noop
            Local0 = SizeOf (Arg0)
            Local1 = SizeOf (Arg1)
            If ((Local0 != Local1))
            {
                Return (Zero)
            }

            Name (BUF0, Buffer (Local0){})
            BUF0 = Arg0
            Name (BUF1, Buffer (Local0){})
            BUF1 = Arg1
            Local2 = Zero
            While ((Local2 < Local0))
            {
                Local3 = DerefOf (BUF0 [Local2])
                Local4 = DerefOf (BUF1 [Local2])
                If ((Local3 != Local4))
                {
                    Return (Zero)
                }

                Local2++
            }

            Return (One)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            If ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c")))
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                SUPP = CDW2 /* \_SB_._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_._OSC.CDW3 */
                If ((SUPP & 0x01))
                {
                    Return (Arg3)
                }

                Return ((SUPP | 0x04))
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (_ADR, 0x00)  // _ADR: Address
            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                Local0 = (TOLM & 0xF000)
                Local0 <<= 0x10
                BTMN = Local0
                BTLN = (0xFEC00000 - Local0)
                BTMX = ((BTMN + BTLN) - 0x01)
                CreateBitField (RSRC, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MIN, C0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MAX, C0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                C0RW = One
                If (((PAM1 & 0x03) == 0x01))
                {
                    C0RW = Zero
                }

                C0LN = Zero
                If (!(PAM1 & 0x03))
                {
                    C0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MIN, C4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MAX, C4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                C4RW = One
                If (((PAM1 & 0x30) == 0x10))
                {
                    C4RW = Zero
                }

                C4LN = Zero
                If (!(PAM1 & 0x30))
                {
                    C4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y03._MIN, C8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y03._MAX, C8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                C8RW = One
                If (((PAM2 & 0x03) == 0x01))
                {
                    C8RW = Zero
                }

                C8LN = Zero
                If (!(PAM2 & 0x03))
                {
                    C8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y04._MIN, CCMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y04._MAX, CCMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                CCRW = One
                If (((PAM2 & 0x30) == 0x10))
                {
                    CCRW = Zero
                }

                CCLN = Zero
                If (!(PAM2 & 0x30))
                {
                    CCLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y05._MIN, D0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y05._MAX, D0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                D0RW = One
                If (((PAM3 & 0x03) == 0x01))
                {
                    D0RW = Zero
                }

                D0LN = Zero
                If (!(PAM3 & 0x03))
                {
                    D0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y06._MIN, D4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y06._MAX, D4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                D4RW = One
                If (((PAM3 & 0x30) == 0x10))
                {
                    D4RW = Zero
                }

                D4LN = Zero
                If (!(PAM3 & 0x30))
                {
                    D4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y07._MIN, D8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y07._MAX, D8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                D8RW = One
                If (((PAM4 & 0x03) == 0x01))
                {
                    D8RW = Zero
                }

                D8LN = Zero
                If (!(PAM4 & 0x03))
                {
                    D8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y08._MIN, DCMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y08._MAX, DCMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                DCRW = One
                If (((PAM4 & 0x30) == 0x10))
                {
                    DCRW = Zero
                }

                DCLN = Zero
                If (!(PAM4 & 0x30))
                {
                    DCLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y09._MIN, E0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y09._MAX, E0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                E0RW = One
                If (((PAM5 & 0x03) == 0x01))
                {
                    E0RW = Zero
                }

                E0LN = Zero
                If (!(PAM5 & 0x03))
                {
                    E0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._MIN, E4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._MAX, E4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                E4RW = One
                If (((PAM5 & 0x30) == 0x10))
                {
                    E4RW = Zero
                }

                E4LN = Zero
                If (!(PAM5 & 0x30))
                {
                    E4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._MIN, E8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._MAX, E8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                E8RW = One
                If (((PAM6 & 0x03) == 0x01))
                {
                    E8RW = Zero
                }

                E8LN = Zero
                If (!(PAM6 & 0x03))
                {
                    E8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._MIN, ECMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._MAX, ECMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                ECRW = One
                If (((PAM6 & 0x30) == 0x10))
                {
                    ECRW = Zero
                }

                ECLN = Zero
                If (!(PAM6 & 0x30))
                {
                    ECLN = 0x4000
                }

                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                \_SB.OSTP ()
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (PCE2, PCI_Config, 0x00, 0xFF)
                Field (PCE2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x48), 
                        ,   9, 
                    PGPE,   1, 
                    Offset (0x88), 
                        ,   3, 
                    PMEI,   1, 
                    Offset (0x8E), 
                    PMES,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x01)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }

                Device (BMD0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (!\PICF)
                        {
                            Return (Package (0x08)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x00, 
                                    \_SB.PCI0.LPC0.LNKA, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x01, 
                                    \_SB.PCI0.LPC0.LNKB, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    \_SB.PCI0.LPC0.LNKC, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    \_SB.PCI0.LPC0.LNKD, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0002FFFF, 
                                    0x00, 
                                    \_SB.PCI0.LPC0.LNKC, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0002FFFF, 
                                    0x01, 
                                    \_SB.PCI0.LPC0.LNKD, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0002FFFF, 
                                    0x02, 
                                    \_SB.PCI0.LPC0.LNKA, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0002FFFF, 
                                    0x03, 
                                    \_SB.PCI0.LPC0.LNKB, 
                                    0x00
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x00, 
                                    0x00, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0x0002FFFF, 
                                    0x00, 
                                    0x00, 
                                    0x12
                                }
                            })
                        }
                    }

                    Device (BPD0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Device (PXH0)
                        {
                            Name (_ADR, 0x00)  // _ADR: Address
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x18, 
                                0x05
                            })
                            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                            {
                                If (!\PICF)
                                {
                                    Return (Package (0x06)
                                    {
                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x00, 
                                            \_SB.PCI0.LPC0.LNKA, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x01, 
                                            \_SB.PCI0.LPC0.LNKB, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x02, 
                                            \_SB.PCI0.LPC0.LNKC, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x03, 
                                            \_SB.PCI0.LPC0.LNKD, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0002FFFF, 
                                            0x00, 
                                            \_SB.PCI0.LPC0.LNKA, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0002FFFF, 
                                            0x01, 
                                            \_SB.PCI0.LPC0.LNKB, 
                                            0x00
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x06)
                                    {
                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x00, 
                                            0x00, 
                                            0x10
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x01, 
                                            0x00, 
                                            0x11
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x02, 
                                            0x00, 
                                            0x12
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x03, 
                                            0x00, 
                                            0x13
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0002FFFF, 
                                            0x00, 
                                            0x00, 
                                            0x10
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0002FFFF, 
                                            0x01, 
                                            0x00, 
                                            0x11
                                        }
                                    })
                                }
                            }
                        }

                        Device (PXH1)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x18, 
                                0x05
                            })
                            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                            {
                                If (!\PICF)
                                {
                                    Return (Package (0x04)
                                    {
                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x00, 
                                            \_SB.PCI0.LPC0.LNKA, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x01, 
                                            \_SB.PCI0.LPC0.LNKB, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x02, 
                                            \_SB.PCI0.LPC0.LNKC, 
                                            0x00
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x03, 
                                            \_SB.PCI0.LPC0.LNKD, 
                                            0x00
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x04)
                                    {
                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x00, 
                                            0x00, 
                                            0x10
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x01, 
                                            0x00, 
                                            0x11
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x02, 
                                            0x00, 
                                            0x12
                                        }, 

                                        Package (0x04)
                                        {
                                            0x0001FFFF, 
                                            0x03, 
                                            0x00, 
                                            0x13
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Device (BPD2)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x09, 
                            0x05
                        })
                        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                        {
                            If (!\PICF)
                            {
                                Return (Package (0x02)
                                {
                                    Package (0x04)
                                    {
                                        0xFFFF, 
                                        0x00, 
                                        \_SB.PCI0.LPC0.LNKC, 
                                        0x00
                                    }, 

                                    Package (0x04)
                                    {
                                        0xFFFF, 
                                        0x01, 
                                        \_SB.PCI0.LPC0.LNKD, 
                                        0x00
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    Package (0x04)
                                    {
                                        0xFFFF, 
                                        0x00, 
                                        0x00, 
                                        0x12
                                    }, 

                                    Package (0x04)
                                    {
                                        0xFFFF, 
                                        0x01, 
                                        0x00, 
                                        0x13
                                    }
                                })
                            }
                        }
                    }
                }

                Device (BMF3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x18, 
                        0x05
                    })
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (!\PICF)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x00, 
                                    \_SB.PCI0.LPC0.LNKA, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x01, 
                                    \_SB.PCI0.LPC0.LNKB, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x02, 
                                    \_SB.PCI0.LPC0.LNKC, 
                                    0x00
                                }, 

                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x03, 
                                    \_SB.PCI0.LPC0.LNKD, 
                                    0x00
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x00, 
                                    0x00, 
                                    0x18
                                }, 

                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x01, 
                                    0x00, 
                                    0x19
                                }, 

                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x02, 
                                    0x00, 
                                    0x1A
                                }, 

                                Package (0x04)
                                {
                                    0x0001FFFF, 
                                    0x03, 
                                    0x00, 
                                    0x1B
                                }
                            })
                        }
                    }
                }
            }

            Device (P0P4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                OperationRegion (PCE4, PCI_Config, 0x00, 0xFF)
                Field (PCE4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x48), 
                        ,   9, 
                    PGPE,   1, 
                    Offset (0x88), 
                        ,   3, 
                    PMEI,   1, 
                    Offset (0x8E), 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                    ElseIf (\EIRQ)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x25
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x26
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x27
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (P0P6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                OperationRegion (PCE6, PCI_Config, 0x00, 0xFF)
                Field (PCE6, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x48), 
                        ,   9, 
                    PGPE,   1, 
                    Offset (0x88), 
                        ,   3, 
                    PMEI,   1, 
                    Offset (0x8E), 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                    ElseIf (\EIRQ)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2B
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x28
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x29
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!\PICF)
                {
                    Return (Package (0x24)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }
                    })
                }
                Else
                {
                    Return (Package (0x24)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x00, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x01, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }
                    })
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (0x01)
            }

            OperationRegion (DB80, SystemIO, 0x80, 0x01)
            Field (DB80, ByteAcc, NoLock, Preserve)
            {
                PT80,   8
            }

            OperationRegion (DB90, SystemIO, 0x90, 0x01)
            Field (DB90, ByteAcc, NoLock, Preserve)
            {
                PT90,   8
            }

            OperationRegion (REGS, SystemMemory, 0xE0080059, 0x08)
            Field (REGS, AnyAcc, NoLock, Preserve)
            {
                PAM0,   8, 
                PAM1,   8, 
                PAM2,   8, 
                PAM3,   8, 
                PAM4,   8, 
                PAM5,   8, 
                PAM6,   8
            }

            OperationRegion (LMEM, SystemMemory, 0xE008106C, 0x02)
            Field (LMEM, AnyAcc, NoLock, Preserve)
            {
                TOLM,   16
            }

            Device (PEX0)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PCEE, PCI_Config, 0x00, 0xFF)
                Field (PCEE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x62), 
                    PMES,   1, 
                    Offset (0xDA), 
                        ,   15, 
                    PSCI,   1, 
                    Offset (0xDE), 
                        ,   15, 
                    PMSS,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                    ElseIf (\EIRQ)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x20
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x21
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x23
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (US1W, PCI_Config, 0xC4, 0x04)
                Field (US1W, DWordAcc, Lock, Preserve)
                {
                    W1EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x01
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        W1EN = 0x03
                    }
                    Else
                    {
                        W1EN = 0x00
                    }
                }

                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (0x01)
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (US2W, PCI_Config, 0xC4, 0x04)
                Field (US2W, DWordAcc, Lock, Preserve)
                {
                    W2EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x01
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        W2EN = 0x03
                    }
                    Else
                    {
                        W2EN = 0x00
                    }
                }

                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (0x01)
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x01
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }

                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (0x02)
                }
            }

            Device (EUSB)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x01
                })
            }

            Device (PCIB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x03)
                        {
                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x03)
                        {
                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Name (DVEN, 0x00)
                Method (DECD, 4, Serialized)
                {
                    Noop
                }

                Device (MBRD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x1F)  // _UID: Unique ID
                    Name (RSRC, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0295,             // Range Minimum
                            0x0295,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CA0,             // Range Minimum
                            0x0CAF,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            _Y0D)
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x1180,             // Range Minimum
                            0x1180,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFEE00000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFEC80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED1C000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE000000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE600000,         // Address Base
                            0x00100000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (\_OSI ("Windows 2006"))
                        {
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0D._MAX, SIMA)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0D._LEN, SIML)  // _LEN: Length
                            SIMA = 0x0CA1
                            SIML = 0x02
                        }

                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0E._MIN, PMMN)  // _MIN: Minimum Base Address
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0E._MAX, PMMX)  // _MAX: Maximum Base Address
                        PMMN = (^^PMBA & 0xFF80)
                        PMMX = PMMN /* \_SB_.PCI0.LPC0.MBRD._CRS.PMMN */
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0F._MIN, GPMN)  // _MIN: Minimum Base Address
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0F._MAX, GPMX)  // _MAX: Maximum Base Address
                        GPMN = (^^GPBA & 0xFFC0)
                        GPMX = GPMN /* \_SB_.PCI0.LPC0.MBRD._CRS.GPMN */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.MBRD.RSRC */
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {2}
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y10)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.OSTB >= 0x08))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }

                        Return (0x00)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPC0.HPET._Y10._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == 0x01))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPC0.HPET.BUF0 */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((\_SB.OSTB >= 0x08))
                        {
                            If (HPAE)
                            {
                                Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                            }
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIME)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((\_SB.OSTB >= 0x08))
                        {
                            If (HPAE)
                            {
                                Return (BUF0) /* \_SB_.PCI0.LPC0.TIME.BUF0 */
                            }
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TIME.BUF1 */
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y11)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRA |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKA._Y11._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRA & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKA.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRA = (Local0 | (PIRA & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRA & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y12)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRB |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKB._Y12._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRB & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKB.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRB = (Local0 | (PIRB & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRB & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y13)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRC |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKC._Y13._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRC & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKC.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRC = (Local0 | (PIRC & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRC & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y14)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRD |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKD._Y14._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRD & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKD.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRD = (Local0 | (PIRD & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRD & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y15)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKE._Y15._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRE & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKE.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = (Local0 | (PIRE & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRE & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y16)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKF._Y16._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRF & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKF.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = (Local0 | (PIRF & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRF & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y17)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKG._Y17._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRG & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKG.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = (Local0 | (PIRG & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRG & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {4,5,6,7,10,11,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y18)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKH._Y18._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRH & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKH.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = (Local0 | (PIRH & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRH & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                OperationRegion (PIRX, PCI_Config, 0x60, 0x04)
                Field (PIRX, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8
                }

                OperationRegion (PIRY, PCI_Config, 0x68, 0x04)
                Field (PIRY, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8
                }

                OperationRegion (REGS, PCI_Config, 0x40, 0x10)
                Field (REGS, DWordAcc, Lock, Preserve)
                {
                    PMBA,   16, 
                    Offset (0x08), 
                    GPBA,   16
                }

                OperationRegion (PMRG, PCI_Config, 0xA0, 0x04)
                Field (PMRG, DWordAcc, Lock, Preserve)
                {
                        ,   10, 
                    BPEE,   1
                }

                OperationRegion (LIOE, PCI_Config, 0x80, 0x02)
                Field (LIOE, WordAcc, Lock, Preserve)
                {
                    CAPD,   3, 
                        ,   1, 
                    CBPD,   3, 
                    Offset (0x01), 
                    LPPD,   2
                }

                Method (IODE, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        If ((Arg1 == 0x03F8))
                        {
                            CAPD = 0x00
                        }

                        If ((Arg1 == 0x02F8))
                        {
                            CAPD = 0x01
                        }

                        If ((Arg1 == 0x03E8))
                        {
                            CAPD = 0x07
                        }

                        If ((Arg1 == 0x02E8))
                        {
                            CAPD = 0x05
                        }
                    }

                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x03F8))
                        {
                            CBPD = 0x00
                        }

                        If ((Arg1 == 0x02F8))
                        {
                            CBPD = 0x01
                        }

                        If ((Arg1 == 0x03E8))
                        {
                            CBPD = 0x07
                        }

                        If ((Arg1 == 0x02E8))
                        {
                            CBPD = 0x05
                        }
                    }

                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x0378))
                        {
                            LPPD = 0x00
                        }

                        If ((Arg1 == 0x0278))
                        {
                            LPPD = 0x01
                        }

                        If ((Arg1 == 0x03BC))
                        {
                            LPPD = 0x02
                        }
                    }
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (SIO)
                {
                    Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
                    Mutex (W627, 0x00)
                    OperationRegion (SIBP, SystemIO, 0x2E, 0x02)
                    Field (SIBP, ByteAcc, NoLock, Preserve)
                    {
                        BPIO,   8
                    }

                    OperationRegion (SIIO, SystemIO, 0x2E, 0x02)
                    Field (SIIO, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x22), 
                        POW,    8, 
                        Offset (0x30), 
                        ACT,    1, 
                        Offset (0x60), 
                        IOBH,   8, 
                        IOBL,   8, 
                        IO2H,   8, 
                        IO2L,   8, 
                        Offset (0x70), 
                        INT,    4, 
                        Offset (0x74), 
                        DMAS,   3, 
                        Offset (0xE0), 
                        Z000,   8, 
                        Offset (0xE4), 
                        Z001,   8, 
                        Offset (0xF0), 
                        MODE,   3, 
                        Offset (0xF1), 
                            ,   3, 
                        IRMD,   3, 
                        Offset (0xF3), 
                            ,   6, 
                        SLED,   2, 
                        Offset (0xF5), 
                            ,   6, 
                        PLED,   2
                    }

                    Method (CFG, 1, NotSerialized)
                    {
                        BPIO = 0x87
                        BPIO = 0x87
                        LDN = Arg0
                    }

                    Method (XCFG, 0, NotSerialized)
                    {
                        BPIO = 0xAA
                    }

                    Method (STA, 1, NotSerialized)
                    {
                        Acquire (W627, 0x5000)
                        CFG (Arg0)
                        Local1 = 0x00
                        If (ACT)
                        {
                            Local1 = 0x0F
                        }
                        ElseIf ((IOBH || IOBL))
                        {
                            Local1 = 0x0D
                        }

                        XCFG ()
                        Release (W627)
                        Return (Local1)
                    }

                    Method (DIS, 1, NotSerialized)
                    {
                        Acquire (W627, 0x1388)
                        CFG (Arg0)
                        ACT = 0x00
                        XCFG ()
                        Release (W627)
                        Return (0x00)
                    }

                    Method (PS0, 1, NotSerialized)
                    {
                        Acquire (W627, 0x1388)
                        CFG (Arg0)
                        ACT = 0x01
                        XCFG ()
                        Release (W627)
                        Return (0x00)
                    }

                    Method (PS3, 1, NotSerialized)
                    {
                        Acquire (W627, 0x1388)
                        CFG (Arg0)
                        ACT = 0x00
                        XCFG ()
                        Release (W627)
                        Return (0x00)
                    }

                    Device (KBC0)
                    {
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {1}
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x1E, 
                            0x05
                        })
                    }

                    Device (MSE0)
                    {
                        Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {12}
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x1E, 
                            0x05
                        })
                    }

                    Device (COM1)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = STA (0x02)
                            Return (Local1)
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x08, 
                            0x05
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            DIS (0x02)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y19)
                                IRQNoFlags (_Y1A)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM1._CRS._Y19._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM1._CRS._Y19._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.COM1._CRS._Y1A._INT, IRQV)  // _INT: Interrupts
                            Acquire (W627, 0x1388)
                            CFG (0x02)
                            If (ACT)
                            {
                                IO1 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                IO2 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                IO3 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                IO4 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                Local0 = 0x01
                                IRQV = (Local0 << INT) /* \_SB_.PCI0.LPC0.SIO_.INT_ */
                            }

                            XCFG ()
                            Release (W627)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.COM1._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (W627, 0x1388)
                            CFG (0x02)
                            IOBL = IO1 /* \_SB_.PCI0.LPC0.SIO_.COM1._SRS.IO1_ */
                            IOBH = IO2 /* \_SB_.PCI0.LPC0.SIO_.COM1._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INT = (Local0 - 0x01)
                            ACT = 0x01
                            XCFG ()
                            Release (W627)
                            CreateWordField (Arg0, 0x02, IORG)
                            \_SB.PCI0.LPC0.IODE (0x00, IORG)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PS0 (0x02)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PS3 (0x02)
                        }
                    }

                    Device (COM2)
                    {
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Acquire (W627, 0x1388)
                            CFG (0x03)
                            If ((IRMD && 0x38))
                            {
                                Local1 = 0x1005D041
                            }
                            Else
                            {
                                Local1 = 0x0105D041
                            }

                            XCFG ()
                            Release (W627)
                            Return (Local1)
                        }

                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = STA (0x03)
                            Return (Local1)
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x08, 
                            0x05
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            DIS (0x03)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y1B)
                                IRQNoFlags (_Y1C)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM2._CRS._Y1B._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM2._CRS._Y1B._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.COM2._CRS._Y1C._INT, IRQV)  // _INT: Interrupts
                            Acquire (W627, 0x1388)
                            CFG (0x03)
                            If (ACT)
                            {
                                IO1 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                IO2 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                IO3 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                IO4 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                Local0 = 0x01
                                IRQV = (Local0 << INT) /* \_SB_.PCI0.LPC0.SIO_.INT_ */
                            }

                            XCFG ()
                            Release (W627)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.COM2._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (W627, 0x1388)
                            CFG (0x03)
                            IOBL = IO1 /* \_SB_.PCI0.LPC0.SIO_.COM2._SRS.IO1_ */
                            IOBH = IO2 /* \_SB_.PCI0.LPC0.SIO_.COM2._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INT = (Local0 - 0x01)
                            ACT = 0x01
                            XCFG ()
                            Release (W627)
                            CreateWordField (Arg0, 0x02, IORG)
                            \_SB.PCI0.LPC0.IODE (0x01, IORG)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PS0 (0x03)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PS3 (0x03)
                        }
                    }

                    Device (FDC)
                    {
                        Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = STA (0x00)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            DIS (0x00)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x06,               // Length
                                    _Y1D)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    _Y1E)
                                IRQNoFlags (_Y1F)
                                    {}
                                DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                                    {}
                            })
                            Acquire (W627, 0x1388)
                            CFG (0x00)
                            If (ACT)
                            {
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y1D._MIN, IO1)  // _MIN: Minimum Base Address
                                CreateByteField (RSRC, 0x03, IO2)
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y1D._MAX, IO3)  // _MAX: Maximum Base Address
                                CreateByteField (RSRC, 0x05, IO4)
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y1E._MIN, IO5)  // _MIN: Minimum Base Address
                                CreateByteField (RSRC, 0x0B, IO6)
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y1E._MAX, IO7)  // _MAX: Maximum Base Address
                                CreateByteField (RSRC, 0x0D, IO8)
                                CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y1F._INT, IRQV)  // _INT: Interrupts
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y20._DMA, DMAV)  // _DMA: Direct Memory Access
                                IO1 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                IO2 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                IO3 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                IO4 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                IO5 = (IOBL + 0x07)
                                IO6 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                IO7 = (IOBL + 0x07)
                                IO8 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                Local0 = 0x01
                                IRQV = (Local0 << INT) /* \_SB_.PCI0.LPC0.SIO_.INT_ */
                                Local0 = 0x01
                                DMAV = (Local0 << DMAS) /* \_SB_.PCI0.LPC0.SIO_.DMAS */
                            }

                            XCFG ()
                            Release (W627)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.FDC_._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x03F0,             // Range Minimum
                                    0x03F0,             // Range Maximum
                                    0x01,               // Alignment
                                    0x06,               // Length
                                    )
                                IO (Decode16,
                                    0x03F7,             // Range Minimum
                                    0x03F7,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {6}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {2}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0370,             // Range Minimum
                                    0x0370,             // Range Maximum
                                    0x01,               // Alignment
                                    0x06,               // Length
                                    )
                                IO (Decode16,
                                    0x0377,             // Range Minimum
                                    0x0377,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {6}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {2}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x11, IRQV)
                            CreateByteField (Arg0, 0x14, DMAV)
                            Acquire (W627, 0x1388)
                            CFG (0x00)
                            IOBL = IO1 /* \_SB_.PCI0.LPC0.SIO_.FDC_._SRS.IO1_ */
                            IOBH = IO2 /* \_SB_.PCI0.LPC0.SIO_.FDC_._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INT = (Local0 - 0x01)
                            FindSetRightBit (DMAV, Local0)
                            DMAS = (Local0 - 0x01)
                            ACT = 0x01
                            XCFG ()
                            Release (W627)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PS0 (0x00)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PS3 (0x00)
                        }
                    }

                    Device (PRT)
                    {
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Acquire (W627, 0x1388)
                            CFG (0x01)
                            If ((MODE == 0x02))
                            {
                                Local1 = 0x0104D041
                            }
                            Else
                            {
                                Local1 = 0x0004D041
                            }

                            XCFG ()
                            Release (W627)
                            Return (Local1)
                        }

                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = STA (0x01)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            DIS (0x01)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Acquire (W627, 0x1388)
                            CFG (0x01)
                            Name (CRSA, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y21)
                                IRQNoFlags (_Y22)
                                    {}
                            })
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y21._MIN, IOA1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSA, 0x03, IOA2)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y21._MAX, IOA3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSA, 0x05, IOA4)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y21._ALN, ALA1)  // _ALN: Alignment
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y21._LEN, LNA1)  // _LEN: Length
                            CreateWordField (CRSA, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y22._INT, IRQA)  // _INT: Interrupts
                            Name (CRSB, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y23)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y24)
                                IRQNoFlags (_Y25)
                                    {}
                                DMA (Compatibility, NotBusMaster, Transfer16, _Y26)
                                    {}
                            })
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y23._MIN, IOB1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSB, 0x03, IOB2)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y23._MAX, IOB3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSB, 0x05, IOB4)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y23._ALN, ALB1)  // _ALN: Alignment
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y23._LEN, LNB1)  // _LEN: Length
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y24._MIN, IOB5)  // _MIN: Minimum Base Address
                            CreateByteField (CRSB, 0x0B, IOB6)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y24._MAX, IOB7)  // _MAX: Maximum Base Address
                            CreateByteField (CRSB, 0x0D, IOB8)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y24._ALN, ALB2)  // _ALN: Alignment
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y24._LEN, LNB2)  // _LEN: Length
                            CreateWordField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y25._INT, IRQB)  // _INT: Interrupts
                            CreateWordField (CRSB, \_SB.PCI0.LPC0.SIO.PRT._CRS._Y26._DMA, DMAV)  // _DMA: Direct Memory Access
                            If (ACT)
                            {
                                If ((MODE == 0x02))
                                {
                                    IOB1 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                    IOB2 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                    IOB3 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                    IOB4 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                    IOB5 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                    IOB6 = (IOBH + 0x04)
                                    IOB7 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                    IOB8 = (IOBH + 0x04)
                                    If ((IOBL == 0xBC))
                                    {
                                        ALB1 = 0x01
                                        LNB1 = 0x04
                                        ALB2 = 0x01
                                        LNB2 = 0x04
                                    }

                                    Local0 = 0x01
                                    IRQB = (Local0 << INT) /* \_SB_.PCI0.LPC0.SIO_.INT_ */
                                    Local0 = 0x01
                                    DMAV = (Local0 << DMAS) /* \_SB_.PCI0.LPC0.SIO_.DMAS */
                                    Return (CRSB) /* \_SB_.PCI0.LPC0.SIO_.PRT_._CRS.CRSB */
                                }
                                Else
                                {
                                    IOA1 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                    IOA2 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                    IOA3 = IOBL /* \_SB_.PCI0.LPC0.SIO_.IOBL */
                                    IOA4 = IOBH /* \_SB_.PCI0.LPC0.SIO_.IOBH */
                                    Local0 = 0x01
                                    IRQA = (Local0 << INT) /* \_SB_.PCI0.LPC0.SIO_.INT_ */
                                    If ((IOBL == 0xBC))
                                    {
                                        ALA1 = 0x01
                                        LNA1 = 0x04
                                    }

                                    Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.PRT_._CRS.CRSA */
                                }
                            }
                            ElseIf ((MODE == 0x02))
                            {
                                Return (CRSB) /* \_SB_.PCI0.LPC0.SIO_.PRT_._CRS.CRSB */
                            }
                            Else
                            {
                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.PRT_._CRS.CRSA */
                            }

                            XCFG ()
                            Release (W627)
                        }

                        Name (PRSA, ResourceTemplate ()
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {5}
                            }
                            EndDependentFn ()
                        })
                        Name (PRSB, ResourceTemplate ()
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {0,1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {0,1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {0,1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {0,1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {0,1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {0,1,3}
                            }
                            EndDependentFn ()
                        })
                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            Acquire (W627, 0x1388)
                            CFG (0x01)
                            If ((MODE == 0x02))
                            {
                                Local0 = PRSB /* \_SB_.PCI0.LPC0.SIO_.PRT_.PRSB */
                            }
                            Else
                            {
                                Local0 = PRSA /* \_SB_.PCI0.LPC0.SIO_.PRT_.PRSA */
                            }

                            XCFG ()
                            Release (W627)
                            Return (Local0)
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            Acquire (W627, 0x1388)
                            CFG (0x01)
                            If ((MODE == 0x02))
                            {
                                CreateByteField (Arg0, 0x02, IOB1)
                                CreateByteField (Arg0, 0x03, IOB2)
                                CreateByteField (Arg0, 0x04, IOB3)
                                CreateByteField (Arg0, 0x05, IOB4)
                                CreateByteField (Arg0, 0x06, ALB1)
                                CreateByteField (Arg0, 0x07, LNB1)
                                CreateByteField (Arg0, 0x0A, IOB5)
                                CreateByteField (Arg0, 0x0B, IOB6)
                                CreateByteField (Arg0, 0x0C, IOB7)
                                CreateByteField (Arg0, 0x0D, IOB8)
                                CreateByteField (Arg0, 0x0E, ALB2)
                                CreateByteField (Arg0, 0x0F, LNB2)
                                CreateWordField (Arg0, 0x11, IRQB)
                                CreateWordField (Arg0, 0x14, DMAV)
                                IOBL = IOB1 /* \_SB_.PCI0.LPC0.SIO_.PRT_._SRS.IOB1 */
                                IOBH = IOB2 /* \_SB_.PCI0.LPC0.SIO_.PRT_._SRS.IOB2 */
                                FindSetLeftBit (IRQB, Local0)
                                INT = (Local0 - 0x01)
                                FindSetLeftBit (DMAV, Local0)
                                DMAS = (Local0 - 0x01)
                            }
                            Else
                            {
                                CreateByteField (Arg0, 0x02, IOA1)
                                CreateByteField (Arg0, 0x03, IOA2)
                                CreateByteField (Arg0, 0x04, IOA3)
                                CreateByteField (Arg0, 0x05, IOA4)
                                CreateByteField (Arg0, 0x06, ALA1)
                                CreateByteField (Arg0, 0x07, LNA1)
                                CreateWordField (Arg0, 0x09, IRQA)
                                IOBL = IOA1 /* \_SB_.PCI0.LPC0.SIO_.PRT_._SRS.IOA1 */
                                IOBH = IOA2 /* \_SB_.PCI0.LPC0.SIO_.PRT_._SRS.IOA2 */
                                FindSetLeftBit (IRQA, Local0)
                                INT = (Local0 - 0x01)
                            }

                            ACT = 0x01
                            XCFG ()
                            Release (W627)
                            CreateWordField (Arg0, 0x02, IORG)
                            \_SB.PCI0.LPC0.IODE (0x02, IORG)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PS0 (0x01)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PS3 (0x01)
                        }
                    }

                    Method (ENWK, 0, NotSerialized)
                    {
                        Acquire (W627, 0x1388)
                        CFG (0x0A)
                        ACT = 0x01
                        INDX = 0xF3
                        DATA = 0x3F
                        INDX = 0xF6
                        DATA = 0x33
                        INDX = 0xF9
                        DATA = 0x05
                        XCFG ()
                        Release (W627)
                    }

                    Method (DSWK, 0, NotSerialized)
                    {
                        Acquire (W627, 0x1388)
                        CFG (0x0A)
                        ACT = 0x00
                        INDX = 0xF6
                        DATA = 0x00
                        INDX = 0xF9
                        DATA = 0x00
                        INDX = 0xF3
                        DATA = 0x3F
                        XCFG ()
                        Release (W627)
                    }

                    Method (CLED, 1, NotSerialized)
                    {
                        Acquire (W627, 0x1388)
                        CFG (0x09)
                        SLED = Arg0
                        XCFG ()
                        Release (W627)
                    }
                }
            }

            Name (NATA, Package (0x01)
            {
                0x001F0001
            })
            Device (IDEC)
            {
                Name (_ADR, 0x001F0001)  // _ADR: Address
                OperationRegion (IDEC, PCI_Config, 0x40, 0x18)
                Field (IDEC, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SDMA,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4
                }

                Method (GETP, 1, NotSerialized)
                {
                    Noop
                    If (((Arg0 & 0x09) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }

                    If (((Arg0 & 0x09) == 0x08))
                    {
                        Return (0x0384)
                    }

                    Local0 = ((Arg0 & 0x0300) >> 0x08)
                    Local1 = ((Arg0 & 0x3000) >> 0x0C)
                    Return ((0x1E * (0x09 - (Local0 + Local1))))
                }

                Method (GETD, 4, NotSerialized)
                {
                    Noop
                    If (Arg0)
                    {
                        If (Arg1)
                        {
                            Return (0x14)
                        }

                        If (Arg2)
                        {
                            Return (((0x04 - Arg3) * 0x0F))
                        }

                        Return (((0x04 - Arg3) * 0x1E))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (GETT, 1, NotSerialized)
                {
                    Noop
                    Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
                        ) + (Arg0 & 0x03)))))
                }

                Method (GETF, 3, NotSerialized)
                {
                    Noop
                    Name (TMPF, 0x00)
                    If (Arg0)
                    {
                        TMPF |= 0x01
                    }

                    If ((Arg2 & 0x02))
                    {
                        TMPF |= 0x02
                    }

                    If (Arg1)
                    {
                        TMPF |= 0x04
                    }

                    If ((Arg2 & 0x20))
                    {
                        TMPF |= 0x08
                    }

                    If ((Arg2 & 0x4000))
                    {
                        TMPF |= 0x10
                    }

                    Return (TMPF) /* \_SB_.PCI0.IDEC.GETF.TMPF */
                }

                Method (SETP, 3, NotSerialized)
                {
                    Noop
                    If ((Arg0 >= 0xF0))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                            {
                                Return (0x2301)
                            }

                            If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                            {
                                Return (0x2101)
                            }
                        }

                        Return (0x1001)
                    }
                }

                Method (SETD, 1, NotSerialized)
                {
                    Noop
                    If ((Arg0 <= 0x14))
                    {
                        Return (0x01)
                    }

                    If ((Arg0 <= 0x1E))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 <= 0x2D))
                    {
                        Return (0x01)
                    }

                    If ((Arg0 <= 0x3C))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 <= 0x5A))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SETT, 3, NotSerialized)
                {
                    Noop
                    If ((Arg1 & 0x02))
                    {
                        If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                        {
                            Return (0x0B)
                        }

                        If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                        {
                            Return (0x09)
                        }
                    }

                    Return (0x04)
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Noop
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GETP (PRIT)
                        DMA0 = GETD ((SDMA & 0x01), (ICR3 & 0x01), (
                            ICR0 & 0x01), SDT0)
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDEC.PRID._GTM.PIO0 */
                        }

                        If ((PRIT & 0x4000))
                        {
                            If (((PRIT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (PSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x02), (ICR3 & 0x02), (
                            ICR0 & 0x02), SDT1)
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDEC.PRID._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x01), (SDMA & 0x02), PRIT)
                        Return (PBUF) /* \_SB_.PCI0.IDEC.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Noop
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        ICR2 = 0x04
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0x4CF0
                            SDMA &= 0x0E
                            SDT0 = 0x00
                            ICR0 &= 0x0E
                            ICR1 &= 0x0E
                            ICR3 &= 0x0E
                            ICR5 &= 0x0E
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x01
                                SDT0 = SETD (DMA0)
                                If ((W880 & 0x20))
                                {
                                    ICR1 |= 0x01
                                    ICR5 |= 0x01
                                }

                                If ((W880 & 0x10))
                                {
                                    ICR1 |= 0x01
                                }

                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x01
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x01
                                }
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0x3F0F
                            PSIT = 0x00
                            SDMA &= 0x0D
                            SDT1 = 0x00
                            ICR0 &= 0x0D
                            ICR1 &= 0x0D
                            ICR3 &= 0x0D
                            ICR5 &= 0x0D
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x02
                                SDT1 = SETD (DMA1)
                                If ((W881 & 0x20))
                                {
                                    ICR1 |= 0x02
                                    ICR5 |= 0x02
                                }

                                If ((W881 & 0x10))
                                {
                                    ICR1 |= 0x02
                                }

                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        Noop
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        Noop
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Noop
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (PIB0, 0x01, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x01))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR0 & 0x01))
                                {
                                    DMD0 += 0x02
                                }

                                If ((ICR3 & 0x01))
                                {
                                    DMD0 = 0x45
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.IDEC.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Noop
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (PIB1, 0x01, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR0 & 0x02))
                                {
                                    DMD1 += 0x02
                                }

                                If ((ICR3 & 0x02))
                                {
                                    DMD1 = 0x45
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.IDEC.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            }
        }
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
        }
    }

    Scope (_TZ)
    {
    }

    Name (_S0, Package (0x02)  // _S0_: S0 System State
    {
        0x00, 
        0x00
    })
    Name (_S1, Package (0x02)  // _S1_: S1 System State
    {
        0x01, 
        0x01
    })
    Name (_S4, Package (0x02)  // _S4_: S4 System State
    {
        0x06, 
        0x06
    })
    Name (_S5, Package (0x02)  // _S5_: S5 System State
    {
        0x07, 
        0x07
    })
    Name (EIRQ, 0x00)
    Name (PICF, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        \PICF = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.PCI0.PT80 = Arg0
        \_SB.PCI0.P0P2.PMES = 0x01
        \_SB.PCI0.P0P2.PMES = 0x01
        \_SB.PCI0.P0P4.PMES = 0x01
        \_SB.PCI0.P0P4.PMES = 0x01
        \_SB.PCI0.P0P6.PMES = 0x01
        \_SB.PCI0.P0P6.PMES = 0x01
        \_SB.PCI0.PEX0.PMES = 0x01
        \_SB.PCI0.PEX0.PMES = 0x01
        \_SB.PCI0.PEX0.PMSS = 0x01
        If ((Arg0 == 0x01))
        {
            \_SB.PCI0.P0P2.PMEI = 0x01
            \_SB.PCI0.P0P2.PGPE = 0x01
            \_SB.PCI0.P0P4.PMEI = 0x01
            \_SB.PCI0.P0P4.PGPE = 0x01
            \_SB.PCI0.P0P6.PMEI = 0x01
            \_SB.PCI0.P0P6.PGPE = 0x01
            \_SB.PCI0.PEX0.PSCI = 0x01
            \_SB.PCI0.LPC0.BPEE = 0x01
            \_SB.PCI0.LPC0.SIO.ENWK ()
            \_SB.PCI0.LPC0.SIO.CLED (0x02)
        }

        If ((Arg0 >= 0x04))
        {
            \_SB.PCI0.LPC0.SIO.CLED (0x00)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.PCI0.PT80 = (Arg0 << 0x04)
        \_SB.PCI0.LPC0.SIO.CLED (0x01)
        Notify (\_SB.PCI0.PWRB, 0x02) // Device Wake
        If ((Arg0 == 0x01))
        {
            \_SB.PCI0.P0P2.PMEI = 0x00
            \_SB.PCI0.P0P2.PGPE = 0x00
            \_SB.PCI0.P0P4.PMEI = 0x00
            \_SB.PCI0.P0P4.PGPE = 0x00
            \_SB.PCI0.P0P6.PMEI = 0x00
            \_SB.PCI0.P0P6.PGPE = 0x00
            \_SB.PCI0.PEX0.PSCI = 0x00
            \_SB.PCI0.LPC0.BPEE = 0x00
            \_SB.PCI0.LPC0.SIO.ENWK ()
        }

        \_SB.PCI0.LPC0.SIO.DSWK ()
        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }
}



EINJ
----
[000h 0000   4]                    Signature : "EINJ"    [Error Injection table]
[004h 0004   4]                 Table Length : 00000170
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A3
[00Ah 0010   6]                       Oem ID : "SMCI  "
[010h 0016   8]                 Oem Table ID : "EINJTBL "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "SMCI"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]      Injection Header Length : 0000000C
[028h 0040   1]                        Flags : 00
[029h 0041   3]                     Reserved : 000000
[02Ch 0044   4]        Injection Entry Count : 0000000A

[030h 0048   1]                       Action : 00 [Begin Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BFF68000

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Get Trigger Table]
[051h 0081   1]                  Instruction : 00 [Read Register]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 40
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 04 [QWord Access:64]
[058h 0088   8]                      Address : 00000000BFF68001

[060h 0096   8]                        Value : 0000000000000000
[068h 0104   8]                         Mask : FFFFFFFFFFFFFFFF

[070h 0112   1]                       Action : 02 [Set Error Type]
[071h 0113   1]                  Instruction : 02 [Write Register]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 20
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 03 [DWord Access:32]
[078h 0120   8]                      Address : 00000000BFF68009

[080h 0128   8]                        Value : 0000000000000000
[088h 0136   8]                         Mask : 00000000FFFFFFFF

[090h 0144   1]                       Action : 03 [Get Error Type]
[091h 0145   1]                  Instruction : 00 [Read Register]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 00000000BFF6800D

[0A0h 0160   8]                        Value : 0000000000000000
[0A8h 0168   8]                         Mask : 00000000FFFFFFFF

[0B0h 0176   1]                       Action : 04 [End Operation]
[0B1h 0177   1]                  Instruction : 03 [Write Register Value]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 01 [SystemIO]
[0B5h 0181   1]                    Bit Width : 08
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 01 [Byte Access:8]
[0B8h 0184   8]                      Address : 00000000000000B3

[0C0h 0192   8]                        Value : 0000000000000004
[0C8h 0200   8]                         Mask : 00000000000000FF

[0D0h 0208   1]                       Action : 04 [End Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 01 [SystemIO]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000000B2

[0E0h 0224   8]                        Value : 00000000000000D0
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 05 [Execute Operation]
[0F1h 0241   1]                  Instruction : 03 [Write Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000000000B3

[100h 0256   8]                        Value : 0000000000000005
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 05 [Execute Operation]
[111h 0273   1]                  Instruction : 03 [Write Register Value]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 01 [SystemIO]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000000000B2

[120h 0288   8]                        Value : 00000000000000D0
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 06 [Check Busy Status]
[131h 0305   1]                  Instruction : 01 [Read Register Value]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 00 [SystemMemory]
[135h 0309   1]                    Bit Width : 08
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 01 [Byte Access:8]
[138h 0312   8]                      Address : 00000000BFF68011

[140h 0320   8]                        Value : 0000000000000001
[148h 0328   8]                         Mask : 0000000000000001

[150h 0336   1]                       Action : 07 [Get Command Status]
[151h 0337   1]                  Instruction : 00 [Read Register]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 00 [SystemMemory]
[155h 0341   1]                    Bit Width : 10
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 02 [Word Access:16]
[158h 0344   8]                      Address : 00000000BFF68012

[160h 0352   8]                        Value : 0000000000000000
[168h 0360   8]                         Mask : 00000000000001FE

Raw Table Data: Length 368 (0x170)

    0000: 45 49 4E 4A 70 01 00 00 01 A3 53 4D 43 49 20 20  // EINJp.....SMCI  
    0010: 45 49 4E 4A 54 42 4C 20 00 00 04 06 53 4D 43 49  // EINJTBL ....SMCI
    0020: 01 00 00 00 0C 00 00 00 00 00 00 00 0A 00 00 00  // ................
    0030: 00 03 00 00 00 08 00 01 00 80 F6 BF 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 01 00 00 00 00 40 00 04 01 80 F6 BF 00 00 00 00  // .....@..........
    0060: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0070: 02 02 00 00 00 20 00 03 09 80 F6 BF 00 00 00 00  // ..... ..........
    0080: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0090: 03 00 00 00 00 20 00 03 0D 80 F6 BF 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00B0: 04 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    00C0: 04 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00D0: 04 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    00E0: D0 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00F0: 05 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0100: 05 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0120: D0 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0130: 06 01 00 00 00 08 00 01 11 80 F6 BF 00 00 00 00  // ................
    0140: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0150: 07 00 00 00 00 10 00 02 12 80 F6 BF 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 FE 01 00 00 00 00 00 00  // ................


ERST
----
[000h 0000   4]                    Signature : "ERST"    [Error Record Serialization Table]
[004h 0004   4]                 Table Length : 00000590
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 29
[00Ah 0010   6]                       Oem ID : "SMCI  "
[010h 0016   8]                 Oem Table ID : "ERSTTBL "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "SMCI"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]  Serialization Header Length : 0000000C
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   4]      Instruction Entry Count : 0000002B

[030h 0048   1]                       Action : 00 [Begin Write Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BFF68100

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 00 [Begin Write Operation]
[051h 0081   1]                  Instruction : 03 [Write Register Value]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 01 [SystemIO]
[055h 0085   1]                    Bit Width : 08
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 01 [Byte Access:8]
[058h 0088   8]                      Address : 00000000000000B3

[060h 0096   8]                        Value : 0000000000000000
[068h 0104   8]                         Mask : 00000000000000FF

[070h 0112   1]                       Action : 00 [Begin Write Operation]
[071h 0113   1]                  Instruction : 03 [Write Register Value]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   8]                        Value : 00000000000000D1
[088h 0136   8]                         Mask : 00000000000000FF

[090h 0144   1]                       Action : 01 [Begin Read Operation]
[091h 0145   1]                  Instruction : 03 [Write Register Value]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 08
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 01 [Byte Access:8]
[098h 0152   8]                      Address : 00000000BFF68100

[0A0h 0160   8]                        Value : 0000000000000001
[0A8h 0168   8]                         Mask : 00000000000000FF

[0B0h 0176   1]                       Action : 01 [Begin Read Operation]
[0B1h 0177   1]                  Instruction : 03 [Write Register Value]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 01 [SystemIO]
[0B5h 0181   1]                    Bit Width : 08
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 01 [Byte Access:8]
[0B8h 0184   8]                      Address : 00000000000000B3

[0C0h 0192   8]                        Value : 0000000000000001
[0C8h 0200   8]                         Mask : 00000000000000FF

[0D0h 0208   1]                       Action : 01 [Begin Read Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 01 [SystemIO]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000000B2

[0E0h 0224   8]                        Value : 00000000000000D1
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 02 [Begin Clear Operation]
[0F1h 0241   1]                  Instruction : 03 [Write Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BFF68100

[100h 0256   8]                        Value : 0000000000000002
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 02 [Begin Clear Operation]
[111h 0273   1]                  Instruction : 03 [Write Register Value]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 01 [SystemIO]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000000000B3

[120h 0288   8]                        Value : 0000000000000002
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 02 [Begin Clear Operation]
[131h 0305   1]                  Instruction : 03 [Write Register Value]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 01 [SystemIO]
[135h 0309   1]                    Bit Width : 08
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 01 [Byte Access:8]
[138h 0312   8]                      Address : 00000000000000B2

[140h 0320   8]                        Value : 00000000000000D1
[148h 0328   8]                         Mask : 00000000000000FF

[150h 0336   1]                       Action : 03 [End Operation]
[151h 0337   1]                  Instruction : 03 [Write Register Value]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 01 [SystemIO]
[155h 0341   1]                    Bit Width : 08
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 01 [Byte Access:8]
[158h 0344   8]                      Address : 00000000000000B3

[160h 0352   8]                        Value : 0000000000000003
[168h 0360   8]                         Mask : 00000000000000FF

[170h 0368   1]                       Action : 03 [End Operation]
[171h 0369   1]                  Instruction : 03 [Write Register Value]
[172h 0370   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371   1]                     Reserved : 00

[174h 0372  12]              Register Region : [Generic Address Structure]
[174h 0372   1]                     Space ID : 01 [SystemIO]
[175h 0373   1]                    Bit Width : 08
[176h 0374   1]                   Bit Offset : 00
[177h 0375   1]         Encoded Access Width : 01 [Byte Access:8]
[178h 0376   8]                      Address : 00000000000000B2

[180h 0384   8]                        Value : 00000000000000D1
[188h 0392   8]                         Mask : 00000000000000FF

[190h 0400   1]                       Action : 04 [Set Record Offset]
[191h 0401   1]                  Instruction : 02 [Write Register]
[192h 0402   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[193h 0403   1]                     Reserved : 00

[194h 0404  12]              Register Region : [Generic Address Structure]
[194h 0404   1]                     Space ID : 00 [SystemMemory]
[195h 0405   1]                    Bit Width : 20
[196h 0406   1]                   Bit Offset : 00
[197h 0407   1]         Encoded Access Width : 03 [DWord Access:32]
[198h 0408   8]                      Address : 00000000BFF68101

[1A0h 0416   8]                        Value : 0000000000000000
[1A8h 0424   8]                         Mask : 00000000FFFFFFFF

[1B0h 0432   1]                       Action : 04 [Set Record Offset]
[1B1h 0433   1]                  Instruction : 03 [Write Register Value]
[1B2h 0434   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1B3h 0435   1]                     Reserved : 00

[1B4h 0436  12]              Register Region : [Generic Address Structure]
[1B4h 0436   1]                     Space ID : 01 [SystemIO]
[1B5h 0437   1]                    Bit Width : 08
[1B6h 0438   1]                   Bit Offset : 00
[1B7h 0439   1]         Encoded Access Width : 01 [Byte Access:8]
[1B8h 0440   8]                      Address : 00000000000000B3

[1C0h 0448   8]                        Value : 0000000000000004
[1C8h 0456   8]                         Mask : 00000000000000FF

[1D0h 0464   1]                       Action : 04 [Set Record Offset]
[1D1h 0465   1]                  Instruction : 03 [Write Register Value]
[1D2h 0466   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1D3h 0467   1]                     Reserved : 00

[1D4h 0468  12]              Register Region : [Generic Address Structure]
[1D4h 0468   1]                     Space ID : 01 [SystemIO]
[1D5h 0469   1]                    Bit Width : 08
[1D6h 0470   1]                   Bit Offset : 00
[1D7h 0471   1]         Encoded Access Width : 01 [Byte Access:8]
[1D8h 0472   8]                      Address : 00000000000000B2

[1E0h 0480   8]                        Value : 00000000000000D1
[1E8h 0488   8]                         Mask : 00000000000000FF

[1F0h 0496   1]                       Action : 05 [Execute Operation]
[1F1h 0497   1]                  Instruction : 03 [Write Register Value]
[1F2h 0498   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1F3h 0499   1]                     Reserved : 00

[1F4h 0500  12]              Register Region : [Generic Address Structure]
[1F4h 0500   1]                     Space ID : 01 [SystemIO]
[1F5h 0501   1]                    Bit Width : 08
[1F6h 0502   1]                   Bit Offset : 00
[1F7h 0503   1]         Encoded Access Width : 01 [Byte Access:8]
[1F8h 0504   8]                      Address : 00000000000000B3

[200h 0512   8]                        Value : 0000000000000005
[208h 0520   8]                         Mask : 00000000000000FF

[210h 0528   1]                       Action : 05 [Execute Operation]
[211h 0529   1]                  Instruction : 03 [Write Register Value]
[212h 0530   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[213h 0531   1]                     Reserved : 00

[214h 0532  12]              Register Region : [Generic Address Structure]
[214h 0532   1]                     Space ID : 01 [SystemIO]
[215h 0533   1]                    Bit Width : 08
[216h 0534   1]                   Bit Offset : 00
[217h 0535   1]         Encoded Access Width : 01 [Byte Access:8]
[218h 0536   8]                      Address : 00000000000000B2

[220h 0544   8]                        Value : 00000000000000D1
[228h 0552   8]                         Mask : 00000000000000FF

[230h 0560   1]                       Action : 06 [Check Busy Status]
[231h 0561   1]                  Instruction : 03 [Write Register Value]
[232h 0562   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[233h 0563   1]                     Reserved : 00

[234h 0564  12]              Register Region : [Generic Address Structure]
[234h 0564   1]                     Space ID : 01 [SystemIO]
[235h 0565   1]                    Bit Width : 08
[236h 0566   1]                   Bit Offset : 00
[237h 0567   1]         Encoded Access Width : 01 [Byte Access:8]
[238h 0568   8]                      Address : 00000000000000B3

[240h 0576   8]                        Value : 0000000000000006
[248h 0584   8]                         Mask : 00000000000000FF

[250h 0592   1]                       Action : 06 [Check Busy Status]
[251h 0593   1]                  Instruction : 03 [Write Register Value]
[252h 0594   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[253h 0595   1]                     Reserved : 00

[254h 0596  12]              Register Region : [Generic Address Structure]
[254h 0596   1]                     Space ID : 01 [SystemIO]
[255h 0597   1]                    Bit Width : 08
[256h 0598   1]                   Bit Offset : 00
[257h 0599   1]         Encoded Access Width : 01 [Byte Access:8]
[258h 0600   8]                      Address : 00000000000000B2

[260h 0608   8]                        Value : 00000000000000D1
[268h 0616   8]                         Mask : 00000000000000FF

[270h 0624   1]                       Action : 06 [Check Busy Status]
[271h 0625   1]                  Instruction : 01 [Read Register Value]
[272h 0626   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[273h 0627   1]                     Reserved : 00

[274h 0628  12]              Register Region : [Generic Address Structure]
[274h 0628   1]                     Space ID : 00 [SystemMemory]
[275h 0629   1]                    Bit Width : 08
[276h 0630   1]                   Bit Offset : 00
[277h 0631   1]         Encoded Access Width : 01 [Byte Access:8]
[278h 0632   8]                      Address : 00000000BFF68105

[280h 0640   8]                        Value : 0000000000000001
[288h 0648   8]                         Mask : 0000000000000001

[290h 0656   1]                       Action : 07 [Get Command Status]
[291h 0657   1]                  Instruction : 03 [Write Register Value]
[292h 0658   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[293h 0659   1]                     Reserved : 00

[294h 0660  12]              Register Region : [Generic Address Structure]
[294h 0660   1]                     Space ID : 01 [SystemIO]
[295h 0661   1]                    Bit Width : 08
[296h 0662   1]                   Bit Offset : 00
[297h 0663   1]         Encoded Access Width : 01 [Byte Access:8]
[298h 0664   8]                      Address : 00000000000000B3

[2A0h 0672   8]                        Value : 0000000000000007
[2A8h 0680   8]                         Mask : 00000000000000FF

[2B0h 0688   1]                       Action : 07 [Get Command Status]
[2B1h 0689   1]                  Instruction : 03 [Write Register Value]
[2B2h 0690   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[2B3h 0691   1]                     Reserved : 00

[2B4h 0692  12]              Register Region : [Generic Address Structure]
[2B4h 0692   1]                     Space ID : 01 [SystemIO]
[2B5h 0693   1]                    Bit Width : 08
[2B6h 0694   1]                   Bit Offset : 00
[2B7h 0695   1]         Encoded Access Width : 01 [Byte Access:8]
[2B8h 0696   8]                      Address : 00000000000000B2

[2C0h 0704   8]                        Value : 00000000000000D1
[2C8h 0712   8]                         Mask : 00000000000000FF

[2D0h 0720   1]                       Action : 07 [Get Command Status]
[2D1h 0721   1]                  Instruction : 00 [Read Register]
[2D2h 0722   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[2D3h 0723   1]                     Reserved : 00

[2D4h 0724  12]              Register Region : [Generic Address Structure]
[2D4h 0724   1]                     Space ID : 00 [SystemMemory]
[2D5h 0725   1]                    Bit Width : 08
[2D6h 0726   1]                   Bit Offset : 00
[2D7h 0727   1]         Encoded Access Width : 01 [Byte Access:8]
[2D8h 0728   8]                      Address : 00000000BFF68106

[2E0h 0736   8]                        Value : 0000000000000000
[2E8h 0744   8]                         Mask : 00000000000000FF

[2F0h 0752   1]                       Action : 08 [Get Record Identifier]
[2F1h 0753   1]                  Instruction : 03 [Write Register Value]
[2F2h 0754   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[2F3h 0755   1]                     Reserved : 00

[2F4h 0756  12]              Register Region : [Generic Address Structure]
[2F4h 0756   1]                     Space ID : 01 [SystemIO]
[2F5h 0757   1]                    Bit Width : 08
[2F6h 0758   1]                   Bit Offset : 00
[2F7h 0759   1]         Encoded Access Width : 01 [Byte Access:8]
[2F8h 0760   8]                      Address : 00000000000000B3

[300h 0768   8]                        Value : 0000000000000008
[308h 0776   8]                         Mask : 00000000000000FF

[310h 0784   1]                       Action : 08 [Get Record Identifier]
[311h 0785   1]                  Instruction : 03 [Write Register Value]
[312h 0786   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[313h 0787   1]                     Reserved : 00

[314h 0788  12]              Register Region : [Generic Address Structure]
[314h 0788   1]                     Space ID : 01 [SystemIO]
[315h 0789   1]                    Bit Width : 08
[316h 0790   1]                   Bit Offset : 00
[317h 0791   1]         Encoded Access Width : 01 [Byte Access:8]
[318h 0792   8]                      Address : 00000000000000B2

[320h 0800   8]                        Value : 00000000000000D1
[328h 0808   8]                         Mask : 00000000000000FF

[330h 0816   1]                       Action : 08 [Get Record Identifier]
[331h 0817   1]                  Instruction : 00 [Read Register]
[332h 0818   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[333h 0819   1]                     Reserved : 00

[334h 0820  12]              Register Region : [Generic Address Structure]
[334h 0820   1]                     Space ID : 00 [SystemMemory]
[335h 0821   1]                    Bit Width : 40
[336h 0822   1]                   Bit Offset : 00
[337h 0823   1]         Encoded Access Width : 04 [QWord Access:64]
[338h 0824   8]                      Address : 00000000BFF68107

[340h 0832   8]                        Value : 0000000000000000
[348h 0840   8]                         Mask : FFFFFFFFFFFFFFFF

[350h 0848   1]                       Action : 09 [Set Record Identifier]
[351h 0849   1]                  Instruction : 02 [Write Register]
[352h 0850   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[353h 0851   1]                     Reserved : 00

[354h 0852  12]              Register Region : [Generic Address Structure]
[354h 0852   1]                     Space ID : 00 [SystemMemory]
[355h 0853   1]                    Bit Width : 40
[356h 0854   1]                   Bit Offset : 00
[357h 0855   1]         Encoded Access Width : 04 [QWord Access:64]
[358h 0856   8]                      Address : 00000000BFF6810F

[360h 0864   8]                        Value : 0000000000000000
[368h 0872   8]                         Mask : FFFFFFFFFFFFFFFF

[370h 0880   1]                       Action : 09 [Set Record Identifier]
[371h 0881   1]                  Instruction : 03 [Write Register Value]
[372h 0882   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[373h 0883   1]                     Reserved : 00

[374h 0884  12]              Register Region : [Generic Address Structure]
[374h 0884   1]                     Space ID : 01 [SystemIO]
[375h 0885   1]                    Bit Width : 08
[376h 0886   1]                   Bit Offset : 00
[377h 0887   1]         Encoded Access Width : 01 [Byte Access:8]
[378h 0888   8]                      Address : 00000000000000B3

[380h 0896   8]                        Value : 0000000000000009
[388h 0904   8]                         Mask : 00000000000000FF

[390h 0912   1]                       Action : 09 [Set Record Identifier]
[391h 0913   1]                  Instruction : 03 [Write Register Value]
[392h 0914   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[393h 0915   1]                     Reserved : 00

[394h 0916  12]              Register Region : [Generic Address Structure]
[394h 0916   1]                     Space ID : 01 [SystemIO]
[395h 0917   1]                    Bit Width : 08
[396h 0918   1]                   Bit Offset : 00
[397h 0919   1]         Encoded Access Width : 01 [Byte Access:8]
[398h 0920   8]                      Address : 00000000000000B2

[3A0h 0928   8]                        Value : 00000000000000D1
[3A8h 0936   8]                         Mask : 00000000000000FF

[3B0h 0944   1]                       Action : 0A [Get Record Count]
[3B1h 0945   1]                  Instruction : 03 [Write Register Value]
[3B2h 0946   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[3B3h 0947   1]                     Reserved : 00

[3B4h 0948  12]              Register Region : [Generic Address Structure]
[3B4h 0948   1]                     Space ID : 01 [SystemIO]
[3B5h 0949   1]                    Bit Width : 08
[3B6h 0950   1]                   Bit Offset : 00
[3B7h 0951   1]         Encoded Access Width : 01 [Byte Access:8]
[3B8h 0952   8]                      Address : 00000000000000B3

[3C0h 0960   8]                        Value : 000000000000000A
[3C8h 0968   8]                         Mask : 00000000000000FF

[3D0h 0976   1]                       Action : 0A [Get Record Count]
[3D1h 0977   1]                  Instruction : 03 [Write Register Value]
[3D2h 0978   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[3D3h 0979   1]                     Reserved : 00

[3D4h 0980  12]              Register Region : [Generic Address Structure]
[3D4h 0980   1]                     Space ID : 01 [SystemIO]
[3D5h 0981   1]                    Bit Width : 08
[3D6h 0982   1]                   Bit Offset : 00
[3D7h 0983   1]         Encoded Access Width : 01 [Byte Access:8]
[3D8h 0984   8]                      Address : 00000000000000B2

[3E0h 0992   8]                        Value : 00000000000000D1
[3E8h 1000   8]                         Mask : 00000000000000FF

[3F0h 1008   1]                       Action : 0A [Get Record Count]
[3F1h 1009   1]                  Instruction : 00 [Read Register]
[3F2h 1010   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[3F3h 1011   1]                     Reserved : 00

[3F4h 1012  12]              Register Region : [Generic Address Structure]
[3F4h 1012   1]                     Space ID : 00 [SystemMemory]
[3F5h 1013   1]                    Bit Width : 08
[3F6h 1014   1]                   Bit Offset : 00
[3F7h 1015   1]         Encoded Access Width : 01 [Byte Access:8]
[3F8h 1016   8]                      Address : 00000000BFF68117

[400h 1024   8]                        Value : 0000000000000000
[408h 1032   8]                         Mask : 00000000000000FF

[410h 1040   1]                       Action : 0B [Begin Dummy Write]
[411h 1041   1]                  Instruction : 03 [Write Register Value]
[412h 1042   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[413h 1043   1]                     Reserved : 00

[414h 1044  12]              Register Region : [Generic Address Structure]
[414h 1044   1]                     Space ID : 00 [SystemMemory]
[415h 1045   1]                    Bit Width : 08
[416h 1046   1]                   Bit Offset : 00
[417h 1047   1]         Encoded Access Width : 01 [Byte Access:8]
[418h 1048   8]                      Address : 00000000BFF68100

[420h 1056   8]                        Value : 000000000000000B
[428h 1064   8]                         Mask : 00000000000000FF

[430h 1072   1]                       Action : 0B [Begin Dummy Write]
[431h 1073   1]                  Instruction : 03 [Write Register Value]
[432h 1074   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[433h 1075   1]                     Reserved : 00

[434h 1076  12]              Register Region : [Generic Address Structure]
[434h 1076   1]                     Space ID : 01 [SystemIO]
[435h 1077   1]                    Bit Width : 08
[436h 1078   1]                   Bit Offset : 00
[437h 1079   1]         Encoded Access Width : 01 [Byte Access:8]
[438h 1080   8]                      Address : 00000000000000B3

[440h 1088   8]                        Value : 000000000000000B
[448h 1096   8]                         Mask : 00000000000000FF

[450h 1104   1]                       Action : 0B [Begin Dummy Write]
[451h 1105   1]                  Instruction : 03 [Write Register Value]
[452h 1106   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[453h 1107   1]                     Reserved : 00

[454h 1108  12]              Register Region : [Generic Address Structure]
[454h 1108   1]                     Space ID : 01 [SystemIO]
[455h 1109   1]                    Bit Width : 08
[456h 1110   1]                   Bit Offset : 00
[457h 1111   1]         Encoded Access Width : 01 [Byte Access:8]
[458h 1112   8]                      Address : 00000000000000B2

[460h 1120   8]                        Value : 00000000000000D1
[468h 1128   8]                         Mask : 00000000000000FF

[470h 1136   1]                       Action : 0D [Get Error Address Range]
[471h 1137   1]                  Instruction : 03 [Write Register Value]
[472h 1138   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[473h 1139   1]                     Reserved : 00

[474h 1140  12]              Register Region : [Generic Address Structure]
[474h 1140   1]                     Space ID : 01 [SystemIO]
[475h 1141   1]                    Bit Width : 08
[476h 1142   1]                   Bit Offset : 00
[477h 1143   1]         Encoded Access Width : 01 [Byte Access:8]
[478h 1144   8]                      Address : 00000000000000B3

[480h 1152   8]                        Value : 000000000000000D
[488h 1160   8]                         Mask : 00000000000000FF

[490h 1168   1]                       Action : 0D [Get Error Address Range]
[491h 1169   1]                  Instruction : 03 [Write Register Value]
[492h 1170   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[493h 1171   1]                     Reserved : 00

[494h 1172  12]              Register Region : [Generic Address Structure]
[494h 1172   1]                     Space ID : 01 [SystemIO]
[495h 1173   1]                    Bit Width : 08
[496h 1174   1]                   Bit Offset : 00
[497h 1175   1]         Encoded Access Width : 01 [Byte Access:8]
[498h 1176   8]                      Address : 00000000000000B2

[4A0h 1184   8]                        Value : 00000000000000D1
[4A8h 1192   8]                         Mask : 00000000000000FF

[4B0h 1200   1]                       Action : 0D [Get Error Address Range]
[4B1h 1201   1]                  Instruction : 00 [Read Register]
[4B2h 1202   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[4B3h 1203   1]                     Reserved : 00

[4B4h 1204  12]              Register Region : [Generic Address Structure]
[4B4h 1204   1]                     Space ID : 00 [SystemMemory]
[4B5h 1205   1]                    Bit Width : 40
[4B6h 1206   1]                   Bit Offset : 00
[4B7h 1207   1]         Encoded Access Width : 04 [QWord Access:64]
[4B8h 1208   8]                      Address : 00000000BFF68118

[4C0h 1216   8]                        Value : 0000000000000000
[4C8h 1224   8]                         Mask : FFFFFFFFFFFFFFFF

[4D0h 1232   1]                       Action : 0E [Get Error Address Length]
[4D1h 1233   1]                  Instruction : 03 [Write Register Value]
[4D2h 1234   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[4D3h 1235   1]                     Reserved : 00

[4D4h 1236  12]              Register Region : [Generic Address Structure]
[4D4h 1236   1]                     Space ID : 01 [SystemIO]
[4D5h 1237   1]                    Bit Width : 08
[4D6h 1238   1]                   Bit Offset : 00
[4D7h 1239   1]         Encoded Access Width : 01 [Byte Access:8]
[4D8h 1240   8]                      Address : 00000000000000B3

[4E0h 1248   8]                        Value : 000000000000000E
[4E8h 1256   8]                         Mask : 00000000000000FF

[4F0h 1264   1]                       Action : 0E [Get Error Address Length]
[4F1h 1265   1]                  Instruction : 03 [Write Register Value]
[4F2h 1266   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[4F3h 1267   1]                     Reserved : 00

[4F4h 1268  12]              Register Region : [Generic Address Structure]
[4F4h 1268   1]                     Space ID : 01 [SystemIO]
[4F5h 1269   1]                    Bit Width : 08
[4F6h 1270   1]                   Bit Offset : 00
[4F7h 1271   1]         Encoded Access Width : 01 [Byte Access:8]
[4F8h 1272   8]                      Address : 00000000000000B2

[500h 1280   8]                        Value : 00000000000000D1
[508h 1288   8]                         Mask : 00000000000000FF

[510h 1296   1]                       Action : 0E [Get Error Address Length]
[511h 1297   1]                  Instruction : 00 [Read Register]
[512h 1298   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[513h 1299   1]                     Reserved : 00

[514h 1300  12]              Register Region : [Generic Address Structure]
[514h 1300   1]                     Space ID : 00 [SystemMemory]
[515h 1301   1]                    Bit Width : 20
[516h 1302   1]                   Bit Offset : 00
[517h 1303   1]         Encoded Access Width : 03 [DWord Access:32]
[518h 1304   8]                      Address : 00000000BFF68120

[520h 1312   8]                        Value : 0000000000000000
[528h 1320   8]                         Mask : 00000000FFFFFFFF

[530h 1328   1]                       Action : 0F [Get Error Attributes]
[531h 1329   1]                  Instruction : 03 [Write Register Value]
[532h 1330   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[533h 1331   1]                     Reserved : 00

[534h 1332  12]              Register Region : [Generic Address Structure]
[534h 1332   1]                     Space ID : 01 [SystemIO]
[535h 1333   1]                    Bit Width : 08
[536h 1334   1]                   Bit Offset : 00
[537h 1335   1]         Encoded Access Width : 01 [Byte Access:8]
[538h 1336   8]                      Address : 00000000000000B3

[540h 1344   8]                        Value : 000000000000000F
[548h 1352   8]                         Mask : 00000000000000FF

[550h 1360   1]                       Action : 0F [Get Error Attributes]
[551h 1361   1]                  Instruction : 03 [Write Register Value]
[552h 1362   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[553h 1363   1]                     Reserved : 00

[554h 1364  12]              Register Region : [Generic Address Structure]
[554h 1364   1]                     Space ID : 01 [SystemIO]
[555h 1365   1]                    Bit Width : 08
[556h 1366   1]                   Bit Offset : 00
[557h 1367   1]         Encoded Access Width : 01 [Byte Access:8]
[558h 1368   8]                      Address : 00000000000000B2

[560h 1376   8]                        Value : 00000000000000D1
[568h 1384   8]                         Mask : 00000000000000FF

[570h 1392   1]                       Action : 0F [Get Error Attributes]
[571h 1393   1]                  Instruction : 00 [Read Register]
[572h 1394   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[573h 1395   1]                     Reserved : 00

[574h 1396  12]              Register Region : [Generic Address Structure]
[574h 1396   1]                     Space ID : 00 [SystemMemory]
[575h 1397   1]                    Bit Width : 10
[576h 1398   1]                   Bit Offset : 00
[577h 1399   1]         Encoded Access Width : 02 [Word Access:16]
[578h 1400   8]                      Address : 00000000BFF68124

[580h 1408   8]                        Value : 0000000000000000
[588h 1416   8]                         Mask : 000000000000FFFF

Raw Table Data: Length 1424 (0x590)

    0000: 45 52 53 54 90 05 00 00 01 29 53 4D 43 49 20 20  // ERST.....)SMCI  
    0010: 45 52 53 54 54 42 4C 20 00 00 04 06 53 4D 43 49  // ERSTTBL ....SMCI
    0020: 01 00 00 00 0C 00 00 00 00 00 00 00 2B 00 00 00  // ............+...
    0030: 00 03 00 00 00 08 00 01 00 81 F6 BF 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 00 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0070: 00 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0080: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0090: 01 03 00 00 00 08 00 01 00 81 F6 BF 00 00 00 00  // ................
    00A0: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00B0: 01 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    00C0: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00D0: 01 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    00E0: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00F0: 02 03 00 00 00 08 00 01 00 81 F6 BF 00 00 00 00  // ................
    0100: 02 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 02 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0120: 02 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0130: 02 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0140: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0150: 03 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0160: 03 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0170: 03 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0180: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0190: 04 02 00 00 00 20 00 03 01 81 F6 BF 00 00 00 00  // ..... ..........
    01A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    01B0: 04 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    01C0: 04 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    01D0: 04 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    01E0: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    01F0: 05 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0200: 05 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0210: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0220: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0230: 06 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0240: 06 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0250: 06 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0260: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0270: 06 01 00 00 00 08 00 01 05 81 F6 BF 00 00 00 00  // ................
    0280: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0290: 07 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    02A0: 07 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    02B0: 07 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    02C0: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    02D0: 07 00 00 00 00 08 00 01 06 81 F6 BF 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    02F0: 08 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0300: 08 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0310: 08 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0320: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0330: 08 00 00 00 00 40 00 04 07 81 F6 BF 00 00 00 00  // .....@..........
    0340: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0350: 09 02 00 00 00 40 00 04 0F 81 F6 BF 00 00 00 00  // .....@..........
    0360: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0370: 09 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0380: 09 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0390: 09 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    03A0: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    03B0: 0A 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    03C0: 0A 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    03D0: 0A 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    03E0: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    03F0: 0A 00 00 00 00 08 00 01 17 81 F6 BF 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0410: 0B 03 00 00 00 08 00 01 00 81 F6 BF 00 00 00 00  // ................
    0420: 0B 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0430: 0B 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0440: 0B 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0450: 0B 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0460: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0470: 0D 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0480: 0D 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0490: 0D 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    04A0: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    04B0: 0D 00 00 00 00 40 00 04 18 81 F6 BF 00 00 00 00  // .....@..........
    04C0: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    04D0: 0E 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    04E0: 0E 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    04F0: 0E 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0500: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0510: 0E 00 00 00 00 20 00 03 20 81 F6 BF 00 00 00 00  // ..... .. .......
    0520: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0530: 0F 03 00 00 01 08 00 01 B3 00 00 00 00 00 00 00  // ................
    0540: 0F 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0550: 0F 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0560: D1 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0570: 0F 00 00 00 00 10 00 02 24 81 F6 BF 00 00 00 00  // ........$.......
    0580: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 34
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "TUMWATER"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTL "
[020h 0032   4]        Asl Compiler Revision : 00000003

[024h 0036   4]                 FACS Address : BFF65FC0
[028h 0040   4]                 DSDT Address : BFF5FF78
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00001000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001020
[04Ch 0076   4]       PM Timer Block Address : 00001008
[050h 0080   4]           GPE0 Block Address : 00001028
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 34 49 4E 54 45 4C 20  // FACPt....4INTEL 
    0010: 54 55 4D 57 41 54 45 52 00 00 04 06 50 54 4C 20  // TUMWATER....PTL 
    0020: 03 00 00 00 C0 5F F6 BF 78 FF F5 BF 00 00 09 00  // ....._..x.......
    0030: B2 00 00 00 F0 F1 00 80 00 10 00 00 00 00 00 00  // ................
    0040: 04 10 00 00 00 00 00 00 20 10 00 00 08 10 00 00  // ........ .......
    0050: 28 10 00 00 00 00 00 00 04 02 01 04 08 00 00 00  // (...............
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HEST
----
[000h 0000   4]                    Signature : "HEST"    [Hardware Error Source Table]
[004h 0004   4]                 Table Length : 000000A8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 43
[00Ah 0010   6]                       Oem ID : "SMCI  "
[010h 0016   8]                 Oem Table ID : "HESTTBL "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "SMCI"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]           Error Source Count : 00000002

[028h 0040   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[02Ah 0042   2]                    Source Id : 0009
[02Ch 0044   2]            Related Source Id : FFFF
[02Eh 0046   1]                     Reserved : 03
[02Fh 0047   1]                      Enabled : 01
[030h 0048   4]       Records To Preallocate : 00000001
[034h 0052   4]      Max Sections Per Record : 00000001
[038h 0056   4]          Max Raw Data Length : 0000009D

[03Ch 0060  12]         Error Status Address : [Generic Address Structure]
[03Ch 0060   1]                     Space ID : 00 [SystemMemory]
[03Dh 0061   1]                    Bit Width : 40
[03Eh 0062   1]                   Bit Offset : 00
[03Fh 0063   1]         Encoded Access Width : 04 [QWord Access:64]
[040h 0064   8]                      Address : 00000000BFF68800

[048h 0072  28]                       Notify : [Hardware Error Notification Structure]
[048h 0072   1]                  Notify Type : 00 [Polled]
[049h 0073   1]                Notify Length : 1C
[04Ah 0074   2]   Configuration Write Enable : 0000
[04Ch 0076   4]                 PollInterval : 00000258
[050h 0080   4]                       Vector : 00000000
[054h 0084   4]      Polling Threshold Value : 00000000
[058h 0088   4]     Polling Threshold Window : 00000000
[05Ch 0092   4]        Error Threshold Value : 00000000
[060h 0096   4]       Error Threshold Window : 00000000

[064h 0100   4]    Error Status Block Length : 0000009D

[068h 0104   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[06Ah 0106   2]                    Source Id : 000A
[06Ch 0108   2]            Related Source Id : FFFF
[06Eh 0110   1]                     Reserved : 03
[06Fh 0111   1]                      Enabled : 01
[070h 0112   4]       Records To Preallocate : 00000001
[074h 0116   4]      Max Sections Per Record : 00000001
[078h 0120   4]          Max Raw Data Length : 0000009D

[07Ch 0124  12]         Error Status Address : [Generic Address Structure]
[07Ch 0124   1]                     Space ID : 00 [SystemMemory]
[07Dh 0125   1]                    Bit Width : 40
[07Eh 0126   1]                   Bit Offset : 00
[07Fh 0127   1]         Encoded Access Width : 04 [QWord Access:64]
[080h 0128   8]                      Address : 00000000BFF68808

[088h 0136  28]                       Notify : [Hardware Error Notification Structure]
[088h 0136   1]                  Notify Type : 00 [Polled]
[089h 0137   1]                Notify Length : 1C
[08Ah 0138   2]   Configuration Write Enable : 0000
[08Ch 0140   4]                 PollInterval : 000000C8
[090h 0144   4]                       Vector : 00000000
[094h 0148   4]      Polling Threshold Value : 00000000
[098h 0152   4]     Polling Threshold Window : 00000000
[09Ch 0156   4]        Error Threshold Value : 00000000
[0A0h 0160   4]       Error Threshold Window : 00000000

[0A4h 0164   4]    Error Status Block Length : 0000009D

Raw Table Data: Length 168 (0xA8)

    0000: 48 45 53 54 A8 00 00 00 01 43 53 4D 43 49 20 20  // HEST.....CSMCI  
    0010: 48 45 53 54 54 42 4C 20 00 00 04 06 53 4D 43 49  // HESTTBL ....SMCI
    0020: 01 00 00 00 02 00 00 00 09 00 09 00 FF FF 03 01  // ................
    0030: 01 00 00 00 01 00 00 00 9D 00 00 00 00 40 00 04  // .............@..
    0040: 00 88 F6 BF 00 00 00 00 00 1C 00 00 58 02 00 00  // ............X...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 9D 00 00 00 09 00 0A 00 FF FF 03 01  // ................
    0070: 01 00 00 00 01 00 00 00 9D 00 00 00 00 40 00 04  // .............@..
    0080: 08 88 F6 BF 00 00 00 00 00 1C 00 00 C8 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 9D 00 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 5D
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  MCFG  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 0A
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 5D 50 54 4C 54 44 20  // MCFG<....]PTLTD 
    0010: 20 20 4D 43 46 47 20 20 00 00 04 06 20 4C 54 50  //   MCFG  .... LTP
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 0A 00 00 00 00              // ............


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 41
[00Ah 0010   6]                       Oem ID : "OEMID_"
[010h 0016   8]                 Oem Table ID : "OEMTABLE"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF AA B7 F5 FF \
    00 D0 0A 00 00 39 16 B3 7E 1D 90 A1 F0 43 B2 14 \
    46 08 78 B1 32 C1 0F 16 26 7D 6A 71 3D 6A 78 4E \
    B5 3C 2F 5A 9C 57 5A 9C 5F 5A 9C 66 0D BF 12 2C \
    36 0D 3C 28 A3 70 48 F0 A2 C3 E0 87 C3 0B 11 82 \
    1F 0C 2C 4E 08 7C 38 A3 B0 43 E1 C5 8A EB 53 8F \
    EB 53 90 C1 2F C4 0A 47 04 3E 20 5D 87 5A 9E 2F \
    AD 4F 19 80 5E 54 78 A4 B0 4E E4 45 D8 E0 91 C8 \
    8A 4F 04 8E 40 5D 96 09 1C 90 97 9C C2 48 45 C4 \
    61 FC 39 8C A4 AE 4A 61 B7 82 29 2C E4 CA 27 A3 \
    E5 FD 3A 6F A6 12 57 2E EA FB 47 A8 CC D3 E6 CA \
    E5 FE DC A0 20 8F DF 0F 17 37 D1 F7 46 57 88 49 \
    A5 33 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 41 4F 45 4D 49 44 5F  // SLICv....AOEMID_
    0010: 4F 45 4D 54 41 42 4C 45 00 00 04 06 20 4C 54 50  // OEMTABLE.... LTP
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0050: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0060: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: AA B7 F5 FF 00 D0 0A 00 00 39 16 B3 7E 1D 90 A1  // .........9..~...
    00D0: F0 43 B2 14 46 08 78 B1 32 C1 0F 16 26 7D 6A 71  // .C..F.x.2...&}jq
    00E0: 3D 6A 78 4E B5 3C 2F 5A 9C 57 5A 9C 5F 5A 9C 66  // =jxN.</Z.WZ._Z.f
    00F0: 0D BF 12 2C 36 0D 3C 28 A3 70 48 F0 A2 C3 E0 87  // ...,6.<(.pH.....
    0100: C3 0B 11 82 1F 0C 2C 4E 08 7C 38 A3 B0 43 E1 C5  // ......,N.|8..C..
    0110: 8A EB 53 8F EB 53 90 C1 2F C4 0A 47 04 3E 20 5D  // ..S..S../..G.> ]
    0120: 87 5A 9E 2F AD 4F 19 80 5E 54 78 A4 B0 4E E4 45  // .Z./.O..^Tx..N.E
    0130: D8 E0 91 C8 8A 4F 04 8E 40 5D 96 09 1C 90 97 9C  // .....O..@]......
    0140: C2 48 45 C4 61 FC 39 8C A4 AE 4A 61 B7 82 29 2C  // .HE.a.9...Ja..),
    0150: E4 CA 27 A3 E5 FD 3A 6F A6 12 57 2E EA FB 47 A8  // ..'...:o..W...G.
    0160: CC D3 E6 CA E5 FE DC A0 20 8F DF 0F 17 37 D1 F7  // ........ ....7..
    0170: 46 57 88 49 A5 33                                // FW.I.3


SPCR
----
[000h 0000   4]                    Signature : "SPCR"    [Serial Port Console Redirection table]
[004h 0004   4]                 Table Length : 00000050
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 93
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "$UCRTBL$"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTL "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 01 [SystemIO]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000000002F8

[034h 0052   1]               Interrupt Type : 01
[035h 0053   1]          PCAT-compatible IRQ : 03
[036h 0054   4]                    Interrupt : 00000000
[03Ah 0058   1]                    Baud Rate : 07
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 02
[03Eh 0062   1]                Terminal Type : 03
[04Ch 0076   1]                     Reserved : 00
[040h 0064   2]                PCI Device ID : FFFF
[042h 0066   2]                PCI Vendor ID : FFFF
[044h 0068   1]                      PCI Bus : FF
[045h 0069   1]                   PCI Device : FF
[046h 0070   1]                 PCI Function : FF
[047h 0071   4]                    PCI Flags : 00000000
[04Bh 0075   1]                  PCI Segment : 00
[04Ch 0076   4]                     Reserved : 00000000

Raw Table Data: Length 80 (0x50)

    0000: 53 50 43 52 50 00 00 00 01 93 50 54 4C 54 44 20  // SPCRP.....PTLTD 
    0010: 24 55 43 52 54 42 4C 24 00 00 04 06 50 54 4C 20  // $UCRTBL$....PTL 
    0020: 01 00 00 00 00 00 00 00 01 08 00 00 F8 02 00 00  // ................
    0030: 00 00 00 00 01 03 00 00 00 00 07 00 01 02 03 00  // ................
    0040: FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00  // ................


SPMI
----
[000h 0000   4]                    Signature : "SPMI"    [Server Platform Management Interface table]
[004h 0004   4]                 Table Length : 00000041
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : AC
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "PTL-SPMI"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTL "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]               Interface Type : 01
[025h 0037   1]                     Reserved : 01
[026h 0038   2]            IPMI Spec Version : 0002
[028h 0040   1]               Interrupt Type : 00
[029h 0041   1]                   GPE Number : 00
[02Ah 0042   1]                     Reserved : 00
[02Bh 0043   1]              PCI Device Flag : 00
[02Ch 0044   4]                    Interrupt : 00000000

[030h 0048  12]                IPMI Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 08
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 01 [Byte Access:8]
[034h 0052   8]                      Address : 0000000000000CA2

[03Ch 0060   1]                  PCI Segment : 00
[03Dh 0061   1]                      PCI Bus : 00
[03Eh 0062   1]                   PCI Device : 00
[03Fh 0063   1]                 PCI Function : 00
[040h 0064   1]                     Reserved : 00

Raw Table Data: Length 65 (0x41)

    0000: 53 50 4D 49 41 00 00 00 05 AC 50 54 4C 54 44 20  // SPMIA.....PTLTD 
    0010: 50 54 4C 2D 53 50 4D 49 00 00 04 06 50 54 4C 20  // PTL-SPMI....PTL 
    0020: 01 00 00 00 01 01 02 00 00 00 00 00 00 00 00 00  // ................
    0030: 01 08 00 01 A2 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00                                               // .


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu6Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU6, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC6, UnknownObj)

    Scope (\_PR.CPU6)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC6 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x03, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x06, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu4Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU4, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC4, UnknownObj)

    Scope (\_PR.CPU4)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC4 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x02, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x04, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Tst", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x0F, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x0E, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x0D, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x0C, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x0B, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x0A, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x09, 
                0x00
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSSF, 0x00)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (DerefOf (Local0 [Local1]) [0x01])
                Local3 = 0x00
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    DerefOf (TSSI [Local3]) [0x01] = Local4
                    DerefOf (TSSM [Local3]) [0x01] = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu1Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu3Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU3, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC3, UnknownObj)

    Scope (\_PR.CPU3)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC3 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x01, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x03, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu5Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU5, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC5, UnknownObj)

    Scope (\_PR.CPU5)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC5 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x02, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x05, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (_SB_.BCMD, UnknownObj)
    External (_SB_.DID_, UnknownObj)
    External (_SB_.SMIC, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x30)
        {
            "CPU0IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU1IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU0CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU1CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU2IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU3IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU2CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU3CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU4IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU5IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU4CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU5CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU6IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU7IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU6CST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU7CST ", 
            0x00000000, 
            0xF000FF53
        })
        Name (CFGD, 0x19230800)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC0 & 0x09) == 0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If (((CFGD & 0x01000000) && (PDC0 & 0x10)))
                {
                    \_SB.BCMD = 0x49
                    \_SB.DID = 0x00
                    \_SB.SMIC = 0x00
                }

                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC1 & 0x09) == 0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (HI2, 0x00)
        Name (HC2, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS2, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS2, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS2)
            CreateDWordField (Arg3, 0x04, CAP2)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS2 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS2 = 0x0A
                Return (Arg3)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2._OSC.CAP2 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC2 & 0x09) == 0x09)) && !(SDTL & 0x04)))
                {
                    SDTL |= 0x04
                    OperationRegion (IST2, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                    Load (IST2, HI2) /* \_PR_.CPU2.HI2_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC2 & 0x18)) && !
                    (SDTL & 0x08)))
                {
                    SDTL |= 0x08
                    OperationRegion (CST2, SystemMemory, DerefOf (SSDT [0x13]), DerefOf (SSDT [0x14]))
                    Load (CST2, HC2) /* \_PR_.CPU2.HC2_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (HI3, 0x00)
        Name (HC3, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS3, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS3, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS3)
            CreateDWordField (Arg3, 0x04, CAP3)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS3 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS3 = 0x0A
                Return (Arg3)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3._OSC.CAP3 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC3 & 0x09) == 0x09)) && !(SDTL & 0x40)))
                {
                    SDTL |= 0x40
                    OperationRegion (IST3, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (IST3, HI3) /* \_PR_.CPU3.HI3_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC3 & 0x18)) && !
                    (SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (CST3, SystemMemory, DerefOf (SSDT [0x16]), DerefOf (SSDT [0x17]))
                    Load (CST3, HC3) /* \_PR_.CPU3.HC3_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU4)
    {
        Name (HI4, 0x00)
        Name (HC4, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS4, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS4, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS4)
            CreateDWordField (Arg3, 0x04, CAP4)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS4 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS4 = 0x0A
                Return (Arg3)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4._OSC.CAP4 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC4 & 0x09) == 0x09)) && !(SDTL & 0x0100)))
                {
                    SDTL |= 0x0100
                    OperationRegion (IST4, SystemMemory, DerefOf (SSDT [0x19]), DerefOf (SSDT [0x1A]))
                    Load (IST4, HI4) /* \_PR_.CPU4.HI4_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC4 & 0x18)) && !
                    (SDTL & 0x0200)))
                {
                    SDTL |= 0x0200
                    OperationRegion (CST4, SystemMemory, DerefOf (SSDT [0x1F]), DerefOf (SSDT [0x20]))
                    Load (CST4, HC4) /* \_PR_.CPU4.HC4_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU5)
    {
        Name (HI5, 0x00)
        Name (HC5, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS5, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS5, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS5)
            CreateDWordField (Arg3, 0x04, CAP5)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS5 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS5 = 0x0A
                Return (Arg3)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5._OSC.CAP5 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC5 & 0x09) == 0x09)) && !(SDTL & 0x0400)))
                {
                    SDTL |= 0x0400
                    OperationRegion (IST5, SystemMemory, DerefOf (SSDT [0x1C]), DerefOf (SSDT [0x1D]))
                    Load (IST5, HI5) /* \_PR_.CPU5.HI5_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC5 & 0x18)) && !
                    (SDTL & 0x0800)))
                {
                    SDTL |= 0x0800
                    OperationRegion (CST5, SystemMemory, DerefOf (SSDT [0x22]), DerefOf (SSDT [0x23]))
                    Load (CST5, HC5) /* \_PR_.CPU5.HC5_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU6)
    {
        Name (HI6, 0x00)
        Name (HC6, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS6, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS6, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS6)
            CreateDWordField (Arg3, 0x04, CAP6)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS6 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS6 = 0x0A
                Return (Arg3)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6._OSC.CAP6 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC6 & 0x09) == 0x09)) && !(SDTL & 0x1000)))
                {
                    SDTL |= 0x1000
                    OperationRegion (IST6, SystemMemory, DerefOf (SSDT [0x25]), DerefOf (SSDT [0x26]))
                    Load (IST6, HI6) /* \_PR_.CPU6.HI6_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC6 & 0x18)) && !
                    (SDTL & 0x2000)))
                {
                    SDTL |= 0x2000
                    OperationRegion (CST6, SystemMemory, DerefOf (SSDT [0x2B]), DerefOf (SSDT [0x2C]))
                    Load (CST6, HC6) /* \_PR_.CPU6.HC6_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU7)
    {
        Name (HI7, 0x00)
        Name (HC7, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS7, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS7, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS7)
            CreateDWordField (Arg3, 0x04, CAP7)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS7 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS7 = 0x0A
                Return (Arg3)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7._OSC.CAP7 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC7 & 0x09) == 0x09)) && !(SDTL & 0x4000)))
                {
                    SDTL |= 0x4000
                    OperationRegion (IST7, SystemMemory, DerefOf (SSDT [0x28]), DerefOf (SSDT [0x29]))
                    Load (IST7, HI7) /* \_PR_.CPU7.HI7_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC7 & 0x18)) && !
                    (SDTL & 0x8000)))
                {
                    SDTL |= 0x8000
                    OperationRegion (CST7, SystemMemory, DerefOf (SSDT [0x2E]), DerefOf (SSDT [0x2F]))
                    Load (CST7, HC7) /* \_PR_.CPU7.HC7_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu7Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU7, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC7, UnknownObj)

    Scope (\_PR.CPU7)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC7 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x03, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x07, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 5, "PTLTD ", "PTL-MI0 ", 0x06040000)
{
    External (_SB_.PCI0.LPC0, DeviceObj)

    Scope (\_SB.PCI0.LPC0)
    {
        Device (SIM0)
        {
            Name (_HID, EisaId ("IPI0001"))  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (SIMS, 0x01)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SIMS == 0x01))
                {
                    If (\_OSI ("Windows 2006"))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0CA2,             // Range Minimum
                    0x0CA2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
            Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
            {
                Return (0x01)
            }

            Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
            {
                Return (0x0200)
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu2Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU2, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC2, UnknownObj)

    Scope (\_PR.CPU2)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC2 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x01, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x02, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



